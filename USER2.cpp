#include "stdafx.h"
#include "Server.h"
#include "USER.h"
#include "COM.h"
#include "CircularBuffer.h"
#include "BufferEx.h"
#include "Item.h"
#include "Hyper.h"
#include "Mcommon.h"
#include "Search.h"
#include "ServerDlg.h"
#include "Mcommon.h"
#include "UserManager.h"
#include "UNI_CHAR.h"
#include "RoyalRumble.h"

#include "EventZone.h"
#include "ShopSystem.h"

extern ShopSystem g_Shop;

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

#include "Extern.h"		//	┐▄║╬║п╝Ў ╝▒╛Ё

extern CUserManager *g_pUQM;
extern CSearch *g_pUserList;
extern CServerDlg *g_pMainDlg;

//extern CRITICAL_SECTION m_CS_ReceiveData[];
extern CRITICAL_SECTION m_CS_FileWrite;
extern CRITICAL_SECTION m_CS_EventItemLogFileWrite;
extern CPtrList RecvPtrList[];
extern long nRecvDataLength[];

// IKING 2002.1.
extern CRITICAL_SECTION m_CS_LoginData;
extern CPtrList RecvLoginData;
extern long nLoginDataCount;
extern CRITICAL_SECTION m_CS_LogoutData;
extern CPtrList RecvLogoutData;
extern long nLogoutDataCount;				


extern CPtrList RecvSqlData;
extern CRITICAL_SECTION m_CS_SqlData;
extern long nSqlDataCount;	
extern int g_ChatEnable[];
extern  struct convert_table convert[80];

extern CHATDATAPACKET *g_WaitRecvDataChat[DATA_BUF_SIZE_FOR_THREAD+1][AUTOMATA_THREAD+1];
extern int g_nChatDataHead[];
extern int g_nChatDataTail[];

extern BYTE g_ServerId;
extern CRoyalRumble g_RR;

extern short		g_sHPConst[NEW_CLS_NUM];
extern short		g_sPPConst[NEW_CLS_NUM];
extern short		g_sSPConst[NEW_CLS_NUM];

extern short		g_sHPLV[NEW_CLS_NUM];
extern short		g_sPPLV[NEW_CLS_NUM];
extern short		g_sSPLV[NEW_CLS_NUM];

extern short		g_sHPAdd[NEW_CLS_NUM];
extern short		g_sPPAdd[NEW_CLS_NUM];
extern short		g_sSPAdd[NEW_CLS_NUM];

extern TCHAR g_arServerIPAddr[16];
extern CString g_strARKRRWinner;

// Quest Event Class
extern CEventZone	g_QuestEventZone;

extern long	g_PotionViewOnOff;

const char* g_pszReservedLoveName[] = 
{
"GM",
"gm",
"╣▄└э",
"╛Ў╒╜",
"admin",
};
const char* g_pszReservedID[] = 
{
	"GM",
	"gm",
"╣▄└э",
"╛Ў╒╜",
"бг",
"!",
"гб",
"╨√┤л",
"бб",
"дЇ",
"дї",
"дЎ",
"дў",
"д°",
"д∙",
"д·",
"д√",
"д№",
"д¤",
"д■",
"еў",
"е°",
"е∙",
"е∙",
"е·",
"е√",
"е№",
"е¤",
"е■",
"ж╣",
"ж║",
"ж╗",
"ж╝",
"ж╜",
"ж╛",
"ж┐",
"ж└",
"жЎ",
"жў",
"ж°",
"ж∙",
"ж·",
"ж√",
"ж№",
"ж¤",
"ж■",
"з┬",
"з├",
"з─",
"з┼",
"з╞",
"з╟",
"з╚",
"з╔",
"з╩",
"з╦",
"з╠",
"з═",
"з╬",
"з№",
"з¤",
"з■",
"и┴",
"и┬",
"и├",
"и─",
"иъ",
"иы",
"иь",
"иь",
"иэ",
"ию",
"ия",
"иЁ",
"иё",
"иЄ",
"иє",
"иЇ",
"иї",
"иЎ",
"иў",
"и°",
"и∙",
"и·",
"и√",
"и№",
"и¤",
"и■",
"йб",
"йв",
"йг",
"йЁ",
"йё",
"йЄ",
"йє",
"йЇ",
"йї",
"йЎ",
"йў",
"й°",
"й∙",
"й·",
"й√",
"й№",
"й¤",
"й■",
"п╬п╬п╬п╬п╬",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
".",
"!",
"#",
"$",
"%",
"&",
"'",
"(",
")",
"*",
"+",
",",
"-",
".",
"/",
":",
";",
"<",
"=",
">",
"@",
"[",
"]",
"^",
"_",
"`", 
"{",
"|",
"}",
"~",
"",
"бщ",
"бъ",
"бш",
"гд",
"|",
"бь",
"бз",
"-",
"бе",
"бу",
"б└",
"бф",
"ж╠",
"бд",
"ид",
"ив",
"ии",
"иж",
"и║",
"им",
"ик",
"и░",
"ио",
"б┴",
"и┤",
"и▓",
"и╣",
"ид",
"ив",
"ии",
"иж",
"и║",
"им",
"ик",
"и░",
"ио",
"б┬",
"и┤",
"и▓",
"и╣",
"иб",
"иб",
"ие",
"ие",
"из",
"из",
"ий",
"ий",
"и╜",
"и╛",
"ин",
"ин",
"и▒",
"и▒",
"б╬",
"иг",
"иг",
"ил",
"ил",
"ип",
"ип",
"и│",
"и│",
"и╡",
"и╡",
"и╢",
"и╢",
"и╖",
"и╖",
"и╕",
"и╕",
"и╗",
"и└",
"бж",
"бе",
"и@",
"иA",
"иB",
"жб",
"жв",
"жг",
"жд",
"же",
"жж",
"жз",
"жи",
"жй",
"жк",
"жл",
"жм",
"жн",
"жо",
"жп",
"ж░",
"ж▒",
"ж▓",
"ж│",
"ж┤",
"ж╡",
"ж╢",
"ж╖",
"ж╕",
"ж┴",
"ж┬",
"ж├",
"ж─",
"ж┼",
"ж╞",
"ж╟",
"ж╚",
"ж╔",
"ж╩",
"ж╦",
"ж╠",
"ж═",
"ж╬",
"ж╧",
"ж╨",
"ж╤",
"ж╥",
"ж╙",
"ж╘",
"ж╒",
"ж╓",
"ж╫",
"ж╪",
"зз",
"зб",
"зв",
"зг",
"зд",
"зе",
"зж",
"зи",
"зй",
"зк",
"зл",
"зм",
"зн",
"зп",
"з░",
"з▒",
"з▓",
"з│",
"з┤",
"з╡",
"з╢",
"з╖",
"з╕",
"з╣",
"з║",
"з╗",
"з╝",
"з╜",
"з╛",
"з┐",
"з└",
"з┴",
"з╤",
"з╥",
"з╙",
"з╘",
"з╒",
"з╓",
"з╪",
"з┘",
"з┌",
"з█",
"з▄",
"з▌",
"з▐",
"з▀",
"зр",
"зс",
"зт",
"зу",
"зф",
"зх",
"зц",
"зч",
"зш",
"зщ",
"зъ",
"зы",
"зь",
"зэ",
"зю",
"зя",
"зЁ",
"зё",
"з╫",
"й\",
"иC",
"бк",
"иD",
"бм",
"'",
"'",
"иE",
"бн",
"бы",
"бф",
"бх",
"иF",
"б∙",
"г■",
"А",
"бц",
"иG",
"иH",
"бэ",
"йY",
"вё",
"вЄ",
"вє",
"вЇ",
"вї",
"вЎ",
"вў",
"в°",
"в∙",
"в·",
"в√",
"в№",
"вб",
"вв",
"вг",
"вд",
"ве",
"вж",
"вз",
"ви",
"вй",
"вк",
"б√",
"б№",
"б·",
"б¤",
"иI",
"иJ",
"иK",
"иL",
"б╩",
"б╟",
"б╞",
"иM",
"бу",
"б╠",
"б╪",
"б▐",
"иN",
"б╧",
"иO",
"б╬",
"б─",
"б┼",
"б╔",
"б╚",
"б╥",
"б╙",
"бр",
"б▀",
"б├",
"б╦",
"бл",
"б╫",
"б╓",
"б╒",
"иP",
"б┘",
"б╘",
"б▄",
"б▌",
"иQ",
"иR",
"б┌",
"б█",
"иТ",
"б╤",
"б═",
"иS",
"б╨",
"в┘",
"в┌",
"в█",
"в▄",
"в▌",
"в▐",
"в▀",
"вр",
"вс",
"вт",
"в┼",
"в╞",
"в╟",
"в╚",
"в╔",
"в╩",
"в╦",
"в╠",
"в═",
"в╬",
"в╧",
"в╨",
"в╤",
"в╥",
"в╙",
"в╘",
"в╒",
"в╓",
"в╫",
"в╪",
"в▒",
"в▓",
"в│",
"в┤",
"в╡",
"в╢",
"в╖",
"в╕",
"в╣",
"в║",
"в╗",
"в╝",
"в╜",
"в╛",
"в┐",
"в└",
"в┴",
"в┬",
"в├",
"в─",
"йд",
"йе",
"йж",
"йз",
"йи",
"йй",
"йк",
"йл",
"йм",
"йн",
"йо",
"йп",
"й░",
"й▒",
"й▓",
"й│",
"й┤",
"й╡",
"й╢",
"й╖",
"й╕",
"й╣",
"й║",
"й╗",
"й╝",
"й╜",
"й╛",
"й┐",
"й└",
"й┴",
"й┬",
"й├",
"й─",
"й┼",
"й╞",
"й╟",
"й╚",
"й╔",
"й╩",
"й╦",
"й╠",
"й═",
"й╬",
"й╧",
"й╨",
"й╤",
"й╥",
"й╙",
"й╘",
"й╒",
"й╓",
"й╫",
"й╪",
"й┘",
"й┌",
"й█",
"й▄",
"й▌",
"й▐",
"й▀",
"йр",
"йс",
"йт",
"йу",
"йф",
"йх",
"йц",
"йч",
"йш",
"йщ",
"йъ",
"йы",
"йь",
"йэ",
"йю",
"йя",
"иT",
"иU",
"иV",
"иW",
"иX",
"иY",
"иZ",
"и[",
"и\",
"и]",
"и^",
"и_",
"и`",
"иa",
"иb",
"иc",
"иd",
"иe",
"иf",
"иg",
"иh",
"иi",
"иj",
"иk",
"иl",
"иm",
"иn",
"иo",
"иp",
"иq",
"иr",
"иs",
"иt",
"иu",
"иv",
"иw",
"иx",
"иy",
"иz",
"и{",
"и|",
"и}",
"и~",
"иА",
"иБ",
"иВ",
"иГ",
"иД",
"иЕ",
"иЖ",
"иЗ",
"иИ",
"иЙ",
"иК",
"бЎ",
"бї",
"б°",
"бў",
"иЛ",
"иМ",
"бЇ",
"бє",
"бЁ",
"бЄ",
"бё",
"иН",
"иО",
"иП",
"иР",
"бя",
"бю",
"иС",
"бт",
"бс",
"бв",
"бг",
"би",
"бй",
"йe",
"йЦ",
"б┤",
"б╡",
"б╢",
"б╖",
"б╕",
"б╣",
"б║",
"б╗",
"б╛",
"б┐",
"иУ",
"б■",
"б▓",
"б│",
"б╝",
"б╜",
"иФ",
"иХ",
"й@",
"йA",
"йB",
"йC",
"йD",
"йE",
"йF",
"йG",
"йH",
"дб",
"дв",
"дг",
"дд",
"де",
"дж",
"дз",
"ди",
"дй",
"дк",
"дл",
"дм",
"дн",
"до",
"дп",
"д░",
"д▒",
"д▓",
"д│",
"д┤",
"д╡",
"д╢",
"д╖",
"д╕",
"д╣",
"д║",
"д╗",
"д╝",
"д╜",
"д╛",
"д┐",
"д└",
"д┴",
"д┬",
"д├",
"д─",
"д┼",
"д╞",
"д╟",
"д╚",
"д╔",
"д╩",
"д╦",
"д╠",
"д═",
"д╬",
"д╧",
"д╨",
"д╤",
"д╥",
"д╙",
"д╘",
"д╒",
"д╓",
"д╫",
"д╪",
"д┘",
"д┌",
"д█",
"д▄",
"д▌",
"д▐",
"д▀",
"др",
"дс",
"дт",
"ду",
"дф",
"дх",
"дц",
"дч",
"дш",
"дщ",
"дъ",
"ды",
"дь",
"дэ",
"дю",
"дя",
"дЁ",
"дё",
"дЄ",
"дє",
"йa",
"йb",
"йf",
"йg",
"еб",
"ев",
"ег",
"ед",
"ее",
"еж",
"ез",
"еи",
"ей",
"ек",
"ел",
"ем",
"ен",
"ео",
"еп",
"е░",
"е▒",
"е▓",
"е│",
"е┤",
"е╡",
"е╢",
"е╖",
"е╕",
"е╣",
"е║",
"е╗",
"е╝",
"е╜",
"е╛",
"е┐",
"е└",
"е┴",
"е┬",
"е├",
"е─",
"е┼",
"е╞",
"е╟",
"е╚",
"е╔",
"е╩",
"е╦",
"е╠",
"е═",
"е╬",
"е╧",
"е╨",
"е╤",
"е╥",
"е╙",
"е╘",
"е╒",
"е╓",
"е╫",
"е╪",
"е┘",
"е┌",
"е█",
"е▄",
"е▌",
"е▐",
"е▀",
"ер",
"ес",
"ет",
"еу",
"еф",
"ех",
"ец",
"еч",
"еш",
"ещ",
"еъ",
"еы",
"еь",
"еэ",
"ею",
"ея",
"еЁ",
"её",
"еЄ",
"еє",
"еЇ",
"еї",
"еЎ",
"й`",
"йc",
"йd",
"и┼",
"и╞",
"и╟",
"и╚",
"и╔",
"и╩",
"и╦",
"и╠",
"и═",
"и╬",
"и╧",
"и╨",
"и╤",
"и╥",
"и╙",
"и╘",
"и╒",
"и╓",
"и╫",
"и╪",
"и┘",
"и┌",
"и█",
"и▄",
"и▌",
"и▐",
"и▀",
"ир",
"ис",
"ит",
"иу",
"иф",
"их",
"иц",
"ич",
"иш",
"ищ",
"вх",
"вц",
"вч",
"вш",
"вщ",
"въ",
"вы",
"вь",
"вэ",
"вю",
"йZ",
"йI",
"йJ",
"йK",
"йL",
"йM",
"йN",
"йO",
"йP",
"йQ",
"йR",
"йS",
"йT",
"и╝",
"и┐",
"йЙ",
"йК",
"йЛ",
"йМ",
"йН",
"йО",
"йП",
"йР",
"йС",
"йТ",
"йУ",
"йФ",
"йХ",
"■P",
"■Q",
"■R",
"■S",
"■T",
"■W",
"■X",
"■Y",
"■]",
"■^",
"■a",
"■f",
"■g",
"■k",
"■l",
"■m",
"■n",
"■q",
"■s",
"■t",
"■u",
"■v",
"■y",
"■~",
"■Д",
"йU",
"жЄ",
"жЇ",
"жї",
"жр",
"жс",
"жЁ",
"жё",
"жт",
"жу",
"жю",
"жя",
"жц",
"жч",
"жф",
"жх",
"жш",
"жщ",
"жъ",
"жы",
"йh",
"йi",
"йj",
"йk",
"йl",
"йm",
"йn",
"йo",
"йp",
"йq",
"йr",
"йs",
"йt",
"йu",
"йv",
"йw",
"йx",
"йy",
"йz",
"й{",
"й|",
"й}",
"й~",
"йА",
"йБ",
"йВ",
"йГ",
"йД",
"йЕ",
"йЖ",
"йЗ",
"йИ",
"гб",
"гв",
"гг",
"бч",
"ге",
"гж",
"гз",
"ги",
"гй",
"гк",
"гл",
"гм",
"гн",
"го",
"гп",
"г░",
"г▒",
"г▓",
"г│",
"г┤",
"г╡",
"г╢",
"г╖",
"г╕",
"г╣",
"г║",
"г╗",
"г╝",
"г╜",
"г╛",
"г┐",
"г└",
"г█",
"г▄",
"г▌",
"г▐",
"г▀",
" ",
"гр",
"г√",
"г№",
"г¤",
"бл",
"бщ",
"бъ",
"йV",
"г■",
"йW",
"гд",
"╪н",
"БL",
"у▄",
"╪╝",
"БR",
"╪п",
"БT",
"БU",
"БV",
"БW",
"БX",
"Б^",
"Б|",
"┘я",
"╪щ",
"╪ч",
"┘√",
"╪╓",
"┌е",
"х┴",
"сО",
"ю─",
"┌т",
"яz",
"ал",
"т╗",
"Еm",
"ЕЫ",
"█╠",
"ЕЯ",
"ц▐",
"х▓",
"ч▌",
"Оw",
"с▄",
"█╚",
"съ",
"хц",
"с▄",
"тр",
"▐╨",
"ы╢",
"у▀",
"ьс",
"аН",
"сы",
"Ё┌",
"░h",
"ьъ",
"╝i",
"ц∙",
"└Я",
"└а",
"┬S",
"▄│",
"Єо",
"╙Е",
"╥В",
"■W",
"■X",
"■P",
"■Q",
"■R",
"■S",
"■T",
"■Y",
"■]",
"■^",
"■f",
"■g",
"■k",
"■l",
"■m",
"■n",
"■q",
"■s",
"■t",
"■u",
"■v",
"■y",
"■Д",
"■U",
"■V",
"Г╟",
"БС",
"БТ",
"ББ",
"БВ",
"Е╣",
"═╣",
"░╝",
"Еj",
"Еd",
"Еe",
"Е[",
"░z",
"Ф·",
"лT",
"Ми",
"О╘",
"ЦW",
"З▀",
"Зр",
"╟Ї",
"╦─",
"Зс",
"рю",
"╗╪",
"╪╢",
"╥Є",
"ря",
"═┼",
"Зт",
"╢┌",
"Зу",
"Зф",
"Зх",
"Зц",
"Зч",
"Зш",
"рё",
"Зщ",
"╘░",
"Зъ",
"Зы",
"└з",
"┤╤",
"Зь",
"Зэ",
"╬з",
"рЁ",
"Зю",
"Зя",
"ЗЁ",
"рЄ",
"╣╠",
"Зё",
"ЗЄ",
"╣·",
"═╝",
"рє",
"Зє",
"ЗЇ",
"Зї",
"╞╘",
"рЇ",
"ЗЎ",
"╘▓",
"Зў",
"╚ж",
"рЎ",
"рї",
"З°",
"З∙",
"З·",
"З√",
"З№",
"З¤",
"З■",
"И@",
"ИA",
"ИB",
"ИC",
"ИD",
"ИE",
"ИF",
"ИG",
"ИH",
"ИI",
"рў",
"ИJ",
"ИK",
"ў╤",
".",
"бв",
"жс",
"иу",
"йм",
"йт",
"д┘",
"_",
"■u",
"йш",
"б·",
"^",
"o",
"^",
"^",
"ип",
"^",
"иq",
"еб",
"■u",
"_",
"■u",
"/",
"~",
"иK",
"и{",
"жю",
"й▀",
"й╫",
"иT",
"╥╗",
"д╕",
"и░",
"д╘",
"иж",
".",
".",
".",
".",
".",
".",
"■y",
";",
"■y",
"й╞",
"й╩",
"(",
"*",
"^",
"йn",
"^",
"*",
")"
};

//
static short g_sBabyArray[] ={256,257,512,513,768,769};
TCHAR *g_szBabyName[]={"┼ж╠╪┴·","┼┴╠╪╩и"};
void USER::AccountLoginReqWithDbServer(TCHAR *pBuf)
{
	char id[MAX_ID+1];
	int index = 0;
	BYTE	result = FAIL, error_code = 0;

	int	nIDLength = GetVarString(sizeof(id), id, pBuf, index);
	if(nIDLength == 0 || nIDLength > ACCOUNT_LENGTH)	
	{
		error_code = 1;
		index = 0;
		SetByte(m_TempBuf, ACCOUNT_LOGIN_RESULT, index );
		SetByte(m_TempBuf, result, index );
		SetByte(m_TempBuf, error_code, index);
		Send( m_TempBuf, index );
		SoftClose();
		return;
	}

	if ( IsDoubleAccount(id) )
	{
		error_code = ERR_2;
		index = 0;
		SetByte(m_TempBuf, ACCOUNT_LOGIN_RESULT, index );
		SetByte(m_TempBuf, result, index );

		SetByte(m_TempBuf, error_code, index);
		Send( m_TempBuf, index );
		SoftClose();
		return;
	}

	strcpy( m_strAccount, id );

	char TempBuf[1024];
	index = 0;
	SetByte(TempBuf, g_ServerId, index );
	SetByte(TempBuf, ACCOUNT_LOGIN_REQ, index );
	SetShort(TempBuf, m_uid, index );
	SetString(TempBuf, id, ACCOUNT_LENGTH, index);
	g_pMainDlg->Send2DBsvr( TempBuf, index );

}

void USER::GameStartWithDbServer(TCHAR *pBuf)
{
	int			index = 0;
	BYTE		result = FAIL;
	TCHAR		szID[CHAR_NAME_LENGTH+1];

	int	nIDLength = GetVarString(sizeof(szID), szID, pBuf, index);
	if ( nIDLength == 0 || nIDLength > CHAR_NAME_LENGTH )
	{
		CBufferEx TempBuf;

		ReInitMemoryDB();

		TempBuf.Add(GAME_START_RESULT);
		TempBuf.Add(result);
		TempBuf.Add(ERR_1);
		Send(TempBuf, TempBuf.GetLength());
		SoftClose();
		return;
	}

	memcpy( m_strUserID, szID, CHAR_NAME_LENGTH );

	char TempBuf[1024];
	index = 0;
	SetByte(TempBuf, g_ServerId, index );
	SetByte(TempBuf, GAME_START_REQ, index );
	SetShort(TempBuf, m_uid, index );
	SetString(TempBuf, szID, CHAR_NAME_LENGTH, index);
	g_pMainDlg->Send2DBsvr( TempBuf, index );
}

void USER::LogOutWithDbServer()
{
	if(m_bLogOut == TRUE) return;
	if(m_state != STATE_GAMESTARTED) return;	// └╠┐▄ STATE_CONNECTED╡ю └╧╢з┤┬ ╟╪┤ч ├╩▒т╚н░б ╕▐╕Ё╕о┐б╛°└╕╣╟╖╬ ┴ж┐▄╟╪╛▀╟╤┤┘.

	m_bLogOut = TRUE;
	USER *pUser = NULL;
												// └╧╣▌ ╟╩╡х└№ ┴▀└╠╢є╕щ..		
	if(m_tGuildWar == GUILD_WARRING && m_dwFieldWar > 0)		
	{
		if(m_bGuildMaster) 
		{
			CString strMsg = _T("");
			strMsg.Format( IDS_USER_GUILD_DEFEAT, m_strGuildName);
			SendGuildWarFieldEnd((LPTSTR)(LPCTSTR)strMsg);// ╟╫║╣
		}
	}

	if(m_tGuildHouseWar == GUILD_WARRING) CheckGuildUserListInGuildHouseWar(); // ┤┘╕е └п└·╡щ└║ ╣╗╟╧│к ├╝┼й..

	if(m_bNowBuddy == TRUE)				// ╣Ў╡Ё┴▀└╠╕щ ┼ы║╕╟╤┤┘.
	{
		for(int i = 0; i < MAX_BUDDY_USER_NUM; i++)
		{
			if(m_MyBuddy[i].uid == m_uid + USER_BAND) SendBuddyUserLeave(i);
		}
	}

	// ░┼╖б┴▀└╠╕щ ░┼╖б├ы╝╥ ├│╕о
	if(m_bNowTrading == TRUE) 
	{
		BYTE result = 0x00;
		USER *pTradeUser = NULL;
		if(m_iTradeUid != -1)	pTradeUser = GetUser(m_iTradeUid - USER_BAND);

		if(pTradeUser != NULL)	pTradeUser->SendExchangeFail(result, (BYTE)0x05);
	}

	{
	// 
	//UpdateMemBankDataOnly();
	//UpdateUserData(TRUE);
	char send_buffer[RECEIVE_BUF_SIZE+1];
	int send_index = 0, c_index = 0;;
	TCHAR strBankItem[_BANK_DB];

	SetByte(send_buffer, g_ServerId, send_index );
	SetByte( send_buffer, (BYTE)LOGOUT_REQ, send_index );
	SetShort( send_buffer, m_uid, send_index );

	// UpdateMemBankDataOnly() PART...
	::ZeroMemory(strBankItem, sizeof(strBankItem));
	::CopyMemory(strBankItem, m_pMD->m_UB.m_UserBankItem, _BANK_DB);

	c_index = send_index;

	SetString( send_buffer, m_strUserID, CHAR_NAME_LENGTH, send_index );
	SetDWORD( send_buffer, m_pMD->m_UB.m_dwBankDN, send_index );
	SetString( send_buffer, strBankItem, sizeof(strBankItem), send_index );
	//

	// UpdateUserData(TRUE) PART...
	DBUpdateUserData( send_buffer, send_index );
	//

	// ╛╨├р╟╧▒т...
	m_CompMng.FlushAddData();
	m_CompMng.AddData( &send_buffer[c_index], (send_index-c_index) );

	m_CompMng.PreCompressWork();
	m_CompMng.Compress();

	int comp_data_len = m_CompMng.GetCompressedDataCount();
	int org_data_len = m_CompMng.GetUnCompressDataLength();
	DWORD crc_value = m_CompMng.GetCrcValue();
	char *packet_buffer;
	packet_buffer = m_CompMng.GetExtractedBufferPtr();

	SetShort( send_buffer, comp_data_len, c_index );
	SetShort( send_buffer, org_data_len, c_index );
	SetDWORD( send_buffer, crc_value, c_index );
	SetString( send_buffer, packet_buffer, comp_data_len, c_index );
	m_CompMng.FlushAddData();

	// └№╝█.
	g_pMainDlg->Send2DBsvr( send_buffer, c_index );
	}

	m_pMD->m_UB.m_uid = -1;

	ReInitMemoryDB();

	if( g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser == USER_BAND + m_uid ) 
		::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, 0);

	SendMyInfo(TO_INSIGHT, INFO_DELETE);

	m_state = STATE_LOGOUT;
}

void USER::DBUpdateUserData(char *temp_buffer, int &temp_index )
{
	TCHAR			szSQL[8000];		
	TCHAR			strFace[10], strSkill[_SKILL_DB], strItem[_ITEM_DB], strPsi[_PSI_DB], strTel[_TEL_DB];
	TCHAR			strQuickItem[_QUICKITEM_DB];
	TCHAR			strHaveEvent[_EVENT_DB];
	

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strFace, sizeof(strFace));
	::ZeroMemory(strSkill, sizeof(strSkill));
	::ZeroMemory(strItem, sizeof(strItem));
	::ZeroMemory(strPsi, sizeof(strPsi));	
	::ZeroMemory(strTel, sizeof(strTel));
	::ZeroMemory(strHaveEvent, sizeof(strHaveEvent));
	::ZeroMemory(strQuickItem, sizeof(strQuickItem));	
	::CopyMemory(strFace, m_strFace, sizeof(m_strFace));

	UserSkillToDBStr(strSkill);
	UserItemToStr(strItem);
	UserPsiToStr(strPsi);
	UserTelToStr(strTel);
	UserHaveEventDataToStr(strHaveEvent);

	DWORD dwCurTime = ConvertCurTimeToSaveTime();			// ╟Ў└ч ╜├░г ╣Ў┴п└╗ ╝┬╞├

	m_tPsiOneKind = m_tPsiTwoKind = m_tPsiThreeKind = 0;
	m_dwPsiOneTime = m_dwPsiTwoTime = m_dwPsiThreeTime = 0;

	// Psionic One
	if(m_dwHasteTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_HASTE;
		m_dwPsiOneTime = m_dwHasteTime;
	}
	if(m_dwShieldTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_SHIELD;
		m_dwPsiOneTime = m_dwShieldTime;
	}
	if(m_dwDexUpTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_DEXUP;
		m_dwPsiOneTime = m_dwDexUpTime;
	}
	if(m_dwMaxHPUpTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_HPUP;
		m_dwPsiOneTime = m_dwMaxHPUpTime;
	}
	if(m_dwFastRunTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_FAST_RUN;
		m_dwPsiOneTime = m_dwFastRunTime;
	}
	if(m_dwMindShockTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_MIND_SHOCK;
		m_dwPsiOneTime = m_dwMindShockTime;
	}
	if(m_dwPsiShieldTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_PSI_SHIELD;
		m_dwPsiOneTime = m_dwPsiShieldTime;
	}
	if(m_dwBigShieldTime != 0) 
	{
		m_tPsiOneKind = 30;
		m_dwPsiOneTime = m_dwBigShieldTime;
	}
	if(m_dwPiercingShieldTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_PIERCING_SHIELD;
		m_dwPsiOneTime = m_dwPiercingShieldTime;
	}

	// Psionic Two
	if(m_dwAdamantineTime != 0) 
	{
		m_tPsiTwoKind = PSIONIC_ADAMANTINE;
		m_dwPsiTwoTime = m_dwAdamantineTime;
	}
	if(m_dwMightyWeaponTime != 0) 
	{
		m_tPsiTwoKind = PSIONIC_MIGHTYWEAPON;
		m_dwPsiTwoTime = m_dwMightyWeaponTime;
	}
	if(m_dwBerserkerTime != 0) 
	{
		m_tPsiTwoKind = PSIONIC_BERSERKER;
		m_dwPsiTwoTime = m_dwBerserkerTime;
	}

	// Psionic Three
	if(m_dwMindGuardTime != 0) 
	{
		m_tPsiThreeKind = PSIONIC_MIND_GUARD;
		m_dwPsiThreeTime = m_dwMindGuardTime;
	}
	  //////////////////╝╙╫╓╢╬
    _sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_USER_DATA (\'%s\',%d,%d,%d,%d,%d,%d,%d,%d,\
		?, %d,%d,%d, %d, %d,%d,  %d,%d,  %d, \
		%d,%d,%d,%d,%d,%d, %d,%d,%d,%d, \
		?,?,?,?, %d,%d,\
		%d, %d, ?, %d, %d,\
		?, %d,\
		%d, %d, %d, %d, %d, %d, %d, %d, %d, %d,%d,%d,%d,,%d,%d,%d,%d,%d,%d,%d,%d,\
		\'%s\', \
		%d,%d,		%d,%d,		%d,%d)}"), 
		m_strUserID,	m_sSTR,	m_sCON,	m_sDEX,	m_sVOL,	m_sWIS,	m_iSkin, m_iHair, m_sGender,	
		m_curz,	m_curx,	m_cury,		m_dwBuddy,		m_dwGuild, m_dwExp,		m_sPA, m_sSkillPoint,	m_dwXP,
		m_sMaxHP, m_sHP, m_sMaxPP, m_sPP, m_sMaxSP,	m_sSP,		m_dwDN,	m_sCityRank, m_sLevel,	m_byClass,

		m_tAbnormalKind, m_dwAbnormalTime,

		m_bLive, m_iCityValue, m_sKillCount, dwCurTime, 
		m_dwSaintTime, 
		m_dwHiExpTime, m_dwHtExpTime, m_dwMagicFindTime, m_dwMagicFtTime, m_dwNoChatTime,m_dwZF,m_dwXL, m_dwCloseTime, m_dwAutoMoney,m_dwPD,m_dwLingQu,m_dwShaGuai, m_dwGuarDianTianShi, m_dwShopPingDN,m_dwVIPTime,m_dwZaiXianTime,m_dwBFindTime,m_dwHXTime,m_dwSGTime,m_dwXYTime,m_dwZFTime,
		m_strLoveName, //--yskang 0.1 
		m_tPsiOneKind, m_dwPsiOneTime,		m_tPsiTwoKind, m_dwPsiTwoTime,		m_tPsiThreeKind, m_dwPsiThreeTime); 

	int sql_len = strlen(szSQL);
	SetShort( temp_buffer, sql_len, temp_index );
	SetString( temp_buffer, szSQL, sql_len, temp_index );

	//SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strFace),	0, (TCHAR*)strFace,		0, &sFaceLen );
	SetString( temp_buffer, strFace, sizeof(strFace), temp_index );

	//SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strSkill),	0, (TCHAR*)strSkill,	0, &sSkillLen );
	SetString( temp_buffer, strSkill, sizeof(strSkill), temp_index );

	//SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strItem),	0, (TCHAR*)strItem,		0, &sItemLen );
	SetString( temp_buffer, strItem, sizeof(strItem), temp_index );

	//SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strPsi),		0, (TCHAR*)strPsi,		0, &sPsiLen );
	SetString( temp_buffer, strPsi, sizeof(strPsi), temp_index );

	//SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strHaveEvent),	0, (TCHAR*)strHaveEvent,	0, &sEventLen );
	SetString( temp_buffer, strHaveEvent, sizeof(strHaveEvent), temp_index );

	//SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strQuickItem),	0, (TCHAR*)strQuickItem,	0, &sQuickLen );
	SetString( temp_buffer, strQuickItem, sizeof(strQuickItem), temp_index );

	//SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strTel),			0, (TCHAR*)strTel,			0, &sTelLen );
	SetString( temp_buffer, strTel, sizeof(strTel), temp_index );

	
}


//-----------------------------------------------------------------------------
// DB PHASER PART...
//-----------------------------------------------------------------------------


void USER::DBAccountLoginResult(TCHAR *pBuf, int s_index, int dlength )
{
	int		index = 0, i;
	BYTE	result = FAIL, error_code = 0;
	int		old_index = 0;
	int		s_result, length;

	strcpy(m_strChar[0], "");
	strcpy(m_strChar[1], "");
	strcpy(m_strChar[2], "");
	m_nCharNum = 0;

	s_result = GetByte( pBuf, s_index );
	if ( s_result == FALSE )
	{
		// Load Character Data Fail...
		error_code = UNKNOWN_ERR;
		goto result_send;
	}

	m_state = STATE_CONNECTED;
	result = SUCCESS;

	// LOGIN SERVER┐б╝н ╛Є└║ ─│╕п┼═ ░╣╝Ў+└╠╕з ║╣╗ч...
	m_nCharNum = GetByte( pBuf, s_index );
	for ( i = 0; i < 3; i++ )
	{
		GetString(m_strChar[i], pBuf, 20, s_index );
	}
	//
	length = dlength - s_index;
	if ( length <= 0 ) result = FAIL;

result_send:
	index = 0;
	SetByte(m_TempBuf, ACCOUNT_LOGIN_RESULT, index );
	SetByte(m_TempBuf, result, index );

	if ( result == FAIL )
	{
		SetByte(m_TempBuf, error_code, index);
		Send( m_TempBuf, index );
		SoftClose();
		return;
	}

	// LOGIN SERVER┐б╝н ╛Є└║ ─│╕п┼═ ░╣╝Ў+┴д║╕ ║╣╗ч...
	SetString(m_TempBuf, (pBuf+s_index), length, index);

	Send(m_TempBuf, index);
}

void USER::DBGameStartResult( char *pBuf, int s_index, int dlength )
{

}

void USER::DressingWindowOpen()
{
	CBufferEx TempBuf;

	TempBuf.Add(DRESSING_WINDOW_OPEN);

	Send(TempBuf, TempBuf.GetLength());
}

void USER::DressingReq(TCHAR *pBuf)
{
	int index = 0;

	int itemslot = (int)GetShort( pBuf, index );
	int itemcount = (int)GetShort( pBuf, index );

	int i = 0;

	CItemTable* pItem = NULL;
	ItemList* pOrgItem = NULL;

	DRESSING_DATA* pDS = NULL;

	int makecount = itemcount / 10;
	int termcount = 0;
	int randseed[200];
	int randcount = 0;
	int randindex = 0;
	int randresult = -1;
	int j = 0;
	int k = 0;

	DressingResultArray arResult;	
	DRESSING_RESULT* pNewDRResult = NULL;
	BOOL bSameExist = FALSE;

	ItemListArray	arEmpty, arSame;
	CWordArray		arEmptySlot, arSameSlot;
	ItemList		MyItem[TOTAL_ITEM_NUM], SameItem[TOTAL_ITEM_NUM];
	int				pTotalEmpty[INVENTORY_NUM];

	short sid = -1, num = -1; 
	int iSlot, iEmptyNum = 0;
	int iWeight = 0;
	int iBasicItemWeight = 0;

	// ║п╝Ў ├╩▒т╚н ------------------------------------------------//
	BOOL bFlag = FALSE;
	DWORD dwCost = 0;

	DWORD dwTemp = m_dwDN;

	ItemList	*pDSItem = NULL;

	CBufferEx TempBuf;

	int iItemSize = g_arItemTable.GetSize();
	if( itemslot < EQUIP_ITEM_NUM || itemslot >= TOTAL_INVEN_MAX )
	{
		// ╜╟╞╨ ─┌╡х └№╝█ - ┐°╝о└╠ └╓┤┬ └╬║е└╟ ╜╜╖╘ ╣°╚г░б └▀╕°╡╟╛·╜┐
		SendSystemMsg( IDS_USER_CANT_DRESSING_ITEM, SYSTEM_ERROR, TO_ME);
		bFlag = TRUE; goto go_dressing_result;
	}

	if( itemcount >= 32767 || itemcount < 0 )
	{
		// ╜╟╞╨ ─┌╡х └№╝█ - ╝▒▒д╟╧╖┴┤┬ ┐°╝о└╟ ░│╝Ў Overflow
		SendSystemMsg( IDS_USER_INVALID_DRESSING_COUNT, SYSTEM_ERROR, TO_ME);
		bFlag = TRUE; goto go_dressing_result;
	}

	if( itemcount % 10 )
	{
		// ╜╟╞╨ ─┌╡х └№╝█ - ╝▒▒д╟╧╖┴┤┬ ┐°╝о└╟ ░│╝Ў░б 10░│┤▄└з░б ╛╞┤╘
		SendSystemMsg( IDS_USER_DRESSING_COUNT_FORMAT, SYSTEM_ERROR, TO_ME);
		bFlag = TRUE; goto go_dressing_result;
	}

	pOrgItem = &m_UserItem[itemslot];

	if( !pOrgItem )
	{
		// ╜╟╞╨ ─┌╡х └№╝█ - └╬║е┐б╝н ┐°╝о└╗ ├г└╗ ╝Ў ╛°└╜
		SendSystemMsg( IDS_USER_CANT_DRESSING, SYSTEM_ERROR, TO_ME);
		bFlag = TRUE; goto go_dressing_result;
	}
	
	if( m_UserItem[itemslot].sSid >= 0 && m_UserItem[itemslot].sSid < g_arItemTable.GetSize() )
	{
		pItem = g_arItemTable[m_UserItem[itemslot].sSid];
	}

	if( !pItem )
	{
		// ╜╟╞╨ ─┌╡х └№╝█ - ╛╞└╠┼█ ┼╫└╠║э┐б╝н ╛╞└╠┼█ ├г└╗ ╝Ў ╛°└╜
		SendSystemMsg( IDS_USER_CANT_DRESSING_ITEM, SYSTEM_ERROR, TO_ME);
		bFlag = TRUE; goto go_dressing_result;
	}

	if( pItem->m_byWear != 107 )
	{
		// ╜╟╞╨ ─┌╡х └№╝█ - ╝▒▒д╟╥ ╝Ў ╛°┤┬ ╛╞└╠┼█
		SendSystemMsg( IDS_USER_CANT_DRESSING_ITEM, SYSTEM_ERROR, TO_ME);
		bFlag = TRUE; goto go_dressing_result;
	}

	if( m_UserItem[itemslot].sCount < itemcount )
	{
		// ╜╟╞╨ ─┌╡х └№╝█ - ╛╞└╠┼█ ┼╫└╠║э┐б╝н ╛╞└╠┼█ ├г└╗ ╝Ў ╛°└╜
		SendSystemMsg( IDS_USER_INVALID_DRESSING_COUNT, SYSTEM_ERROR, TO_ME);
		bFlag = TRUE; goto go_dressing_result;
	}

	iBasicItemWeight = pItem->m_byWeight * itemcount;

	for( i = 0; i < g_arDressingData.GetSize(); i++ )
	{
		if( g_arDressingData[i] )
		{
			if( g_arDressingData[i]->sItemSid == pItem->m_sSid )
			{
				pDS = g_arDressingData[i];
				break;
			}
		}
	}

	if( !pDS )
	{
		// ╜╟╞╨ ─┌╡х └№╝█ - ╝▒▒д ┼╫└╠║э┐б╝н ╟╪┤ч ┐°╝о└╗ ├г└╗ ╝Ў ╛°└╜
		SendSystemMsg( IDS_USER_CANT_DRESSING_ITEM, SYSTEM_ERROR, TO_ME);
		bFlag = TRUE; goto go_dressing_result;
	}

	for( i = 0; i < makecount; i++ )
	{
		termcount = myrand( pDS->sCountMin, pDS->sCountMax );

		// ╛╞└╠┼█ ╝▒┴д ╖г┤¤ ╜├╡х ├╩▒т╚н
		for( j = 0; j < 200; j++ )
		{
			randseed[j] = -1;
		}

		randindex = 0;
		for( j = 0; j < 10; j++ )
		{
			for( k = 0; k < pDS->sItemRatio[j]; k++ )
			{
				if( randindex >= 100 ) break;

				randseed[randindex] = pDS->sItem[j];
				randindex++;
			}
		}

		for( j = 0; j < termcount; j++ )
		{
			randcount = myrand( 0, 99 );

			randresult = randseed[randcount];

			if( randresult < 0 )
			{
				// ╜╟╞╨ ─┌╡х └№╝█ - ┼╫└╠║э ┴д║╕░б └▀╕° └╘╖┬╡╟╛ю └╓┤┘(╛╞└╠┼█ ╝▒┴д ╚о╖№└╠ ┼ф┼╗ 100└╠ ╛╞┤╧┤┘)
				SendSystemMsg( IDS_USER_CANT_DRESSING, SYSTEM_ERROR, TO_ME);
				bFlag = TRUE; goto go_dressing_result;
			}

			bSameExist = FALSE;
			for( k = 0; k < arResult.GetSize(); k++ )
			{
				if( arResult[k] )
				{
					if( arResult[k]->sSid == randresult )
					{
						arResult[k]->sCount++;
						bSameExist = TRUE;
						break;
					}
				}
			}

			if( !bSameExist )
			{
				pNewDRResult = new DRESSING_RESULT;
				pNewDRResult->sSid = randresult;
				pNewDRResult->sCount = 1;
				arResult.Add( pNewDRResult );
			}
		}
	}

	if( arResult.GetSize() == 0 )
	{
		// ╜╟╞╨ ─┌╡х └№╝█ - ╕╕╡щ╛ю┴° ░═└╠ ╛°┤┘
		SendSystemMsg( IDS_USER_DRESSING_NO_RESULT, SYSTEM_ERROR, TO_ME);
//		bFlag = TRUE; goto go_dressing_result;
	}

	for(i = 0; i < TOTAL_ITEM_NUM; i++)		// ╛╞└╠┼█ ┴д║╕ ╣щ╛ў
	{
		MyItem[i] = m_UserItem[i];
		SameItem[i] = m_UserItem[i];
	}

	arSameSlot.RemoveAll();
	arSame.RemoveAll();
	arEmpty.RemoveAll();
	arEmptySlot.RemoveAll();

	::ZeroMemory(pTotalEmpty, sizeof(pTotalEmpty));

	GetEmptyInvenSlot(pTotalEmpty);

	char strResult[1024];
	char strTempResult[128];
	sprintf( strResult, _ID(IDS_USER_DRESSING_RESULT) );

	// ╝▒▒д ░с░· ╕ё╖╧ ---------------------------------------------------//
	for( i = 0; i < arResult.GetSize(); i++ )
	{
		if( !arResult[i] ) continue;

		iSlot = -1;

		sid = (short)arResult[i]->sSid;
		num = (short)arResult[i]->sCount;

		if(iEmptyNum > INVENTORY_NUM) { bFlag = TRUE; goto go_dressing_result; }
		if(sid < 0 || num <= 0 || sid > iItemSize) { bFlag = TRUE; goto go_dressing_result; }

		pDSItem = NULL;
		pDSItem = new ItemList;
		if(pDSItem == NULL) { bFlag = TRUE; goto go_dressing_result; }

		ReSetItemSlot(pDSItem);

		pDSItem->sLevel = g_arItemTable[sid]->m_byRLevel;
		pDSItem->sSid = sid;
		pDSItem->sCount = num;
		pDSItem->sDuration = g_arItemTable[sid]->m_sDuration;
		pDSItem->sBullNum = g_arItemTable[sid]->m_sBullNum;
		for( k =0; k< MAGIC_NUM; k++ ) pDSItem->tMagic[k] = 0;
		pDSItem->tIQ = 0;
		pDSItem->iItemSerial = 0;

		sprintf( strTempResult, "%s(%d) ", g_arItemTable[sid]->m_strName, num );
		strcat( strResult, strTempResult );

		iSlot = GetSameItem(*pDSItem, INVENTORY_SLOT);

		if(iSlot != -1)
		{ 
			if(num != 0)
			{
				pDSItem->sCount = num;
				arSame.Add(pDSItem); 
				arSameSlot.Add(iSlot); 

				iWeight += g_arItemTable[sid]->m_byWeight * num;
			}
		}
		else			
		{
			iSlot = pTotalEmpty[iEmptyNum];
//			if(iSlot == 0) { bFlag = TRUE; goto go_dressing_result; }
			if(iSlot == 0) 
			{ 
				CPoint ptCell = FindNearRandomPoint(m_curx, m_cury);

				if(ptCell.x < 0 || ptCell.y < 0) { if(pDSItem) { delete pDSItem; pDSItem = NULL; } continue; }
				if(ptCell.x >= g_zone[m_ZoneIndex]->m_sizeMap.cx || ptCell.y >= g_zone[m_ZoneIndex]->m_sizeMap.cy) { if(pDSItem) { delete pDSItem; pDSItem = NULL; } continue; }

				if(InterlockedCompareExchange((LONG*)&g_zone[m_ZoneIndex]->m_pMap[ptCell.x][ptCell.y].m_FieldUse, (long)1, (long)0) == (long)0)
				{
					if(m_iMaxWeight < m_iCurWeight + iWeight - iBasicItemWeight)
					{
						::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[ptCell.x][ptCell.y].m_FieldUse, 0);

						if(pDSItem) { delete pDSItem; pDSItem = NULL; }

						SendSystemMsg( IDS_USER_OVER_WEIGHT1, SYSTEM_ERROR, TO_ME);
						goto go_dressing_result;
					}

					pDSItem->tType = TYPE_ITEM;
					pDSItem->uid[0] = m_uid;				// ┐ь╝▒ ╝°└з
					pDSItem->SuccessRate[0] = (BYTE)100;	// ┐ь╝▒ ╝°└з ║ё└▓
					pDSItem->dwTime = ConvertCurTimeToSaveTime();

					//m_pCom->DelThrowItem();
					m_pCom->SetThrowItem( pDSItem, ptCell.x, ptCell.y, m_ZoneIndex );

					::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[ptCell.x][ptCell.y].m_FieldUse, 0);
				}
				else 
				{
					if(pDSItem) { delete pDSItem; pDSItem = NULL; }
				}
			}
			else
			{
				arEmpty.Add(pDSItem); 
				arEmptySlot.Add(iSlot); 
				iEmptyNum++;

				iWeight += g_arItemTable[sid]->m_byWeight * num;
			}
		}		
	}

	if(m_iMaxWeight < m_iCurWeight + iWeight - iBasicItemWeight)
	{
		SendSystemMsg( IDS_USER_OVER_WEIGHT1, SYSTEM_ERROR, TO_ME);
		goto go_dressing_result;
	}

	// ╕ё╖╧└╗ └╬║е┐б -------------------- --------------------//
	for( i = 0; i < arSame.GetSize(); i++ )
	{
		CheckMaxValue((short &)m_UserItem[arSameSlot[i]].sCount, (short)arSame[i]->sCount); 
	}

	for(i = 0; i < arEmpty.GetSize(); i++)
	{
		m_UserItem[arEmptySlot[i]].sLevel = arEmpty[i]->sLevel;
		m_UserItem[arEmptySlot[i]].sSid = arEmpty[i]->sSid;
		m_UserItem[arEmptySlot[i]].sCount = arEmpty[i]->sCount;
		m_UserItem[arEmptySlot[i]].sBullNum = arEmpty[i]->sBullNum;
		m_UserItem[arEmptySlot[i]].sDuration = arEmpty[i]->sDuration;
		m_UserItem[arEmptySlot[i]].tIQ = arEmpty[i]->tIQ;
		for(j =0; j < MAGIC_NUM; j++) m_UserItem[arEmptySlot[i]].tMagic[j] = arEmpty[i]->tMagic[j];
	}

	// ┐°╝о└╗ ╛°╛╓┤┬ ─┌╡х ╟╩┐ф╟╘ !!!!
	if( pOrgItem->sCount ==  itemcount ) ReSetItemSlot( &m_UserItem[itemslot] );//ReSetItemSlot(sSlot);
	else m_UserItem[itemslot].sCount = m_UserItem[itemslot].sCount - (short)itemcount;

	if(UpdateUserItemDN() == FALSE)
	{
		for(i = 0; i < TOTAL_ITEM_NUM; i++)		// ╛╞└╠┼█ ┴д║╕ ╚п┐°
		{
			m_UserItem[i] = MyItem[i];
		}
		SendSystemMsg( IDS_USER_DRESSING_FAIL, SYSTEM_NORMAL, TO_ME);
		bFlag = TRUE;
		goto go_dressing_result;
	}

	m_iCurWeight += ( iWeight - iBasicItemWeight );
	GetRecoverySpeed();

	UpdateInvenSlot(&arEmptySlot, &arSameSlot);

	SendSystemMsg( strResult, SYSTEM_ERROR, TO_ME);

	TempBuf.Add(DRESSING);
	TempBuf.Add(SUCCESS);

	TempBuf.Add( (short)itemslot );
	TempBuf.Add(pOrgItem->sLevel);
	TempBuf.Add(pOrgItem->sSid);
	TempBuf.Add(pOrgItem->sDuration);
	TempBuf.Add(pOrgItem->sBullNum);
	TempBuf.Add(pOrgItem->sCount);
	for( i = 0; i < MAGIC_NUM; i++ ) TempBuf.Add(pOrgItem->tMagic[i]);
	TempBuf.Add(pOrgItem->tIQ);

	Send(TempBuf, TempBuf.GetLength());

go_dressing_result:
	int dddd = 0;

	if( bFlag )
	{
		TempBuf.Add(DRESSING);
		TempBuf.Add(FAIL);

		Send(TempBuf, TempBuf.GetLength());
	}

	// ╕▐╕Ё╕о ╟╪┴ж -------------------- --------------------//
	for(i = 0; i < arSame.GetSize(); i++)
	{
		if(arSame[i] != NULL) delete arSame[i];
	}
	arSame.RemoveAll();
	arSameSlot.RemoveAll();
	for(i = 0; i < arEmpty.GetSize(); i++)
	{
		if(arEmpty[i] != NULL) delete arEmpty[i];
	}
	arEmpty.RemoveAll();
	arEmptySlot.RemoveAll();

	for(i = 0; i < arResult.GetSize(); i++ )
	{
		if( arResult[i] ) delete arResult[i];
	}
	arResult.RemoveAll();
}

void USER::ItemDataVersionCheck()
{
/*
	int i;

	switch( m_tItemVer )
	{
	case	0x00:
		{
			for(i = 0; i < TOTAL_ITEM_NUM; i++)
			{
				m_UserItem[i].iItemSerial = GenerateItemSerial( &(m_UserItem[i]) );
			}

			for(i = 0; i < TOTAL_BANK_ITEM_NUM; i++)
			{
				m_UserBankItem[i].iItemSerial = GenerateItemSerial( &(m_UserBankItem[i]) );
			}

			m_tItemVer = 0x01;

			UpdateMemUserAll( TRUE );
		}

	case	0x01:
	default:
		break;
	}

	switch( m_tAccountBankItemVer )
	{
	case	0X00:
		{
			for(i = 0; i < TOTAL_ACCOUNT_BANK_ITEM_NUM; i++)
			{
				m_AccountBankItem[i].iItemSerial = GenerateItemSerial( &(m_AccountBankItem[i]) );
			}

			m_tAccountBankItemVer = 0x01;

			UpdateMemUserAll( TRUE );
		}
	}
*/	
}

void USER::SelectOver100Skill(TCHAR *pBuf)
{
	if( m_sLevel < 100 ) return;		// 100╖ж └╠╗є╕╕ ╝▒┼├ ╟╥ ╝Ў └╓┤┘.

	int emptyskillslot = -1;

/*
#define BRAWL				0
#define STAFF				1
#define	EDGED				2
#define FIREARMS			3
*/
	switch( m_byClass )
	{
	case	BRAWL:
		emptyskillslot = 4;
		break;

	case	STAFF:
		emptyskillslot = 9;
		break;

	case	EDGED:
		emptyskillslot = 14;
		break;

	case	FIREARMS:
		emptyskillslot = 19;
		break;
	case	JUDGE:
		emptyskillslot = 24;
		break;

	default:
		return;
	}

	if( emptyskillslot == -1 ) return;	// ▒╫ ░ш┐н┐б╝н ╗ч┐ы╟╧┴Ў ╛╩░э └╓┤┬ ╕╢┴Ў╕╖ ╜║┼│

	int skillsid = m_UserSkill[emptyskillslot].sSid;

	if(skillsid < 0 || skillsid >= g_arSkillTable.GetSize()) return;

	if( g_arSkillTable[skillsid]->m_sSid != -1 )		// └╠╣╠ 100╖ж └╠╗є ╜║┼│└╗ ░ё╢·└╗╢з
	{
		if( emptyskillslot != skillsid ) return;
	}

	int index = 0;

	int selectedskill = GetByte( pBuf, index );

	if( selectedskill < 20 || selectedskill >= 24 ) return;	// ┼м╢є└╠╛Ё╞о┐б╝н │╤╛ю┐└┤┬ ╜║┼│ ╣°╚г┤┬ 0-3└╠┤┘

/*	20 - ╕═░°
	21 - └¤┤ы╣ц╛ю
	22 - ╗ч└╠┼▒ └·╟╫
	23 - ╡Ё╞ц╜║ ╛ў */

/*	if(selectedskill == 20)
	{
		if(m_byClass != 0)
		{
			SendUserStatusSkill();
			return;
		}
	} */

	int backupskill = m_UserSkill[emptyskillslot].sSid;
	int backupskilllevel = m_UserSkill[emptyskillslot].tLevel;

	m_UserSkill[emptyskillslot].sSid = selectedskill;
	m_UserSkill[emptyskillslot].tLevel = (BYTE)((m_sLevel % 100) + 1);
//niuniuadd
	if(m_UserSkill[emptyskillslot].tLevel>20)
			m_UserSkill[emptyskillslot].tLevel=20;
	if( !UpdateUserData() )
	{
		m_UserSkill[emptyskillslot].sSid = backupskill;
		m_UserSkill[emptyskillslot].tLevel = backupskilllevel;
		return;
	}

	SendUserStatusSkill();
}

UINT64 USER::GenerateItemSerial(ItemList* pItem)
{
	/*if( pItem->tIQ == MAGIC_ITEM ||		// ╕┼┴ў╛╞└╠┼█└╠░┼│к
		pItem->tIQ == RARE_ITEM ||		// ╖б╛ю╛╞└╠┼█└╠░┼│к
		pItem->sLevel >= 20 ||			// ╖╣║з 20└╠╗є ╛╞└╠┼█└╠░┼│к
		pItem->tMagic[5] >= 1 ||		// ╛ў▒╫╖╣└╠╡х░б 1╣°└╠╗є ╡╚ ╛╞└╠┼█└╠╢є╕щ
		pItem->sSid == 756 )			// ▒╪╛р
	{
		CTime t;

		t = CTime::GetCurrentTime();

		MYINT upper;		// ╜├░г└╕╖╬ ╗є└з 4╣┘└╠╞о╕ж ╕╕╡ч┤┘
		MYINT under;		// ╜├╕о╛є╖╬ ╟╧└з 3╣┘└╠╞о╕ж │к╕╙┴Ў ╟╤╣┘└╠╞о┤┬ ╝н╣Ў └╧╖├╣°╚г

		memcpy( &(upper), &t, sizeof(CTime) );
		TRACE("111111: %d   =? %d\n", sizeof(CTime),sizeof(upper.i) );
		under.i = (int)(g_dwItemSerial);
		under.b[3] = g_ItemSerialIndex;

		g_dwItemSerial++;

		if( g_dwItemSerial >= 255*255*255 ) g_dwItemSerial = 0;

		MYINT64 total;

		total.b[7] = upper.b[3];
		total.b[6] = upper.b[2];
		total.b[5] = upper.b[1];
		total.b[4] = upper.b[0];

		total.b[3] = under.b[3];
		total.b[2] = under.b[2];
		total.b[1] = under.b[1];
		total.b[0] = under.b[0];

		TRACE("GenerateSerial - %I64d\n", total.i );

		return total.i;

	}
	*/

	return 0;
}

void USER::AccountBankItemMoveReq(TCHAR *pBuf)
{
#ifdef _ACTIVE_USER
//	if(m_iDisplayType == 6 && m_sLevel > 25) return; //yskang 0.5
	if(m_iDisplayType == 6) return; //yskang 0.5
#endif

	int index = 0;
	int bSuccess = FALSE;//╜н║■
	BYTE type = GetByte(pBuf, index);
	/////////////////////////////////////╜н║■
	if(!LoadCharData(m_strAccount))
	{
		return;
	}

	for (int i =0; i < 3 ; i++)	//bug ╖└╓╣╡┴║┼╦в╫░▒╕
	{
		if (m_strChar[i][0] == 0)
			continue;
		if (strcmp(m_strChar[i],m_strUserID) == 0)
			bSuccess = TRUE;
	}

	if (bSuccess == FALSE)	return;//BUG  
		
	if (m_bNowTrading == TRUE || m_bPShopOpen == TRUE) 
	   {
            CString strDate ="";
			SYSTEMTIME st;
			GetLocalTime(&st);
			strDate.Format("%d-%d-%d %d:%d",st.wYear,st.wMonth,st.wDay ,st.wHour,st.wMinute);
			TCHAR m_Log[500];
			sprintf_s(m_Log,"[ %s ]%s %d,%d ╬я╞╖╥╞╢п┤ц╘┌╖╟╖и5 \r\n",strDate,m_strUserID,m_bNowTrading,m_bPShopOpen);
		    WriteUserShopLog(m_Log);
			SendItemMoveFail();
		    return;
	 }           
	
		
	
	////////////////////////////////////////

	switch(type)
	{
	case BANK_ITEM_INPUT:
		AccountBankInPut(pBuf + index);
		break;
	case BANK_ITEM_OUTPUT:
		AccountBankOutPut(pBuf + index);
		break;
	case BANK_DN_INPUT:
		AccountBankInPutDN(pBuf + index);
		break;
	}
}

void USER::AccountBankInPut(TCHAR *pBuf)//╫█║╧▓╓┐т ┤ц╚ы
{
	int i;
	int tDestSlot;
	int index = 0;
	int iOver = 0;
	short sSid = -1;
	short sHaveCount = 0;
	DWORD dwCost = 150;

	BYTE result = SUCCESS;

	CBufferEx TempBuf;

	ItemList MyItem[TOTAL_ITEM_NUM], BackItem;

	BYTE tSourceSlot = GetByte(pBuf, index);	// ╗ч┐ы└┌ ╛╞└╠┼█└╠ └╓┤° ╜╜╖╘ └з─б
	short sCount = GetShort(pBuf, index);		// ╛є╕╢╕╕┼н ║╕░№
												// ┐└╖╬┴Ў └╬║е╕╕ ░б┤╔╟╧┤┘.	
	if ( m_bPShopOpen == TRUE || m_bNowTrading == TRUE) { result = FAIL; goto go_result; }//╬┤╓кBUG
	if(tSourceSlot < EQUIP_ITEM_NUM || tSourceSlot >= EQUIP_ITEM_NUM + INVENTORY_NUM) { result = FAIL; goto go_result; }

	sSid = m_UserItem[tSourceSlot].sSid;
	sHaveCount = m_UserItem[tSourceSlot].sCount;
	//======================================================================================= ╧▐╓╞╫█║╧▓╓┐т┤ц╚ы╩¤┴┐
	if ( sSid == 724)
	{
		for(int k = 0; k < TOTAL_ACCOUNT_BANK_ITEM_NUM; k++)
	    {
			if (m_AccountBankItem[k].sSid == 724 )
			{
				if ( sCount + m_AccountBankItem[k].sCount > 32000)
				{

					SendEventMsg("╫█║╧▓╓┐т│м╣¤╫ю┤є┤ц┤в┴┐");
					result = FAIL;
					goto go_result; 
				}
			}
		}
	}

//========================================================================================
	if(sHaveCount <= 0) { result = FAIL; goto go_result; }	// ╛╞└╠┼█└╠ ╛°┤┘.
												
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) { result = FAIL; goto go_result; }	// └▀╕°╡╚ sSid

	if(g_arItemTable[sSid]->m_sEvent >= EVENT_RR_ITEM_BAND)		// ╖╬┐н╖│║э ╗є╟░└║ ┼ы╟╒├в░э┐б │╓└╗ ╝Ў ╛°┤┘.
	{
		SendSystemMsg( IDS_USER_CANT_SHARE_EVENT_ITEM, SYSTEM_ERROR, TO_ME);
		result = FAIL; goto go_result; 
	}

	if(sCount > ACCOUNT_BANK_MAX_ITEM) 
	{
		SendSystemMsg( IDS_USER_SAME_ITEM_COUNT_MAX, SYSTEM_ERROR, TO_ME);
		result = FAIL; goto go_result;
	}
												
	if(sCount <= 0 || sCount > sHaveCount) { result = FAIL; goto go_result; }	// ╝╥┴Ў╟╤ ╛╞└╠┼█ ╝Ў║╕┤┘ ╕╣└╗ ░ц┐ь
												//│╗▒╕╡╡ ├╝┼й╕ж wear┴д║╕╖╬ ╟▀┤┘.
	//if(g_arItemTable[sSid]->m_byWear <= 5 && sCount > 1) { result = FAIL; goto go_result; }
	if(g_arItemTable[sSid]->m_sDuration > 0 && sCount > 1) { result = FAIL; goto go_result; }	// ░у─е╝Ў ╛°┤┬╡е ░╣╝Ў░б 1║╕┤┘ ┼м╝Ў ╛°┤┘.
	if((sHaveCount < 0) && sCount < 0) { result = FAIL; goto go_result; }
	for(i = 0; i < TOTAL_ITEM_NUM; i++)	// ╛╞└╠┼█ ┴д║╕ ╣щ╛ў
	{
		MyItem[i] = m_UserItem[i];
	}

	ReSetItemSlot(&BackItem);					// DB╜╟╞╨┐б ┤ы║ё╟╤ ╣щ╛ў┐ы ├╩▒т╚н
												// └╧┤▄ ░у─е╝Ў └╓┤┬┴Ў, ░у─б╕щ ░░└║ ╛╞└╠┼█└╠ └╓┤┬┴Ў ├г╛╞║╗┤┘.
	tDestSlot = GetSameItem(m_UserItem[tSourceSlot], ACCOUNT_BANK_SLOT);
	
	/***************************└║╟р ╛ў╣л ├│╕о********************************************/
	if(tDestSlot >= 0)							// ╟╫╗є ╗ї╖╬└╠ ├▀░б ╡╟┤┬░═└╗ ▒т┴╪└╕╖╬ ├│╕о
	{											
		BackItem = m_AccountBankItem[tDestSlot];

		if(m_AccountBankItem[tDestSlot].sCount >= ACCOUNT_BANK_MAX_ITEM)
		{
			SendSystemMsg( IDS_USER_SAVE_MAX_COUNT, SYSTEM_ERROR, TO_ME);
			result = FAIL; goto go_result;
		}

		if((m_AccountBankItem[tDestSlot].sCount + sCount) > ACCOUNT_BANK_MAX_ITEM)
		{										// MAX░к└╗ │╤└╕╕щ ▓╦├д┐ь░э │к╕╙┴Ў ├│╕о			
			iOver = m_AccountBankItem[tDestSlot].sCount + sCount - ACCOUNT_BANK_MAX_ITEM;
			if(iOver <= 0) { result = FAIL; goto go_result; }

			m_AccountBankItem[tDestSlot].sCount = ACCOUNT_BANK_MAX_ITEM;
			sCount = sCount - iOver;
		}
		else m_AccountBankItem[tDestSlot].sCount += sCount;
	}
	else
	{											//	├▀░б
		tDestSlot = GetEmptySlot(ACCOUNT_BANK_SLOT);

		if(tDestSlot == -1) 
		{
			result = FAIL; goto go_result; 
		}

		m_AccountBankItem[tDestSlot].sLevel = m_UserItem[tSourceSlot].sLevel;
		m_AccountBankItem[tDestSlot].sSid = m_UserItem[tSourceSlot].sSid;
		m_AccountBankItem[tDestSlot].sDuration = m_UserItem[tSourceSlot].sDuration;
		m_AccountBankItem[tDestSlot].sBullNum = m_UserItem[tSourceSlot].sBullNum;
		m_AccountBankItem[tDestSlot].sCount = sCount;
		for(i = 0; i < MAGIC_NUM; i++) m_AccountBankItem[tDestSlot].tMagic[i] = m_UserItem[tSourceSlot].tMagic[i];
		m_AccountBankItem[tDestSlot].tIQ = m_UserItem[tSourceSlot].tIQ;
		m_AccountBankItem[tDestSlot].iItemSerial = m_UserItem[tSourceSlot].iItemSerial;
	}

	index = 0;
	index = g_arItemTable[m_UserItem[tSourceSlot].sSid]->m_byWeight * sCount;
	/**************************└п└· └╬║е ├│╕о*********************************************/
	if(sCount >= sHaveCount && iOver == 0)
	{
		MakeItemLog( &m_AccountBankItem[tDestSlot], ITEMLOG_ACCOUNT_BANKIN );
		ReSetItemSlot(&m_UserItem[tSourceSlot]);	
	}
	else m_UserItem[tSourceSlot].sCount -= sCount;
	
	/**************************DB Update ├│╕о*********************************************/
	if(UpdateUserBank() == FALSE)
	{
		for(i = 0; i < TOTAL_ITEM_NUM; i++)// ╛╞└╠┼█ ┴д║╕ ║╣┐°
		{
			m_UserItem[i] = MyItem[i];
		}
		m_AccountBankItem[tDestSlot] = BackItem;

		result = FAIL;
		FlushItemLog( FALSE );
		goto go_result;
	}

	FlushItemLog( TRUE );

go_result:
	TempBuf.Add(ACCOUNT_BANK_ITEM_MOVE_RESULT);

	if(result == FAIL)
	{
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	result = (BYTE)0x01;
	TempBuf.Add(result);

	TempBuf.Add((BYTE)tDestSlot);				// ╥°╨╨└я╢л╬ўбг
	TempBuf.Add( dwCost );
	TempBuf.Add(m_AccountBankItem[tDestSlot].sLevel);
	TempBuf.Add(m_AccountBankItem[tDestSlot].sSid);
	TempBuf.Add(m_AccountBankItem[tDestSlot].sDuration);
	TempBuf.Add(m_AccountBankItem[tDestSlot].sBullNum);
	TempBuf.Add(m_AccountBankItem[tDestSlot].sCount);
	for(i = 0; i < MAGIC_NUM; i++) TempBuf.Add(m_AccountBankItem[tDestSlot].tMagic[i]);
	TempBuf.Add(m_AccountBankItem[tDestSlot].tIQ);

	TempBuf.Add((BYTE)tSourceSlot);				// ╔э╔╧╡─╢л╬ў
	TempBuf.Add(m_UserItem[tSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[tSourceSlot].sSid);
	TempBuf.Add(m_UserItem[tSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[tSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[tSourceSlot].sCount);
	for(i = 0; i < MAGIC_NUM; i++) TempBuf.Add(m_UserItem[tSourceSlot].tMagic[i]);
	TempBuf.Add(m_UserItem[tSourceSlot].tIQ);

	Send(TempBuf, TempBuf.GetLength());

	m_iCurWeight -= index;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...
}

void USER::AccountBankOutPut(TCHAR *pBuf) //╫█║╧▓╓┐т ╚б│Ў
{
	int i, j, iWeight = 0;
	int tDestSlot;
	int index = 0;
	int iOver = 0;
	short sSid = -1;
	short sHaveCount = 0;

	short myslot;
	BYTE result = SUCCESS;

	CWordArray		arChangeMy, arChangeBank;
	ItemList		MyItem[TOTAL_ITEM_NUM], BankItem[TOTAL_ACCOUNT_BANK_ITEM_NUM];
	BYTE			arSlot[TOTAL_ACCOUNT_BANK_ITEM_NUM];
	short			arCount[TOTAL_ACCOUNT_BANK_ITEM_NUM];

	for( i = 0; i < TOTAL_ACCOUNT_BANK_ITEM_NUM; i++ ) arSlot[i] = -1;
	for( i = 0; i < TOTAL_ACCOUNT_BANK_ITEM_NUM; i++ ) arCount[i] = -1;

	CBufferEx TempBuf;

	CStore* pStore = NULL;
	short sStoreID = GetShort(pBuf, index);
	if(sStoreID < 0) return;
	pStore = GetStore(sStoreID);
	if(pStore == NULL) return;
	short sRate = pStore->m_sRate;

	DWORD OutCost = 0;
	DWORD dwTax = 0;

	DWORD OutputDN = GetDWORD(pBuf, index);

	if(OutputDN > m_dwAccountBankDN)			// │╩╣л ┼й╕щ
	{
		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}
	if ( m_bPShopOpen == TRUE || m_bNowTrading == TRUE)
	{
		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return; //╬┤╓кBUG
	}
	
	if( OutputDN > 0 ) OutCost += 150;

	DWORD BackMyDN = m_dwDN;					// ╣щ╛ў
	DWORD BackBankDN = m_dwAccountBankDN;

	short slotcount = GetShort( pBuf, index );

	if( slotcount < 0 || slotcount >= TOTAL_ACCOUNT_BANK_ITEM_NUM ) { result = FAIL; goto go_result; }
	
	for( i = 0; i < slotcount; i++ )
	{
		arSlot[i] = GetShort( pBuf, index );
		arCount[i] = GetShort( pBuf, index );

		if(arSlot[i] >= TOTAL_ACCOUNT_BANK_ITEM_NUM) { result = FAIL; goto go_result; }

		sSid = m_AccountBankItem[arSlot[i]].sSid;
		sHaveCount = m_AccountBankItem[arSlot[i]].sCount;
		//=====================================================================╧▐╓╞╫█║╧▓╓┐т╚б│Ў╩¤┴┐

		if ( sSid == 724) //║╟║╟
	    {
			if ( arCount[i] +  FindItem( 724) > 32000 )
			{
				SendEventMsg("│м╣¤┐╔╨п┤°╡─╫ю┤є╩¤┴┐");
				result = FAIL;
				goto go_result; 
			}
		}
	
//=============================================================================================	

		if(sSid < 0 || sSid >= g_arItemTable.GetSize()) { result = FAIL; goto go_result; }

		if(arCount[i] <= 0 || arCount[i] > sHaveCount) { result = FAIL; goto go_result; }

		if(g_arItemTable[sSid]->m_sDuration > 0 && arCount[i] > 1) { result = FAIL; goto go_result; }

		iWeight += g_arItemTable[sSid]->m_byWeight * arCount[i];

		if(m_iMaxWeight < m_iCurWeight + iWeight)
		{
			SendSystemMsg( IDS_USER_OVER_WEIGHT1, SYSTEM_ERROR, TO_ME);
			result = FAIL; 
			goto go_result;
		}

		OutCost += 150;
	}

	if( OutCost > m_dwDN )
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY_FOR_OUT, SYSTEM_ERROR, TO_ME);
		result = FAIL; 
		goto go_result;
	}
	else m_dwDN -= OutCost;

	for( i = 0; i < TOTAL_ITEM_NUM; i++ )	// ╛╞└╠┼█ ┴д║╕ ╣щ╛ў
	{
		MyItem[i] = m_UserItem[i];
	}

	for( i = 0; i < TOTAL_ACCOUNT_BANK_ITEM_NUM; i++ )
	{
		BankItem[i] = m_AccountBankItem[i];
	}

	for( i = 0; i < slotcount; i++ )
	{
		tDestSlot = GetSameItem( m_AccountBankItem[arSlot[i]], INVENTORY_SLOT );

		if( tDestSlot >= 0 )
		{
			m_UserItem[tDestSlot].sCount += arCount[i];
		}
		else
		{
			tDestSlot = GetEmptySlot( INVENTORY_SLOT );

			if( tDestSlot == -1 )
			{
				for( j = 0; j < TOTAL_ITEM_NUM; j++)// ╛╞└╠┼█ ┴д║╕ ║╣┐°
				{
					m_UserItem[j] = MyItem[j];
				}
				for( j = 0; j < TOTAL_ACCOUNT_BANK_ITEM_NUM; j++ )
				{
					m_AccountBankItem[j] = BankItem[j];
				}
				m_dwDN = BackMyDN;
				m_dwAccountBankDN = BackBankDN;

				result = FAIL; goto go_result;
			}

			m_UserItem[tDestSlot].sLevel = m_AccountBankItem[arSlot[i]].sLevel;
			m_UserItem[tDestSlot].sSid = m_AccountBankItem[arSlot[i]].sSid;
			m_UserItem[tDestSlot].sDuration = m_AccountBankItem[arSlot[i]].sDuration;
			m_UserItem[tDestSlot].sBullNum = m_AccountBankItem[arSlot[i]].sBullNum;
			m_UserItem[tDestSlot].sCount = arCount[i];
			for(j = 0; j < MAGIC_NUM; j++) m_UserItem[tDestSlot].tMagic[j] = m_AccountBankItem[arSlot[i]].tMagic[j];
			m_UserItem[tDestSlot].tIQ = m_AccountBankItem[arSlot[i]].tIQ;
			m_UserItem[tDestSlot].iItemSerial = m_AccountBankItem[arSlot[i]].iItemSerial;

			MakeItemLog( &m_UserItem[tDestSlot], ITEMLOG_ACCOUNT_BANKOUT );
		}

		arChangeMy.Add( tDestSlot );

		if( arCount[i] >= m_AccountBankItem[arSlot[i]].sCount ) ReSetItemSlot( &m_AccountBankItem[arSlot[i]] );
		else m_AccountBankItem[arSlot[i]].sCount -= arCount[i];

		arChangeBank.Add( arSlot[i] );
	}

	if(!CheckMaxValueReturn(m_dwDN, OutputDN))
	{									// ┤▄, MAX░к└╠╕щ ┬ў╛╫└║...
		CheckMaxValue(m_dwDN, OutputDN);
		if(m_dwDN < OutputDN) OutputDN = 0;
		else OutputDN = m_dwDN - OutputDN;
	}
	else m_dwDN += OutputDN;
										// └║╟р┐б╝н ╗л┤┘.
	if(OutputDN >= m_dwAccountBankDN) m_dwAccountBankDN = 0;
	else m_dwAccountBankDN -= OutputDN;

	if( OutputDN > 0 )
		MakeMoneyLog( OutputDN, ITEMLOG_ACCOUNT_BANKOUT_MONEY, NULL, m_dwAccountBankDN );

	// ╞ў╞о╕о╜║┐б ╝╝▒▌└╗ ┤й└√╜├─╤ ┴╪┤┘.
	dwTax = (DWORD)( OutCost * ((double)sRate/100) );
	UpdateFortressTax(sStoreID, dwTax); // ╞ў╞о╕о╜║ ╝╝▒▌└╠╕щ └·└х...


	/**************************DB Update ├│╕о*********************************************/
	if(UpdateUserBank() == FALSE)
	{
		for( i = 0; i < TOTAL_ITEM_NUM; i++)// ╛╞└╠┼█ ┴д║╕ ║╣┐°
		{
			m_UserItem[i] = MyItem[i];
		}
		for( i = 0; i < TOTAL_ACCOUNT_BANK_ITEM_NUM; i++ )
		{
			m_AccountBankItem[i] = BankItem[i];
		}
		m_dwDN = BackMyDN;
		m_dwAccountBankDN = BackBankDN;

		result = FAIL;

		goto go_result;
	}

	FlushItemLog( TRUE );

go_result:
	TempBuf.Add(ACCOUNT_BANK_ITEM_MOVE_RESULT);

	if(result == FAIL)
	{
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		FlushItemLog( FALSE );
		return;
	}

	result = (BYTE)0x02;
	TempBuf.Add(result);

	TempBuf.Add( m_dwDN );
/*	TempBuf.Add( m_dwAccountBankDN );

	TempBuf.Add( (short)(arChangeBank.GetSize()) );

	for( i = 0; i < arChangeBank.GetSize(); i++ )
	{
		bankslot = arChangeBank[i];

		TempBuf.Add( (BYTE)bankslot );
		TempBuf.Add(m_AccountBankItem[bankslot].sLevel);
		TempBuf.Add(m_xxxxxxxxeiAccountBankItem[bankslot].sSid);
		TempBuf.Add(m_AccountBankItem[bankslot].sDuration);
		TempBuf.Add(m_AccountBankItem[bankslot].sBullNum);
		TempBuf.Add(m_AccountBankItem[bankslot].sCount);
		for( j = 0; j < MAGIC_NUM; j++) TempBuf.Add(m_AccountBankItem[bankslot].tMagic[j]);
		TempBuf.Add(m_AccountBankItem[bankslot].tIQ);
	}
*/
	TempBuf.Add( (short)(arChangeMy.GetSize()) );

	for( i = 0; i < arChangeMy.GetSize(); i++ )
	{
		myslot = arChangeMy[i];

		TempBuf.Add( (BYTE)myslot );
		TempBuf.Add( m_UserItem[myslot].sLevel );
		TempBuf.Add( m_UserItem[myslot].sSid);
		TempBuf.Add( m_UserItem[myslot].sDuration);
		TempBuf.Add( m_UserItem[myslot].sBullNum);
		TempBuf.Add( m_UserItem[myslot].sCount);
		for( j = 0; j < MAGIC_NUM; j++ ) TempBuf.Add( m_UserItem[myslot].tMagic[j] );
		TempBuf.Add( m_UserItem[myslot].tIQ );
	}

	Send(TempBuf, TempBuf.GetLength());

	m_iCurWeight += iWeight;
	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...
}

void USER::AccountBankInPutDN(TCHAR *pBuf)  //╫█║╧▓╓┐т ┤ц╚ы╜Ё╟о
{
	CBufferEx TempBuf;

	BYTE result; 
	int index = 0;
	DWORD BackBankDN = 0, BackMyDN = 0;

	DWORD InputDN = GetDWORD(pBuf, index);

	TempBuf.Add(ACCOUNT_BANK_ITEM_MOVE_RESULT);

	if(InputDN == 0 || InputDN > m_dwDN) 
	{
		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}
	if ( m_bPShopOpen == TRUE || m_bNowTrading == TRUE)
	{
		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return; //╬┤╓кBUG
	}
	BackMyDN = m_dwDN;
	BackBankDN = m_dwAccountBankDN;
										// └║╟р┐б └╘▒▌
	if(!CheckMaxValueReturn(m_dwAccountBankDN, InputDN))
	{									// ┤▄, MAX░к└╠╕щ ┬ў╛╫└║...
		CheckMaxValue(m_dwAccountBankDN, InputDN);
		if(m_dwAccountBankDN < InputDN) InputDN = 0;
		else InputDN = m_dwAccountBankDN - InputDN;
	}
	else m_dwAccountBankDN += InputDN;
										// ░б┴Ў░э └╓┤┬ ╝╥┴Ў▒▌┐б╝н ╗л┤┘.
	if(m_dwDN <= InputDN) m_dwDN = 0;
	else m_dwDN -= InputDN;

	MakeMoneyLog( InputDN, ITEMLOG_ACCOUNT_BANKIN_MONEY, NULL, m_dwAccountBankDN );

	if(UpdateUserBank() == FALSE)		// DB UpDate
	{
		m_dwDN = BackMyDN;
		m_dwBankDN = BackBankDN;

		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());

		FlushItemLog( FALSE );
		return;
	}

	result = (BYTE)0x03;				// 3 : DN └╘▒▌
	TempBuf.Add(result);

	TempBuf.Add(m_dwAccountBankDN);			
	TempBuf.Add(m_dwDN);				

	Send(TempBuf, TempBuf.GetLength());

	FlushItemLog( TRUE );
}

void USER::AccountBankOpenReq(int nStoreID)
{
	CStore* pStore = NULL;
	pStore = GetStore(nStoreID);
	if(pStore == NULL) return;
	DWORD dwCost = 150;

	int i, j;
	CBufferEx TempBuf;

	CByteArray arItemSlotList;

//	m_dwAccountBankDN = 0;

//	if(!LoadMemAccountBank())
//	{
//		if(!LoadAccountBank()) return;						// └п└·░б ║╕░№╟╤ └║╟р ╛╞└╠┼█└╗ ├│└╜ ┴в╝╙╟╥╢з ░б┴Ў░э ┐┬┤┘.
//	}

	for(i = 0; i < TOTAL_ACCOUNT_BANK_ITEM_NUM; i++)
	{												// ╟Ў└ч ║╕░№╡╚ ╛╞└╠┼█╕╕ ║╕┐й┴╓▒т└з╟╪ ┴д╖─╟╤┤┘. 
		if(m_AccountBankItem[i].sSid >= 0)
		{
			arItemSlotList.Add(i);
		}
	}

	TempBuf.Add(ACCOUNT_BANK_OPEN);

	TempBuf.Add((short)nStoreID);

	TempBuf.Add((DWORD)m_dwAccountBankDN);
	TempBuf.Add((BYTE)arItemSlotList.GetSize());

	for(i = 0; i < arItemSlotList.GetSize(); i++)
	{
		BYTE tempSlot = 0;
		tempSlot = arItemSlotList[i];
		TempBuf.Add(tempSlot);
		TempBuf.Add((short)m_AccountBankItem[tempSlot].sLevel);
		TempBuf.Add((short)m_AccountBankItem[tempSlot].sSid);
		TempBuf.Add((short)m_AccountBankItem[tempSlot].sDuration);
		TempBuf.Add((short)m_AccountBankItem[tempSlot].sBullNum);
		TempBuf.Add((short)m_AccountBankItem[tempSlot].sCount);

		for(j = 0; j < MAGIC_NUM; j++) TempBuf.Add((BYTE)m_AccountBankItem[tempSlot].tMagic[j]);

		TempBuf.Add((BYTE)m_AccountBankItem[tempSlot].tIQ);
		TempBuf.Add( dwCost );
	}

	Send(TempBuf, TempBuf.GetLength());
	CheckBadItem();

}

////////////////////////////////////////////////////////////////////////////////
//	╗ч└╠┐└┤╨ ╜├└№╜├ ╕═░°┐б └╟╟╤ ┴ї░б└▓└╗ ▒╕╟╤┤┘.
//
int USER::GetPsyAssault(bool bMax)
{
	int iLevel = 0;
	int iSkillSid = 0;

	int iAttackUp = 0;
	int tClass = 0;

	BYTE tWeaponClass = 0;

	IsCanUseWeaponSkill(tWeaponClass);
	tClass = tWeaponClass * SKILL_NUM;

	for(int i = tClass; i < tClass + SKILL_NUM; i++)
	{
		iSkillSid  = m_UserSkill[i].sSid;
		if(iSkillSid == SKILL_ASSAULT) // ╕═░°			// 20 index
		{
			// ╝°╝Ў ╜║┼│ ╖╣║з 
			iLevel = m_UserSkill[i].tLevel;		
			if(iLevel < 0) iLevel = 0;
			
			// ╛╞└╠┼█┐б └╟╟╤ ╜║┼│ ║п╡┐ ╖╣║з
			if(iLevel >= 1) iLevel += m_DynamicUserData[g_DynamicSkillInfo[iSkillSid]]+ m_DynamicUserData[MAGIC_ALL_SKILL_UP];
			
			if(iLevel >= SKILL_LEVEL) iLevel = SKILL_LEVEL - 1;
			if(iSkillSid >= g_arSkillTable.GetSize()) return 0;
			int iRandom = (int)((double)XdY(1, 1000) / 10 + 0.5);
			if((iRandom < g_arSkillTable[iSkillSid]->m_arSuccess.GetAt(iLevel))|| bMax)
			{
				iAttackUp = g_arSkillTable[iSkillSid]->m_arInc.GetAt(iLevel);
			}
		}
	}

	return iAttackUp;	
}

////////////////////////////////////////////////////////////////////////////////
//	╗ч└╠┐└┤╨ ╜├└№╜├ └¤┤ы╣ц╛ю ╜║┼│┐б └╟╟╤ ┴ї░б└▓└╗ ▒╕╟╤┤┘.
//
int USER::GetPsyAbsoluteDefense()
{
	int iLevel = 0;
	int iSkillSid = 0;

	int iAttackUp = 0;
	int tClass = 0;

	BYTE tWeaponClass = 0;

	IsCanUseWeaponSkill(tWeaponClass);
	tClass = tWeaponClass * SKILL_NUM;

	for(int i = tClass; i < tClass + SKILL_NUM; i++)
	{
		iSkillSid  = m_UserSkill[i].sSid;
		if(iSkillSid == SKILL_ABSOLUTE_DEFENSE) //╛°╢╘╖└╙∙			21 index
		{
			// ╝°╝Ў ╜║┼│ ╖╣║з 
			iLevel = m_UserSkill[i].tLevel;		
			if(iLevel < 0) iLevel = 0;
			
			// ╛╞└╠┼█┐б └╟╟╤ ╜║┼│ ║п╡┐ ╖╣║з
			if(iLevel >= 1) iLevel += m_DynamicUserData[g_DynamicSkillInfo[iSkillSid]]+ m_DynamicUserData[MAGIC_ALL_SKILL_UP];
			
			if(iLevel >= SKILL_LEVEL) iLevel = SKILL_LEVEL - 1;
			if(iSkillSid >= g_arSkillTable.GetSize()) return 0;
			iAttackUp = g_arSkillTable[iSkillSid]->m_arInc.GetAt(iLevel);
		}
		if(iSkillSid == SKILL_PSYCHIC_RESIST) //─з╖и┐╣▓Ё			22 index
		{
			iLevel = m_UserSkill[i].tLevel;		
			if(iLevel < 0) iLevel = 0;
			
			
			if(iLevel >= 1) iLevel += m_DynamicUserData[g_DynamicSkillInfo[iSkillSid]]+ m_DynamicUserData[MAGIC_ALL_SKILL_UP];
			
			if(iLevel >= SKILL_LEVEL) iLevel = SKILL_LEVEL - 1;
			if(iSkillSid >= g_arSkillTable.GetSize()) return 0;
			iAttackUp += g_arSkillTable[iSkillSid]->m_arInc.GetAt(iLevel);
		}
	}

	return iAttackUp;	
}

////////////////////////////////////////////////////////////////////////////////
//	╗ч└╠┐└┤╨ ╜├└№╜├ ╗ч└╠┐└┤╨ └·╟╫ ╜║┼│┐б └╟╟╤ ┴ї░б└▓└╗ ▒╕╟╤┤┘.
//
int USER::GetPsyPsyResist()
{
	int iLevel = 0;
	int iSkillSid = 0;

	int iAttackUp = 0;
	int tClass = 0;

	BYTE tWeaponClass = 0;

	IsCanUseWeaponSkill(tWeaponClass);
	tClass = tWeaponClass * SKILL_NUM;

	for(int i = tClass; i < tClass + SKILL_NUM; i++)
	{
		iSkillSid  = m_UserSkill[i].sSid;
		if(iSkillSid == SKILL_PSYCHIC_RESIST) // ╗ч└╠┐└┤╨ └·╟╫			// 22 index
		{
			// ╝°╝Ў ╜║┼│ ╖╣║з 
			iLevel = m_UserSkill[i].tLevel;		
			if(iLevel < 0) iLevel = 0;
			
			// ╛╞└╠┼█┐б └╟╟╤ ╜║┼│ ║п╡┐ ╖╣║з
			if(iLevel >= 1) iLevel += m_DynamicUserData[g_DynamicSkillInfo[iSkillSid]]+ m_DynamicUserData[MAGIC_ALL_SKILL_UP];
			
			if(iLevel >= SKILL_LEVEL) iLevel = SKILL_LEVEL - 1;
			if(iSkillSid >= g_arSkillTable.GetSize()) return 0;
			iAttackUp = g_arSkillTable[iSkillSid]->m_arInc.GetAt(iLevel);
		}
	}

	return iAttackUp;	
}

void USER::ResetOver100LevelSkill(int sLevel)//░┘╝╢╝╝─▄┐╪╓╞
{
	int emptyskillslot = -1;
	int skillsid = 0;

	switch( m_byClass )
	{
	case	BRAWL:
		emptyskillslot = 4;
		break;

	case	STAFF:
		emptyskillslot = 9;
		break;

	case	EDGED:
		emptyskillslot = 14;
		break;

	case	FIREARMS:
		emptyskillslot = 19;
		break;
	case	JUDGE:
		emptyskillslot = 24;
		break;

	default:
		return;
	}

	if( emptyskillslot == -1 ) return;

	skillsid = m_UserSkill[emptyskillslot].sSid;

	if( sLevel <= 99 )		// ╕╕╛р 99╖ж└╕╖╬ ╝┬╞├╟╧╢є░э ╡щ╛ю┐└╕щ
	{
		m_UserSkill[emptyskillslot].sSid = emptyskillslot;		// ▒т┴╕ 100╖ж ╜║┼│ ┴д║╕╕ж ┴Ў┐ю┤┘
		m_UserSkill[emptyskillslot].tLevel = 0;

		return;
	}
	else
	{
		if( skillsid < 0 || skillsid >= g_arSkillTable.GetSize() ) return;

		if( g_arSkillTable[skillsid]->m_sSid == -1 ) return;

		if (sLevel > 99 || sLevel < 120) //┐╪╓╞100-120╝╝─▄╡у
		{
			m_UserSkill[emptyskillslot].tLevel = (BYTE)((sLevel % 100) + 1);
		}
		if (sLevel >= 120)//┐╪╓╞120╥╘║є╣╠╢и=20
		{
			m_UserSkill[emptyskillslot].tLevel = (BYTE)(20);					
		}
	}
	
	if(sLevel >=120 && sLevel<130)
	{//120╝╝─▄╫к╗╗║є╔¤╝╢..╝╙╡─╡─...
		int iIndex=m_byClass *SKILL_NUM;
		//╓┘▓├╓░╥╡
		if(m_byClass == JUDGE)
		{
			iIndex = 25;
		}else
		{
			iIndex =m_byClass *SKILL_NUM;
		}
		int i;
		for(i = iIndex; i < iIndex + SKILL_NUM-1; i++)
		{
			if(m_UserSkill[i].sSid>=20&&m_UserSkill[i].sSid<=23)
			{
				m_UserSkill[i].tLevel++;
				if(m_UserSkill[i].tLevel>=20)
					m_UserSkill[i].tLevel=20;
			}
		}
	}
	if(sLevel >= 130 && o_yehuoini[0]->chaoneng == 1 ){   
		CheckMaxValue((short &)m_sSkillPoint_, (short)1);
	}
}

BOOL USER::CheckMoneyMinMax(int min, int max)
{
	if( min < -1 || max < -1 ) return FALSE;
	if( min == -1 && max == -1 ) return FALSE;

	DWORD dwMin = 0;
	DWORD dwMax = 0;

	if( min == -1 && max > 0 )		// max╣╠╕╕└╟ ╡╖╕╕ └╓└╕╕щ TRUE
	{
		dwMax = max;

		if( m_dwDN < dwMax )
		{
			return TRUE;
		}
	}
	else if( min > 0 && max == -1 )	// min└╠╗є└╟ ╡╖╕╕ └╓└╕╕щ TRUE
	{
		dwMin = min;

		if( m_dwDN >= dwMin )
		{
			return TRUE;
		}
	}
	else if( min > 0 && max > 0 )
	{
		dwMin = min;
		dwMax = max;

		if( m_dwDN >= dwMin && m_dwDN < dwMax )
		{
			return TRUE;
		}
	}

	return FALSE;
}

BOOL USER::CheckRandom(int rand)
{
	if( rand <= 0 ) return FALSE;

	if( rand >= 100 ) return TRUE;

	int temp_rand = rand * 100;

	int rand_result = myrand( 0, 10000 );

	if( rand_result <= temp_rand ) return TRUE;

	return FALSE;
}
void USER::GiveDN(int dn)
{
	if( dn <= 0 ) return;

	DWORD dwBackup = m_dwDN;
	DWORD dwGiveDN = dn;

	CheckMaxValue( (DWORD &)m_dwDN, dwGiveDN );

	if( !UpdateUserItemDN() )
	{
		m_dwDN = dwBackup;
		return;
	}

	SendMoneyChanged();
}
void USER::GiveShopPingDN(int shoppingDN)
{
	if( shoppingDN <= 0 ) return;

	DWORD dwBackup = m_dwShopPingDN;
	DWORD dwGiveShopPingDN = shoppingDN;

	CheckMaxValue( (DWORD &)m_dwShopPingDN, dwGiveShopPingDN );

	if( !UpdateUserItemShopPingDN() )
	{
		m_dwShopPingDN = dwBackup;
		return;
	}
    SendUserStatusSkill();	//╕№╨┬╘к▒ж╩¤┴┐
}
//////////////////////////////////////////////////////////////////////////////////////////
void USER::GiveHiExpTime(int HiExpTime)
{
	if( HiExpTime <= 0 ) return;

	DWORD dwBackup = m_dwHiExpTime;
	DWORD dwGiveHiExpTime = HiExpTime;

	CheckMaxValue( (DWORD &)m_dwHiExpTime, dwGiveHiExpTime );

	if( !UpdateUserItemHiExpTime() )
	{
		m_dwHiExpTime = dwBackup;
		return;
	}

}

//╕°╨╥╘╦╩▒╝ф
void USER::GiveMagicFindTime(int MagicFindTime)
{
	if( MagicFindTime <= 0 ) return;

	DWORD dwBackup = m_dwMagicFindTime;
	DWORD dwGiveMagicFindTime = MagicFindTime;

	CheckMaxValue( (DWORD &)m_dwMagicFindTime, dwGiveMagicFindTime );

	if( !UpdateUserItemMagicFindTime() )
	{
		m_dwMagicFindTime = dwBackup;
		return;
	}

}

void USER::GiveVIPTime( int VIPTime )
{
	if( VIPTime <= 0 ) return;


	DWORD dwBackup = m_dwVIPTime;
	DWORD dwGiveHiExpTime = VIPTime;

	CheckMaxValue( (DWORD &)dwBackup, dwGiveHiExpTime );

	if(m_dwVIPTime == 0)
	{
		AddAbnormalInfo(ABNORMAL_FUDAI);
		int index = 0;
		SetByte(m_TempBuf, SET_USER_STATE, index);
		SetInt(m_TempBuf, m_uid + USER_BAND, index);
		SetDWORD(m_TempBuf, m_dwAbnormalInfo, index);
		SetDWORD(m_TempBuf, m_dwAbnormalInfo_, index);					
		Send(m_TempBuf, index);			
	}
	m_dwVIPTime = dwBackup;

}


//////////////////////////////////////////////////////////////////////////////////////////

void USER::RobDN(int dn)
{
	if( dn <= 0 ) return;

	DWORD dwBackup = m_dwDN;
	DWORD dwRobDN = dn;
	DWORD dwTemp = m_dwDN;

	if( m_dwDN <= dwRobDN )
	{
		m_dwDN = 0;
	}
	else
	{
		m_dwDN = dwTemp - dwRobDN;
	}

	if( !UpdateUserItemDN() )
	{
		m_dwDN = dwBackup;
		return;
	}

	SendMoneyChanged();
}

void USER::RobLING(int dn)
{
	if( dn <= 0 ) return;

	DWORD dwBackup = m_dwLingQu;
	DWORD dwRobLing = dn;
	DWORD dwTemp = m_dwLingQu;

	if( m_dwLingQu <= dwRobLing )
	{
		m_dwLingQu = 0;
	}
	else
	{
		m_dwLingQu = dwTemp - dwRobLing;
	}

}
void USER::Collect(TCHAR *pBuf)
{
	USER*	pUser	= NULL;
	CNpc*	pNpc	= NULL;
	int		nTPosX	= 0;
	int		nTPosY	= 0;
	int		nAttackRange = 0;
	int		nDist	= 100;

	int		nDamage = 0;
	int		nDefense = 0;
//	double	nIronSkin = 0;
	int		nFinalDamage = 0;

	BYTE	tWeaponClass = 0;
	BYTE	tTargetClass = 0;

	BOOL	bCanUseSkill = FALSE;
	int		iRandom = 100;

	int		nHit	= 0;
	int		nAvoid	= 0;
//	int		nWeaponHit	= 0;

	BOOL	bIsHit	= FALSE;
	double	nVCHit	= 0;
	double	nCGuard	= 0;
	BOOL	bIsCritical = FALSE;

	int		nInitDamage = 0;
	
	short	sItemDefense[4] = {0, 0, 0, 0};

	BOOL	bSuccessSkill[SKILL_NUM] = {FALSE, FALSE, FALSE, FALSE, FALSE};
	BOOL	bTargetSkill[SKILL_NUM] = {FALSE, FALSE, FALSE, FALSE, FALSE};
	
	BYTE	tActionIndex = HIT_NONE;
	BYTE	tNpcClass = 0;

	short	sOldDuration = 0, sNewDuration = 0;
	short	sOldBullNum = 0;

	int		iFireErrDec = 0;
	int	determine = 0;
	int iDexHitRate = 0, iLevelHitRate = 0;
	int iMyDex = 0, iYourDex = 0;

	CByteArray	arSkillAction1, arSkillAction2;							// Skill Action Array

	DWORD dwExp = 0;
	int index = 0;
	int nTargetID = GetShort(pBuf, index);								// Target ID ╕ж ╛Є┤┬┤┘.

	if(nTargetID < USER_BAND || nTargetID >= INVALID_BAND) return;		// └▀╕°╡╚ Target └╠╕щ return

	int sSid = m_UserItem[RIGHT_HAND].sSid;

	if( sSid < 0 || sSid >= g_arItemTable.GetSize() ) return;

	// ░°░▌ Delay ├╝┼й ---------------------------------------------------------//
	DWORD dwCurrTick = GetTickCount();
	DWORD dwMinDelay = (DWORD)g_arItemTable[sSid]->m_sAttackDelay;
	if(dwMinDelay < DEFAULT_AT_DELAY) dwMinDelay = DEFAULT_AT_DELAY;

	if(m_dwLastAttackTime >= dwCurrTick) return;

	if(dwCurrTick - m_dwLastAttackTime >= dwMinDelay)
	{
		m_dwLastAttackTime = dwCurrTick;
	}

	// │╗▒╕╡╡ ░╦╗ч -------------------------------------------------------------//
	if(m_UserItem[RIGHT_HAND].sDuration <= 0)
	{
//		SendAttackFail(ERR_BROKEN);
		SendSystemMsg( IDS_USER_DAMAGED_ITEM, SYSTEM_NORMAL, TO_ME);
		return;
	}

	// Target ░·└╟ ░┼╕о░ш╗ъ ----------------------------------------------------//
	if(nTargetID >= USER_BAND && nTargetID < NPC_BAND)	// USER : ├д┴¤ ╡╡▒╕╕ж ┬ў░э └п└·╕ж ░°░▌╟╥ ╝Ў ╛°┤┘
	{
		SendAttackMiss(nTargetID);
		return;
	}
	else if(nTargetID >= NPC_BAND)				// NPC
	{
		pNpc = GetNpc(nTargetID - NPC_BAND);	// NPC Point ╕ж ╛Є┤┬┤┘.
		if(pNpc == NULL) return;				// └▀╕°╡╚ NPC └╠╕щ ╕о┼╧
		if(pNpc->m_NpcState == NPC_DEAD || pNpc->m_sHP <= 0)
		{
			//pNpc->m_Delay = pNpc->SendDead(m_pCom, 0);
			return;// NPC ░б └╠╣╠ ┴╫╛ю └╓└╕╕щ ╕о┼╧
		}
		if(pNpc->m_tNpcType != 0) return;

		nTPosX = pNpc->m_sCurX;
		nTPosY = pNpc->m_sCurY;
	}

	nAttackRange = GetAttackRange(m_UserItem[RIGHT_HAND].sSid);
	nAttackRange += 1;	// ╣░╕о└√└╬ ┼╕░▌└╗░б╟╥╢з╕╕ +1╕ж ╟╪┴╪┤┘.(└╠╡┐ ╝╙╡╡╢з╣о┐б ╕ў└╗ └т┴Ў ╕°╟╪╝н ║╕┴д└╕╖╬...)

	if(GetDistance(nTPosX, nTPosY, nAttackRange, &nDist) == FALSE)		// ░°░▌░б┤╔░┼╕о ╣█└╠╕щ ╕о┼╧
	{
		if(g_bDebug) SendSystemMsg(_T("### Too Long Distance!!!"), SYSTEM_NORMAL, TO_ME);
		return;
	}

	// ╕э┴▀ ░к -------------------------------------------------------//
	int nBasicSuccess = 70;
	int nTotalSuccess = 0;

	if( m_UserItem[RIGHT_HAND].sSid == 699 )
	{
		nBasicSuccess = 80;
	}
	else if( m_UserItem[RIGHT_HAND].sSid == 670 )
	{
		nBasicSuccess = 100;
	}

	nTotalSuccess = (int)( (double)m_sMagicDEX * 0.1 + 0.5 );
	nTotalSuccess += nBasicSuccess;

	if( nTotalSuccess < 100 )
	{
		if( nTotalSuccess < myrand( 1, 100 ) )
		{
			SendAttackMiss(nTargetID);
			return;
		}
	}

	// ╚╕╟╟░к/╕э┴▀╞╟┴д/╡е╣╠┴Ў ░ш╗ъ/│╗▒╕╡╡ ░ш╗ъ/├╓┴╛ ░°░▌╜├░г ╝┬╞├----------//
	if(nTargetID >= USER_BAND && nTargetID < NPC_BAND)	// USER : └п└·┤┬ ├д┴¤┤ы╗є└╠ ╛╞┤╧┤┘
	{
		return;
	}

	if(nTargetID >= NPC_BAND)				// NPC
	{
		pNpc = GetNpc(nTargetID - NPC_BAND);		// NPC Point ╕ж ╛Є┤┬┤┘.
		
		if(pNpc == NULL) return;					// └▀╕°╡╚ NPC └╠╕щ ╕о┼╧
		if(pNpc->m_NpcState == NPC_DEAD) return;
		if(pNpc->m_sHP == 0) return;

		if(pNpc->m_tNpcType == NPCTYPE_GUARD)					// ░ц║ё║┤└╠╕щ ┼╕░┘└╗ ╟╪┤ч └п└·╖╬
		{
			pNpc->m_Target.id = m_uid + USER_BAND;
			pNpc->m_Target.x = m_curx;
			pNpc->m_Target.y = m_cury;
			pNpc->m_Target.failCount = 0;
			pNpc->Attack(m_pCom);

			return;
		}

		pUser = GetUser(m_uid);
        if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
		if(pNpc->m_tNpcType == NPCTYPE_GUILD_GUARD)	pNpc->ChangeTarget(pUser, m_pCom);

		// NPC ╣ц╛ю░к 
		nDefense = pNpc->GetDefense();

		nFinalDamage = 1;		// ├д┴¤ ╡╡▒╕╖╬ ─е╢з┤┬ damage░б 1└╠┤┘

		// ░°░▌├° │╗▒╕╡╡ ░и╝╥
		// │╗▒╕╡╡
		sNewDuration = (int)((double)nDefense/10 + 0.5);
		sOldDuration = m_UserItem[RIGHT_HAND].sDuration;

		iRandom = (int)((double)XdY(1, 1000) / 10 + 0.5);
		if(m_UserItem[RIGHT_HAND].sSid >= 0 && m_UserItem[RIGHT_HAND].sSid < g_arItemTable.GetSize())
		{
			if(iRandom < g_arItemTable[m_UserItem[RIGHT_HAND].sSid]->m_byErrorRate)
			{
				//iFireErrDec = 10 - GetBreakDec();
				iFireErrDec=4;
				if(iFireErrDec < 0) iFireErrDec = 0;

				//m_UserItem[RIGHT_HAND].sDuration -= iFireErrDec;
				SendDuration(RIGHT_HAND, iFireErrDec);
			}
		}

		// ░°░▌└╠ ╝║░° ╟▀└╕╣╟╖╬ └╠║е╞о╕ж ├г╛╞╝н ╜╟╟р ---------------------------------//
		int i, j;
		int event_zone_index = -1;
		int real_event = -1;
		EVENT*	pEvent = NULL;

		if( pNpc->m_sEvent >= MONSTER_ATTACK_EVENT_BAND && m_iDisplayType != 6 )	// ╕є╜║┼═░б ░б┴Ў▒╕ └╓┤┬ └╠║е╞о░б ░°░▌ └╠║е╞о└╬┴Ў ╚о└╬
		{
			real_event = pNpc->m_sEvent % MONSTER_ATTACK_EVENT_BAND;

			for(i = 0; i < g_event.GetSize(); i++)
			{
				if(g_event[i]->m_Zone == m_curz)
				{				
					event_zone_index = i;
					break;
				}
			}

			if(event_zone_index != -1)// return;			// ╟Ў└ч Zone ┐б┤┬ define ╡╚ └╠║е╞о░б ╛°┤┘.
			{
				pEvent = g_event[event_zone_index];

				if(pEvent)
				{
					if(real_event < pEvent->m_arEvent.GetSize() && real_event > 0)
					{
						if(pEvent->m_arEvent[real_event])
						{
							if(CheckEventLogic(pEvent->m_arEvent[real_event]))// return;	// ┴╢░╟░╦╗ч
							{
								for(j = 0; j < pEvent->m_arEvent[real_event]->m_arExec.GetSize(); j++)
								{
									if(RunNpcEvent(pNpc, pEvent->m_arEvent[real_event]->m_arExec[j]) == NULL) break;
								}
							}
						}
					}
				}
			}
		}

		// Calculate Target HP -------------------------------------------------------//
		short sOldNpcHP = pNpc->m_sHP;

		if(pNpc->SetDamage(nFinalDamage, m_uid + USER_BAND, m_pCom) == FALSE)
		{
			pNpc->SendExpToUserList(m_pCom); // ░ц╟ш─б ║╨╣ш!!
			int diffLevel = abs(m_sLevel - pNpc->m_byClassLevel); //╣╓╬я╡╚╝╢╧р▓ю30╝╢├╗╛н╤щ
			if(diffLevel <= o_yehuoini[0]->djxz || pNpc->m_sEvent != 0 )
			{
				if (m_isDoubleBAOLV  > 0 || g_sanBaoLv == TRUE || m_dwGuarDianTianShi > 0)
					pNpc->SendDead(m_pCom,1,TRUE);
				else
					pNpc->SendDead(m_pCom);
			}
			else
			{
				pNpc->SendDead(m_pCom,0);
				SendSystemMsg("─·║═╡▒╟░╣╓╬я╡╚╝╢╧р▓ю20,├╗╙╨╚╬║╬╦∙╡├", SYSTEM_ERROR,TO_ME);
			}
			/*if (m_dwShaGuai >= 3000 ) 
			{
	            SendSystemMsg("─·╜ё╚╒╔▒╣╓╩¤┴┐╥╤┬·,┤Є╣╓╬▐╖и╗ё╡├╚╬║╬╛н╤щ╓╡", SYSTEM_ERROR,TO_ME);
			}  */
			 //if(diffLevel <= o_yehuoini[0]->djxz  &&  pNpc->m_tNpcType == 0 )
			 //  {
				//   CString strMsg;
				//   if (m_dwShaGuai == 1000)
				//   {
				//	   SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 5 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	   m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 2000)
				//   {
				//	    SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	   
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 10 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	  m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 3000)
				//   {
				//	    SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	    
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 15 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 4000)
				//   {
				//	   SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	    
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 20 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 5000)
				//   {
				//	    SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	   
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 30 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }
			 //  }

			
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			if(m_tGuildHouseWar == GUILD_WARRING && pNpc->m_NpcVirtualState == NPC_WAIT)
			{
				CheckGuildHouseWarEnd();
			}
			else
			{
				int diffLevel = abs(m_sLevel - pNpc->m_byClassLevel);
				if(diffLevel < 40)
				{
					CheckMaxValue(m_dwXP, 1);		// ╕ў└╠ ┴╫└╗╢з╕╕ 1 ┴ї░б!	
					SendXP();
				}
			}
		}

		// ░°░▌ ░с░· └№╝█
		SendAttackSuccess(nTargetID, bIsCritical, pNpc->m_sHP, pNpc->m_sMaxHP);

		m_dwLastAttackTime = GetTickCount();
	}
}

void USER::SendEventMsg(char *pMsg)
{
	if( strlen( pMsg ) >= 128 ) return;

//	SendSystemMsg( pMsg, SYSTEM_ERROR, TO_ME);
//////////////╕─│╔╗╞╫╓╠с╨╤//////////////
	CString str;
	str.Format(pMsg);
    CBufferEx	TempBuf,TempBuf1;
	TempBuf.Add((byte)CHAT_RESULT);
	TempBuf.Add((byte)1);
	TempBuf.Add(WHISPER_CHAT);
	TempBuf.Add((int)0x00);
	TempBuf.Add("", _tcslen(""));
	TempBuf.Add(str.GetBuffer(0), str.GetLength());
	Send(TempBuf, TempBuf.GetLength());
}

/////////////////////////////////////////////////////////////////////////////
// NPC╦╡╗░
//
void USER::SendNpcToUserMsg(CNpc *pNpc,int Type,char* pMsg)
{
	if(strlen(pMsg) >= 128) return;
	if(!pNpc) return;
	CString strMsg =_T("");
	CBufferEx TempBuf;
	TempBuf.Add(CHAT_RESULT);
	TempBuf.Add(SUCCESS);
	TempBuf.Add((BYTE)Type);
	if(Type == 2)
	{
	TempBuf.Add((int)0x01);
	}else{
	TempBuf.Add(pNpc->m_sNid + NPC_BAND);
	}
	TempBuf.AddString(pNpc->m_strName);
	strMsg.Format(pMsg);
	TempBuf.AddString((LPTSTR)(LPCTSTR)strMsg);
	//SendScreen(TempBuf, TempBuf.GetLength());//╖в╦═╦∙╙╨╚╦
	Send(TempBuf, TempBuf.GetLength());//╖в╦═╫╘╝║
}

void USER::WriteItemLog(ItemList *pItem, int type, char *strEtc)
{
	if( !pItem ) return;
	if( !CheckItemLog( pItem ) ) return;

	ITEMLOG* pItemLog = new ITEMLOG;
	pItemLog->t = CTime::GetCurrentTime();
	pItemLog->m_sLogType = type;
	memset( pItemLog->m_strUserId, NULL, CHAR_NAME_LENGTH+1 );
	memcpy( pItemLog->m_strUserId, m_strUserID, CHAR_NAME_LENGTH );

	memset( pItemLog->m_strEtc, NULL, CHAR_NAME_LENGTH+1 );
	if( strEtc != NULL )	memcpy( pItemLog->m_strEtc, strEtc, CHAR_NAME_LENGTH );
	else					memcpy( pItemLog->m_strEtc, m_strUserID, CHAR_NAME_LENGTH );

	pItemLog->m_sLevel		= pItem->sLevel;
	pItemLog->m_sSid		= pItem->sSid;
	pItemLog->m_sDuration	= pItem->sDuration;
	pItemLog->m_sBullNum	= pItem->sBullNum;
	pItemLog->m_sCount		= pItem->sCount;

	for( int i = 0; i < MAGIC_NUM; i++ )
	{
		pItemLog->m_tMagic[i] = pItem->tMagic[i];
	}

	pItemLog->m_tIQ			= pItem->tIQ;

	pItemLog->m_iItemSerial	= pItem->iItemSerial;

	if( !UpdateMemItemLog( pItemLog ) )
	{
	}

	delete pItemLog;
}

BOOL USER::CheckItemLog(ItemList *pItem)
{
	if( !pItem ) return FALSE;

	if( pItem->iItemSerial == 0 ) pItem->iItemSerial = GenerateItemSerial( pItem );
	if( pItem->iItemSerial == 0 ) return FALSE;

	return TRUE;
}

BOOL USER::UpdateMemItemLog(ITEMLOG *pItemLog)
{
	if( !m_pSharedMemory )				return FALSE;
	if( !m_pSharedMemory->m_hMapping )	return FALSE;
	if( !m_pMD )						return FALSE;
	if( m_pMD->m_uid == -1 )			return FALSE;

	if(m_pMD->m_uid != m_uid || _stricmp(m_strUserID, m_pMD->m_strUserID) != 0) return FALSE;

	for( int i = 0; i < 100; i++ )
	{
		if( m_pMD->m_arItemLogData[i][0] != NULL ) continue;
		memcpy( m_pMD->m_arItemLogData[i], pItemLog, sizeof(ITEMLOG) );
		break;
	}

	return TRUE;
}

void USER::MakeItemLog(ItemList *pItem, int type, char *strEtc)
{
	if( !pItem ) return;
	//if( !CheckItemLog( pItem ) ) return;

	ITEMLOG* pItemLog = new ITEMLOG;
	pItemLog->t = CTime::GetCurrentTime();
	pItemLog->m_sLogType = type;
	memset( pItemLog->m_strUserId, NULL, CHAR_NAME_LENGTH+1 );
	memcpy( pItemLog->m_strUserId, m_strUserID, CHAR_NAME_LENGTH );

	memset( pItemLog->m_strEtc, NULL, CHAR_NAME_LENGTH+1 );
	if( strEtc != NULL )	memcpy( pItemLog->m_strEtc, strEtc, CHAR_NAME_LENGTH );
	else					memcpy( pItemLog->m_strEtc, m_strUserID, CHAR_NAME_LENGTH );

	pItemLog->m_sLevel		= pItem->sLevel;
	pItemLog->m_sSid		= pItem->sSid;
	pItemLog->m_sDuration	= pItem->sDuration;
	pItemLog->m_sBullNum	= pItem->sBullNum;
	pItemLog->m_sCount		= pItem->sCount;

	for( int i = 0; i < MAGIC_NUM; i++ )
	{
		pItemLog->m_tMagic[i] = pItem->tMagic[i];
	}
	pItemLog->m_tIQ			= pItem->tIQ;

	pItemLog->m_iItemSerial	= pItem->iItemSerial;

	pItemLog->m_dwResultDN	= 0;
	pItemLog->m_dwInOutDN	= 0;
	pItemLog->m_dwRelateDN	= 0;
	m_arItemLog.Add( pItemLog );
}


void USER::MakeMoneyLog(DWORD dwAddMoney, int type, char *strEtc, DWORD dwChangeMoney)
{
	if( dwAddMoney < 10000 ) return;

	ITEMLOG* pItemLog = new ITEMLOG;
	pItemLog->t = CTime::GetCurrentTime();
	pItemLog->m_sLogType = type;
	memset( pItemLog->m_strUserId, NULL, CHAR_NAME_LENGTH+1 );
	memcpy( pItemLog->m_strUserId, m_strUserID, CHAR_NAME_LENGTH );

	memset( pItemLog->m_strEtc, NULL, CHAR_NAME_LENGTH+1 );
	if( strEtc != NULL )	memcpy( pItemLog->m_strEtc, strEtc, CHAR_NAME_LENGTH );
	else					memcpy( pItemLog->m_strEtc, m_strUserID, CHAR_NAME_LENGTH );

	pItemLog->m_sLevel		= 0;
	pItemLog->m_sSid		= -1;
	pItemLog->m_sDuration	= 0;
	pItemLog->m_sBullNum	= 0;
	pItemLog->m_sCount		= 0;

	for( int i = 0; i < MAGIC_NUM; i++ )
	{
		pItemLog->m_tMagic[i] = 0;
	}

	pItemLog->m_tIQ			= 0;

	pItemLog->m_iItemSerial	= 0;

	pItemLog->m_dwResultDN	= m_dwDN;
	pItemLog->m_dwInOutDN	= dwAddMoney;
	pItemLog->m_dwRelateDN	= dwChangeMoney;

	m_arItemLog.Add( pItemLog );
}

void USER::FlushItemLog(BOOL bSave)
{
	if( !m_arItemLog.GetSize() ) return;

	int i = 0;

	if( bSave )
	{
		for( i = 0; i < m_arItemLog.GetSize(); i++ )
		{
			if( m_arItemLog[i] )
			{
				UpdateMemItemLog( m_arItemLog[i] );
			}
		}
		m_arItemLog.RemoveAll();
	}
	else
	{
		for( i = 0; i < m_arItemLog.GetSize(); i++ )
		{
			if( m_arItemLog[i] )
			{
				delete m_arItemLog[i];
			}
		}
		m_arItemLog.RemoveAll();
	}
}

int USER::GetMinusExpRatioByCityRank(int enemyrank)
{
	if( enemyrank == -1 ) return 10;

	int otherrank = enemyrank;
	int merank = m_sCityRank + CITY_RANK_INTERVAL;

	if( merank < 0 || merank > 12 ) return 10;
	if( otherrank < 0 || otherrank > 12 ) return 10;

	//			 ╝╝  ░б
	//			 │к  │▓
	int exptable[13][13] = 
	{//                │к╗█ <-  c  -> ┴┴└║
		{  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10	},
		{  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10	},
		{  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10	},
		{  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10	},// │к╗█
		{  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10	},//  |
		{	0,  2,	3,	4,	6, 10, 10, 10, 10, 10, 10, 10	},//  c
		{	0,  2,	3,	4,	6, 10, 10, 10, 10, 10, 10, 10	},//  |
		{	0,  2,	3,	4,	6, 10, 10, 10, 10, 10, 10, 10	},// ┴┴└║
		{	0,  2,	3,	4,	6, 10, 10, 10, 10, 10, 10, 10	},
		{	0,	1,	2,	3,	5, 10, 10, 10, 10, 10, 10, 10	},
		{	0,	1,	2,	3,	5, 10, 10, 10, 10, 10, 10, 10	},
	};

	return exptable[merank][otherrank];
}

int USER::GetDropItemRankByAttackerCityRank(int enemyrank)
{
	if( enemyrank == -1 )
	{
		return m_sCityRank + CITY_RANK_INTERVAL;	// ╗є┤ы╕ж ▒╕╟╥ ╝Ў ╛°└╗ ░ц┐ь┐г ┐°╖б ╖й┼й╕ж ╕о┼╧╟╤┤┘
	}

	int otherrank = enemyrank;
	int merank = m_sCityRank + CITY_RANK_INTERVAL;

	if( merank < COMMOM_RANK )	// │╗ ╝║╟т└╠ ─╔└╬ └╠╟╧╢є╕щ ┴╫└╬ │╤└╟ ╖й┼й┐═ ╗є░№╛°└╠ ┐°╖б ╖й┼й╕ж ╕о┼╧
	{
		return merank;
	}

	if( otherrank == CHAONISE_RANK )	// │п ┴╫└╬ │╤└╠ ─л┐└┤╧╜║╢є╕щ │к┤┬ ╛╞└╠┼█└╗ ╛╚╢│╛ю╢▀╕░┤┘
	{
		return SAINT_RANK + 1;			// ╝╝└╬╞о╡╡ ╛╞┼█└╗ ╢│▒╕░╘ ╡╟╛ю └╓└╕╣╟╖╬ ╝╝└╠╞о║╕┤┘ │Ї└║ ╡ю▒▐└╗ ╝┬╞├╟╤┤┘
	}

	if( otherrank >= DEATH_RANK && otherrank < COMMOM_RANK )	// ┐й▒т▒ю┴Ў ┐╘└╕╕щ │к┤┬ ╜├╞╝┴Ё └╠╗є└╠┤┘. ▒╫╖▒╡е │п ┴╫└╬│╤└╠
	{															// ╡е╜║ └╠╗є, ─╔└╬ └╠╟╧└╠╕щ ╛╞┼█└╗ ╢│╛ю╢▀╕▒ ╚о╖№└║ ╝╝└╬╞о╖╬ ░э┴д╡╚┤┘
		return SAINT_RANK;
	}

	return merank;		// │к┤┬ ╜├╞╝┴Ё └╠╗є└╠░э, │п ┴╫└╬ │╤╡╡ ╜├╞╝┴Ё └╠╗є└╠┤┘. ▒╫╖╕┤┘╕щ ┐°╖б ╖й┼й┤ы╖╬ ╢│╛ю╢▀╕░┤┘
}

///////////////////////////////////////////////////////////////////////////////////////
//	Memory DB ┐б └╓┤┬ │╗┐ы└╗ ░╘└╙║п╝Ў╖╬ ┐┼▒ф┤┘.
//
BOOL USER::Mem2Game(CMemUser *pMD)
{
	if(IsBadReadPtr((CONST VOID*)pMD, sizeof(CMemUser))) return FALSE;

	int i;

	// Copy User Data
	::ZeroMemory( m_strUserID, CHAR_NAME_LENGTH + 1 );
	::CopyMemory(m_strUserID, pMD->m_strUserID, strlen(pMD->m_strUserID));	// User ID
	
	m_sSTR = pMD->m_sSTR;				// ╚√
	m_sCON = pMD->m_sCON;				// ░╟░н
	m_sDEX = pMD->m_sDEX;				// ╣╬├╕
	m_sVOL = pMD->m_sVOL;				// └╟┴Ў
	m_sWIS = pMD->m_sWIS;				// ┴Ў╟¤

	m_sTempSTR = pMD->m_sTempSTR;		// ├╩▒т ╖╤░к╕ж ╣▐╛╞┐┬┤┘.(╖╣║з┤┘┐ю└╧╢з ╛╕)
	m_sTempCON = pMD->m_sTempCON;
	m_sTempDEX = pMD->m_sTempDEX;
	m_sTempVOL = pMD->m_sTempVOL;
	m_sTempWIS = pMD->m_sTempWIS;

	m_iSkin = pMD->m_iSkin;			// ╟╟║╬╗Ў
	m_iHair = pMD->m_iHair;			// ╕╙╕о╗Ў

	m_curz = pMD->m_curz;				// Zone
	m_curx = pMD->m_curx;				// └з─б x
	m_cury = pMD->m_cury;				// └з─б y

	m_sGender = pMD->m_sGender;		// ╝║║░

	::CopyMemory(m_strFace, pMD->m_strFace, 10);	// ╕╙╕о╕Ё╛ч

	m_dwBuddy = pMD->m_dwBuddy;			// Buddy
	m_dwGuild = pMD->m_dwGuild;			// Guild

	m_tFortressWar		= GUILD_WAR_AFFTER;
	m_tGuildWar			= GUILD_WAR_AFFTER;
	m_tGuildHouseWar	= GUILD_WAR_AFFTER;

	if(m_dwGuild >= 0)			// ▒ц╡х┐б ┤ы╟╤ ╡е└╠┼═╕ж ├╩▒т╚н╟╤┤┘.
	{
		SetGuildVariable();
	}

	CheckGuildWar();			// ╕╕╛р ░°╝║└№ ┴▀└╠╢є╕щ ╕Ё╡ч └п└·┐б░╘ ╛╦╕░┤┘.(┴Ў▒▌└║ ░°╝║└№╕╕)

	m_bFieldWarApply = FALSE;
	m_FieldWarGMUid = 0;		// ╟╩╡х└№└╧╢з ╗є┤ы╣ц ▒ц╕╢ uid
	m_dwFieldWar = 0;			// ╟╩╡х└№ ╜├└█└╠╕щ ╗є┤ы╞э ▒ц╡х ╣°╚г░б ╡щ╛ю┐┬┤┘.

	m_sLevel	= pMD->m_sLevel;		// ╖╣║з

	if(pMD->m_dwExp > GetNextLevel(m_sLevel)) pMD->m_dwExp = GetNextLevel(m_sLevel);	// ╛╚└№ ─┌╡х.
	m_dwExp = pMD->m_dwExp;		// Experience

	m_sPA = pMD->m_sPA;			// PA Point

	m_sSkillPoint = pMD->m_sSkillPoint;	// Skill Point

	m_dwXP = pMD->m_dwXP;		// X Point
	
	m_byClass	= pMD->m_byClass;		// ┼м╖б╜║

	m_sMaxHP	= g_sHPConst[m_byClass] * m_sCON + g_sHPLV[m_byClass] * (m_sLevel - 1) + g_sHPAdd[m_byClass];
	m_sMaxPP	= g_sPPConst[m_byClass] * m_sWIS + g_sPPLV[m_byClass] * (m_sLevel - 1) + g_sPPAdd[m_byClass];
	m_sMaxSP	= g_sSPConst[m_byClass] * m_sCON + g_sSPLV[m_byClass] * (m_sLevel - 1) + g_sSPAdd[m_byClass];

	m_bLive		= pMD->m_bLive;	// ┴╫╛·┤┬┴Ў, ╗ь╛╥┤┬┴Ў?

	m_sHP		= pMD->m_sHP;	// ╟Ў└ч HP
	m_sPP		= pMD->m_sPP;	// ╟Ў└ч PP
	m_sSP		= pMD->m_sSP;	// ╟Ў└ч SP

	if(m_sHP <= 0 || m_bLive == USER_DEAD) 
	{
		m_bLive = USER_DEAD;
		SetZoneIndex(m_curz);
		IsDeadUser();		// ┴╫└║ └п└·╕щ ╕╢└╗╖╬...

		m_bLive = USER_LIVE;
		m_sHP = m_sMaxHP;	
	}
	else SetZoneIndex(m_curz);

	if(m_sHP > m_sMaxHP) m_sHP = m_sMaxHP;
	if(m_sPP > m_sMaxPP) m_sPP = m_sMaxPP;
	if(m_sSP > m_sMaxSP) m_sSP = m_sMaxSP;

	if(pMD->m_dwDN < 0) pMD->m_dwDN = 0;
	m_dwDN		= pMD->m_dwDN;			// ╝╥┴Ў▒▌

	m_iCityValue = pMD->m_iCityValue;	// ╜├╣╬ ┤й└√░к
	m_sKillCount = pMD->m_sKillCount;	// PK┤й└√ ╚╜╝Ў

	for(i = 0; i < 13; i++)
	{
		if(m_iCityValue < g_CityRankValue[i])// ┤й└√─б░к└╠ ▒т┴╪ ╝│┴д░к║╕┤┘ └█└║┴Ў ╞╟┤▄╟╤┤┘.
		{
			if(i < 6) { m_sCityRank = i - CITY_RANK_INTERVAL; }
			else { m_sCityRank = i -1 - CITY_RANK_INTERVAL; }
			break;
		}
	}

	if(m_iCityValue >= g_CityRankValue[12]) m_sCityRank = 7;

	::CopyMemory(m_strSkill, pMD->m_strSkill, sizeof(m_strSkill));	// ╜║┼│
	::CopyMemory(m_strItem, pMD->m_strItem, sizeof(m_strItem));		// ╛╞└╠┼█
	::CopyMemory(m_strPsi, pMD->m_strPsi, sizeof(m_strPsi));		// ╗ч└╠┐└┤╨

	StrToUserSkill((LPTSTR)pMD->m_strSkill);
	StrToUserItem((LPTSTR)pMD->m_strItem);
	StrToUserPsi((LPTSTR)pMD->m_strPsi);
	StrToHaveEventData((LPTSTR)pMD->m_strHaveEvent);
	StrToUserTel((LPSTR)pMD->m_strTel);

	m_dwExpNext	= GetNextLevel(m_sLevel);						// ┤┘└╜╖╣║з└╠ ╡╟▒т└з╟╤ ░ц╟ш─б

	for(i = 0; i < TOTAL_SKILL_NUM; i++)						// ╜║┼│ ╝║░°└▓ 
	{
		GetSkillInfo(i, m_UserSkillInfo[i]);
	}
//	m_UserChangeSkillInfo;										// └№┴ў└╠ └╓└╗░ц┐ь ?(5)╜║┼│╕ж └·└х

	for(i = 0; i < CLASS_NUM; i++)
	{
		m_sChangeClass[i] = pMD->m_sChangeClass[i];
	}

	// ╗є┼┬└╠╗є ┴д║╕
	m_tAbnormalKind = pMD->m_tAbnormalKind;	
	m_dwAbnormalTime = pMD->m_dwAbnormalTime;

//	dwMaxDN = m_sLevel * MAX_LEVEL_DN;									// ╝╥┴Ў▒▌└╠ └╠╗є╟╤┴Ў ├╝┼й
//	if( m_dwDN > dwMaxDN ) m_dwDN = dwMaxDN; 
	m_tDir = myrand(0, 7);												// ╟Ў└ч ║╕░э└╓┤┬ ╣ц╟т└╗ ╖е┤¤└╕╖╬ ├╩▒т╚н╟╤┤┘.
		
	m_tIsOP = pMD->m_tIsOP;
	if(pMD->m_tIsOP == 1) AddAbnormalInfo(OPERATION_MODE);				// ▒т║╗└╠ ┼ї╕э╕Ё╡х└╙...

	CheckInvalidGuildZone();

	m_dwSaintTime = pMD->m_dwSaintTime;

	m_dwHiExpTime		= pMD->m_dwHiExpTime;
	m_dwHtExpTime		= pMD->m_dwHtExpTime;
	m_dwMagicFindTime	= pMD->m_dwMagicFindTime;
	m_dwMagicFtTime		= pMD->m_dwMagicFtTime;
	m_dwNoChatTime		= pMD->m_dwNoChatTime;
	m_dwZF		= pMD->m_dwZF;
	m_dwXL		= pMD->m_dwXL;
    m_dwCloseTime		= pMD->m_dwCloseTime;
	m_dwAutoMoney		= pMD->m_dwAutoMoney;
	m_dwPD      		= pMD->m_dwPD;
	m_dwLingQu  		= pMD->m_dwLingQu;
	m_dwShaGuai  		= pMD->m_dwShaGuai;
	m_dwGuarDianTianShi = pMD->m_dwGuarDianTianShi;//╩╪╗д╠ь╩╣
	m_dwShopPingDN		= pMD->m_dwShopPingDN;
	m_dwVIPTime		    = pMD->m_dwVIPTime;
	m_dwZaiXianTime		= pMD->m_dwZaiXianTime;
	m_dwBFindTime		= pMD->m_dwBFindTime;
	m_dwHXTime		    = pMD->m_dwHXTime;
	m_dwSGTime		    = pMD->m_dwSGTime;
	m_dwXYTime		    = pMD->m_dwXYTime;
	m_dwZFTime		    = pMD->m_dwZFTime;
	
	m_dwHasteTime = m_dwShieldTime = m_dwDexUpTime = m_dwMaxHPUpTime = 0;					// Psi One
	m_dwFastRunTime = m_dwMindShockTime = m_dwBigShieldTime = m_dwPsiShieldTime = m_dwPiercingShieldTime = 0;	// Psi One

	m_dwAdamantineTime	= m_dwMightyWeaponTime = m_dwBerserkerTime = 0;						// Psi Two

	m_dwMindGuardTime = 0;																	// Psi Three

	if(pMD->m_tPsiOneKind == PSIONIC_HASTE)				m_dwHasteTime		= pMD->m_dwPsiOneTime;
	if(pMD->m_tPsiOneKind == PSIONIC_SHIELD)			m_dwShieldTime		= pMD->m_dwPsiOneTime;
	if(pMD->m_tPsiOneKind == PSIONIC_DEXUP)				m_dwDexUpTime		= pMD->m_dwPsiOneTime;
	if(pMD->m_tPsiOneKind == PSIONIC_HPUP)				m_dwMaxHPUpTime		= pMD->m_dwPsiOneTime;
	if(pMD->m_tPsiOneKind == PSIONIC_FAST_RUN)			m_dwFastRunTime		= pMD->m_dwPsiOneTime;
	if(pMD->m_tPsiOneKind == PSIONIC_MIND_SHOCK)		m_dwMindShockTime	= pMD->m_dwPsiOneTime;
	if(pMD->m_tPsiOneKind == PSIONIC_PSI_SHIELD)		m_dwPsiShieldTime	= pMD->m_dwPsiOneTime;
    if(pMD->m_tPsiOneKind == 30 )                       m_dwBigShieldTime   = pMD->m_dwPsiOneTime;
	if(pMD->m_tPsiOneKind == PSIONIC_PIERCING_SHIELD)	m_dwPiercingShieldTime = pMD->m_dwPsiOneTime;

	if(pMD->m_tPsiTwoKind == PSIONIC_ADAMANTINE)		m_dwAdamantineTime		= pMD->m_dwPsiTwoTime;
	if(pMD->m_tPsiTwoKind == PSIONIC_MIGHTYWEAPON)		m_dwMightyWeaponTime	= pMD->m_dwPsiTwoTime;
	if(pMD->m_tPsiTwoKind == PSIONIC_BERSERKER)			m_dwBerserkerTime		= pMD->m_dwPsiTwoTime;
	
	if(pMD->m_tPsiThreeKind == PSIONIC_MIND_GUARD)		m_dwMindGuardTime		= pMD->m_dwPsiThreeTime;
	//m_dwBSTime=pMD->m_dwBSTime;
	m_dwDNMoney = pMD->m_dwDNMoney;
	m_dwShTsTime = pMD->m_dwShTsTime;
	m_isDoubleExp = pMD->m_isDoubleExp;
	m_isDoubleBAOLV = pMD->m_isDoubleBAOLV;
	
    DWORD dwCurrTime = GetTickCount();
	m_dwLastSpeedTime = dwCurrTime;
	m_dwLastMoveAndRun = dwCurrTime;
	m_dwLastAttackTime = dwCurrTime;
	m_dwLastPsiAttack = dwCurrTime;
	m_dwCastDelay = 0;
	m_dwLastTimeCount = dwCurrTime;
	m_dwLastAbnormalTime = dwCurrTime;
	m_dwLastHPTime = dwCurrTime;

	m_dwLastHasteTime = dwCurrTime;
	m_dwLastShieldTime = dwCurrTime;
	m_dwLastDexUpTime = dwCurrTime;
	m_dwLastMaxHPUpTime = dwCurrTime;
	m_dwLastWISUpTime = dwCurrTime;
	m_dwLastFANTAnTime = dwCurrTime;
	m_dwLastFENGLiTime = dwCurrTime;
	m_dwLastYINENgTime = dwCurrTime;
	m_dwLastDUOCHONgTime = dwCurrTime;

	m_dwLastHiExpTime		= dwCurrTime;
	m_dwLastHtExpTime		= dwCurrTime;
	m_dwLastMagicFindTime	= dwCurrTime;
	m_dwLastMagicFtTime	    = dwCurrTime;
	m_dwLastNoChatTime		= dwCurrTime;
	m_dwLastZF		= dwCurrTime;
	m_dwLastXL		= dwCurrTime;
    m_dwLastCloseTime		= dwCurrTime;
	m_dwLastAutoMoney		= dwCurrTime;
	m_dwLastPD		        = dwCurrTime;
	m_dwLastLingQu		= dwCurrTime;
	m_dwLastShaGuai		= dwCurrTime;
	m_dwLastGuarDianTianShi = dwCurrTime;
	m_dwLastVIPTime			= dwCurrTime;
	m_dwLastBFindTime		= dwCurrTime;
	m_dwLastHXTime		    = dwCurrTime;
	m_dwLastSGTime		    = dwCurrTime;
	m_dwLastXYTime		    = dwCurrTime;
	m_dwLastZFTime		    = dwCurrTime;
	
	m_dwLastAdamantineTime	= dwCurrTime;
	m_dwLastMightyWeaponTime= dwCurrTime;
	m_dwBerserkerTime		= dwCurrTime;

	m_iMyServer = pMD->m_iMyServer;

	GetRecoverySpeed();													// └п└· ┼м╖б╜║└╟ ╚╕║╣╝╙╡╡╕ж ░с┴д╟╤┤┘.

	// User Bank --------------------------------
	StrToUserBankItem((LPTSTR)pMD->m_UB.m_UserBankItem);
	m_dwBankDN = pMD->m_UB.m_dwBankDN;

	// Account Bank -----------------------------
	StrToAccountBankItem((LPTSTR)pMD->m_AB.m_AccountBankItem);
	m_dwAccountBankDN = pMD->m_AB.m_dwBankDN;

	return TRUE;
}

int USER::CheckMemoryAccountBankDB(char *strAccount)
{
	CSharedMemory*	pSharedMemory;
	CMemUser*		pMD;
	int				mem_index = -1;
	int				nCount = 0;
	CString			str;

	SYSTEMTIME time;
	GetLocalTime(&time);

	for( int i = 0; i < MAX_USER; i++ )
	{
		pSharedMemory = NULL;
		pMD = NULL;

		pSharedMemory = g_arSharedMemory[i];
		if(!pSharedMemory) continue;

		pMD = (CMemUser*)pSharedMemory->m_lpData;
		if(!pMD) continue;

		if(pMD->m_uid == -1 || pMD->m_sSTR == 0) continue;		// ┴д╕о░б ╡╚ └п└·┤┬ ┤┘╜├ └·└х╟╧┴Ў ╛╩┤┬┤┘.
		if(pMD->m_strUserID[0] == 0) continue;

		if( _stricmp( pMD->m_strAccount, strAccount ) == 0 )
		{
			nCount++;
			// ╞─└╧┐б ╛┤┤┘
			if(nCount >= 1)
			{
				GetLocalTime(&time);
				str.Format("(%04d-%02d-%02d %02d:%02d:%02d)\tuid-%d str-%d ubuid-%d count-%d id-%s (AccountBank)\r\n",
					time.wYear, time.wMonth, time.wDay, time.wHour, time.wMinute, time.wSecond,
					pMD->m_uid, pMD->m_sSTR, pMD->m_AB.m_uid, nCount, pMD->m_strAccount );
				
				// IKING 2002.1.
				EnterCriticalSection( &m_CS_FileWrite );
				g_fpBackServer.Write( str, str.GetLength() );
				LeaveCriticalSection( &m_CS_FileWrite );
			}

//			if( !Mem2GameAccountBank(pMD) )			// Shared Memory -> Game ║п╝Ў╖╬
//			{
//				nCount--;
//			}

			UpdateMem2DB(pMD);		// ╛╚└№└╗ └з╟╪╝н DB┐б╡╡ └·└х└╗
			UpdateBankMem2DB(pMD);
			UpdateAccountBankMem2DB(pMD);

			pMD->m_uid = -1;
			pMD->m_sSTR = 0;			
			pMD->m_UB.m_uid = -1;
			pMD->m_AB.m_uid = -1;
			pMD->m_dwSaveTime = 0;
			::ZeroMemory(pMD->m_strUserID, sizeof(pMD->m_strUserID));
			::ZeroMemory(pMD->m_strAccount, sizeof(pMD->m_strAccount));
		}
	}

	return nCount;
}

BOOL USER::Mem2GameAccountBank(CMemUser *pMD)
{
	if(IsBadReadPtr((CONST VOID*)pMD, sizeof(CMemUser))) return FALSE;

	// Account Bank -----------------------------
	StrToAccountBankItem((LPTSTR)pMD->m_AB.m_AccountBankItem);
	m_dwAccountBankDN = pMD->m_AB.m_dwBankDN;

	return TRUE;
}

BOOL USER::GiveMagicItem(int sid, int iCount)
{
	int tMagic[12]={36,81,141,33,76,132,97,102,100,130,79,139};
	if( sid < 0 || sid >= g_arItemTable.GetSize() ) return FALSE;
	if( iCount <= 0 ) return FALSE;

	ItemList GiveItem;
	ReSetItemSlot( &GiveItem );
	if(sid==809||sid==811||sid==812||sid==810){ //╘┬╔ё╠╫╫░ 50╤к10╖└ ╗╪▒▄┬╩6ге 5╖└
		int iRandom1 =(myrand(0,15)%12);
		int iRandom2 =(myrand(0,15)%12);
		CWordArray		arEmptySlot, arSameSlot;
		int iSlot = GetEmptySlot( INVENTORY_SLOT );
		
		if( iSlot < 0 ) return FALSE;

		ReSetItemSlot( &m_UserItem[iSlot]);

		m_UserItem[iSlot].sLevel = g_arItemTable[sid]->m_byRLevel;
		m_UserItem[iSlot].sSid = sid;
		m_UserItem[iSlot].sCount = iCount;
		m_UserItem[iSlot].sDuration = g_arItemTable[sid]->m_sDuration;
		m_UserItem[iSlot].sBullNum = 3;
		m_UserItem[iSlot].tMagic[0] = tMagic[iRandom1];
		m_UserItem[iSlot].tMagic[1] = tMagic[iRandom2];
		m_UserItem[iSlot].tIQ = MAGIC_ITEM;
		m_UserItem[iSlot].iItemSerial = 0;

		MakeItemLog( &m_UserItem[iSlot], ITEMLOG_EVENT_GIVE );

		arEmptySlot.Add(iSlot); 
		UpdateInvenSlot(&arEmptySlot, &arSameSlot);
		return true;
	}
	if( g_arItemTable[sid]->m_bySpecial == 0 ) return FALSE;		// ║╣╗ч╟╪┴┘ ╕┼┴ў ╝╙╝║└╠ ╛°┤┘

	GiveItem.sLevel			= g_arItemTable[sid]->m_byRLevel;
	GiveItem.sSid			= sid;
	GiveItem.sCount			= iCount;
	GiveItem.sDuration		= g_arItemTable[sid]->m_sDuration;
	GiveItem.sBullNum		= g_arItemTable[sid]->m_sBullNum;
	GiveItem.tMagic[0]		= g_arItemTable[sid]->m_bySpecial;
	GiveItem.tIQ			= MAGIC_ITEM;

	CWordArray		arEmptySlot, arSameSlot;

	int iSlot = GetSameItem( GiveItem, INVENTORY_SLOT);

	if(iSlot != -1)	
	{ 
		if(iCount != 0)
		{
			CheckMaxValue((short &)m_UserItem[iSlot].sCount, (short)iCount); 
			arSameSlot.Add(iSlot); 
		}
//		return FALSE;		// ╕┼┴ў ╛╞└╠┼█└║ ░у─б▒т░б ╛╚╡╟┤┬ ░═└╕╖╬ ╞╟┤▄╟╤┤┘
	}
	else			
	{
		iSlot = GetEmptySlot( INVENTORY_SLOT );

		if( iSlot < 0 ) return FALSE;

		ReSetItemSlot( &m_UserItem[iSlot] );

		m_UserItem[iSlot].sLevel = g_arItemTable[sid]->m_byRLevel;
		m_UserItem[iSlot].sSid = sid;
		m_UserItem[iSlot].sCount = iCount;
		m_UserItem[iSlot].sDuration = g_arItemTable[sid]->m_sDuration;
		m_UserItem[iSlot].sBullNum = g_arItemTable[sid]->m_sBullNum;
		m_UserItem[iSlot].tMagic[0] = g_arItemTable[sid]->m_bySpecial;
		m_UserItem[iSlot].tIQ = MAGIC_ITEM;
		m_UserItem[iSlot].iItemSerial = 0;

		MakeItemLog( &m_UserItem[iSlot], ITEMLOG_EVENT_GIVE );

		arEmptySlot.Add(iSlot); 
	}			

	UpdateInvenSlot(&arEmptySlot, &arSameSlot);

//	GetMagicItemSetting();		// ┤▄┴Ў ╕┼┴ў ╛╞└╠┼█└╗ ┴╓┤┬ ░═ ╕╕└╕╖╬┤┬ ╕┼┴ў ┐╔╝╟└╠ ╛╚╣┘▓я┤┘ : jjs07
/*
	int iSlot = GetEmptySlot(INVENTORY_SLOT);

	if(iSlot < 0) return FALSE;

	ReSetItemSlot(&m_UserItem[iSlot]);

	m_UserItem[iSlot].sLevel = g_arItemTable[sid]->m_byRLevel;
	m_UserItem[iSlot].sSid = sid;
	m_UserItem[iSlot].sCount = iCount;
	m_UserItem[iSlot].sDuration = g_arItemTable[sid]->m_sDuration;
	m_UserItem[iSlot].sBullNum = g_arItemTable[sid]->m_sBullNum;
	m_UserItem[iSlot].tIQ = NORMAL_ITEM;
*/

	FlushItemLog( TRUE );

	return TRUE;
}

void USER::EventItemSerialWindowOpen()
{
	CBufferEx TempBuf;
	
	TempBuf.Add(PRE_REG_USER_EVENT_REQ);

	Send(TempBuf, TempBuf.GetLength());
}

void USER::RecvEventItemSerial(TCHAR *pBuf)
{
	if ( pBuf == NULL ) return;

	int j;
	int iSlot = 0;
	int iRet = 0;
	int index = 0;
	int iEventItemSid = 0, iEvent = 0;

	TCHAR strSerial[30];	::ZeroMemory(strSerial,	sizeof(strSerial));
	
	iSlot = GetEmptySlot(INVENTORY_SLOT);

	CString strMsg;

	if(iSlot <= -1)
	{
		strMsg.Format( IDS_USER_NEED_EMPTY_SLOT_CHANGE );
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;		// └╬║е└╠ ║ё╛ю └╓┤┬┴Ў ╚о└╬╟╤┤┘.
	}

	if(!GetVarString(sizeof(strSerial), strSerial, pBuf, index)) return;

	iRet = UpdateEventItemSerial(strSerial, iEventItemSid);

	if(iRet < 0)
	{
		// DB┐═ ┐м░с└╠ ┴┴┴Ў ╛╩╜└┤╧┤┘.
		strMsg.Format( IDS_USER_UNSTABLE_CONNECTION );
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;
	}
	else if(iRet == 1)
	{
		if(iEventItemSid == 0)
		{
			strMsg.Format( IDS_USER_EVENT_COMMON_CURE );

			m_UserItem[iSlot].tType = TYPE_ITEM;
			m_UserItem[iSlot].sLevel = g_arItemTable[NPC_EVENT_B_ITEM]->m_byRLevel;
			m_UserItem[iSlot].sSid = g_arItemTable[NPC_EVENT_B_ITEM]->m_sSid;
			m_UserItem[iSlot].sCount = 1000;
			m_UserItem[iSlot].sDuration = g_arItemTable[NPC_EVENT_B_ITEM]->m_sDuration;
			m_UserItem[iSlot].sBullNum = g_arItemTable[NPC_EVENT_B_ITEM]->m_sBullNum;
			m_UserItem[iSlot].tIQ = 0;
			m_UserItem[iSlot].iItemSerial = 0;

			for(j = 0; j < MAGIC_NUM; j++)
			{
				m_UserItem[iSlot].tMagic[j] = 0;
			}

			CBufferEx TempBuf;

			TempBuf.Add(ITEM_LOAD_RESULT);
			TempBuf.Add(SUCCESS);
			TempBuf.Add((BYTE)0x01);

			TempBuf.Add((BYTE)iSlot);
			TempBuf.Add(m_UserItem[iSlot].sLevel);
			TempBuf.Add(m_UserItem[iSlot].sSid);
			TempBuf.Add(m_UserItem[iSlot].sDuration);
			TempBuf.Add(m_UserItem[iSlot].sBullNum);
			TempBuf.Add(m_UserItem[iSlot].sCount);
			for(j = 0; j < MAGIC_NUM; j++) TempBuf.Add((BYTE)m_UserItem[iSlot].tMagic[j]);

			TempBuf.Add((BYTE)m_UserItem[iSlot].tIQ);

			Send(TempBuf, TempBuf.GetLength());
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);

			m_iCurWeight += g_arItemTable[NPC_EVENT_B_ITEM]->m_byWeight * 1000;
			GetRecoverySpeed();			// ╛╞└╠┼█ ╣л░╘┐б ║п╡┐└╠ ╗¤▒т╕щ ╚╕║╣╝╙╡╡ ║п╚п
			return;
		}
		else if(iEventItemSid > 100 && iEventItemSid <= 255)
		{
			switch(iEventItemSid)
			{
			case EVENT_ATT7_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_ATT7_CHANGE );
				break;
			case EVENT_DEF7_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_DEF7_CHANGE );
				break;
			case EVENT_ATT6_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_ATT6_CHANGE );
				break;
			case EVENT_DEF6_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_DEF6_CHANGE );
				break;
			case EVENT_ATT_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_ATT5_CHANGE );
				break;
			case EVENT_DEF_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_DEF5_CHANGE );
				break;
			case EVENT_INIT_STAT_ITEM:
				iEvent = NPC_EVENT_INIT_STAT; 
				strMsg.Format( IDS_USER_EVENT_RESET_STAT );
				break;
			default:
				return;
				break;
			}

			m_UserItem[iSlot].tType = TYPE_ITEM;
			m_UserItem[iSlot].sLevel = g_arItemTable[iEvent]->m_byRLevel;
			m_UserItem[iSlot].sSid = g_arItemTable[iEvent]->m_sSid;
			m_UserItem[iSlot].sCount = 1;
			m_UserItem[iSlot].sDuration = g_arItemTable[iEvent]->m_sDuration;
			m_UserItem[iSlot].sBullNum = g_arItemTable[iEvent]->m_sBullNum;
			m_UserItem[iSlot].tIQ = (BYTE)iEventItemSid;

			for(j = 0; j < MAGIC_NUM; j++)
			{
				m_UserItem[iSlot].tMagic[j] = 0;
			}

			CBufferEx TempBuf;

			TempBuf.Add(ITEM_LOAD_RESULT);
			TempBuf.Add(SUCCESS);
			TempBuf.Add((BYTE)0x01);

			TempBuf.Add((BYTE)iSlot);
			TempBuf.Add(m_UserItem[iSlot].sLevel);
			TempBuf.Add(m_UserItem[iSlot].sSid);
			TempBuf.Add(m_UserItem[iSlot].sDuration);
			TempBuf.Add(m_UserItem[iSlot].sBullNum);
			TempBuf.Add(m_UserItem[iSlot].sCount);
			for(j = 0; j < MAGIC_NUM; j++) TempBuf.Add((BYTE)m_UserItem[iSlot].tMagic[j]);

			TempBuf.Add((BYTE)m_UserItem[iSlot].tIQ);

			Send(TempBuf, TempBuf.GetLength());
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);

			m_iCurWeight += g_arItemTable[iEvent]->m_byWeight;
			GetRecoverySpeed();			// ╛╞└╠┼█ ╣л░╘┐б ║п╡┐└╠ ╗¤▒т╕щ ╚╕║╣╝╙╡╡ ║п╚п

			return;
		}
	}
	else	// ╜├╕о╛є└╠ ╞▓╕о░┼│к ╡ю╖╧┐б ╛°┤┬ └п└·░┼│к DB┐б ║п╡┐└╠ ╛°└╗ ░ц┐ь
	{
		if(iRet == 10)
		{
			strMsg.Format( IDS_USER_CHECK_INPUT_NUMBER );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
		else if(iRet == 11)
		{
			strMsg.Format( IDS_USER_NOT_SUBSCRIPTION );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
		else if(iRet == 12)
		{
			strMsg.Format( IDS_USER_ONE_MORE_APPLY );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
		else if(iRet == 13)
		{
			strMsg.Format( IDS_USER_ALREADY_LOTTO );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
		else if(iRet == 14)
		{
			strMsg.Format( IDS_USER_CANCEL_LOTTO );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
	}
}

int USER::UpdateEventItemSerial(TCHAR *pstrSerial, int &item)
{
	short sItemType = 0;

	SQLHSTMT	hstmt = NULL;
	SQLRETURN	retcode;
	TCHAR		szSQL[8000];	::ZeroMemory(szSQL, sizeof(szSQL));

	SWORD	sParam1 = 0;
	SDWORD	cbParam1 = SQL_NTS, cbParam2 = SQL_NTS;

	memset(szSQL, 0x00, 1024);
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_PRE_USER_EVENT (\'%s\', \'%s\', \'%s\',\'%s\',?,?)}"), 
		m_strAccount, pstrSerial, g_arServerIPAddr, m_strUserID, sParam1, sItemType);

	hstmt = NULL;
	retcode = 0;

	int db_index = -1;
	CDatabase* pDB = g_DBSession[m_iModSid].GetDB( db_index );
	if( !pDB ) 
	{
		return -1;
	}
	
	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode!=SQL_SUCCESS)
	{
		return -1;
	}
	
	if( retcode != SQL_SUCCESS )
	{
		SQLFreeHandle((SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		return -1;
	}

	retcode = SQLBindParameter(hstmt, 1,SQL_PARAM_OUTPUT, SQL_C_SSHORT, SQL_SMALLINT,0,0,&sParam1,0,&cbParam1);
	retcode = SQLBindParameter(hstmt, 2,SQL_PARAM_OUTPUT, SQL_C_SSHORT, SQL_SMALLINT,0,0,&sItemType,0,&cbParam2);

    retcode = SQLExecDirect (hstmt, (unsigned char *)(LPCTSTR)szSQL, SQL_NTS);
	if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
	{
	}
	else if (retcode==SQL_ERROR)
	{
//		DisplayErrorMsg(hstmt);
	}
	else if (retcode==SQL_NO_DATA)
	{
	}
	
	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBSession[m_iModSid].ReleaseDB(db_index);

	item = (int)sItemType;
	return sParam1;
}


void USER::EventItemSerialForGameRoomWindowOpen()
{
	CBufferEx TempBuf;
	
	TempBuf.Add(PRE_REG_GAMEROOM_EVENT_REQ);

	Send(TempBuf, TempBuf.GetLength());
}

int USER::UpdateEventItemSerialForGameRoom(TCHAR *pstrSerial, TCHAR *pstrSocNum, int &item)
{
	short sItemType = 0;

	SQLHSTMT	hstmt = NULL;
	SQLRETURN	retcode;
	TCHAR		szSQL[8000];	::ZeroMemory(szSQL, sizeof(szSQL));

	SWORD	sParam1 = 0;
	SDWORD	cbParam1 = SQL_NTS, cbParam2 = SQL_NTS;

	memset(szSQL, 0x00, 1024);
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_PRE_GAMEROOM_EVENT (\'%s\', \'%s\', \'%s\', \'%s\',\'%s\',?,?)}"), 
		pstrSocNum, m_strAccount, pstrSerial, g_arServerIPAddr, m_strUserID, sParam1, sItemType);

	hstmt = NULL;
	retcode = 0;

	int db_index = -1;
	CDatabase* pDB = g_DBSession[m_iModSid].GetDB( db_index );
	if( !pDB ) 
	{
		return -1;
	}
	
	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode!=SQL_SUCCESS)
	{
		return -1;
	}
	
	if( retcode != SQL_SUCCESS )
	{
		SQLFreeHandle((SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		return -1;
	}

	retcode = SQLBindParameter(hstmt, 1,SQL_PARAM_OUTPUT, SQL_C_SSHORT, SQL_SMALLINT,0,0,&sParam1,0,&cbParam1);
	retcode = SQLBindParameter(hstmt, 2,SQL_PARAM_OUTPUT, SQL_C_SSHORT, SQL_SMALLINT,0,0,&sItemType,0,&cbParam2);

    retcode = SQLExecDirect (hstmt, (unsigned char *)(LPCTSTR)szSQL, SQL_NTS);
	if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
	{
	}
	else if (retcode==SQL_ERROR)
	{
//		DisplayErrorMsg(hstmt);
	}
	else if (retcode==SQL_NO_DATA)
	{
	}
	
	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBSession[m_iModSid].ReleaseDB(db_index);

	item = (int)sItemType;
	return sParam1;
}

void USER::RecvEventItemSerialForGameRoom(TCHAR *pBuf)
{
	if ( pBuf == NULL ) return;

	int j;
	int iSlot = 0;
	int iRet = 0;
	int index = 0;
	int iEventItemSid = 0, iEvent = 0;

	TCHAR strSerial[30];		::ZeroMemory(strSerial,	sizeof(strSerial));
	TCHAR strSocNum[30];		::ZeroMemory(strSocNum,	sizeof(strSocNum));
	
	iSlot = GetEmptySlot(INVENTORY_SLOT);

	CString strMsg;

	if(iSlot <= -1)
	{
		strMsg.Format( IDS_USER_NEED_EMPTY_SLOT_CHANGE );
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;		
	}
	
	if((m_iMaxWeight + m_iMaxWeight) < m_iCurWeight) // ╟Ў└ч ╣л░╘░б ├╓┤ы ╣л░╘└╟ 2╣ш└╠╗є└╠╕щ...
	{
		strMsg.Format( IDS_USER_OVER_WEIGHT2 );
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;		// └╬║е└╠ ║ё╛ю └╓┤┬┴Ў ╚о└╬╟╤┤┘.
	}

	if(!GetVarString(sizeof(strSerial),	strSerial, pBuf, index))
	{
		strMsg.Format(IDS_USER_CHECK_INPUT_NUMBER);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;
	}
	if(!GetVarString(sizeof(strSocNum), strSocNum,	pBuf, index))
	{
		strMsg.Format(IDS_USER_CHECK_INPUT_NUMBER);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;
	}

	iRet = UpdateEventItemSerialForGameRoom(strSerial, strSocNum, iEventItemSid);

	if(iRet < 0)
	{
		// DB┐═ ┐м░с└╠ ┴┴┴Ў ╛╩╜└┤╧┤┘.
		strMsg.Format( IDS_USER_UNSTABLE_CONNECTION );
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;
	}
	else if(iRet == 1)
	{
		if(iEventItemSid == 0)
		{
			strMsg.Format( IDS_USER_EVENT_COMMON_CURE );

			m_UserItem[iSlot].tType = TYPE_ITEM;
			m_UserItem[iSlot].sLevel = g_arItemTable[NPC_EVENT_B_ITEM]->m_byRLevel;
			m_UserItem[iSlot].sSid = g_arItemTable[NPC_EVENT_B_ITEM]->m_sSid;
			m_UserItem[iSlot].sCount = 1000;
			m_UserItem[iSlot].sDuration = g_arItemTable[NPC_EVENT_B_ITEM]->m_sDuration;
			m_UserItem[iSlot].sBullNum = g_arItemTable[NPC_EVENT_B_ITEM]->m_sBullNum;
			m_UserItem[iSlot].tIQ = 0;

			for(j = 0; j < MAGIC_NUM; j++)
			{
				m_UserItem[iSlot].tMagic[j] = 0;
			}

			CBufferEx TempBuf;

			TempBuf.Add(ITEM_LOAD_RESULT);
			TempBuf.Add(SUCCESS);
			TempBuf.Add((BYTE)0x01);

			TempBuf.Add((BYTE)iSlot);
			TempBuf.Add(m_UserItem[iSlot].sLevel);
			TempBuf.Add(m_UserItem[iSlot].sSid);
			TempBuf.Add(m_UserItem[iSlot].sDuration);
			TempBuf.Add(m_UserItem[iSlot].sBullNum);
			TempBuf.Add(m_UserItem[iSlot].sCount);
			for(j = 0; j < MAGIC_NUM; j++) TempBuf.Add((BYTE)m_UserItem[iSlot].tMagic[j]);

			TempBuf.Add((BYTE)m_UserItem[iSlot].tIQ);

			Send(TempBuf, TempBuf.GetLength());
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);

			m_iCurWeight += g_arItemTable[NPC_EVENT_B_ITEM]->m_byWeight * 1000;
			GetRecoverySpeed();			// ╛╞└╠┼█ ╣л░╘┐б ║п╡┐└╠ ╗¤▒т╕щ ╚╕║╣╝╙╡╡ ║п╚п
			return;
		}
		else if(iEventItemSid > 100 && iEventItemSid <= 255)
		{
			switch(iEventItemSid)
			{
			case EVENT_ATT7_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_ATT7_CHANGE );
				break;
			case EVENT_DEF7_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_DEF7_CHANGE );
				break;
			case EVENT_ATT6_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_ATT6_CHANGE );
				break;
			case EVENT_DEF6_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_DEF6_CHANGE );
				break;
			case EVENT_ATT_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_ATT5_CHANGE );
				break;
			case EVENT_DEF_ITEM:
				iEvent = NPC_EVENT_ITEM; 
				strMsg.Format( IDS_USER_EVENT_DEF5_CHANGE );
				break;
			case EVENT_INIT_STAT_ITEM:
				iEvent = NPC_EVENT_INIT_STAT; 
				strMsg.Format( IDS_USER_EVENT_RESET_STAT );
				break;
			default:
				return;
				break;
			}

			m_UserItem[iSlot].tType = TYPE_ITEM;
			m_UserItem[iSlot].sLevel = g_arItemTable[iEvent]->m_byRLevel;
			m_UserItem[iSlot].sSid = g_arItemTable[iEvent]->m_sSid;
			m_UserItem[iSlot].sCount = 1;
			m_UserItem[iSlot].sDuration = g_arItemTable[iEvent]->m_sDuration;
			m_UserItem[iSlot].sBullNum = g_arItemTable[iEvent]->m_sBullNum;
			m_UserItem[iSlot].tIQ = (BYTE)iEventItemSid;

			for(j = 0; j < MAGIC_NUM; j++)
			{
				m_UserItem[iSlot].tMagic[j] = 0;
			}

			CBufferEx TempBuf;

			TempBuf.Add(ITEM_LOAD_RESULT);
			TempBuf.Add(SUCCESS);
			TempBuf.Add((BYTE)0x01);

			TempBuf.Add((BYTE)iSlot);
			TempBuf.Add(m_UserItem[iSlot].sLevel);
			TempBuf.Add(m_UserItem[iSlot].sSid);
			TempBuf.Add(m_UserItem[iSlot].sDuration);
			TempBuf.Add(m_UserItem[iSlot].sBullNum);
			TempBuf.Add(m_UserItem[iSlot].sCount);
			for(j = 0; j < MAGIC_NUM; j++) TempBuf.Add((BYTE)m_UserItem[iSlot].tMagic[j]);

			TempBuf.Add((BYTE)m_UserItem[iSlot].tIQ);

			Send(TempBuf, TempBuf.GetLength());
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);

			m_iCurWeight += g_arItemTable[iEvent]->m_byWeight;
			GetRecoverySpeed();			// ╛╞└╠┼█ ╣л░╘┐б ║п╡┐└╠ ╗¤▒т╕щ ╚╕║╣╝╙╡╡ ║п╚п

			return;
		}
	}
	else	// ╜├╕о╛є└╠ ╞▓╕о░┼│к ╡ю╖╧┐б ╛°┤┬ └п└·░┼│к DB┐б ║п╡┐└╠ ╛°└╗ ░ц┐ь
	{
		if(iRet == 10)
		{
			strMsg.Format( IDS_USER_CHECK_LOTTO_NUMBER );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
		else if(iRet == 11)
		{
			strMsg.Format( IDS_USER_CHECK_SOCIAL_NUMBER );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
		else if(iRet == 12)
		{
			strMsg.Format( IDS_USER_ONE_MORE_APPLY );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
		else if(iRet == 13)
		{
			strMsg.Format( IDS_USER_ALREADY_LOTTO );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
	}
}
////////////////////////////////////////////////////////////////////////////////
//
// └п└· ╖╣║з└╠ ╣л╖с ├╝╟ш ▒т░г└╠ │╤╛·┤┬┴Ў ├╝┼й╟╤┤┘.
BOOL USER::CheckUserLevel()
{
//	if(m_iDisplayType == 6 && m_sLevel > 25)//yskang 0.5
	if(m_iDisplayType == 6)
	{			
		
		CString strMsg = _T("");
		strMsg.Format("TEST └п└·┤╘└╠ ┴в╝╙╟╧╜┼ ├╝╟ш╞╟ ╝н╣Ў╜║┤┬ ▒т┤╔╗є ┴ж╛р└╠ └╓╜└┤╧┤┘.");
//		SendSystemMsg(strMsg.GetBuffer(strMsg.GetLength()), SYSTEM_NORMAL, TO_ME);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE, TO_ME);

	}

	return FALSE;
}

void USER::GiveEventGameTime(int item_index, int quality)
{
	int sid = item_index;
	int num = 1;

	int i, j;
	int iSlot = -1;

	CBufferEx TempBuf;
	BYTE result = SUCCESS;

	if(sid < 0 || sid >= g_arItemTable.GetSize()) return;

	ItemList	TempItem;
	ReSetItemSlot(&TempItem);

	TempItem.sSid		= g_arItemTable[sid]->m_sSid;
	TempItem.sBullNum	= g_arItemTable[sid]->m_sBullNum;
	TempItem.sDuration	= g_arItemTable[sid]->m_sDuration;

	for(i =0; i < MAGIC_NUM; i++) TempItem.tMagic[i] = 0;
	TempItem.tIQ = quality;
	
	for(i = EQUIP_ITEM_NUM; i < EQUIP_ITEM_NUM + INVENTORY_NUM; i++)
	{
		if(m_UserItem[i].sSid == TempItem.sSid)
		{
//			for(j = 0; j < MAGIC_NUM; j++)
//			{
//				if(m_UserItem[i].tMagic[j] != TempItem.tMagic[j]) break;
//			}
				
			if(m_UserItem[i].tIQ == TempItem.tIQ) { iSlot = i; break; } 
		}
	}

	CString strMsg = _T("");

	if(iSlot == -1)
	{
		strMsg.Format( IDS_USER_FAIL_CHECK_INVEN );
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;
	}

	if(m_UserItem[iSlot].sSid < 0)
	{
		strMsg.Format( IDS_USER_FAIL_CHECK_INVEN );
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;
	}

	if(m_UserItem[iSlot].sCount < num)		
	{
		strMsg.Format( IDS_USER_FAIL_CHECK_INVEN );
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;
	}

	int nRet = 0;
	CString strSerial = _T("");
	strSerial.Format("%d-%d-%d-%d-%d-%d", m_UserItem[iSlot].tMagic[0],m_UserItem[iSlot].tMagic[1],m_UserItem[iSlot].tMagic[2],m_UserItem[iSlot].tMagic[3],m_UserItem[iSlot].tMagic[4],m_UserItem[iSlot].tMagic[5]);

	nRet = UpdateGameTimeForEvent((LPTSTR)(LPCTSTR)strSerial);

	if(nRet != 1)
	{
		if(nRet == 2)
		{
			strMsg.Format( IDS_USER_ONE_MORE_APPLY );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
			return;
		}
		else if(nRet == 3)
		{
			strMsg.Format( IDS_USER_ALREADY_REG_NUMBER );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
			return;
		}
		else
		{
			strMsg.Format( IDS_USER_FAIL_CHECK_INVEN );
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
			return;
		}
	}

	if((m_UserItem[iSlot].sCount - num) <= 0)				// ┤┘└╜ │╗ └╬║е╕ж ╗й ┴╪┤┘.		
	{														// ─№╛╞└╠┼█ ║п╚н░б └╓└╕╕щ		
//		if(g_arItemTable[iSlot]->m_byWear >= 6) bQuickChange = TRUE;

		ReSetItemSlot(&m_UserItem[iSlot]);
	}
	else m_UserItem[iSlot].sCount -= num;

	int iWeight = num * g_arItemTable[iSlot]->m_byWeight;

	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	GetRecoverySpeed();			// ┤┘╜├ ╚╕║╣╝╙╡╡╕ж ░ш╗ъ

	TempBuf.Add(ITEM_GIVE_RESULT);
	TempBuf.Add(result);
	TempBuf.Add((BYTE)iSlot);
	TempBuf.Add(m_UserItem[iSlot].sLevel);
	TempBuf.Add(m_UserItem[iSlot].sSid);
	TempBuf.Add(m_UserItem[iSlot].sDuration);
	TempBuf.Add(m_UserItem[iSlot].sBullNum);
	TempBuf.Add(m_UserItem[iSlot].sCount);
	for(j = 0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[iSlot].tMagic[j]);

	TempBuf.Add(m_UserItem[iSlot].tIQ);

	Send(TempBuf, TempBuf.GetLength());

	strMsg.Format( IDS_USER_YOUR_ACCOUNT_REG, m_strAccount);
	SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
}

//////////////////////////////////////////////////////////////////////
//
//	└╠║е╞о┐б╝н ░│└╬ ┴д╛╫▒╟ ╗є╟░▒╟└╗ ╚╕╝Ў╟╤┤┘.
//
int USER::UpdateGameTimeForEvent(TCHAR *pstrSerial)
{
	SQLHSTMT	hstmt = NULL;
	SQLRETURN	retcode;
	TCHAR		szSQL[8000];	::ZeroMemory(szSQL, sizeof(szSQL));

	SWORD	sParam1 = 0;
	SDWORD	cbParam1 = SQL_NTS;

	memset(szSQL, 0x00, 1024);
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_EVENT_GAMETIME_USER(\'%s\', \'%s\', \'%s\', \'%s\',?)}"), 
		m_strAccount, pstrSerial, g_arServerIPAddr, m_strUserID, sParam1);
 
	hstmt = NULL;
	retcode = 0;

	int db_index = -1;
	CDatabase* pDB = g_DBSession[m_iModSid].GetDB( db_index );
	if( !pDB ) 
	{
		return -1;
	}
	
	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode!=SQL_SUCCESS)
	{
		return -1;
	}
	
	if( retcode != SQL_SUCCESS )
	{
		SQLFreeHandle((SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		return -1;
	}

	retcode = SQLBindParameter(hstmt, 1,SQL_PARAM_OUTPUT, SQL_C_SSHORT, SQL_SMALLINT,0,0,&sParam1,0,&cbParam1);

    retcode = SQLExecDirect (hstmt, (unsigned char *)(LPCTSTR)szSQL, SQL_NTS);
	if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
	{
	}
	else if (retcode==SQL_ERROR)
	{
//		DisplayErrorMsg(hstmt);
	}
	else if (retcode==SQL_NO_DATA)
	{
	}
	
	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBSession[m_iModSid].ReleaseDB(db_index);

	return sParam1;
}
/*
╥░╗Ё╝╙╚ы 
╣ж─▄ ╧╘╩╛╣е╗ў╩¤╓╡
0 ren\
1 ╣╓
*/
void USER::SendDamageNum(BYTE type,short nTarget, short dDamage)
{
	CBufferEx TempBufnum;
	TempBufnum.Add(DH_DAMAGE_NUM);
	TempBufnum.Add((BYTE)1);
	TempBufnum.Add((short)nTarget);
	TempBufnum.Add((BYTE)type);
	TempBufnum.Add((short)dDamage);				
	SendInsight(TempBufnum, TempBufnum.GetLength());
}
/*
╥░╗Ё╝╙╚ы
╣ж─▄ ╔ш╓├╣╓╬я╤к╠ї
*/
void USER::SendNpcHP(int nTarget,int npchp)
{
	CBufferEx TempBufnum;
	TempBufnum.Add(M_SET_HP);		
	TempBufnum.Add((DWORD)nTarget);		
	TempBufnum.Add((DWORD)npchp);				
	SendInsight(TempBufnum, TempBufnum.GetLength());
}

void USER::SendSystemMsg(UINT strID, BYTE type, int nWho)
{
	CBufferEx TempBuf;

	char pMsg[1280];	memset( pMsg, NULL, 1280 );
	strcpy( pMsg, _ID( strID ) );

	TempBuf.Add(SYSTEM_MSG);
	TempBuf.Add(type);
	TempBuf.Add(pMsg, _tcslen(pMsg));

	switch(nWho)
	{
	case TO_ALL:
		SendAll(TempBuf, TempBuf.GetLength());
		break;

	case TO_ME:
		Send(TempBuf, TempBuf.GetLength());
		break;

	case TO_ZONE:
		SendZone(TempBuf, TempBuf.GetLength());
		break;

	case TO_INSIGHT:
	default:
		SendInsight(TempBuf, TempBuf.GetLength());
		break;

	}
}

////////////////////////////////////////////////////////////////////////////////
//	╛╞└╠┼█ ╞п╝║└╗ ╣┘▓┘┤┬ └╬┼═╞ф└╠╜║ ╚░╝║╚н
//
void USER::UpgradeItemOpen(int event_num)
{
	CBufferEx TempBuf;
	//static int a=0;

	TempBuf.Add(UPGRADE_ITEM_DIALOG);
	TempBuf.Add(BYTE(event_num));
	//TempBuf.Add(BYTE(a));
	//a++;
	Send(TempBuf, TempBuf.GetLength());
}

void USER::UpgradeItemReqBegin(TCHAR *pBuf)
{
	int index = 0;

	BYTE tType = GetByte(pBuf, index);	// ╛ў▒╫╖╣└╠╡х ┼╕└╘
	m_bNoItemMove = TRUE;
	switch(tType)
	{
	case 0:				// ╞╒═и╔¤╝╢
		UpgradeItemReq(pBuf + index);
		break;
	case 1:				////╩╫╩╬║╧│╔
		UpgradeAccessoriReq(pBuf + index);
		break;

	case 2: case 3: case 12: case 9: case 49:// 2 │м╝╢┴щ╩п │м╝╢┴щ╩п  3┴щ╩п╛з╩п  12 ╨ф╒ф╩п═╖╔¤╝╢ 9╫г╕г▒ж╩п  49═ї╒▀╩п═╖
		UpgradeBlessingItemReq(pBuf + index, tType); 
		break;

	case 4:				// 1┤▄░│┴╢, 2┤▄░│┴╢, 3┤▄░│┴╢
		RemodelingItemReq(pBuf + index);
		break;

	case 5:				//─з╖и╩е╫░
		RemagicItemReq(pBuf + index);
		break;

	case 6:				// ╕о╕┼┴ў (┴▀║╣┐╔╝╟ ╟у┐ы╟╘)
		RemagicItemReq(pBuf + index, TRUE);
		break;

	case 7:				//╟┐╗п╗·╨╡ 
		EBodyUpgradeReq(pBuf + index);
		break;
	case 8: //╩╪╗д╔¤╝╢.
		ShouHouUpgradeReq(pBuf + index);
		break;
	case 11:
		DownAccessoriReq(pBuf + index);
		break;
	case 13://╗·╨╡╗╣╘н▒ж╓щ
		{
			EbodyReset(pBuf + index);
			break;
		}
	case 14://╓╞╫ў╜°╗п╨╛╞м.
		ShouHouMake(pBuf + index);
		break;
	case 15:
		ShouHouAdd(pBuf + index);
		break;
	case 16://░┘╝╢╫к╗╗
		ItemConvert(pBuf + index);
		break;
	case 17://╜т│¤╩Ї╨╘╧▐╓╞
		RemagicItem_100_3(pBuf + index);
		break;
	case 18:
		RemagicItem_UpgradeReq(pBuf + index);//╠э╝╙╩Ї╨╘
		break;
	case 19:
		RemagicItem1_UpgradeReq(pBuf + index);//▒ф╕№╩Ї╨╘
		break;
	case 20:
		RemagicItem_HuanShi(pBuf + index);
		break;
	case 21: //╖└╛▀▓─┴╧╗п
		RemagicItem_100_1(pBuf + index);
		break;
	case 22://╜т│¤╖└╛▀▓─┴╧╗п
		RemagicItem_100_2(pBuf + index);
		break;
	case 50://xiaoke
		DUBOxitong(pBuf + index);
		break;

	case 32://xiaoke
		DELSX(pBuf + index);
		break;
	case 27: //╗·╝╫┐╪╓╞╧╡═│╓╞╫ў╩╣╙├╔ш╝╞═╝
		HeChengJJ(pBuf + index);
		break;
	case 28://┐╪╓╞╧╡═│╔¤╝╢
		SuitUpgrade(pBuf + index);
		break;
	case 29://░▓╫░│╠╨Є┐и		
		ChengXuKa(pBuf + index);
		break;
	case 30://╕╜╝■		
		JjPeiJian(pBuf + index);
		break;
	case 25:case 31: //╗╞╜Ё╩п═╖31
		UpgradeHJItemReq(pBuf + index);
		break;
	case 34://╗·╨╡╔э╠х▓─┴╧╗п0x22 0x0a 0x00
		{
			short sMetrial = GetShort(pBuf,index);
			EbodyMatrial(sMetrial);
			break;
		}
	case 35://╗·╨╡╔э╠х╜т│¤▓─┴╧╗п
		{
			short sMetrial = GetShort(pBuf,index);

			EbodyCancelMetral(sMetrial);
			break;
		}
	case 36://╗·╨╡╔э╠х║╧│╔ 0x24 0x1f 0x00 0x11 0x00 0x0a 0x00 0xff 0xff 0xff 0xff 
		{
			short sMaster = GetShort(pBuf,index);
			short sMetrial1 = GetShort(pBuf,index);
			short sMetrial2 = GetShort(pBuf,index);
			EbodyConvertSuperEbody(sMaster,sMetrial1,sMetrial2);
			break;
		}
	case 37: //╬я╞╖║╧│╔  5╛з┴щ╩п║╧│╔╥╗╕Ў│м╛з┴щ  ╖╤╙├10W  2╗·╨╡║╧│╔╥╗╕Ўяп╩п,╖╤╙├200W  2яп╩п║╧│╔╥╗╕Ў╤й╗ъ╖╤╙├100
		ItemExchange(pBuf + index);
		break;
/*	case 49://═ї╒▀┴щ╩п ─з╖и╬ф╞ў╟░6╕─╘Ў╝╙13,7╕─╘Ў╝╙15,╬я└э╘Ў╝╙30╦Ё,10╕─╥╘╔╧▒╪╨ы╩╣╙├═ї╒▀┴щ╩пгм═ї╒▀╛з╩п+╔ё╩п╥╗╕Ўгм╖└╛▀├┐╕─╘Ў╝╙10╖└
		{
			short sMaster = GetShort(pBuf,index);
			short sMetrial = GetShort(pBuf,index);
			BYTE bReceive = GetByte(pBuf,index);
			short sAdd1 = GetShort(pBuf,index);
			short sAdd2 = GetShort(pBuf,index);
			short sAdd3 = GetShort(pBuf,index);
			short sAdd4 = GetShort(pBuf,index);
			Update130Item(sMaster,sMetrial,bReceive,sAdd1,sAdd2,sAdd3,sAdd4);

			break;
		}*/
	case 55://130╝╢╫░▒╕╕─╘ь
		{
			short sMaster = GetShort(pBuf,index);
			short sMetrial1 = GetShort(pBuf,index);
			short sMetrial2 = GetShort(pBuf,index);
			short sMetrial3 = GetShort(pBuf,index);
			Item130Convert(sMaster,sMetrial1,sMetrial2,sMetrial3);
			break;
		}

	default: 
		break;
	}
	m_bNoItemMove = FALSE;
}
void USER::DownAccessoriReq(TCHAR *pBuf)
{
	
	int index=0;
	short Slot = GetShort(pBuf, index);//
	short Slot1 = GetShort(pBuf, index);//▒∙╖т╦о╛з

	if(Slot < EQUIP_ITEM_NUM || Slot >= TOTAL_INVEN_MAX) return;
	if(Slot1 < EQUIP_ITEM_NUM || Slot1 >= TOTAL_INVEN_MAX) return;
	if(m_UserItem[Slot].tMagic[5] != 8) return;
	if(m_UserItem[Slot1].sSid!=1006) return;
	
	if(m_dwDN < 100000)
	{
		SendSystemMsg("╛Ў╒╜▒╥▓╗╫у,╩╣╙├▒∙╖ч╦о╛з╨ш10═Є.", SYSTEM_ERROR, TO_ME);
		return ;		// ░°░▌┐ы ╛ў▒╫╖╣└╠╡х ║ё┐ы║╕┤┘ └█└╕╕щ 
	}
	short sSourceSid = m_UserItem[Slot].sSid;//╡├╡╜╬я╞╖ID
	if(sSourceSid < 0 || sSourceSid >= g_arItemTable.GetSize()) return;
	if(g_arItemTable[sSourceSid]->m_byWear <= 5 || g_arItemTable[sSourceSid]->m_byWear >= 9) return;//┼╨╢╧╬я╞╖└р╨═

	if(m_UserItem[Slot].tMagic[1] == 137 || m_UserItem[Slot].tMagic[2] == 137 || m_UserItem[Slot].tMagic[3] == 137)
	{
		int iCrestCount = 0;
		int iAllSkill = 0;
		while(1)
		{
			int iMagicRandom  = 0;
			int sMagicSid  = 0;
			int iCrestRandom = myrand(1, 5);
			if(iCrestRandom == 1) 
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelTop.GetSize() - 1);				
				sMagicSid = g_Ripel.m_arRipelTop[iMagicRandom];
				m_UserItem[Slot].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
				iCrestCount++;
			}
			if(iCrestRandom == 2) 
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelBottom.GetSize() - 1);				
				sMagicSid = g_Ripel.m_arRipelBottom[iMagicRandom];
				m_UserItem[Slot].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
				iCrestCount++;
			}
			if(iCrestRandom == 3) 
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelLeft.GetSize() - 1);				
				sMagicSid = g_Ripel.m_arRipelLeft[iMagicRandom];
				m_UserItem[Slot].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
				iCrestCount++;
			}
			if(iCrestRandom == 4) 
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelRight.GetSize() - 1);				
				sMagicSid = g_Ripel.m_arRipelRight[iMagicRandom];
				m_UserItem[Slot].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
				iCrestCount++;
			}
			if(iCrestRandom == 5 && iAllSkill == 0) 
			{
				iAllSkill = 1;
				iMagicRandom = myrand(0, g_Ripel.m_arRipelCrest.GetSize() - 1);
				sMagicSid = g_Ripel.m_arRipelCrest[iMagicRandom];
				m_UserItem[Slot].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
				iCrestCount++;
			}
			if(iCrestCount >= 3) break;
		}
		if(m_UserItem[Slot].tMagic[1] != 137 && m_UserItem[Slot].tMagic[2] != 137 && m_UserItem[Slot].tMagic[3] != 137)
		{
			int iCrestRandom = myrand(1, 3);
			m_UserItem[Slot].tMagic[iCrestRandom] = 137;
		}
		m_UserItem[Slot].tIQ = RARE_ITEM;
		CString strMsg;
		    CString GoodsMagic; //╫╘╢п╔¤╝╢╠с╨╤
			for(int i = 0; i < 4; i++)
			{
				if(m_UserItem[Slot].tMagic != 0)
				{
					GoodsMagic+=g_arMagicItemTable[m_UserItem[Slot].tMagic[i]]->m_strText;
			     	GoodsMagic+=",";
				}
			}
					strMsg.Format("%s:",g_arItemTable[m_UserItem[Slot].sSid]->m_strName );//╣л╕ц╠с╩╛
					strMsg+=GoodsMagic;
					m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL);
	}
	else
	{
			m_UserItem[Slot].tMagic[1]=0;
			m_UserItem[Slot].tMagic[2]=0;
			m_UserItem[Slot].tMagic[3]=0;
			m_UserItem[Slot].tMagic[4]=0;
			m_UserItem[Slot].tMagic[5]=5;
			m_UserItem[Slot].tIQ=MAGIC_ITEM;

		}

		if (m_UserItem[Slot1].sCount > 1)
			m_UserItem[Slot1].sCount -= 1;
		else
			ReSetItemSlot(&m_UserItem[Slot1]);

		if( m_dwDN <= 100000 ) m_dwDN = 0;
	    else m_dwDN = m_dwDN - 100000;
	    UpdateUserItemDN();						
	    SendMoneyChanged();

		CBufferEx TempBuf;
		int j;
		TempBuf.Add(UPGRADE_ITEM_RESULT);
		TempBuf.Add((BYTE)1);
		TempBuf.Add((BYTE)2);
		BYTE bySlot = (BYTE)Slot;
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);
		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
		TempBuf.Add(m_UserItem[bySlot].tIQ);


		bySlot = (BYTE)Slot1;
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);
		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
		TempBuf.Add(m_UserItem[bySlot].tIQ);

		Send(TempBuf, TempBuf.GetLength());
		}

//▒∙╖т╦о╛збб░╤г╕╕─╜╡│╔г╡╕─╡─  ╫ю│ї╡─
//void USER::DownAccessoriReq(TCHAR *pBuf)
//{
//    int index=0;
//	short Slot = GetShort(pBuf, index);//
//	short Slot1 = GetShort(pBuf, index);//▒∙╖ч╦о╛з
//	if(m_UserItem[Slot1].sSid!=1006)		return;
//
//	if(Slot < EQUIP_ITEM_NUM || Slot >= TOTAL_INVEN_MAX) return;
//	if(Slot1 < EQUIP_ITEM_NUM || Slot1 >= TOTAL_INVEN_MAX) return;
//	if(m_UserItem[Slot].tMagic[5] != 8) return;
//
//	if(m_dwDN < 100000)
//	{
//		SendSystemMsg("╛Ў╒╜▒╥▓╗╫у,╩╣╙├▒∙╖ч╦о╛з╨ш10═Є.", SYSTEM_ERROR, TO_ME);
//		return ;		// ░°░▌┐ы ╛ў▒╫╖╣└╠╡х ║ё┐ы║╕┤┘ └█└╕╕щ 
//	}
//	if( m_dwDN <= 100000 ) m_dwDN = 0;
//	else m_dwDN = m_dwDN - 100000;
//	UpdateUserItemDN();						
//	SendMoneyChanged();
//
//	short sSourceSid = m_UserItem[Slot].sSid;//╡├╡╜╬я╞╖ID
//	if(sSourceSid < 0 || sSourceSid >= g_arItemTable.GetSize()) return;
//	if(g_arItemTable[sSourceSid]->m_byWear <= 5 || g_arItemTable[sSourceSid]->m_byWear >=9) return;//┼╨╢╧╬я╞╖└р╨═
//    	//niuniu add 456
//	if(m_UserItem[Slot].tMagic[1] == 137 || m_UserItem[Slot].tMagic[2] == 137 || m_UserItem[Slot].tMagic[3] == 137)
//	{
//		int iCrestCount = 0;
//		int iAllSkill = 0;
//
//		while(1)
//		{
//			int iMagicRandom  = 0;
//			int sMagicSid  = 0;
//			int iCrestRandom = myrand(0, 10000);
//			if(iCrestRandom <= 3500) 
//			{
//				iMagicRandom = myrand(0, g_Ripel.m_arRipelTop.GetSize() - 1);				
//				sMagicSid = g_Ripel.m_arRipelTop[iMagicRandom];
//				m_UserItem[Slot].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
//				iCrestCount++;
//			}
//			if(iCrestRandom > 3500 && iCrestRandom <= 7000) 
//			{
//				iMagicRandom = myrand(0, g_Ripel.m_arRipelBottom.GetSize() - 1);				
//				sMagicSid = g_Ripel.m_arRipelBottom[iMagicRandom];
//				m_UserItem[Slot].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
//				iCrestCount++;
//			}
//			if(iCrestRandom > 7000 && iCrestRandom <= 9000) 
//			{
//				iMagicRandom = myrand(0, g_Ripel.m_arRipelLeft.GetSize() - 1);				
//				sMagicSid = g_Ripel.m_arRipelLeft[iMagicRandom];
//				m_UserItem[Slot].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
//				iCrestCount++;
//			}
//			if(iCrestRandom > 9000 && iCrestRandom <= 9900) 
//			{
//				iMagicRandom = myrand(0, g_Ripel.m_arRipelRight.GetSize() - 1);				
//				sMagicSid = g_Ripel.m_arRipelRight[iMagicRandom];
//				m_UserItem[Slot].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
//				iCrestCount++;
//			}
//			if(iCrestRandom > 9900 && iAllSkill == 0)	//╦∙╙╨1╝╝─▄
//			{
//				iAllSkill = 1;
//				iMagicRandom = myrand(0, g_Ripel.m_arRipelCrest.GetSize() - 1);
//				sMagicSid = g_Ripel.m_arRipelCrest[iMagicRandom];
//				m_UserItem[Slot].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
//				iCrestCount++;
//			}
//
//			if(iCrestCount >= 3) break;
//		}
//		if(m_UserItem[Slot].tMagic[1] != 137 && m_UserItem[Slot].tMagic[2] != 137 && m_UserItem[Slot].tMagic[3] != 137)
//		{
//			int iCrestRandom = myrand(1, 3);
//			m_UserItem[Slot].tMagic[iCrestRandom] = 137;
//
//		}
//		m_UserItem[Slot].tIQ = RARE_ITEM;
//		
//		//if(m_UserItem[Slot].tMagic[1] == 56  || m_UserItem[Slot].tMagic[2] == 56 || m_UserItem[Slot].tMagic[3] == 56 ||
//	 //       m_UserItem[Slot].tMagic[1] == 49 || m_UserItem[Slot].tMagic[2] == 49 || m_UserItem[Slot].tMagic[3] == 49||
//	 //       m_UserItem[Slot].tMagic[1] == 61 || m_UserItem[Slot].tMagic[2] == 61 || m_UserItem[Slot].tMagic[3] == 61||
//	 //       m_UserItem[Slot].tMagic[1] == 53 || m_UserItem[Slot].tMagic[2] == 53 || m_UserItem[Slot].tMagic[3] == 53) { 
//	 //
//		//CString strMsg;
//		//CString GoodsMagic;
//		//for(int i = 0; i < 4; i++)
//		//{
//		//	if(m_UserItem[Slot].tMagic != 0)
//		//	{
//		//		GoodsMagic+=g_MagicArray[m_UserItem[Slot].tMagic[i]];
//		//		GoodsMagic+=",";
//		//	}
//		//}
//		//strMsg.Format("═ц╝╥:б╛%sб┐╧┤│Ўб╛%sб┐:", this->m_strUserID,g_arItemTable[m_UserItem[Slot].sSid]->m_strName );//╣л╕ц╠с╩╛
//		//strMsg+=GoodsMagic;
//		//m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
//		//
//		//}
////==========================================================================================================================
//		CString strMsg;
//		    CString GoodsMagic; //╫╘╢п╔¤╝╢╠с╨╤
//			for(int i = 0; i < 4; i++)
//			{
//				if(m_UserItem[Slot].tMagic != 0)
//				{
//					GoodsMagic+=g_arMagicItemTable[m_UserItem[Slot].tMagic[i]]->m_strText;
//			     	GoodsMagic+=",";
//				}
//			}
//					strMsg.Format("╧┤│Ўб╛%sб┐:",g_arItemTable[m_UserItem[Slot].sSid]->m_strName );//╣л╕ц╠с╩╛
//					strMsg+=GoodsMagic;
//					m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL);
////===========================================================================================================================
//	}
//	else
//	{
//		m_UserItem[Slot].tMagic[1]=0;
//		m_UserItem[Slot].tMagic[2]=0;
//		m_UserItem[Slot].tMagic[3]=0;
//		m_UserItem[Slot].tMagic[4]=0;
//		m_UserItem[Slot].tMagic[5]=5;
//		m_UserItem[Slot].tIQ=MAGIC_ITEM;
//	}
//	if (m_UserItem[Slot1].sCount > 1)
//		m_UserItem[Slot1].sCount -= 1;
//	else
//	ReSetItemSlot(&m_UserItem[Slot1]);
//	CBufferEx TempBuf;
//	int j;
//	TempBuf.Add(UPGRADE_ITEM_RESULT);
//	TempBuf.Add((BYTE)1);
//	TempBuf.Add((BYTE)2);
//	BYTE bySlot = (BYTE)Slot;
//	TempBuf.Add((BYTE)bySlot);
//	TempBuf.Add(m_UserItem[bySlot].sLevel);
//	TempBuf.Add(m_UserItem[bySlot].sSid);
//	TempBuf.Add(m_UserItem[bySlot].sDuration);
//	TempBuf.Add(m_UserItem[bySlot].sBullNum);
//	TempBuf.Add(m_UserItem[bySlot].sCount);
//	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
//	TempBuf.Add(m_UserItem[bySlot].tIQ);
//	bySlot = (BYTE)Slot1;
//	TempBuf.Add((BYTE)bySlot);
//	TempBuf.Add(m_UserItem[bySlot].sLevel);
//	TempBuf.Add(m_UserItem[bySlot].sSid);
//	TempBuf.Add(m_UserItem[bySlot].sDuration);
//	TempBuf.Add(m_UserItem[bySlot].sBullNum);
//	TempBuf.Add(m_UserItem[bySlot].sCount);
//	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
//	TempBuf.Add(m_UserItem[bySlot].tIQ);
//	Send(TempBuf, TempBuf.GetLength());
//    
//
//}
////////////////╗·╨╡╗╣╘н▒ж╓щ//////////////////////
void USER::EbodyReset(TCHAR *pBuf)
{
	int index=0,i;
	short Slot = GetShort(pBuf, index);//╗╣╘н╓щ▒ж
	short Slot1 = GetShort(pBuf, index);//╗╣╘н╗·╨╡

	if(Slot < EQUIP_ITEM_NUM || Slot >= TOTAL_INVEN_MAX)
		return;
	if(Slot1 < EQUIP_ITEM_NUM || Slot1 >= TOTAL_INVEN_MAX)
		return;
	//
	short sMaterialSid = m_UserItem[Slot].sSid;//╡├╡╜╬я╞╖ID
	if(sMaterialSid < 0 || sMaterialSid >= g_arItemTable.GetSize())
		return;
	if(sMaterialSid != 1030)
		return;
	if(m_UserItem[Slot].sCount<=0)
		return;
	//
	short sMasterSid = m_UserItem[Slot1].sSid;//╡├╡╜╬я╞╖ID
	if(sMasterSid < 0 || sMasterSid >= g_arItemTable.GetSize())
		return;
	//╗·╨╡
	if(!IsEbodyItem(sMasterSid)&&!IsSuperEbodyItem(sMasterSid) )
		return;
	BYTE bLastMagic=0xff;
	BYTE bPos = 0xff;
	for(i = 4;i>0;i--)
	{
		if(m_UserItem[Slot1].tMagic[i] != 0)
		{
			bLastMagic = m_UserItem[Slot1].tMagic[i];
			bPos = i;
			break;
		}
	}
	if(bPos == 0xff)
		return ;
	if(bLastMagic>g_arEBodyTable.GetSize())
		return ;
	//╩╟╖ё╙╨╬╗╓├
	int bEmptyPos = GetEmptySlot(INVENTORY_SLOT);
	if(bEmptyPos == -1)
	{
		return ;
	}
	CByteArray arMaterial;
	arMaterial.RemoveAll();
	arMaterial.Add((BYTE)Slot);
	arMaterial.Add((BYTE)Slot1);
	arMaterial.Add((BYTE)bEmptyPos);


	m_UserItem[Slot].sCount--;
	if(m_UserItem[Slot].sCount<=0)
		ReSetItemSlot(&m_UserItem[Slot]);
	m_UserItem[Slot1].tMagic[bPos] = 0;
	m_UserItem[Slot1].sLevel -= g_arEBodyTable[bLastMagic]->m_tLevel;
	
	ReSetItemSlot(&m_UserItem[bEmptyPos]);
	m_UserItem[bEmptyPos].sSid = 907;
	m_UserItem[bEmptyPos].sCount = 1;
	m_UserItem[bEmptyPos].sLevel = g_arItemTable[907]->m_byRLevel;
	m_UserItem[bEmptyPos].sDuration = g_arItemTable[907]->m_sDuration;
	m_UserItem[bEmptyPos].tMagic[0] = bLastMagic;
	m_UserItem[bEmptyPos].tIQ = 2;

	FlushItemLog( TRUE );//╟х┐╒╗║│х

	CBufferEx TempBuf;// ╡╖║п░ц ┴д║╕╕ж ║╕│╜┤┘.
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	TempBuf.Add(SUCCESS);
	TempBuf.Add((BYTE)arMaterial.GetSize());
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];

		TempBuf.Add(bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);
		for(int j =0; j < MAGIC_NUM; j++) 
			TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());
	arMaterial.RemoveAll();
}
//╬к░┘╝╢╫░▒╕╠э╝╙╩Ї╨╘ 100W
void USER::RemagicItem_UpgradeReq(TCHAR *pBuf)
{
	bool isSuccess = false;
	int index=0;
	short Slot = GetShort(pBuf, index);//╫░▒╕
	short Slot1 = GetShort(pBuf, index);//╗├╩п
	
	
	if(Slot1 < EQUIP_ITEM_NUM || Slot1 >= TOTAL_INVEN_MAX) return;
	if(Slot < EQUIP_ITEM_NUM || Slot >= TOTAL_INVEN_MAX) return;
	if(m_UserItem[Slot].tIQ!=12) return;
	if(m_UserItem[Slot1].sSid!=1096) return ;
	if(m_UserItem[Slot1].tMagic[0] < 3 || m_UserItem[Slot1].tMagic[0] > 72) return;
	if(m_UserItem[Slot].tMagic[10] > 1 ) return;
	if(m_dwDN < 1000000)
	{SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);	return ;	}
	if(FANGJUCAILIAOHUA_XP > m_dwXP) { SendSystemMsg( IDS_XP_ERROR, SYSTEM_ERROR, TO_ME); return; }
	if(m_UserItem[Slot].tMagic[6] != 1 && m_UserItem[Slot].tMagic[6] != m_UserItem[Slot1].tMagic[0] - 1) return;

	int iUpgradeCount = -1;
	int magicSlot = -1;
	for(int i = 6; i < 11; i++)
	{
		if(m_UserItem[Slot].tMagic[i] == 1) 
		{
			magicSlot = i;
			iUpgradeCount = i-6;
			break;
		}
	}
	if(iUpgradeCount == -1) return;
	int iRandom = myrand(1, 10000);
	//iRandom = UpgradeSucc(iRandom);
	if(iRandom <= g_HuanShiJiLv[iUpgradeCount]) isSuccess = true;

	if(isSuccess)
	{
		if(m_UserItem[Slot].tMagic[magicSlot] == 1)			m_UserItem[Slot].tMagic[magicSlot] = m_UserItem[Slot1].tMagic[0];

		if( m_dwDN <= 1000000 ) m_dwDN = 0;
		else m_dwDN = m_dwDN - 1000000;
		UpdateUserItemDN();						
		SendMoneyChanged();	
	}


	if(m_UserItem[Slot1].sCount > 1)
		m_UserItem[Slot1].sCount = m_UserItem[Slot1].sCount -1;
	else
	ReSetItemSlot(&m_UserItem[Slot1]);
	CBufferEx TempBuf;
	int j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	if(isSuccess)	TempBuf.Add((BYTE)1);
	else TempBuf.Add((BYTE)2);
	TempBuf.Add((BYTE)2);
	BYTE bySlot = (BYTE)Slot;
	TempBuf.Add((BYTE)bySlot);
	TempBuf.Add(m_UserItem[bySlot].sLevel);
	TempBuf.Add(m_UserItem[bySlot].sSid);
	TempBuf.Add(m_UserItem[bySlot].sDuration);
	TempBuf.Add(m_UserItem[bySlot].sBullNum);
	TempBuf.Add(m_UserItem[bySlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
	TempBuf.Add(m_UserItem[bySlot].tIQ); 

	bySlot = (BYTE)Slot1;
	TempBuf.Add((BYTE)bySlot);
	TempBuf.Add(m_UserItem[bySlot].sLevel);
	TempBuf.Add(m_UserItem[bySlot].sSid);
	TempBuf.Add(m_UserItem[bySlot].sDuration);
	TempBuf.Add(m_UserItem[bySlot].sBullNum);
	TempBuf.Add(m_UserItem[bySlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
	TempBuf.Add(m_UserItem[bySlot].tIQ);

	Send(TempBuf, TempBuf.GetLength());
}
//╬к░┘╝╢╫░▒╕▒ф╕№╩Ї╨╘ 100W
void USER::RemagicItem1_UpgradeReq(TCHAR *pBuf)
{
	int index=0,iSuccess=2;
	short Slot = GetShort(pBuf, index);//╫░▒╕
	short Slot1 = GetShort(pBuf, index);//╗├╩п
	
	
	if(Slot1 < EQUIP_ITEM_NUM || Slot1 >= TOTAL_INVEN_MAX) return;
	if(Slot < EQUIP_ITEM_NUM || Slot >= TOTAL_INVEN_MAX) return;
	if(m_UserItem[Slot].tIQ!=12) return;
	if(m_UserItem[Slot1].sSid!=1096) return ;
	if(m_UserItem[Slot1].tMagic[5]!=1) return ;

	if(m_dwDN < 1000000)
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return ;		// ░°░▌┐ы ╛ў▒╫╖╣└╠╡х ║ё┐ы║╕┤┘ └█└╕╕щ 
	}
	if( m_dwDN <= 1000000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 1000000;
	UpdateUserItemDN();						
	SendMoneyChanged();
	
	int rand=myrand(0,100)%100;
	int s=(m_UserItem[Slot1].tMagic[0]-2)%10*7+10;
	if(rand>s){
		iSuccess=1;
		m_UserItem[Slot].tMagic[6]=m_UserItem[Slot1].tMagic[0];
	}
	ReSetItemSlot(&m_UserItem[Slot1]);
	CBufferEx TempBuf;
	int j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	TempBuf.Add((BYTE)iSuccess);
	TempBuf.Add((BYTE)2);
	BYTE bySlot = (BYTE)Slot;
	TempBuf.Add((BYTE)bySlot);
	TempBuf.Add(m_UserItem[bySlot].sLevel);
	TempBuf.Add(m_UserItem[bySlot].sSid);
	TempBuf.Add(m_UserItem[bySlot].sDuration);
	TempBuf.Add(m_UserItem[bySlot].sBullNum);
	TempBuf.Add(m_UserItem[bySlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
	TempBuf.Add(m_UserItem[bySlot].tIQ); 
	
	bySlot = (BYTE)Slot1;
	TempBuf.Add((BYTE)bySlot);
	TempBuf.Add(m_UserItem[bySlot].sLevel);
	TempBuf.Add(m_UserItem[bySlot].sSid);
	TempBuf.Add(m_UserItem[bySlot].sDuration);
	TempBuf.Add(m_UserItem[bySlot].sBullNum);
	TempBuf.Add(m_UserItem[bySlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
	TempBuf.Add(m_UserItem[bySlot].tIQ);
	
	Send(TempBuf, TempBuf.GetLength());
}
//╗├╩п╩Ї╨╘╔¤╝╢бгбгбгбг
void USER::RemagicItem_HuanShi(TCHAR *pBuf)
{
	bool isSuccess = false;
	int index=0;
	short Slot = GetShort(pBuf, index);//┐╒
	short Slot1 = GetShort(pBuf, index);//╗├╩п
	short Slot2 = GetShort(pBuf, index);//╗├╩п

	if(Slot1 < EQUIP_ITEM_NUM || Slot1 >= TOTAL_INVEN_MAX) return;
	if(Slot2 < EQUIP_ITEM_NUM || Slot2 >= TOTAL_INVEN_MAX) return;
	if(m_UserItem[Slot1].sSid!=1096 || m_UserItem[Slot2].sSid!=1096)return ;
	if(m_UserItem[Slot1].tMagic[5] >= 10 || m_UserItem[Slot2].tMagic[5] >=10) return;
	if(m_UserItem[Slot1].tMagic[0]!=m_UserItem[Slot2].tMagic[0]) return ;
	if(m_UserItem[Slot1].tMagic[5]!=m_UserItem[Slot2].tMagic[5]) return;
	if(m_dwDN < 500000)
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return ;		// ░°░▌┐ы ╛ў▒╫╖╣└╠╡х ║ё┐ы║╕┤┘ └█└╕╕щ 
	}
	if( m_dwDN <= 500000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 500000;
	UpdateUserItemDN();						
	SendMoneyChanged();
	ReSetItemSlot(&m_UserItem[Slot2]);
	int iRandom = myrand(1, 10000);
	if(iRandom <= g_ItemHsUpgrade[m_UserItem[Slot1].tMagic[5]]) isSuccess = true;
	if(isSuccess)
	{
		m_UserItem[Slot1].tMagic[5]++;
		m_UserItem[Slot1].tMagic[0]++;
	}

	CBufferEx TempBuf;
	int j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	if(isSuccess) TempBuf.Add((BYTE)1);
	else TempBuf.Add((BYTE)2);
	TempBuf.Add((BYTE)2);
	BYTE bySlot = (BYTE)Slot1;
	TempBuf.Add((BYTE)bySlot);
	TempBuf.Add(m_UserItem[bySlot].sLevel);
	TempBuf.Add(m_UserItem[bySlot].sSid);
	TempBuf.Add(m_UserItem[bySlot].sDuration);
	TempBuf.Add(m_UserItem[bySlot].sBullNum);
	TempBuf.Add(m_UserItem[bySlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
	TempBuf.Add(m_UserItem[bySlot].tIQ); 
	
	bySlot = (BYTE)Slot2;
	TempBuf.Add((BYTE)bySlot);
	TempBuf.Add(m_UserItem[bySlot].sLevel);
	TempBuf.Add(m_UserItem[bySlot].sSid);
	TempBuf.Add(m_UserItem[bySlot].sDuration);
	TempBuf.Add(m_UserItem[bySlot].sBullNum);
	TempBuf.Add(m_UserItem[bySlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
	TempBuf.Add(m_UserItem[bySlot].tIQ);
	
	Send(TempBuf, TempBuf.GetLength());


}
void USER::ShouHouAdd(TCHAR *pBuf)
{
	int index=0,iSuccess=0,s;
	int Magic[3]={0,0,0};
	int newMagic=-1,up=1;

	short Slot = GetShort(pBuf, index);//╚я╞м
	short Slot1 = GetShort(pBuf, index);//╩╪╗д
	if(Slot < EQUIP_ITEM_NUM || Slot >= TOTAL_INVEN_MAX) return;

	if(Slot1 < EQUIP_ITEM_NUM || Slot1 >= TOTAL_INVEN_MAX) return;
	if(m_UserItem[Slot].sSid==-1 ||m_UserItem[Slot1].sSid==-1)
		return ;
	if(m_UserItem[Slot].sSid!=1051)
		return ;
	if(g_arItemTable[m_UserItem[Slot1].sSid]->m_byWear!=130)
		return ;
	
	for(int i=1;i<4;i++){
		switch (m_UserItem[Slot1].tMagic[i]){//╝╞╦у╩╪╗д666╩Ї╨╘
			case 0:
				newMagic=i;
				break;
			case 1:case 2:case 3:case 4:case 5://├┐┤╬╝╙╡у3╖└
				Magic[0]=i;
				break;
			case 6:
				Magic[0]=-1;
				break;
			case 7:case 8:case 9:case 10:case 11:
				Magic[1]=i;
				break;
			case 12://├┐╝╢╝╙15╤к
				Magic[1]=-1;
				break;
			case 13:case 14:case 15:case 16:case 17:
				Magic[2]=i;
				break;
			case 18://├┐╝╢╘Ў╝╙5┐╣AGIC_DEFENSE_UP
				Magic[2]=-1;
				break;
		 default:
		 	break;
		}
	}
	int rand=myrand(0,1000)%100;

	switch(m_UserItem[Slot].tMagic[0]){
		case 5://├┐┤╬╝╙╡у3╖└
			if(Magic[0]==-1) return;
			if(Magic[0]!=0) 
				newMagic=Magic[0];
			else
				up=1;
			
			break;
		case 12://├┐╝╢╝╙15╤к
		if(Magic[1]==-1) return;
			if(Magic[1]!=0) 
				newMagic=Magic[1];
			else
				up=7;
			break;
			
		case 6://├┐╝╢╘Ў╝╙5┐╣
			if(Magic[2]==-1) return;
			if(Magic[2]!=0) 
				newMagic=Magic[2];
			else 
				up=13;
			break;
		default:
			return;
	}
	s=(m_UserItem[Slot1].tMagic[newMagic]%6)*10+10;
	if(rand>s){
		iSuccess=1;
		m_UserItem[Slot1].tMagic[newMagic]+=up;
		////////////////////////////////////////////////////////////////////////////
		if (m_UserItem[Slot1].tMagic[0] == 30 && 
			
			( m_UserItem[Slot1].tMagic[1] == 18 ||  m_UserItem[Slot1].tMagic[2] == 18 || m_UserItem[Slot1].tMagic[3] == 18)
			
			&&


          ( m_UserItem[Slot1].tMagic[1] == 12 || m_UserItem[Slot1].tMagic[2] == 12 || m_UserItem[Slot1].tMagic[3] == 12)

		  &&
         
		  ( m_UserItem[Slot1].tMagic[1] == 6 || m_UserItem[Slot1].tMagic[2] == 6 || m_UserItem[Slot1].tMagic[3] == 6)){

	 
		CString strMsg;
		strMsg.Format("═ц╝╥ [%s] ║╧│╔ 666╝╝─▄╩╪╗д!", this->m_strUserID);//╣л╕ц╠с╩╛
		m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
		}

		if (m_UserItem[Slot1].tMagic[0] == 6 && 
			
			( m_UserItem[Slot1].tMagic[1] == 18 ||  m_UserItem[Slot1].tMagic[2] == 18 || m_UserItem[Slot1].tMagic[3] == 18)
			
			&&


          ( m_UserItem[Slot1].tMagic[1] == 12 || m_UserItem[Slot1].tMagic[2] == 12 || m_UserItem[Slot1].tMagic[3] == 12)

		  &&
         
		  ( m_UserItem[Slot1].tMagic[1] == 6 || m_UserItem[Slot1].tMagic[2] == 6 || m_UserItem[Slot1].tMagic[3] == 6)){

	 
		CString strMsg;
		strMsg.Format("═ц╝╥ [%s] ║╧│╔ 666╬ф╞ў╩╪╗д!", this->m_strUserID);//╣л╕ц╠с╩╛
		m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
		}



	}
		//============================================================================
	
	//╚е╡Ї╚я╞м
	ReSetItemSlot(&m_UserItem[Slot]);

	CBufferEx TempBuf;
	int j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	if(iSuccess)
		TempBuf.Add((BYTE)6);
	else
		TempBuf.Add((BYTE)7);
	TempBuf.Add((BYTE)2);
	BYTE bySlot = (BYTE)Slot;
	TempBuf.Add((BYTE)bySlot);
	TempBuf.Add(m_UserItem[bySlot].sLevel);
	TempBuf.Add(m_UserItem[bySlot].sSid);
	TempBuf.Add(m_UserItem[bySlot].sDuration);
	TempBuf.Add(m_UserItem[bySlot].sBullNum);
	TempBuf.Add(m_UserItem[bySlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
	TempBuf.Add(m_UserItem[bySlot].tIQ); 
	
	bySlot = (BYTE)Slot1;
	TempBuf.Add((BYTE)bySlot);
	TempBuf.Add(m_UserItem[bySlot].sLevel);
	TempBuf.Add(m_UserItem[bySlot].sSid);
	TempBuf.Add(m_UserItem[bySlot].sDuration);
	TempBuf.Add(m_UserItem[bySlot].sBullNum);
	TempBuf.Add(m_UserItem[bySlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);
	TempBuf.Add(m_UserItem[bySlot].tIQ);
	
	Send(TempBuf, TempBuf.GetLength());


}
void USER::ShouHouMake(TCHAR *pBuf)
{
	int iWeight=0;
	int index=0;
	BYTE tMagic=0;
	CUIntArray arMaterial;

	short Slot = GetShort(pBuf, index);//║╨╫╙
	short Slot1 = GetShort(pBuf, index);//╛з╠х
	short Slot2 = GetShort(pBuf, index);//└м╗°╩╪╗д
	short Slot3 = GetShort(pBuf, index);//└м╗°╩╪╗д
	short Slot4 = GetShort(pBuf, index);//└м╗°╩╪╗д
	short Slot5 = GetShort(pBuf, index);//└м╗°╩╪╗д
	if(Slot < EQUIP_ITEM_NUM || Slot >= TOTAL_INVEN_MAX) return;
	if(Slot1 < EQUIP_ITEM_NUM || Slot1 >= TOTAL_INVEN_MAX) return;
	if(m_UserItem[Slot].sSid!=1050)
		return;
	arMaterial.Add(Slot);
	arMaterial.Add(Slot1);
	if(m_UserItem[Slot1].sSid==665||m_UserItem[Slot1].sSid==668||m_UserItem[Slot1].sSid==663){
		if(m_UserItem[Slot1].sCount<100)
			return;
		if(m_UserItem[Slot1].sSid==665)//╖└╝╙3
			tMagic=5;
		if(m_UserItem[Slot1].sSid==668)//╤к╝╙15
			tMagic=6;
		if(m_UserItem[Slot1].sSid==663)//┐╣╝╙5
			tMagic=12;
	}else{
		return;
	}
	if(Slot2!=-1){
		if(Slot2 < EQUIP_ITEM_NUM || Slot2 >= TOTAL_INVEN_MAX) return;
		iWeight=iWeight+g_arItemTable[m_UserItem[Slot2].sSid]->m_byWeight;
		ReSetItemSlot(&m_UserItem[Slot2]);
		arMaterial.Add(Slot2);
		
	}
	if(Slot3!=-1){
		if(Slot3 < EQUIP_ITEM_NUM || Slot3 >= TOTAL_INVEN_MAX) return;
		iWeight=iWeight+g_arItemTable[m_UserItem[Slot3].sSid]->m_byWeight;
		ReSetItemSlot(&m_UserItem[Slot3]);
		arMaterial.Add(Slot3);
		
	}
	if(Slot4!=-1){
		if(Slot4 < EQUIP_ITEM_NUM || Slot4 >= TOTAL_INVEN_MAX) return;
		iWeight=iWeight+g_arItemTable[m_UserItem[Slot4].sSid]->m_byWeight;
		ReSetItemSlot(&m_UserItem[Slot4]);
		arMaterial.Add(Slot4);
		
	}
	if(Slot5!=-1){
		if(Slot5 < EQUIP_ITEM_NUM || Slot5 >= TOTAL_INVEN_MAX) return;
		iWeight=iWeight+g_arItemTable[m_UserItem[Slot5].sSid]->m_byWeight;
		ReSetItemSlot(&m_UserItem[Slot5]);
		arMaterial.Add(Slot5);
		
	}
	iWeight=iWeight+g_arItemTable[m_UserItem[Slot1].sSid]->m_byWeight;
	if(m_UserItem[Slot1].sCount>100){
		m_UserItem[Slot1].sCount=m_UserItem[Slot1].sCount-100;
	}else
		ReSetItemSlot(&m_UserItem[Slot1]);
	ReSetItemSlot(&m_UserItem[Slot]);
	int sSid=1051;
	m_UserItem[Slot].sLevel = g_arItemTable[sSid]->m_byRLevel;
	m_UserItem[Slot].sSid = sSid;
	m_UserItem[Slot].sCount = 1;
	m_UserItem[Slot].sDuration = g_arItemTable[sSid]->m_sDuration;
	m_UserItem[Slot].sBullNum = 1;
	m_UserItem[Slot].tMagic[0] = tMagic;
	m_UserItem[Slot].tMagic[1] = 0;
	m_UserItem[Slot].tMagic[2] = 0;
	m_UserItem[Slot].tMagic[3] = 0;
	m_UserItem[Slot].tMagic[4] = 0;
	m_UserItem[Slot].tMagic[5] = 0;
	m_UserItem[Slot].tIQ = 2;
	m_UserItem[Slot].iItemSerial = 0;
	
	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	CBufferEx TempBuf;
	int i,j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = arMaterial.GetSize();
	TempBuf.Add((BYTE)5);
	TempBuf.Add((BYTE)index);
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());

}
void USER::ShouHouUpgradeReq(TCHAR *pBuf)
{
	int index=0;
	int n;
	int iSuccess = 2;
	BYTE tSourceWear = 0;		// └┤╘┤└р╨═
	int iWeight=0;
	///////////////////////////////////////////////////////
	if(m_dwDN < 1000000)
	{
		SendSystemMsg("╔¤╝╢╩╪╗д╥к100═Є╛Ў╒╜▒╥,╔¤╝╢╩з░▄╩╪╗д▓╗╧√╩з", SYSTEM_ERROR, TO_ME);
		return;
	}
    //////////////////////////////////////////////////////////
	short sSrcSlot = GetShort(pBuf, index);//╓ў╠х
	short sDstSlot = GetShort(pBuf, index);//╛з╠х
	if(sSrcSlot < EQUIP_ITEM_NUM || sSrcSlot >= TOTAL_INVEN_MAX) return;
	if(sDstSlot < EQUIP_ITEM_NUM || sDstSlot >= TOTAL_INVEN_MAX) return;
	if(m_UserItem[sDstSlot].sSid!=964)//╔¤╝╢╡─╬я╞╖▓╗╩╟╛з╠х.
		return;
	if(m_UserItem[sSrcSlot].tIQ!=9)
		return;
	n=m_UserItem[sSrcSlot].tMagic[5];
	if(n>=2){
		m_UserItem[sSrcSlot].tMagic[5]=2;
		return;
	}
	// ╚ч╣√╬я╞╖└р╨═▓╗╡╚╙┌130═╦│Ў
	tSourceWear = g_arItemTable[m_UserItem[sSrcSlot].sSid]->m_byWear;
	if(tSourceWear != 130)								// ╝ь▓щ╩╟╖ё╩╟┐╔╥╘╔·╝╞╡─╬я╞╖└р╨═(╩╪╗д)
	{
		SendSystemMsg( IDS_USER_CANT_UPGRADE_ITEM, SYSTEM_ERROR, TO_ME);
		return;
	}
	int rand=myrand(0,100)%100;
	if(n==0&&rand<40)
		iSuccess=1;
	if(n==1&&rand<15)
		iSuccess=1;
	if(iSuccess==1){//│╔╣ж┴╦.....
		m_UserItem[sSrcSlot].tMagic[0]++;
		m_UserItem[sSrcSlot].tMagic[5]++;
	}else{//╩з░▄┴╦.....
		////////////////////////////////////////////////////////////////////////////////
		if (m_UserItem[sSrcSlot].tMagic[5] == 1 )
		{
			m_UserItem[sSrcSlot].tMagic[0] -=1;
			m_UserItem[sSrcSlot].tMagic[5] -=1;
		}

		/////////////////////////////////////////////////////////////////////////////////
		 iWeight+= g_arItemTable[m_UserItem[sSrcSlot].sSid]->m_byWeight;
		// ReSetItemSlot(&m_UserItem[sSrcSlot]);
		
	}
	iWeight+= g_arItemTable[m_UserItem[sDstSlot].sSid]->m_byWeight;
	ReSetItemSlot(&m_UserItem[sDstSlot]);
	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;
	///////////////////////////////////////////////////////////////////////////////////
	if( m_dwDN <= 1000000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 1000000;
	UpdateUserItemDN();	
	SendMoneyChanged();

	//////////////////////////////////////////////////////////////////////////////////
	CBufferEx TempBuf;
	int j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	TempBuf.Add((BYTE)iSuccess);
	TempBuf.Add((BYTE)2);
	TempBuf.Add((BYTE)sSrcSlot);
	TempBuf.Add(m_UserItem[sSrcSlot].sLevel);
	TempBuf.Add(m_UserItem[sSrcSlot].sSid);
	TempBuf.Add(m_UserItem[sSrcSlot].sDuration);
	TempBuf.Add(m_UserItem[sSrcSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSrcSlot].sCount);

	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sSrcSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSrcSlot].tIQ); 

	TempBuf.Add((BYTE)sDstSlot);
	TempBuf.Add(m_UserItem[sDstSlot].sLevel);
	TempBuf.Add(m_UserItem[sDstSlot].sSid);
	TempBuf.Add(m_UserItem[sDstSlot].sDuration);
	TempBuf.Add(m_UserItem[sDstSlot].sBullNum);
	TempBuf.Add(m_UserItem[sDstSlot].sCount);

	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sDstSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sDstSlot].tIQ); 

	Send(TempBuf, TempBuf.GetLength());
}
int USER::FindItemSid(short sSid)
{
	int i;
	for(i=0;i<60;i++){
		if(convert[i].Ssid==sSid)
			return i;
	}
	return -1;

}
////░┘╝╢╫к╗╗
void USER::ItemConvert(TCHAR *pBuf)
{
	
	int index=0,n;
	int i,count1=0,count2=0;
	short sid;
	short sSrcSlot = GetShort(pBuf, index);//╓ў╠х
	short sDstSlot = GetShort(pBuf, index);//▓─┴╧
	BYTE itemClass = -1;
	short sSourceSid = -1;//╓ў╠х
	short sMaterialSid = -1;//▓─┴╧
	
	if(sSrcSlot < EQUIP_ITEM_NUM || sSrcSlot >= TOTAL_INVEN_MAX) return;
	if(sDstSlot < EQUIP_ITEM_NUM || sDstSlot >= TOTAL_INVEN_MAX) return;
	for(i=EQUIP_ITEM_NUM;i<TOTAL_INVEN_MAX;i++){
		if(1093==m_UserItem[i].sSid)
			break;
	}
	if(i>=TOTAL_INVEN_MAX)
		return;
	if(m_UserItem[sSrcSlot].sSid==-1&&m_UserItem[sDstSlot].sSid==-1)
		return;
	if( g_arItemTable[m_UserItem[sSrcSlot].sSid]->m_byWear !=  g_arItemTable[m_UserItem[sDstSlot].sSid]->m_byWear)
		return ;
	sSourceSid = m_UserItem[sSrcSlot].sSid;//╓ў╠х
	sMaterialSid = m_UserItem[sDstSlot].sSid;//▓─┴╧
	if(sSourceSid < 0 || sSourceSid >= g_arItemTable.GetSize()) return;
	if(sMaterialSid < 0 || sMaterialSid >= g_arItemTable.GetSize()) return;
	if(g_arItemTable[sSourceSid]->m_byWear <= 1 || g_arItemTable[sSourceSid]->m_byWear >= 6) return;
	if(g_arItemTable[sMaterialSid]->m_byWear <= 1 || g_arItemTable[sMaterialSid]->m_byWear >= 6) return;

	itemClass  = g_arItemTable[m_UserItem[sDstSlot].sSid]->m_byClass; 
	if(g_arItemTable[m_UserItem[sSrcSlot].sSid]->m_byClass == BRAWL_ITEM)//╚н╓░╥╡
	{
		if(itemClass != BRAWL_ITEM && itemClass != STAFF_ITEM && itemClass != EDGED_ITEM && itemClass != FIREARMS_ITEM) return;//╚н ╖и ╡╢ ╟╣
	}
	else if(g_arItemTable[m_UserItem[sSrcSlot].sSid]->m_byClass == STAFF_ITEM)//╖и╓░╥╡
	{
		if(itemClass != STAFF_ITEM) return;//╖и
	}
	else if(g_arItemTable[m_UserItem[sSrcSlot].sSid]->m_byClass == EDGED_ITEM )//╡╢╓░╥╡
	{
		if(itemClass != STAFF_ITEM && itemClass != EDGED_ITEM && itemClass != FIREARMS_ITEM) return;//╡╢ ╖и ╟╣
	}
	else if(g_arItemTable[m_UserItem[sSrcSlot].sSid]->m_byClass == FIREARMS_ITEM )//╟╣╓░╥╡
	{
		if(itemClass != STAFF_ITEM && itemClass != FIREARMS_ITEM) return;//╡╢ ╖и ╟╣
	}


	if(m_UserItem[sSrcSlot].tMagic[5]<7) return;
	//=================================================================╖т░┘╝╢╣╥
	if( m_UserItem[sSrcSlot].sLevel < 70 || m_UserItem[sDstSlot].sLevel < 70   )
	{
		SendEventMsg("╟ы╖┼╚ы70╝╢╡─├▒╫╙╨м╫╙,80╝╢╡─╥┬╖■┐у╫╙!");
		return;
	}
	if( m_UserItem[sSrcSlot].tMagic[5] < m_UserItem[sDstSlot].tMagic[5] )
	{
		SendEventMsg("╓ў╠х╡─╕─╩¤▒╪╨ы┤є╙┌▓─┴╧╡─╕─╩¤!");
		return;
	}

       if( m_UserItem[sSrcSlot].tIQ != m_UserItem[sDstSlot].tIQ  )
	{
		SendEventMsg("╓ў╠х║═▓─┴╧╡─╤╒╔л▓╗╧р═м");
		return; 
    } 

      if(m_UserItem[sDstSlot].tMagic[6] != 2)
      {
			CString str = _T("");
			SYSTEMTIME st;
			CString strDate;
			GetLocalTime(&st);
			strDate.Format("%d-%d-%d %d:%d",st.wYear,st.wMonth,st.wDay ,st.wHour,st.wMinute);
			str.Format("[%s]═ц╝╥[%s]╖╟╖и║╧░┘╝╢1 \r\n",strDate ,m_strUserID);
			EnterCriticalSection( &m_CS_FileWrite );
			g_fpSpeedHack1.Write( str, str.GetLength() );
			LeaveCriticalSection( &m_CS_FileWrite);
			SendSystemMsg("╫░▒╕├╗╙╨▓─┴╧╗п", SYSTEM_ERROR, TO_ME);
			return;
	}
	   if( m_UserItem[sSrcSlot].tMagic[3] != 0 && m_UserItem[sDstSlot].tMagic[3] == 0 )
      {
			CString str = _T("");
			SYSTEMTIME st;
			CString strDate;
			GetLocalTime(&st);
			strDate.Format("%d-%d-%d %d:%d",st.wYear,st.wMonth,st.wDay ,st.wHour,st.wMinute);
			str.Format("[%s]═ц╝╥[%s]╖╟╖и║╧░┘╝╢2 \r\n",strDate,m_strUserID );
			EnterCriticalSection( &m_CS_FileWrite );
			g_fpSpeedHack1.Write( str, str.GetLength() );
			LeaveCriticalSection( &m_CS_FileWrite);
			SendSystemMsg("║╧│╔╩з░▄╖╟╖и▓┘╫ў", SYSTEM_ERROR, TO_ME);
			return;
	}
//-------------------------------------------------------------------------------
	
	for(i=0;i<4;i++){
		if(m_UserItem[sSrcSlot].tMagic[i]!=0) count1++;
		if(m_UserItem[sDstSlot].tMagic[i]!=0) count2++;
	}
	if(count1!=count2||count1==0)
		return;

	n=FindItemSid(m_UserItem[sDstSlot].sSid);
	if(n==-1)
		return;
	n=FindItemSid(m_UserItem[sSrcSlot].sSid);
	if(n==-1)
		return;
	sid=convert[n].Dsid;
	//╜Ё╟о1000W
	if(m_dwDN < 10000000)
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return ;		// ░°░▌┐ы ╛ў▒╫╖╣└╠╡х ║ё┐ы║╕┤┘ └█└╕╕щ 
	}
	if( m_dwDN <= 10000000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 10000000;
	UpdateUserItemDN();						
	SendMoneyChanged();
	//╟х│¤╡Ї▒∙╗ъ
	RobItem(1093, 1);
//┐к╩╝╫к╗╗

	m_UserItem[sSrcSlot].sSid=sid;
	m_UserItem[sSrcSlot].tIQ=0x0c;
	m_UserItem[sSrcSlot].tMagic[5]=m_UserItem[sSrcSlot].tMagic[5]-7;
	int rand = myrand(1, 100)%count1;
	count2=0;
	for(i=0;i<4;i++){
		if(rand==count2){
			m_UserItem[sSrcSlot].tMagic[4]=m_UserItem[sDstSlot].tMagic[i];
		}
		if(m_UserItem[sDstSlot].tMagic[i]!=0)
			count2++;
	}
	ReSetItemSlot(&m_UserItem[sDstSlot]);
	CBufferEx TempBuf;
	int j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	TempBuf.Add((BYTE)3);
	TempBuf.Add((BYTE)2);
	TempBuf.Add((BYTE)sSrcSlot);
	TempBuf.Add(m_UserItem[sSrcSlot].sLevel);
	TempBuf.Add(m_UserItem[sSrcSlot].sSid);
	TempBuf.Add(m_UserItem[sSrcSlot].sDuration);
	TempBuf.Add(m_UserItem[sSrcSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSrcSlot].sCount);

	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sSrcSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSrcSlot].tIQ); 
	
	TempBuf.Add((BYTE)sDstSlot);
	TempBuf.Add(m_UserItem[sDstSlot].sLevel);
	TempBuf.Add(m_UserItem[sDstSlot].sSid);
	TempBuf.Add(m_UserItem[sDstSlot].sDuration);
	TempBuf.Add(m_UserItem[sDstSlot].sBullNum);
	TempBuf.Add(m_UserItem[sDstSlot].sCount);

	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sDstSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sDstSlot].tIQ); 

	Send(TempBuf, TempBuf.GetLength());

}


////////////╜т│¤╩Ї╨╘╧▐╓╞//////////////////////////////////////////////////////////////////////////////////
void USER::RemagicItem_100_3(TCHAR *pBuf)
{
	int index=0,i;
	short sSourceSlot = GetShort(pBuf, index);	
	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX) return;
	if( m_UserItem[sSourceSlot].tMagic[5]<3) return;
	if( m_UserItem[sSourceSlot].tIQ!=12)	return;
	if(FindItem(1094) == 0) return;
	if(m_dwDN < 1000000)
	{	SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);		return ;	}
	if(m_UserItem[sSourceSlot].tMagic[10] !=0) return;
	

	for(i = 6; i < 11;i++)
	{		
		if(m_UserItem[sSourceSlot].tMagic[i]==0)
		{
			m_UserItem[sSourceSlot].tMagic[i] = 1;
			//break;
		}	
	}
	
	if( m_dwDN <= 1000000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 1000000;

	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();
	//╟х│¤╡Ї╧√╚┌╓о╨╟
	RobItem(1094, 1);
	CBufferEx TempBuf;
	int j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)sSourceSlot);
	TempBuf.Add(m_UserItem[sSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[sSourceSlot].sSid);
	TempBuf.Add(m_UserItem[sSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[sSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSourceSlot].sCount);

	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sSourceSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSourceSlot].tIQ); 
	Send(TempBuf, TempBuf.GetLength());

}
//╖└╛▀▓─┴╧╗п
void USER::RemagicItem_100_1(TCHAR *pBuf)
{
	int index=0;
	short sSourceSlot = GetShort(pBuf, index);	
	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX) return;
	if( m_UserItem[sSourceSlot].tMagic[5]<7){
		return;
	}
	if(m_UserItem[sSourceSlot].tIQ!=1&&m_UserItem[sSourceSlot].tIQ!=3&&m_UserItem[sSourceSlot].tIQ!=2)
		return ;
	////////////////////╜н║■//////////////////////////////////////////
	if (m_UserItem[sSourceSlot].sSid < 0 || m_UserItem[sSourceSlot].sSid >= g_arItemTable.GetSize()) return;

	if (g_arItemTable[m_UserItem[sSourceSlot].sSid]->m_byWear < 2 || g_arItemTable[m_UserItem[sSourceSlot].sSid]->m_byWear > 5 ) return;
	////////////////////////////////////////////////////////
	if(m_dwDN < 100000)
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return ;		// ░°░▌┐ы ╛ў▒╫╖╣└╠╡х ║ё┐ы║╕┤┘ └█└╕╕щ 
	}

	if( m_dwDN <= 100000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 100000;

	m_UserItem[sSourceSlot].tMagic[6]=2;

	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();

	CBufferEx TempBuf;
	int j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	TempBuf.Add((BYTE)9);
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)sSourceSlot);
	TempBuf.Add(m_UserItem[sSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[sSourceSlot].sSid);
	TempBuf.Add(m_UserItem[sSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[sSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSourceSlot].sCount);

	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sSourceSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSourceSlot].tIQ); 
	Send(TempBuf, TempBuf.GetLength());

}
//╜т│¤╖└╛▀▓─┴╧╗п
void USER::RemagicItem_100_2(TCHAR *pBuf)
{
	int index=0;
	short sSourceSlot = GetShort(pBuf, index);	
	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX) return;
	if( m_UserItem[sSourceSlot].tMagic[5]<7){
		return;
	}
	if(m_UserItem[sSourceSlot].tIQ!=1&&m_UserItem[sSourceSlot].tIQ!=3&&m_UserItem[sSourceSlot].tIQ!=2)
		return ;
	//////////////////////////////////////////////////////////////////////////
	if (m_UserItem[sSourceSlot].sSid < 0 || m_UserItem[sSourceSlot].sSid >= g_arItemTable.GetSize()) return;

	if (g_arItemTable[m_UserItem[sSourceSlot].sSid]->m_byWear < 2 || g_arItemTable[m_UserItem[sSourceSlot].sSid]->m_byWear > 5 ) return;

	///////////////////////////////////////////////////////////////////////////╜н║■
	if(m_dwDN < 100000)
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return ;		// ░°░▌┐ы ╛ў▒╫╖╣└╠╡х ║ё┐ы║╕┤┘ └█└╕╕щ 
	}

	if( m_dwDN <= 100000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 100000;

	m_UserItem[sSourceSlot].tMagic[6]=0;

	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();

	CBufferEx TempBuf;
	int j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	TempBuf.Add((BYTE)10);
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)sSourceSlot);
	TempBuf.Add(m_UserItem[sSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[sSourceSlot].sSid);
	TempBuf.Add(m_UserItem[sSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[sSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSourceSlot].sCount);

	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sSourceSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSourceSlot].tIQ); 
	Send(TempBuf, TempBuf.GetLength());
}
void USER::UpgradeItemReq(TCHAR *pBuf)
{
	if(!m_MItemLock && o_yehuoini[0]->mimabaohu == 1 )
	{
        SendSystemMsg( "╟ы╧╚╜т│¤├▄┬ы▒г╗д║є╘┌▓┘╫ў", SYSTEM_ERROR, TO_ME);
		return;
	}


	int iSid = -1;
	int iIQ = -1;
	int iCount = 0, iThings = 0;
	int i, j, index = 0;
	int iWeight = 0;
	short sMaterialSlot;

	int iSuccess = 0;

	BYTE tIQ = 0, bySlot = 0;

	CBufferEx TempBuf;

	ItemList	MyItem[TOTAL_ITEM_NUM];

	CByteArray arMaterial;
	arMaterial.RemoveAll();

	short sSourceSlot = GetShort(pBuf, index);			// ╝▒┼├╟╤ ╛╞└╠┼█ ╜╜╖╘╣°╚г

	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX) return;	// └╬║е┐б╝н╕╕ ╛ў▒╫╖╣└╠╡х ░б┤╔

	iSid = m_UserItem[sSourceSlot].sSid;
	if(iSid < 0 || iSid >= g_arItemTable.GetSize()) return;
	if( iSid == 669 || iSid == 670 )					// ╛ў▒╫╖╣└╠╡х ╟╧╖┴┤┬ ╛╞└╠┼█└╠ ▒█╖п▒╫┴╛╖∙╢є╕щ
	{
		SendSystemMsg( IDS_USER_CANT_UPGRADE_ITEM, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(g_arItemTable[iSid]->m_byWear > 5 && g_arItemTable[iSid]->m_byWear < 9)
		return ;



	iIQ = m_UserItem[sSourceSlot].tIQ;
	switch(iIQ)
	{
	case NORMAL_ITEM:
		break;
	case MAGIC_ITEM:
		iCount = 1;
		iThings = MATERIAL_MAGIC_UP_ITEM;
		break;
	case RARE_ITEM:
		iCount = 1;
		iThings = MATERIAL_RARE_UP_ITEM;
		break;
	case REMODEL_ITEM:
	case REMODEL_MAGIC_ITEM:
		iCount = 2;
		iThings = MATERIAL_REMODEL_UP_ITEM;
		break;
	case 12: //╞╒═и░┘╝╢
		iCount = 1;
		iThings = MATERIAL_RARE_UP_ITEM;
		break;
	case 18: //130╠╫
		iCount = 1;
		iThings = MATERIAL_RARE_UP_ITEM;
		break;
	default:

		return;
	}
	if(iSid != 1236 && (g_arItemTable[iSid]->m_byWear == 122) || (g_arItemTable[iSid]->m_byWear == 123) 
		|| (g_arItemTable[iSid]->m_byWear == 124) || (g_arItemTable[iSid]->m_byWear == 125)) return;//╨▐╕┤╦в╗·╨╡

	for(i = 0; i < TOTAL_ITEM_NUM; i++)			// ╛╞└╠┼█ ┴д║╕ ╣щ╛ў
	{
		MyItem[i] = m_UserItem[i];
	}
	for(i = 0; i < iCount; i++)
	{
		sMaterialSlot = -1;
		sMaterialSlot = GetShort(pBuf, index);			// ╕┼┴ў╝╙╝║ 1░│ ║┘└║ └ч╖с ( ╛°└╕╕щ -1 )
		if(sMaterialSlot >= EQUIP_ITEM_NUM && sMaterialSlot < TOTAL_INVEN_MAX)
		{												// └ч╖с┴▀┐б ╟╪┤ч wear┴д║╕░б ┤┘╕г╕щ ╜╟╞╨		
			iSid = MyItem[sMaterialSlot].sSid;
			if(iSid < 0 || iSid >= g_arItemTable.GetSize()) return;
			if(iSid != iThings) return;			
			if(MyItem[sMaterialSlot].sCount <= 0) return;

			iWeight += g_arItemTable[iSid]->m_byWeight;

			MyItem[sMaterialSlot].sCount -= 1;
			arMaterial.Add((BYTE)sMaterialSlot);
		}
		else
		{
			SendSystemMsg(IDS_USER_SHENGSHI, SYSTEM_ERROR, TO_ME);
			return;
		}
	}


	iSuccess = SetUpgeadeItem(sSourceSlot);	
	if(iSuccess == 0) iWeight += g_arItemTable[iSid]->m_byWeight;			// ╣л░╘║п╚н╕ж ├╝┼й╟╤┤┘.
	if(iSuccess == -1) return;

	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.

	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = 1 + arMaterial.GetSize();

	if(!iSuccess)	TempBuf.Add((BYTE)0x00); //╜╟╞╨
	else			TempBuf.Add((BYTE)0x01);
	
	SendMoneyChanged();

	TempBuf.Add((BYTE)index);

	TempBuf.Add((BYTE)sSourceSlot);					// ┴╓ ╛╞└╠┼█╕ж ╕╒└· 	
	TempBuf.Add(m_UserItem[sSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[sSourceSlot].sSid);
	TempBuf.Add(m_UserItem[sSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[sSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSourceSlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sSourceSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSourceSlot].tIQ); 

	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		bySlot = (BYTE)arMaterial[i];
		
		if(m_UserItem[bySlot].sCount <= 1) ReSetItemSlot(&m_UserItem[bySlot]);// ╝╥║ё╝║ └╠╣╟╖╬ ╕╒└· ├╩▒т╚н╟╧░э 
		else							   m_UserItem[bySlot].sCount -= 1;

		TempBuf.Add(bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}

	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...

	Send(TempBuf, TempBuf.GetLength());

	arMaterial.RemoveAll();
}

int USER::SetUpgeadeItem(short sSlot)
{
	BYTE tCount = 0;

	int iSuccess = 0;

	int temp = 0;
	int last = 0;
	int rand = 0;

	if(m_UserItem[sSlot].sSid < 0 || m_UserItem[sSlot].sSid >= g_arItemTable.GetSize()) return -1;
	if(g_arItemTable[m_UserItem[sSlot].sSid]->m_sDuration <= 0) return -1;
	if(g_arItemTable[m_UserItem[sSlot].sSid]->m_byWear > 5 && g_arItemTable[m_UserItem[sSlot].sSid]->m_byWear > 9) return -1;
	
	tCount = m_UserItem[sSlot].tMagic[5];
	if(tCount >= MAX_ITEM_UPGRADE_COUNT) return -1;

	if(g_arItemTable[m_UserItem[sSlot].sSid]->m_byWear == ATTACK_ITEM)
	{
		if(m_dwDN < ATTACK_UPGRADE_COST)
		{
			SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
			return -1;		// ░°░▌┐ы ╛ў▒╫╖╣└╠╡х ║ё┐ы║╕┤┘ └█└╕╕щ 
		}

		if( m_dwDN <= ATTACK_UPGRADE_COST ) m_dwDN = 0;
		else m_dwDN = m_dwDN - ATTACK_UPGRADE_COST;			// ╟╪┤ч ║ё┐ы╕ж ░с░·┐б ╗є░№╛°└╠ ╣╠╕о ░ш╗ъ

		if(g_arItemTable[m_UserItem[sSlot].sSid]->m_byClass == STAFF_ITEM)
		{
			last = ATTACK_UPGRADE_PSI_BAND;					// ╛ў▒╫╖╣└╠╡х ╝║░°╜├ ┴▀░б╡╟┤┬ ░к
		}
		else
		{
			last = ATTACK_UPGRADE_BAND;						// ╛ў▒╫╖╣└╠╡х ╝║░°╜├ ┴▀░б╡╟┤┬ ░к
		}


		rand = myrand(1, 10000);							// ╝║░°╖№░· ║ё▒│└з╟╪ ╖г┤¤╝Ў╕ж ▒╕╟╘
		if(rand <= g_ItemAttUpgrade[tCount]) iSuccess = 1;// ╟╪┤ч ╣°┬░└╟ ╝║░°╖№║╕┤┘ └█└╕╕щ
		int dwTemp = FindItem(1043);
		if (dwTemp >= 1)
		{
			RobItem(1043,1);//12╘┬22╚╒
			SendSystemMsg("▒╛┤╬╩╣╙├╨╥╘╦╨╟[100%│╔╣ж┬╩]", SYSTEM_ERROR, TO_ME);
			iSuccess = 1;
		}

	}
	else
	{
		if(m_dwDN < DEFENSE_UPGRADE_COST)
		{
			SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
			return -1;		// ╣ц╛ю┐ы ╛ў▒╫╖╣└╠╡х ║ё┐ы║╕┤┘ └█└╕╕щ 
		}

		if( m_dwDN <= DEFENSE_UPGRADE_COST ) m_dwDN = 0;
		else m_dwDN = m_dwDN - DEFENSE_UPGRADE_COST;				// ╟╪┤ч ║ё┐ы╕ж ░с░·┐б ╗є░№╛°└╠ ╣╠╕о ░ш╗ъ

		last = DEFENSE_UPGRADE_BAND;						// ╣ц╛ю┐ы ╣№└з

//		if(tCount < 6)					// └╙╜├╖╬ 6╛ў║╕┤┘ ┼й╕щ ╣л┴╢░╟ ╜╟╞╨ 02-05-04 by Youn Gyu
//		{
		rand = myrand(1, 10000);	
		if(m_UserItem[sSlot].tIQ==12){
			if(rand <= g_ItemDefUpgrade_[tCount]) 
				iSuccess = 1;
		}else{
			if(rand <= g_ItemDefUpgrade[tCount]) 
				iSuccess = 1;
		}
		int dwTemp = FindItem(1043);//12╘┬22╚╒
		if (dwTemp >= 1)
		{
			RobItem(1043,1);//╝ї╔┘╥╗╕Ў╬я╞╖
			SendSystemMsg("▒╛┤╬╩╣╙├╨╥╘╦╨╟[100%│╔╣ж┬╩]", SYSTEM_ERROR, TO_ME);
			iSuccess = 1;
		}
	}

	if(iSuccess == 1)						// ╟╪┤ч ╣°┬░└╟ ╝║░°╖№║╕┤┘ └█└╕╕щ
	{	
		m_UserItem[sSlot].tMagic[5] = tCount + 1;	// ╕╢┴Ў╕╖ ╜╜╖╘┐б ╝║░°╚╜╝Ў╕ж ┴ї░б ╜├┼▓┤┘.
		//m_UserItem[sSlot].tMagic[4] = (BYTE)((tCount + 1) * last);
		
		MakeItemLog( &m_UserItem[sSlot], ITEMLOG_UPGRADE_SUCCESS );
	}
	else
	{ 
		MakeItemLog( &m_UserItem[sSlot], ITEMLOG_UPGRADE_FAIL );
		ReSetItemSlot(&m_UserItem[sSlot]);	iSuccess = 0; 
	}	

	FlushItemLog( TRUE );
	return iSuccess;
}

////////////////////////////////////////////////////////////////////////////////////////
//	╩╫╩╬╔¤╝╢
///////////////////////////////////////////////////////////////////////////////////////
void USER::UpgradeAccessoriReq(TCHAR *pBuf)
{
if(m_dwDN < ACCESSORI_UPGRADE_COST) 
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return;		// ╛ў▒╫╖╣└╠╡х ╟╥ ╡╖└╠ ╛°└╕╕щ ╕о┼╧
	}
	//////////////////////////╜╗╥╫├▄┬ы
	if(!m_MItemLock && o_yehuoini[0]->mimabaohu == 1)
	{
        SendSystemMsg( "╟ы╧╚╜т│¤├▄┬ы▒г╗д║є╘┌▓┘╫ў", SYSTEM_ERROR, TO_ME);
		return;
	}
	/////////////////// 

//	int iSid = 0;
//	int iIQ = -1;
	int iSid = -1;
	int iCount = 0;
	int i, j, index = 0;
	int iWeight = 0;
	short sMaterialSlot[4] = {-1, -1, -1, -1};
	short sSid[4] = {-1, -1, -1, -1};
	short sAid = 0;
	short sMagicSid = 0;
	int iSuccess = 0;
	BYTE bySlot = 0;

	int	iRandom, iMagicRandom, iCrestRandom, iCrestCount = 0;
	int iUpgradeCount = 0, iAllSkill = 0;
	BOOL bUseCrest = 0;

	CByteArray arMaterial;
	arMaterial.RemoveAll();

	short sAccessori = -1, sRipel = -1;				// 5╛ў └╠╗є ╕╡┐б ┤ы╟╪╝н ┴╪║ё╟╤┤┘.

	short sSlot = GetShort(pBuf, index);			// ╝▒┼├╟╤ ╛╞└╠┼█ ╜╜╖╘╣°╚г
//	if(sSlot != -1) return;							// ╛╫╝╝╝н╕о┤┬ ╝╥╜║░б ╛°┤┘.
	if(sSlot != -1)									// 5╛ў└╠╗є└╬┴Ў
	{
		short sTemp = -1;
		if(sSlot < EQUIP_ITEM_NUM || sSlot >= TOTAL_INVEN_MAX) return;
		sTemp = m_UserItem[sSlot].sSid;
		if(sTemp < 0 || sTemp >= g_arItemTable.GetSize()) return;

		if(g_arItemTable[sTemp]->m_byWear <= 5 || g_arItemTable[sTemp]->m_byWear >= 9) return;

		if(m_UserItem[sSlot].tMagic[5] <= 4) 
		{
			SendSystemMsg(IDS_USER_ACCESSORI_INVALID, SYSTEM_ERROR, TO_ME);	// 5╛ў └╠╟╧└╟ ╛╞└╠┼█└║ ╕о╞ч└╟┴╢░в, ╣о└х└╕╖╬ ╛ў▒╫╖╣└╠╡х ╟╧┴Ў ╛╩┤┬┤┘.
			return;		
		}

        if( iSid == 818 || iSid == 733 || iSid == 735 )  return;
		if(m_UserItem[sSlot].tMagic[5] > 7) return; // ╟╥ ╝Ў└╓┤┬ ╛ў▒╫╖╣└╠╡х┤┬ └╠╣╠ ┤┘╟▀┤┘.

		if(m_UserItem[sSlot].sDuration == 0)
		{
			SendSystemMsg( IDS_USER_ACCESSORI_OLD, SYSTEM_ERROR, TO_ME);
			return;
		}

		sSid[0] = sTemp;
		sAccessori = sSlot;

		sSlot = -1, sTemp = -1;
		sSlot = GetShort(pBuf, index);
		if(sSlot == -1) return;
		if(sSlot < EQUIP_ITEM_NUM || sSlot >= TOTAL_INVEN_MAX)	return;

		sTemp = m_UserItem[sSlot].sSid;
			if(sTemp != 798 && sTemp != 799 && sTemp != 800 && sTemp != 801 && sTemp != 802 )
					return;
		if(sTemp < 0 || sTemp >= g_arItemTable.GetSize()) 
		{
			SendSystemMsg(IDS_USER_ACCESSORI_RIPEL, SYSTEM_ERROR, TO_ME);	// ╕о╞ч└╟ ┴╢░в└╠│к ╣о└х└╗ ░б┴о ┐└╖б╡╬.
			return;
		}

		sSid[1] = sTemp;
		sRipel = sSlot;

		iCount = 100;							// 5╛ў▒█ └╠╗є ╕╡┐б ┤ы╟╪╝н 100╣°└╗ ║╬┐й╟╤┤┘.
	}
	else
	{	
		int magic_slot = -1;
		int dynamic_slot = -1;

		for(i = 0; i < 4; i++)							
		{
			sMaterialSlot[i] = GetShort(pBuf, index);
			if(sMaterialSlot[i] <= -1) break;
			if(sMaterialSlot[i] < EQUIP_ITEM_NUM || sMaterialSlot[i] >= TOTAL_INVEN_MAX) return;
			sSid[i] = m_UserItem[sMaterialSlot[i]].sSid;
			if(sSid[i] == -1)//│Ў┤э
				return ;
			if(g_arItemTable[sSid[i]]->m_byWear <= 5 || g_arItemTable[sSid[i]]->m_byWear >= 9) 
				if(sSid[i] != 798 || sSid[i] != 799 || sSid[i] != 800 || sSid[i] != 801 )
					return;

			if(sSid[i] < 0 || sSid[i] >= g_arItemTable.GetSize()) return;
			if(sSid[i] == SID_RING_OF_LIFE || sSid[i] == SID_NECKLACE_OF_SHIELD || sSid[i] == SID_EARRING_OF_PROTECT || sSid[i] == 755)
			{
				SendSystemMsg(IDS_USER_ACCESSORI_SKILLUP, SYSTEM_ERROR, TO_ME);	// ╛ў▒╫╖╣└╠╡х ╟╥ ╝Ў ╛°┤┬ ╛╟╝╝╗ч╕о
				return;
			}

			magic_slot = -1;
			dynamic_slot = -1;
			magic_slot = m_UserItem[sMaterialSlot[i]].tMagic[0];
			if(magic_slot < 0 || magic_slot >= g_arMagicItemTable.GetSize()) return;

			dynamic_slot = g_arMagicItemTable[magic_slot]->m_sSubType;	
			if(dynamic_slot < 0 || dynamic_slot >= MAGIC_COUNT) return;
			
			if(dynamic_slot == MAGIC_ALL_SKILL_UP)	// ╞╩╟╟┐┬└╟╕╡ ╛ў▒╫╖╣└╠╡х ╕╖▒т
			{
				SendSystemMsg( IDS_USER_ACCESSORI_SKILLUP, SYSTEM_ERROR, TO_ME);				
				return;
			}

			iCount++;
		}

		for(i = 0; i < iCount; i++)
		{
			if(g_arItemTable[sSid[i]]->m_byWear >= 6 && g_arItemTable[sSid[i]]->m_byWear <= 8)
			{
				if(m_UserItem[sMaterialSlot[i]].sDuration == 0)
				{
					SendSystemMsg( IDS_USER_ACCESSORI_OLD, SYSTEM_ERROR, TO_ME);
					return;
				}
			}
		}
	}

	switch(iCount)
	{
	case 100:
/*		if(m_UserItem[sMaterialSlot[0]].tMagic[5] <= 4) 
		{
			SendSystemMsg(IDS_USER_ACCESSORI_INVALID, SYSTEM_ERROR, TO_ME);	// 5╛ў └╠╟╧└╟ ╛╞└╠┼█└║ ╕о╞ч└╟┴╢░в, ╣о└х└╕╖╬ ╛ў▒╫╖╣└╠╡х ╟╧┴Ў ╛╩┤┬┤┘.
			return;		
		}
		if(m_UserItem[sMaterialSlot[0]].tMagic[5] > 7) return; // ╟╥ ╝Ў└╓┤┬ ╛ў▒╫╖╣└╠╡х┤┬ └╠╣╠ ┤┘╟▀┤┘.
*/
/*		if(g_arItemTable[sSid[0]]->m_byWear >= 6 && g_arItemTable[sSid[0]]->m_byWear <= 8)
		{
			sAccessori = sMaterialSlot[0];
			sRipel = sMaterialSlot[1];
		}
		else
		{
			sAccessori = sMaterialSlot[1];
			sRipel = sMaterialSlot[0];
			sSid[3] = sSid[1];
			sSid[1] = sSid[0];
			sSid[0] = sSid[3];
		}
*/
		if(sAccessori == -1 || sRipel == -1) return;

		iRandom = myrand(1, 10000);
		iUpgradeCount = m_UserItem[sAccessori].tMagic[5] - 5;
		switch(m_UserItem[sRipel].sSid)
		{
		case RIPEL_TOP:
			if(iRandom <= g_ItemAccessoriUpgrade[iUpgradeCount])	// Upgrade Success;
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelTop.GetSize() - 1);				
				sMagicSid = g_Ripel.m_arRipelTop[iMagicRandom];
				iSuccess = 1;
			}
			else ReSetItemSlot(&m_UserItem[sAccessori]);		// Ugrade Fail

			break;
		case RIPEL_BOTTOM:
			if(iRandom <= g_ItemAccessoriUpgrade[iUpgradeCount])	// Upgrade Success;
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelBottom.GetSize() - 1);				
				sMagicSid = g_Ripel.m_arRipelBottom[iMagicRandom];
				iSuccess = 1;
			}
			else ReSetItemSlot(&m_UserItem[sAccessori]);		// Ugrade Fail

			break;
		case RIPEL_LEFT:
			if(iRandom <= g_ItemAccessoriUpgrade[iUpgradeCount])	// Upgrade Success;
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelLeft.GetSize() - 1);				
				sMagicSid = g_Ripel.m_arRipelLeft[iMagicRandom];
				iSuccess = 1;
			}
			else ReSetItemSlot(&m_UserItem[sAccessori]);		// Ugrade Fail

			break;
		case RIPEL_RIGHT:
			if(iRandom <= g_ItemAccessoriUpgrade[iUpgradeCount])	// Upgrade Success;
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelRight.GetSize() - 1);				
				sMagicSid = g_Ripel.m_arRipelRight[iMagicRandom];
				iSuccess = 1;
			}
			else ReSetItemSlot(&m_UserItem[sAccessori]);		// Ugrade Fail

			break;
		case RIPEL_CREST:
			if(m_UserItem[sAccessori].tMagic[5] != 5 || m_UserItem[sAccessori].sSid==755)
			{
				SendSystemMsg(IDS_USER_ACCESSORI_CREST, SYSTEM_ERROR, TO_ME);	// ╕о╞ч└╟╣о└х└╕╖╬┤┬ 5╛ў└╟ ╛╫╝╝╝н╕о╕╕ ╛ў▒╫╖╣└╠╡х ╟╥ ╝Ў└╓╜└┤╧┤┘.
				return;
			}

			bUseCrest = TRUE;
			if(iRandom <= g_ItemAccessoriUpgrade[2])	// Upgrade Success;
			{
				while(1)
			{
				iCrestRandom = myrand(0, 100);
				if(iCrestRandom <= 15) 
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelTop.GetSize() - 1); 
				sMagicSid = g_Ripel.m_arRipelTop[iMagicRandom];
				m_UserItem[sAccessori].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
				iCrestCount++;
			}
			if(iCrestRandom > 15 && iCrestRandom <= 20) 
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelBottom.GetSize() - 1); 
				sMagicSid = g_Ripel.m_arRipelBottom[iMagicRandom];
				m_UserItem[sAccessori].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
				iCrestCount++;
			}
			if(iCrestRandom > 20 && iCrestRandom <= 30) 
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelLeft.GetSize() - 1); 
				sMagicSid = g_Ripel.m_arRipelLeft[iMagicRandom];
				m_UserItem[sAccessori].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
				iCrestCount++;
			}
			if(iCrestRandom > 30 && iCrestRandom <= 49) 
			{
				iMagicRandom = myrand(0, g_Ripel.m_arRipelRight.GetSize() - 1); 
				sMagicSid = g_Ripel.m_arRipelRight[iMagicRandom];
				m_UserItem[sAccessori].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
				iCrestCount++;
			}
			if(iCrestRandom > 49 && iAllSkill == 0) //╦∙╙╨1╝╝─▄
			{
				iAllSkill = 1;
				iMagicRandom = myrand(0, g_Ripel.m_arRipelCrest.GetSize() - 1);
				sMagicSid = g_Ripel.m_arRipelCrest[iMagicRandom];
				m_UserItem[sAccessori].tMagic[iCrestCount + 1] = (BYTE)sMagicSid;
				iCrestCount++;
			}

					if(iCrestCount >= 3) break;
				}

				m_UserItem[sAccessori].tMagic[5] += 3;
				m_UserItem[sAccessori].tIQ = RARE_ITEM;
				iSuccess = 1;
				//===============================================================║╧│╔╩╫╩╬╠с╨╤
				
				/*if(m_UserItem[sAccessori].tMagic[0] == 137 || m_UserItem[sAccessori].tMagic[1] == 137 || m_UserItem[sAccessori].tMagic[2] == 137|| m_UserItem[sAccessori].tMagic[3] == 137)
				{ 
                     CString strMsg;
					strMsg.Format("═ц╝╥:[%s] ║╧│╔б║ 1╝╝─▄ %s б╗", this->m_strUserID,g_arItemTable[m_UserItem[sAccessori].sSid]->m_strName );
                    m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				}*/
	//			if(m_UserItem[sAccessori].tMagic[0] == 137 || m_UserItem[sAccessori].tMagic[1] == 137 || m_UserItem[sAccessori].tMagic[2] == 137|| m_UserItem[sAccessori].tMagic[3] == 137)
	//			{ 
 //                   CString strMsg;
	//	            CString GoodsMagic;
	//	        for(int i = 0; i < 4; i++)
	//	       {
	//		if(m_UserItem[sAccessori].tMagic != 0)
	//		{
	//			GoodsMagic+=g_MagicArray[m_UserItem[sAccessori].tMagic[i]];
	//			GoodsMagic+=",";
	//		}
	//	}
 //                               
 //    strMsg.Format("═ц╝╥:б╛%sб┐║╧│╔б╛%sб┐:", this->m_strUserID,g_arItemTable[m_UserItem[sAccessori].sSid]->m_strName );//╣л╕ц╠с╩╛
	//	strMsg+=GoodsMagic;
	//	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
	//}
		if (iSuccess == 1) //╫╘╢п╔¤╝╢╠с╨╤
		{
			CString strMsg;
		    CString GoodsMagic;
			for(int i = 0; i < 4; i++)
			{
				if(m_UserItem[sAccessori].tMagic != 0)
				{
					GoodsMagic+=g_arMagicItemTable[m_UserItem[sAccessori].tMagic[i]]->m_strText;
			     	GoodsMagic+=",";
				}
			}
					strMsg.Format("%s:",g_arItemTable[m_UserItem[sAccessori].sSid]->m_strName );//╣л╕ц╠с╩╛
					strMsg+=GoodsMagic;
					m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL);
		}
//=============================================================================
				//=============================================================================
			}
			else
			{
				int K = 0;
				BYTE m_Slot = -1;
				for(m_Slot = 10; m_Slot < 34; m_Slot++)
				{	
					if(m_UserItem[m_Slot].sSid == 870)
					{
						if(m_UserItem[m_Slot].tIQ > 0)
						{
					      if(m_UserItem[m_Slot].sCount <= 1)
				              ReSetItemSlot(&m_UserItem[m_Slot]);
			              else m_UserItem[m_Slot].sCount -= 1;//╫ъ╩п╤╒╔л┤є╙┌0╡─╥▓╔╛│¤
						  SendSystemMsg("╫в╥т:╖╟╖и[╫ъ╩п],╥╤╔╛│¤!╟ы┴в╝┤╕№╗╗╒¤│г[╫ъ╩п]", SYSTEM_ERROR, TO_ME);
						}
						K = TRUE;
						break;
					}
					else
					{
						K = FALSE;
					}
				}
				if(K == TRUE)
				{
					RobItem(870,1);	//╔╛│¤░╫╫ъ╩п
					SendSystemMsg("╫ъ╩п▒г╗д,╩╫╩╬▓╗╧√╩з!", SYSTEM_ERROR, TO_ME);
				}
				else
				{
					ReSetItemSlot(&m_UserItem[sAccessori]);		// Ugrade Fail
                }
			  
			}
			break;
		default:
			SendSystemMsg(IDS_USER_ACCESSORI_RIPEL, SYSTEM_ERROR, TO_ME);	// ╕о╞ч└╟ ┴╢░в└╠│к ╣о└х└╗ ░б┴о ┐└╖б╡╬.
			return;		
		}

		if(bUseCrest == FALSE && iSuccess == 1)
		{
			m_UserItem[sAccessori].tMagic[5]++;
			if(iUpgradeCount == 0) m_UserItem[sAccessori].tMagic[1] = (BYTE)sMagicSid;
			if(iUpgradeCount == 1) m_UserItem[sAccessori].tMagic[2] = (BYTE)sMagicSid;
			if(iUpgradeCount == 2) m_UserItem[sAccessori].tMagic[3] = (BYTE)sMagicSid;
			m_UserItem[sAccessori].tIQ = RARE_ITEM;
		}

		if(iSuccess == 0)
		{
			iWeight = g_arItemTable[sSid[0]]->m_byWeight + g_arItemTable[sSid[1]]->m_byWeight;
		}
		else if(iSuccess == 1)
		{
			iWeight = g_arItemTable[sSid[1]]->m_byWeight;
		}

		if(m_UserItem[sRipel].sCount <= 1) ReSetItemSlot(&m_UserItem[sRipel]);
		else							   m_UserItem[sRipel].sCount -= 1;
		
		if(m_dwDN > ACCESSORI_UPGRADE_COST) m_dwDN -= ACCESSORI_UPGRADE_COST;
		else m_dwDN = 0;

		arMaterial.Add((BYTE)sAccessori);
		arMaterial.Add((BYTE)sRipel);

		break;
	case 3:
		if(g_arItemTable[sSid[0]]->m_byWear < 6 || g_arItemTable[sSid[0]]->m_byWear > 8) return;	// ╛ў▒╫╖╣└╠╡х ╟╧╖┴┤┬ ╛╞└╠┼█└╠ ╛╫╝╝╝н╕о░б ╛╞┤╧╕щ ╕о┼╧
		if(g_arItemTable[sSid[1]]->m_byWear < 6 || g_arItemTable[sSid[1]]->m_byWear > 8) return;	// ╛ў▒╫╖╣└╠╡х ╟╧╖┴┤┬ ╛╞└╠┼█└╠ ╛╫╝╝╝н╕о░б ╛╞┤╧╕щ ╕о┼╧
		if(g_arItemTable[sSid[2]]->m_byWear < 6 || g_arItemTable[sSid[2]]->m_byWear > 8) return;	// ╛ў▒╫╖╣└╠╡х ╟╧╖┴┤┬ ╛╞└╠┼█└╠ ╛╫╝╝╝н╕о░б ╛╞┤╧╕щ ╕о┼╧

		if(m_UserItem[sMaterialSlot[0]].tMagic[5] > 4) return;	

		if(m_UserItem[sMaterialSlot[0]].tMagic[5] != m_UserItem[sMaterialSlot[1]].tMagic[5] || 
		   m_UserItem[sMaterialSlot[0]].tMagic[5] != m_UserItem[sMaterialSlot[2]].tMagic[5] ||
		   m_UserItem[sMaterialSlot[1]].tMagic[5] != m_UserItem[sMaterialSlot[2]].tMagic[5] ) return;	// ░░└║ ╛ў▒╫╖╣└╠╡х ╝Ў░б ╛╞┤╧╕щ ╕о┼╧

		if(m_UserItem[sMaterialSlot[0]].tMagic[0] != m_UserItem[sMaterialSlot[1]].tMagic[0] || 
		   m_UserItem[sMaterialSlot[0]].tMagic[0] != m_UserItem[sMaterialSlot[2]].tMagic[0] ||
		   m_UserItem[sMaterialSlot[1]].tMagic[0] != m_UserItem[sMaterialSlot[2]].tMagic[0] ) return;	// ░░└║ ┤╔╖┬─б└╟ ╛╞└╠┼█└╠ ╛╞┤╧╕щ ╕о┼╧


		iWeight += (g_arItemTable[sSid[0]]->m_byWeight + g_arItemTable[sSid[1]]->m_byWeight);



		sMagicSid = m_UserItem[sMaterialSlot[0]].tMagic[0];

		sAid = g_arMagicItemTable[sMagicSid]->m_sAid;

		if(sAid + 1 >= g_arAccessoriUpTable.GetSize()) return;

		m_UserItem[sMaterialSlot[0]].tMagic[0] = g_arAccessoriUpTable[sAid + 1]->m_sSid;

		ReSetItemSlot(&m_UserItem[sMaterialSlot[1]]);
		ReSetItemSlot(&m_UserItem[sMaterialSlot[2]]);

		if(m_UserItem[sMaterialSlot[0]].tMagic[5] == 0) m_UserItem[sMaterialSlot[0]].tMagic[5] = 2;
		else m_UserItem[sMaterialSlot[0]].tMagic[5]++;

		if(m_dwDN > ACCESSORI_UPGRADE_COST) m_dwDN -= ACCESSORI_UPGRADE_COST;
		else m_dwDN = 0;

		arMaterial.Add((BYTE)sMaterialSlot[0]);
		arMaterial.Add((BYTE)sMaterialSlot[1]);
		arMaterial.Add((BYTE)sMaterialSlot[2]);

		iSuccess = 1;

		break;
	default:
		return ;
	}

	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...
	
	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();

	CBufferEx TempBuf;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	if(iSuccess == 1)	TempBuf.Add(SUCCESS);
	else				TempBuf.Add(FAIL);
	TempBuf.Add((BYTE)arMaterial.GetSize());

	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		bySlot = (BYTE)arMaterial[i];
		
		TempBuf.Add(bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}

	Send(TempBuf, TempBuf.GetLength());

	arMaterial.RemoveAll();
}
//////////////////////////////////////////
//╗╞╜Ё┴щ  ╜Ё╩п
void USER::UpgradeHJItemReq(TCHAR *pBuf)
{
	if(!m_MItemLock && o_yehuoini[0]->mimabaohu == 1)
	{
        SendSystemMsg( "╟ы╧╚╜т│¤├▄┬ы▒г╗д║є╘┌▓┘╫ў", SYSTEM_ERROR, TO_ME);
		return;
	}
	int iSid = -1;
	int iIQ = -1;
	int iCount = 0, iThings = 0;
	int i, j, index = 0;
	int iWeight = 0;
	short sMaterialSlot;
	int isMagic = 0;

	int iSuccess = 0;

	BYTE tWear = 0;
	BYTE tIQ = 0, bySlot = 0;

	CBufferEx TempBuf;

	ItemList	MyItem[TOTAL_ITEM_NUM];

	CByteArray arMaterial;
	arMaterial.RemoveAll();
	sMaterialSlot = GetShort(pBuf, index);					//╗╞╜Ё╩п═╖
	short sSourceSlot = GetShort(pBuf, index);				// ╫░▒╕


	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX) return;

	if(m_dwDN < 100000)
	{
		SendSystemMsg( "╛Ў╒╜▒╥▓╗╫у!╩╣╙├╗╞╜Ё╩п═╖╔¤╝╢╨ш10═Є", SYSTEM_ERROR, TO_ME);
		return ;		 
	}
    iSid = m_UserItem[sSourceSlot].sSid;
	if(iSid < 0 || iSid >= g_arItemTable.GetSize()) return;
	if( iSid == 669 || iSid == 670 )						
	{
		SendSystemMsg( IDS_USER_CANT_UPGRADE_ITEM, SYSTEM_ERROR, TO_ME);
		return;
	}	
	if(g_arItemTable[iSid]->m_byWear >= 6 && (g_arItemTable[iSid]->m_byWear!=122) && (g_arItemTable[iSid]->m_byWear!=123) 
		&& (g_arItemTable[iSid]->m_byWear!=124) && (g_arItemTable[iSid]->m_byWear!=125))
		return;
	if ( m_UserItem[sSourceSlot].tMagic[5] != 6  &&  g_arItemTable[m_UserItem[sSourceSlot].sSid]->m_byRLevel < 100 )
	{
		SendSystemMsg( "╓╗─▄╕─6╕─╡└╛▀", SYSTEM_ERROR, TO_ME);
		return;
	}
	iIQ = m_UserItem[sSourceSlot].tIQ;
	
	
	for(i = 0; i < TOTAL_ITEM_NUM; i++)			// ╛╞└╠┼█ ┴д║╕ ╣щ╛ў
	{
		MyItem[i] = m_UserItem[i];
	}

									
	

	if(sMaterialSlot >= EQUIP_ITEM_NUM && sMaterialSlot < TOTAL_INVEN_MAX)
	{
		iSid = MyItem[sMaterialSlot].sSid;
		/////////////////////╗╞╜Ё╬ф╞ўBUG
		if(iSid < 0 || iSid >= g_arItemTable.GetSize()) return; //╖└╓╣╬▐└╡┤Є╬╥╓ў│╠╨Є
		tWear = g_arItemTable[iSid]->m_byWear;
		int sSourcebyWear =  g_arItemTable[m_UserItem[sSourceSlot].sSid]->m_byWear;
		if(tWear != BLESSING_WEAPONLESS_WEAR && tWear != BLESSING_ARMORLESS_WEAR) return;

		if((tWear == BLESSING_WEAPONLESS_WEAR) && (sSourcebyWear !=1)) return;
		if((tWear == BLESSING_ARMORLESS_WEAR) && (sSourcebyWear ==1)) return;
           ///////////////////////////////////////////////////////////////


		if(MyItem[sMaterialSlot].sCount <= 0) return;

		iWeight += g_arItemTable[iSid]->m_byWeight;

		MyItem[sMaterialSlot].sCount -= 1;
		arMaterial.Add((BYTE)sMaterialSlot);
	}
	else return;
	if( m_dwDN <= 100000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 100000;
	UpdateUserItemDN();						
	SendMoneyChanged();


	int random = myrand(1,10000);
	if(random <= 10000 && random >=9500)			//+4╕─
	{
		m_UserItem[sSourceSlot].tMagic[5] +=4;
		if (m_UserItem[sSourceSlot].tMagic[5] > 10)
			m_UserItem[sSourceSlot].tMagic[5] = 10;
		iSuccess = 1;
	}
	else if (random < 9500 && random >=8500)
	{
		m_UserItem[sSourceSlot].tMagic[5] +=3;
		if (m_UserItem[sSourceSlot].tMagic[5] > 10)
			m_UserItem[sSourceSlot].tMagic[5] = 10;
		iSuccess = 1;
	}
	else if (random < 8500 && random >=6000)
	{
		m_UserItem[sSourceSlot].tMagic[5] +=2;
		if (m_UserItem[sSourceSlot].tMagic[5] > 10)
			m_UserItem[sSourceSlot].tMagic[5] = 10;
		iSuccess = 1;
	}
	else if (random < 6000 && random >=0)
	{
		m_UserItem[sSourceSlot].tMagic[5] +=1;
		if (m_UserItem[sSourceSlot].tMagic[5] > 10)
			m_UserItem[sSourceSlot].tMagic[5] = 10;
		iSuccess = 1;
	}
	else 
	{
		iSuccess = 0;
	//	SendSystemMsg( "DEBUG╟┐╗п╩з░▄!", SYSTEM_ERROR, TO_ME);
	}
    
	
    TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = 1 + arMaterial.GetSize();

	if(!iSuccess)	TempBuf.Add((BYTE)0x00); //╜╟╞╨
	else			TempBuf.Add((BYTE)0x01);
	int iUp = m_UserItem[sSourceSlot].tMagic[5];
	//if( iSuccess = 1 && iUp >=8 )
	//	{
	//		CString sysMsg;                                               //  m_UserItem[sSourceSlot].tMagic
 //           sysMsg.Format("═ц╝╥ %s ╜л╬я╞╖ [%s]╟┐╗п╬к %d ╝╢ ! ",this->m_strUserID,g_arItemTable[m_UserItem[sSourceSlot].sSid]->m_strName ,iUp );
 //           SendSystemMsg(sysMsg.GetBuffer(sysMsg.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);
	//   }
	//================================================================================================╫░▒╕▒ф═т╣█
	if(iUp >=1)
	{
		switch(m_UserItem[sSourceSlot].sSid)
		{
		case 337://┴·╓о╥э
			m_UserItem[sSourceSlot].sSid = 1581;//▒╙╗д╓о╥э
			break;
		case 510://╟┐╗п┴·╓о╥э
		case 511://╟┐╗п┴·╓о╥э
		case 512://╟┐╗п┴·╓о╥э
			m_UserItem[sSourceSlot].sSid = 1582;//╟┐╗п▒╙╗д╓о╥э
			break;
		case 513://┴·╓о╥эs
		case 514://┴·╓о╥эs
			m_UserItem[sSourceSlot].sSid = 1583;//▒╙╗д╓о╥эs
			break;

			
		case 330://┴·╓о┼н
			m_UserItem[sSourceSlot].sSid = 1578; //┴щш╤╖и╒╚
			break;
		case 475://╟┐╗п┴·╓о┼н
		case 476://╟┐╗п┴·╓о┼н
		case 477://╟┐╗п┴·╓о┼н
			m_UserItem[sSourceSlot].sSid = 1579; //╟┐╗п┴щш╤╖и╒╚
			break;
		case 478://┴·╔ё╓о┼нбкS
		case 479://┴·╔ё╓о┼нбкS
			m_UserItem[sSourceSlot].sSid = 1580;//┴щш╤╖и╒╚s
			break;



		case 323://╖┤I
			m_UserItem[sSourceSlot].sSid = 1572;//╖┤1
			break;
		case 440://╖┤II
		case 441://╖┤II
		case 442://╖┤II
			m_UserItem[sSourceSlot].sSid = 1573;//╖┤2
			break;
		case 443://╖┤III
		case 444://╖┤III
			m_UserItem[sSourceSlot].sSid = 1574;//╖┤3
			break;



		case 316://┴·╔ё┼┌g2
			m_UserItem[sSourceSlot].sSid = 1575;
			break;
		case 405://┴·╔ё┼┌g4
		case 406://┴·╔ё┼┌g4
		case 407://┴·╔ё┼┌g4
			m_UserItem[sSourceSlot].sSid = 1576;//╖┤1
			break;
		
		case 408://┴·╔ё┼┌g6
		case 409://┴·╔ё┼┌g6
		   m_UserItem[sSourceSlot].sSid = 1577;
		   break;
		}
	}
	if( iSuccess = 1 && iUp >= 1  )
	{
		if ( g_arItemTable[m_UserItem[sSourceSlot].sSid]->m_byWear == 1 )
		{
			CString sysMsg;                                             
            sysMsg.Format(" %s ╩╣╙├╗╞╜Ё┴щ╩п╜л [%s]╟┐╗п╬к %d ╝╢ ! ",this->m_strUserID,g_arItemTable[m_UserItem[sSourceSlot].sSid]->m_strName ,iUp );
            SendSystemMsg(sysMsg.GetBuffer(sysMsg.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);
		}else{
			CString sysMsg;                                              
            sysMsg.Format(" %s ╩╣╙├╗╞╜Ё╛з╩п╜л [%s]╟┐╗п╬к %d ╝╢ ! ",this->m_strUserID,g_arItemTable[m_UserItem[sSourceSlot].sSid]->m_strName ,iUp );
            SendSystemMsg(sysMsg.GetBuffer(sysMsg.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);
		}
	}

	TempBuf.Add((BYTE)index);

	TempBuf.Add((BYTE)sSourceSlot);					// ┴╓ ╛╞└╠┼█╕ж ╕╒└· 	
	TempBuf.Add(m_UserItem[sSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[sSourceSlot].sSid);
	TempBuf.Add(m_UserItem[sSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[sSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSourceSlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sSourceSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSourceSlot].tIQ); 

	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		bySlot = (BYTE)arMaterial[i];

		MakeItemLog( &m_UserItem[bySlot], ITEMLOG_BLESS_USE );
		FlushItemLog( TRUE );

		if(m_UserItem[bySlot].sCount <= 1) ReSetItemSlot(&m_UserItem[bySlot]);// ╝╥║ё╝║ └╠╣╟╖╬ ╕╒└· ├╩▒т╚н╟╧░э 
		else							   m_UserItem[bySlot].sCount -= 1;

		TempBuf.Add(bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}

	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...

	Send(TempBuf, TempBuf.GetLength());

	arMaterial.RemoveAll();			

			
}
//╗·╨╡▓─┴╧
void USER::EbodyMatrial(int sSourceSlot)								
{
	//┼╨╢╧╬╗╓├
	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX)
		return;
	short sSid = m_UserItem[sSourceSlot].sSid;
	if(sSid <0||sSid>g_arItemTable.GetSize())
		return;
	if(!IsEbodyItem(sSid))
		return;	
	if( m_UserItem[sSourceSlot].tMagic[5]<7)
	{
		return;
	}
	if(m_UserItem[sSourceSlot].tIQ!=2)
		return ;

	if(m_dwDN < 200000)
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return ;		// ░°░▌┐ы ╛ў▒╫╖╣└╠╡х ║ё┐ы║╕┤┘ └█└╕╕щ 
	}

	if( m_dwDN <= 200000 ) 
		m_dwDN = 0;
	else 
		m_dwDN = m_dwDN - 200000;

	m_UserItem[sSourceSlot].tMagic[MAGIC_100_ADD_POS]=1;

	//m_UserItem[sSourceSlot].tIQ = SUPER_EBODY_ITEM;
	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();

	CBufferEx TempBuf;
	int j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	TempBuf.Add((BYTE)9);
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)sSourceSlot);
	TempBuf.Add(m_UserItem[sSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[sSourceSlot].sSid);
	TempBuf.Add(m_UserItem[sSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[sSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSourceSlot].sCount);

	for(j =0; j < MAGIC_NUM; j++) 
		TempBuf.Add(m_UserItem[sSourceSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSourceSlot].tIQ); 
	Send(TempBuf, TempBuf.GetLength());
}

//╗·╨╡╚б╧√▓─┴╧╗п
void USER::EbodyCancelMetral(int sSourceSlot)								
{
	//┼╨╢╧╬╗╓├
	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX)
		return;
	short sSid = m_UserItem[sSourceSlot].sSid;
	if(sSid <0||sSid>g_arItemTable.GetSize())
		return;
	if(!IsEbodyItem(sSid))
		return;	
	if( m_UserItem[sSourceSlot].tMagic[5]<7)
	{
		return;
	}
	if(m_UserItem[sSourceSlot].tIQ!=2)
		return ;
	if(m_UserItem[sSourceSlot].tMagic[6]!=1)
		return ;

	if(m_dwDN < 200000)
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return ;		// ░°░▌┐ы ╛ў▒╫╖╣└╠╡х ║ё┐ы║╕┤┘ └█└╕╕щ 
	}

	if( m_dwDN <= 200000 ) 
		m_dwDN = 0;
	else 
		m_dwDN = m_dwDN - 200000;

	m_UserItem[sSourceSlot].tMagic[MAGIC_100_ADD_POS]=0;

	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();

	CBufferEx TempBuf;
	int j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	TempBuf.Add((BYTE)10);
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)sSourceSlot);
	TempBuf.Add(m_UserItem[sSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[sSourceSlot].sSid);
	TempBuf.Add(m_UserItem[sSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[sSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSourceSlot].sCount);

	for(j =0; j < MAGIC_NUM; j++) 
		TempBuf.Add(m_UserItem[sSourceSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSourceSlot].tIQ); 
	Send(TempBuf, TempBuf.GetLength());
}
////////////////////////////////////////////////////////////////////////////
void USER::ItemExchange(TCHAR *pBuf) //E UPGRADE_OPEN 24 37 
{
	int index=0,sSid;
	short Slot = GetShort(pBuf, index);//
	short Slot1 = GetShort(pBuf, index);//
	short Slot2 = GetShort(pBuf, index);//
	short Slot3 = GetShort(pBuf, index);//
	short Slot4 = GetShort(pBuf, index);//
	short newSlot= GetEmptySlot(INVENTORY_SLOT);
	CUIntArray arMaterial;

	if(Slot < EQUIP_ITEM_NUM || Slot >= TOTAL_INVEN_MAX) return;
	if((Slot1!=-1) && (Slot1 < EQUIP_ITEM_NUM || Slot1 >= TOTAL_INVEN_MAX))return;
	if((Slot2!=-1) && (Slot2 < EQUIP_ITEM_NUM || Slot2 >= TOTAL_INVEN_MAX))return;
	if((Slot3!=-1) && (Slot3 < EQUIP_ITEM_NUM || Slot3 >= TOTAL_INVEN_MAX))return;
	if((Slot4!=-1) && (Slot4 < EQUIP_ITEM_NUM || Slot4 >= TOTAL_INVEN_MAX))return;
	if(m_UserItem[Slot].sSid==-1) return;

	if((Slot != -1) && (m_UserItem[Slot].sSid < 0 || m_UserItem[Slot].sSid >= g_arItemTable.GetSize())) return;
	if((Slot1 != -1) && (m_UserItem[Slot1].sSid < 0 || m_UserItem[Slot1].sSid >= g_arItemTable.GetSize())) return;

	//5╛з┴щ╩п║╧│╔╥╗╕Ў│м╛з┴щ  ╖╤╙├10W
	if(m_UserItem[Slot].sSid==847 || m_UserItem[Slot].sSid==848){
		if(m_UserItem[Slot].sCount<5) return ;
		if(m_UserItem[Slot].sCount==5) newSlot=Slot;
		if(newSlot==-1) {SendSystemMsg( "├╗╙╨╫у╣╗╬╗╓├┤ц╖┼╨┬╞╖", SYSTEM_NORMAL, TO_ME); return ;};

		if(m_dwDN < 100000)
		{
			SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
			return ;		
		}
		if( m_dwDN <= 100000 ) m_dwDN = 0;
		else m_dwDN = m_dwDN - 100000;
		SendMoneyChanged();

		sSid=m_UserItem[Slot].sSid-2;
		m_UserItem[Slot].sCount=m_UserItem[Slot].sCount-5;

		if(m_UserItem[Slot].sCount==0){
			ReSetItemSlot(&m_UserItem[Slot]);
		}
		ReSetItemSlot(&m_UserItem[newSlot]);
		if (sSid < 0 || sSid >= g_arItemTable.GetSize()) return;


		m_UserItem[newSlot].sLevel = g_arItemTable[sSid]->m_byRLevel;
		m_UserItem[newSlot].sSid = sSid;
		m_UserItem[newSlot].sCount = 1;
		m_UserItem[newSlot].sDuration = g_arItemTable[sSid]->m_sDuration;
		m_UserItem[newSlot].sBullNum = 0;
		m_UserItem[newSlot].tIQ = 0;
		m_UserItem[newSlot].iItemSerial = 0;

		arMaterial.Add(Slot);
		if(Slot!=newSlot) arMaterial.Add(newSlot);
	}else if(g_arItemTable[m_UserItem[Slot].sSid]->m_byWear>=122 && g_arItemTable[m_UserItem[Slot].sSid]->m_byWear<=125 ){
		if(Slot1==-1) return ;
		if(g_arItemTable[m_UserItem[Slot1].sSid]->m_byWear<122 || g_arItemTable[m_UserItem[Slot1].sSid]->m_byWear>125)
			return ;
		if(m_dwDN < 2000000)
		{
			SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
			return ;		
		}
		if( m_dwDN <= 2000000 ) m_dwDN = 0;
		else m_dwDN = m_dwDN - 2000000;
		SendMoneyChanged();
		ReSetItemSlot(&m_UserItem[Slot]);
		ReSetItemSlot(&m_UserItem[Slot1]);
		newSlot=Slot;

		int tEBodySid,i;
		int iRandom = myrand(1, 1000);             
		for(i = 0; i < g_arEBodyTable.GetSize(); i++)
		{
			if(iRandom <= g_arEBodyTable[i]->m_sRandom) 
			{
				tEBodySid = g_arEBodyTable[i]->m_tSid;
				break;
			}	
		}
		m_UserItem[newSlot].sLevel = g_arItemTable[907]->m_byRLevel;
		m_UserItem[newSlot].sSid = 907;
		m_UserItem[newSlot].sCount = 1;
		m_UserItem[newSlot].sDuration = g_arItemTable[907]->m_sDuration;
		m_UserItem[newSlot].sBullNum = 0;
		m_UserItem[newSlot].tMagic[0]=tEBodySid;
		
		m_UserItem[newSlot].tIQ = 2;
		m_UserItem[newSlot].iItemSerial = 0;

		arMaterial.Add(Slot);
		arMaterial.Add(Slot1);
		

	}else if(g_arItemTable[m_UserItem[Slot].sSid]->m_byWear==126){
		//2яп╩п║╧│╔╥╗╕Ў╤й╗ъ╖╤╙├100W
		if(Slot1==-1) return;
		if(g_arItemTable[m_UserItem[Slot1].sSid]->m_byWear!=126) return ;
		if(m_dwDN < 500000)
		{
			SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
			return ;		
		}
		if( m_dwDN <= 500000 ) m_dwDN = 0;
		else m_dwDN = m_dwDN - 500000;
		SendMoneyChanged();
		ReSetItemSlot(&m_UserItem[Slot]);
		ReSetItemSlot(&m_UserItem[Slot1]);
		newSlot=Slot;

		m_UserItem[newSlot].sLevel = g_arItemTable[908]->m_byRLevel;
		m_UserItem[newSlot].sSid = 908;
		m_UserItem[newSlot].sCount = 1;
		m_UserItem[newSlot].sDuration = g_arItemTable[908]->m_sDuration;
		m_UserItem[newSlot].sBullNum = 0;
		m_UserItem[newSlot].tIQ = 0;
		m_UserItem[newSlot].iItemSerial = 0;
		arMaterial.Add(Slot);
		arMaterial.Add(Slot1);

	}else{
		return ;
	}
	//╖в╦═╜с╣√

	CBufferEx TempBuf;
	int i,j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = arMaterial.GetSize();
	TempBuf.Add((BYTE)8);
	TempBuf.Add((BYTE)index);
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());
}
/// -->╩Ї╨╘▒ф╕№
////////////////////////////////////////////////////////////////////////////
void USER::UpgradeItemAttrReq(short sSourceSlot,short sMaterialSlot)
{
	
	
	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX) return;
	int iSid = m_UserItem[sSourceSlot].sSid;
	if(iSid < 0 || iSid >= g_arItemTable.GetSize()) return;
	
	if(g_arItemTable[iSid]->m_byWear >= 6 && (g_arItemTable[iSid]->m_byWear!=122) && (g_arItemTable[iSid]->m_byWear!=123) 
		 && (g_arItemTable[iSid]->m_byWear!=124) && (g_arItemTable[iSid]->m_byWear!=125))
		 return;

	if(m_UserItem[sMaterialSlot].sSid == 1286 && g_arItemTable[iSid]->m_byWear != 1)
	{
		SendSystemMsg("╖┼╚ы╡─╡└╛▀▓╗╩╟╬ф╞ў!",SYSTEM_ERROR,TO_ME);
		return ;
	}
	if(m_UserItem[sMaterialSlot].sSid == 1287 && g_arItemTable[iSid]->m_byWear == 1)
	{
		SendSystemMsg("╖┼╚ы╡─╡└╛▀▓╗╩╟╖└╛▀!",SYSTEM_ERROR,TO_ME);
		return ;
	}
	if(m_UserItem[sSourceSlot].tMagic[5] < 10)
	{
		SendSystemMsg("▒╪╨ы╩╟+10(░№║м+10)╥╘╔╧╡└╛▀▓┼┐╔▒ф╕№╩Ї╨╘!",SYSTEM_ERROR,TO_ME);
		return;
	}
	int iFindAttrId = 0;
	switch(m_UserItem[sMaterialSlot].tMagic[0])
	{
	case 162: //┴ж┴┐15
		iFindAttrId = 161;//10┴ж┴┐
		break;
	case 158: //├Ї╜▌15
		iFindAttrId = 157;//10├Ї╜▌
		break;
	case 156: //╠х╓╩15
		iFindAttrId = 155;//10╠х╓╩
		break;
	case 164: //╓╟╗█15
		iFindAttrId = 163;//10╓╟╗█
		break;
	case 166: //╓╟┴ж15
		iFindAttrId = 165;//10╓╟┴ж
		break;
	case 193://150╤к
		iFindAttrId = 159;//100╤к
		break;
	case 190://50┐╣
		iFindAttrId = 135;//25┐╣
		break;
    case 195://╛н╤щ30%╘Ў╝╙
		iFindAttrId = 154;//15%╗╪▒▄
		break;
	case 194://50╖└
		iFindAttrId = 130;//10╖└╙∙
		break;
	case 161://10┴ж┴┐
		iFindAttrId = 107;//5┴ж┴┐
		break;
	case 157://10├Ї╜▌
		iFindAttrId = 109;//5├Ї╜▌
		break;
	case 163://10╓╟╗█
		iFindAttrId = 110;//5╓╟╗█
		break;
	default:
		return ;
	}
	int FindAttrSlot = -1;

	for(int i = 0; i<5;i++)
	{
		if(m_UserItem[sSourceSlot].tMagic[i] == iFindAttrId)
		{
			FindAttrSlot = i;
			break;
		}
	}
	if(FindAttrSlot == -1)
	{
		SendSystemMsg("├╗╙╨╒╥╡╜╞е┼ф╡─╩Ї╨╘,╩Ї╨╘▒ф╕№╩з░▄!",SYSTEM_ERROR,TO_ME);
		return;
	}
	//╝ї╚е╟о
	if( m_dwDN <= 5000000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 5000000;
	UpdateUserItemDN();						
	SendMoneyChanged();	

	int iRandom = myrand(1, 10000);

	CBufferEx TempBuf;
	TempBuf.Add(UPGRADE_ITEM_RESULT);

	if(iRandom >(10000*0.6f))   //╩з░▄┬╩ ╩¤╓╡╘╜╨б │╔╣ж┬╩╘╜╡═
	{ //╩з░▄
		TempBuf.Add((BYTE)0x00);
		m_UserItem[sSourceSlot].tMagic[5]--;
	}
	else
	{
		TempBuf.Add((BYTE)0x01);
		m_UserItem[sSourceSlot].tMagic[FindAttrSlot] = m_UserItem[sMaterialSlot].tMagic[0];
	}
	ReSetItemSlot(&m_UserItem[sMaterialSlot]);

	TempBuf.Add((BYTE)2);

	TempBuf.Add((BYTE)sSourceSlot);					
	TempBuf.Add(m_UserItem[sSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[sSourceSlot].sSid);
	TempBuf.Add(m_UserItem[sSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[sSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSourceSlot].sCount);
	for(int j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sSourceSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSourceSlot].tIQ); 

	TempBuf.Add((BYTE)sMaterialSlot);
	TempBuf.Add(m_UserItem[sMaterialSlot].sLevel);
	TempBuf.Add(m_UserItem[sMaterialSlot].sSid);
	TempBuf.Add(m_UserItem[sMaterialSlot].sDuration);
	TempBuf.Add(m_UserItem[sMaterialSlot].sBullNum);
	TempBuf.Add(m_UserItem[sMaterialSlot].sCount);
	for(int j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sMaterialSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sMaterialSlot].tIQ); 

	GetRecoverySpeed();							

	Send(TempBuf, TempBuf.GetLength());
}
void USER::UpgradeBlessingItemReq(TCHAR *pBuf, int type)
{
	if(!m_MItemLock && o_yehuoini[0]->mimabaohu == 1)
	{
        SendSystemMsg( "╟ы╧╚╜т│¤├▄┬ы▒г╗д║є╘┌▓┘╫ў", SYSTEM_ERROR, TO_ME);
		return;
	}
	int iSid = -1,iMaterialSid = -1;
	int iIQ = -1;
	int sSourcebyWear = -1;
    int iCount = 0, iThings = 0;
	int i, j, index = 0;
	int iWeight = 0;
	short sMaterialSlot;

	int iSuccess = 0;

	BYTE tWear = 0;
	BYTE tIQ = 0, bySlot = 0;

	CBufferEx TempBuf;

	ItemList	MyItem[TOTAL_ITEM_NUM];

	CByteArray arMaterial;
	arMaterial.RemoveAll();

	short sSourceSlot = GetShort(pBuf, index);				// ╝▒┼├╟╤ ╛╞└╠┼█ ╜╜╖╘╣°╚г

	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX) return;

	iSid = m_UserItem[sSourceSlot].sSid;
	if(iSid < 0 || iSid >= g_arItemTable.GetSize()) return;
	if( iSid == 669 || iSid == 670 )						// ╛ў▒╫╖╣└╠╡х ╟╧╖┴┤┬ ╛╞└╠┼█└╠ ▒█╖п▒╫┴╛╖∙╢є╕щ
	{
		SendSystemMsg( IDS_USER_CANT_UPGRADE_ITEM, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(g_arItemTable[iSid]->m_byWear >= 6 && (g_arItemTable[iSid]->m_byWear!=122) && (g_arItemTable[iSid]->m_byWear!=123) 
		 && (g_arItemTable[iSid]->m_byWear!=124) && (g_arItemTable[iSid]->m_byWear!=125))
		 return;
    sSourcebyWear = g_arItemTable[iSid]->m_byWear;
    iIQ = m_UserItem[sSourceSlot].tIQ;
	switch(iIQ)
	{
	case NORMAL_ITEM:
		break;
	case MAGIC_ITEM:
		iCount = 1;
		iThings = MATERIAL_MAGIC_UP_ITEM;
		break;
	case RARE_ITEM:
		iCount = 1;
		iThings = MATERIAL_RARE_UP_ITEM;
		break;
	case REMODEL_ITEM:
	case REMODEL_MAGIC_ITEM:
		iCount = 2;
		iThings = MATERIAL_REMODEL_UP_ITEM;
		break;
	case 12: //╞╒═и░┘╝╢
		iCount = 1;
		iThings = MATERIAL_RARE_UP_ITEM;
		break;
	case 15://│м╝╢╗·╨╡
		iCount = 4;
		iThings = MATERIAL_EBODY_UP_ITEM;
		break;
	case 18: //130╠╫
		iCount = 1;
		iThings = MATERIAL_RARE_UP_ITEM;
		break;
	default:
		return;
	}
	
    if( (g_arItemTable[iSid]->m_byWear==122) || (g_arItemTable[iSid]->m_byWear==123) 
		|| (g_arItemTable[iSid]->m_byWear==124) || (g_arItemTable[iSid]->m_byWear==125))
	{
			iCount = 2;
			iThings = MATERIAL_EBODY_UP_ITEM;
		if(IsSuperEbodyItem(iSid))
			iCount = 4;
//╗·╨╡╔э╠х15╕─╩╟╔╧╧▐
		BYTE t = m_UserItem[sSourceSlot].tMagic[5];
		if(t >= 10) 
			return ;	
	}

		
	for(i = 0; i < TOTAL_ITEM_NUM; i++)			// ╛╞└╠┼█ ┴д║╕ ╣щ╛ў
	{
		MyItem[i] = m_UserItem[i];
	}

	sMaterialSlot = -1;									
	sMaterialSlot = GetShort(pBuf, index);
	//╣·╖■┤╦┤ж╘Ў╝╙┴╦╥╗╕Ў┐╒╫╓╜┌00
	BYTE bNull = GetByte(pBuf,index);
	if(sMaterialSlot >= EQUIP_ITEM_NUM && sMaterialSlot < TOTAL_INVEN_MAX)
	{
		iSid = MyItem[sMaterialSlot].sSid;

        if(iSid < 0 || iSid >= g_arItemTable.GetSize()) return;
		//=================================================================╠э╝╙╩Ї╨╘
		if(g_arItemTable[iSid]->m_sSid == 1188)
		{
			AddShuxing3PaiReq(sSourceSlot , sMaterialSlot);
			return;
		}
       //===============================================================

	    if(type == 2)
		{   
		//	if(iIQ==18)
		//	{
          //       SendSystemMsg("130╝╢╫░▒╕╬ф╞ў╓╗─▄╙├═ї╒▀╛з╩п/═ї╒▀┴щ╩п╟┐╗п.", SYSTEM_ERROR, TO_ME);
			//     return; 
		    //}
			if(iSid != 845 && iSid != 846) return;
			tWear = g_arItemTable[iSid]->m_byWear;
			if(tWear != BLESSING_WEAPONLESS_WEAR && tWear != BLESSING_ARMORLESS_WEAR ) return;
			if((tWear == BLESSING_WEAPONLESS_WEAR) && (sSourcebyWear !=1)) return;
			if((tWear == BLESSING_ARMORLESS_WEAR) && (sSourcebyWear ==1)) return;
			if(m_dwDN < 100000)
		    {
			     SendSystemMsg( "╛Ў╒╜▒╥▓╗╫у!╩╣╙├╔¤╝╢╡└╛▀╨ш╥к10═Є!", SYSTEM_ERROR, TO_ME);
			     return;		
		    }

		     if( m_dwDN <= 100000 ) m_dwDN = 0;
		     else m_dwDN = m_dwDN - 100000;	
			 UpdateUserItemDN();						
	         SendMoneyChanged();
		}

		
		else if(type == 3)
		{
			if(iIQ==18)
			{
                 SendSystemMsg("130╝╢╫░▒╕╬ф╞ў╓╗─▄╙├═ї╒▀╛з╩п/═ї╒▀┴щ╩п╟┐╗п.", SYSTEM_ERROR, TO_ME);
			     return; 
		    }
			if(iIQ==12) //░┘╝╢▓╗─▄╙├╛з╩п┴щ╩п╔¤╝╢
				return;
			if(iSid != 847 && iSid != 848) return;
			tWear = g_arItemTable[iSid]->m_byWear;
			if(tWear != NORMAL_WEAPONLESS_WEAR && tWear != NORMAL_ARMORLESS_WEAR) return;
			if((tWear == NORMAL_WEAPONLESS_WEAR || tWear == BLESSING_WEAPONLESS_WEAR) && (sSourcebyWear !=1)) return;
			if((tWear == NORMAL_ARMORLESS_WEAR || tWear == BLESSING_ARMORLESS_WEAR) && (sSourcebyWear ==1)) return;
			
			if(m_dwDN < 100000)
		    {
			     SendSystemMsg( "╛Ў╒╜▒╥▓╗╫у!╩╣╙├╛з╩п,┴щ╩п╨ш╥к10═Є!", SYSTEM_ERROR, TO_ME);
			     return;		
		    }

		     if( m_dwDN <= 100000 ) m_dwDN = 0;
		     else m_dwDN = m_dwDN - 100000;	
			 UpdateUserItemDN();						
	         SendMoneyChanged();
		}


		else if(type == 12)
		{
			tWear = g_arItemTable[iSid]->m_byWear;
			if(tWear != BLESSING_WEAPONLESS_WEAR && tWear != BLESSING_ARMORLESS_WEAR) return;
			if(g_arItemTable[iSid]->m_byRLevel>60)
				return;
		}else if(type==9)
		{
			if(iSid != 983 && iSid != 1669) return;
			tWear = g_arItemTable[iSid]->m_byWear;
			if(tWear != BLESSING_WEAPONLESS_WEAR && tWear != BLESSING_ARMORLESS_WEAR && tWear!=28) return;
			if((tWear == BLESSING_ARMORLESS_WEAR) && (sSourcebyWear ==1)) return;
			if(m_dwDN < 100000)
		    {
			     SendSystemMsg( "╛Ў╒╜▒╥▓╗╫у!╩╣╙├╫г╕г▒ж╩п╨ш╥к10═Є!", SYSTEM_ERROR, TO_ME);
			     return;		
		    }

		     if( m_dwDN <= 100000 ) m_dwDN = 0;
		     else m_dwDN = m_dwDN - 100000;	
			 UpdateUserItemDN();						
	         SendMoneyChanged();
		

		}else if(type==49)
		{
			if(iSid == 1287 || iSid == 1286)
			{
			  if(m_dwDN > 10000000)
		      {
				UpgradeItemAttrReq(sSourceSlot,sMaterialSlot);
				return;
			  }
			  else
			  {
                SendSystemMsg("─·╛Ў╒╜▒╥▓╗╫у,▒ф╕№╩Ї╨╘╨ш1000═Є╛Ў╒╜▒╥!", SYSTEM_ERROR, TO_ME);
				return;
		      }
			}
			if(iSid != 1438 && iSid != 1437) return;
			tWear = g_arItemTable[iSid]->m_byWear;
			if(tWear != 182 && tWear!=183) return;
			if(m_dwDN < 200000)
		    {
			      SendSystemMsg( "╛Ў╒╜▒╥▓╗╫у!╩╣╙├═ї╒▀╩п═╖╨ш╥к20═Є!", SYSTEM_ERROR, TO_ME);
			     return;		
		    }

		     if( m_dwDN <= 200000 ) m_dwDN = 0;
		     else m_dwDN = m_dwDN - 200000;	
			 UpdateUserItemDN();						
	         SendMoneyChanged();
		}
		else return;

		if(MyItem[sMaterialSlot].sCount <= 0) return;

		iWeight += g_arItemTable[iSid]->m_byWeight;

		MyItem[sMaterialSlot].sCount -= 1;
		arMaterial.Add((BYTE)sMaterialSlot);
	}
	else return;
	if(type != 12){//12╩╟╨ф╒ф╩п═╖бгбг▓╗╨ш╥к╔ё╩п╡╚▓─┴╧бг
		for(i = 0; i < iCount; i++)
		{
			sMaterialSlot = -1;
			sMaterialSlot = GetShort(pBuf, index);
			if(sMaterialSlot >= EQUIP_ITEM_NUM && sMaterialSlot < TOTAL_INVEN_MAX)
			{											
				iSid = MyItem[sMaterialSlot].sSid;
				if(iSid < 0 || iSid >= g_arItemTable.GetSize()) return;
				if(iSid != iThings) return;			
				if(MyItem[sMaterialSlot].sCount <= 0) return;

				iWeight += g_arItemTable[iSid]->m_byWeight;

				MyItem[sMaterialSlot].sCount -= 1;
				arMaterial.Add((BYTE)sMaterialSlot);
			}
			else
			{
				SendSystemMsg(IDS_USER_SHENGSHI, SYSTEM_ERROR, TO_ME);
				return;
			}
		}
	}
	iSuccess = SetBlessingUpgradeItem(sSourceSlot, type);	
	if(MyItem[sSourceSlot].tMagic[5] == 0 && iSuccess == 0) iWeight += g_arItemTable[iSid]->m_byWeight;			// ╣л░╘║п╚н╕ж ├╝┼й╟╤┤┘.

	if(iSuccess == -1) return;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = 1 + arMaterial.GetSize();

	if(!iSuccess)	TempBuf.Add((BYTE)0x00); //╜╟╞╨
	else			TempBuf.Add((BYTE)0x01);
	
	TempBuf.Add((BYTE)index);

	TempBuf.Add((BYTE)sSourceSlot);					// ┴╓ ╛╞└╠┼█╕ж ╕╒└· 	
	TempBuf.Add(m_UserItem[sSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[sSourceSlot].sSid);
	TempBuf.Add(m_UserItem[sSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[sSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSourceSlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sSourceSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSourceSlot].tIQ); 

	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		bySlot = (BYTE)arMaterial[i];
	
		MakeItemLog( &m_UserItem[bySlot], ITEMLOG_BLESS_USE );
		FlushItemLog( TRUE );
	
		if(m_UserItem[bySlot].sCount <= 1) ReSetItemSlot(&m_UserItem[bySlot]);// ╝╥║ё╝║ └╠╣╟╖╬ ╕╒└· ├╩▒т╚н╟╧░э 
		else							   m_UserItem[bySlot].sCount -= 1;

		TempBuf.Add(bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}

	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...

	Send(TempBuf, TempBuf.GetLength());

	arMaterial.RemoveAll();
}

///////////////////////////////////////////////////////////////////////////////////////////////
//	┐■╟╟, ╛╞╕╙, ╝Ў╞█┐■╟╟, ╝Ў╞█╛╞╕╙╖╬ ╛ў▒╫╖╣└╠╡х ╟╥╢з
//
int USER::SetBlessingUpgradeItem(short sSlot, int type)
{
	BYTE tCount = 0;

	int iSuccess = 0;

	int i = 0;
	int last = 0;
	int iRandom = 0;

	int iValue = 0;

	if(m_UserItem[sSlot].sSid < 0 || m_UserItem[sSlot].sSid >= g_arItemTable.GetSize()) return -1;
	if(g_arItemTable[m_UserItem[sSlot].sSid]->m_sDuration <= 0) return -1;
	
	tCount = m_UserItem[sSlot].tMagic[5];
	if(tCount >= MAX_ITEM_UPGRADE_COUNT) return -1;		

	if(g_arItemTable[m_UserItem[sSlot].sSid]->m_byWear == ATTACK_ITEM)//╬ф╞ў╔¤╝╢
	{
		if(type==9)//╫г╕г▒ж╩пбг▓╗─▄╔¤╝╢╬ф╞ў
			return -1;
		iRandom = myrand(1, 10000);
		if(type==49)
			iRandom=(int)(iRandom - iRandom*0.10);  //═ї╒▀┴щ╩п ╠с╕▀10│╔╣жбгбгбг					
		
		if( FindItem( 1043) >= 1)//12╘┬22╚╒
		{
			RobItem( 1043, 1 );
		    SendSystemMsg("▒╛┤╬╩╣╙├╨╥╘╦╨╟[100%│╔╣ж┬╩]", SYSTEM_ERROR, TO_ME);
			iSuccess = 1;
		}
		if(g_arItemTable[m_UserItem[sSlot].sSid]->m_byClass == STAFF_ITEM)	iValue = ATTACK_UPGRADE_PSI_BAND;	
		else																iValue = ATTACK_UPGRADE_BAND;						

		if(iRandom <= g_ItemAttUpgrade[tCount])
		{	
			if(type == 2 || type == 49)
			{
				iRandom = myrand(1, 10000);				// ├р╛╞└╠┼█└╧░ц┐ь +3╛ў▒ю┴Ў ║╕│╩╜║╖╬ ╡╡└№╟╥╝Ў └╓┤┘
				for(int i = 0; i < 3; i++)
				{
					last += ATTACK_UPGRADE_BAND;		// ╟╪┤ч ╝║░°╖№ ╕╕┼н ╛ў▒█ ╟╪┴╪┤┘.
					iSuccess += 1;						// ├р ╛╞└╠┼█┐б└╟╟╪ ╕ю╣° ╛ў▒█╟▀┤┬┴Ў ╛╦╖┴ ┴╪┤┘.

					if(iRandom <= g_ItemBlessingUpgrade[i]) break;
					if((tCount + iSuccess) >= MAX_ITEM_UPGRADE_COUNT) break;
				}
			}
		    else if(type == 12)
			{
				if(g_arItemTable[m_UserItem[sSlot].sSid]->m_byRLevel > 50) return - 1;
				last = ATTACK_UPGRADE_BAND;
				iSuccess = 1;							// 1╛ў╕╕ └√┐ы╡╟╕щ
			}
			else 
			{
				last = ATTACK_UPGRADE_BAND;
				iSuccess = 1;							// 1╛ў╕╕ └√┐ы╡╟╕щ
			}
		}
	}
	//=========================================================================================================================================╫░▒╕╔¤╝╢
	else
	{
		iRandom = myrand(1, 10000);
		if(type == 49)
			iRandom=(int)(iRandom - iRandom*0.10);  //═ї╒▀╛з╩п ╠с╕▀10│╔╣жбгбгбг
		iValue = DEFENSE_UPGRADE_BAND;
		if( FindItem( 1043) >= 1)//12╘┬22╚╒
		{
			RobItem( 1043, 1 );
			SendSystemMsg("▒╛┤╬╩╣╙├╨╥╘╦╨╟[100%│╔╣ж┬╩]", SYSTEM_ERROR, TO_ME);
			iSuccess = 1;
		}
        if(iRandom <= g_ItemDefUpgrade[tCount])
		{
			if(type == 2 || type==9 || type==49)
			{
				iRandom = myrand(1, 10000);				// ├р╛╞└╠┼█└╧░ц┐ь +3╛ў▒ю┴Ў ║╕│╩╜║╖╬ ╡╡└№╟╥╝Ў └╓┤┘
				for(i = 0; i < 3; i++)
				{	
					last += DEFENSE_UPGRADE_BAND;		// ╟╪┤ч ╝║░°╖№ ╕╕┼н ╛ў▒█ ╟╪┴╪┤┘.
					iSuccess += 1;						// ├р ╛╞└╠┼█┐б└╟╟╪ ╕ю╣° ╛ў▒█╟▀┤┬┴Ў ╛╦╖┴ ┴╪┤┘.

					if(iRandom <= g_ItemBlessingUpgrade[i]) break;
					if((tCount + iSuccess) >= MAX_ITEM_UPGRADE_COUNT) break;
				}
			}
			else if(type == 12)
			{
				if(g_arItemTable[m_UserItem[sSlot].sSid]->m_byRLevel > 50) return - 1;
				iRandom = myrand(1, 10000);				// ├р╛╞└╠┼█└╧░ц┐ь +3╛ў▒ю┴Ў ║╕│╩╜║╖╬ ╡╡└№╟╥╝Ў └╓┤┘
				for(i = 0; i < 3; i++)
				{	
					last += DEFENSE_UPGRADE_BAND;		// ╟╪┤ч ╝║░°╖№ ╕╕┼н ╛ў▒█ ╟╪┴╪┤┘.
					iSuccess += 1;						// ├р ╛╞└╠┼█┐б└╟╟╪ ╕ю╣° ╛ў▒█╟▀┤┬┴Ў ╛╦╖┴ ┴╪┤┘.

					if(iRandom <= g_ItemBlessingUpgrade[i]) break;
					if((tCount + iSuccess) >= MAX_ITEM_UPGRADE_COUNT) break;
				}
			}
			else
			{
				last = DEFENSE_UPGRADE_BAND;
				iSuccess = 1;							// 1╛ў╕╕ └√┐ы╡╟╕щ
			}
		}
	}

	if(iSuccess >= 1)									// ╟╪┤ч ╣°┬░└╟ ╝║░°╖№║╕┤┘ └█└╕╕щ
	{	
		m_UserItem[sSlot].tMagic[5] = tCount + iSuccess;
//======================================================================================================================================╫░▒╕▒ф═т╣█
		if ((tCount + iSuccess) >= 10)
		{
			switch(m_UserItem[sSlot].sSid)
			{
			case 337://┴·╓о╥э
				m_UserItem[sSlot].sSid = 1581;//▒╙╗д╓о╥э
				break;
			case 510://╟┐╗п┴·╓о╥э
			case 511://╟┐╗п┴·╓о╥э
			case 512://╟┐╗п┴·╓о╥э
				m_UserItem[sSlot].sSid = 1582;//╟┐╗п▒╙╗д╓о╥э
				break;
			case 513://┴·╓о╥эs
			case 514://┴·╓о╥эs
				m_UserItem[sSlot].sSid = 1583;//▒╙╗д╓о╥эs
				break;
			case 330://┴·╓о┼н
				m_UserItem[sSlot].sSid = 1578; //┴щш╤╖и╒╚
				break;
			case 475://╟┐╗п┴·╓о┼н
			case 476://╟┐╗п┴·╓о┼н
			case 477://╟┐╗п┴·╓о┼н
				m_UserItem[sSlot].sSid = 1579; //╟┐╗п┴щш╤╖и╒╚
				break;
			case 478://┴·╔ё╓о┼нбкS
			case 479://┴·╔ё╓о┼нбкS
				m_UserItem[sSlot].sSid = 1580;//┴щш╤╖и╒╚s
				break;
			case 323://╖┤I
				m_UserItem[sSlot].sSid = 1572;//╖┤1
				break;
			case 440://╖┤II
			case 441://╖┤II
			case 442://╖┤II
				m_UserItem[sSlot].sSid = 1573;//╖┤2
				break;
			case 443://╖┤III
			case 444://╖┤III
				m_UserItem[sSlot].sSid = 1574;//╖┤3
				break;
			case 316://┴·╔ё┼┌g2
				m_UserItem[sSlot].sSid = 1575;
				break;
			case 405://┴·╔ё┼┌g4
			case 406://┴·╔ё┼┌g4
			case 407://┴·╔ё┼┌g4
				m_UserItem[sSlot].sSid = 1576;//╖┤1
				break;
			case 408://┴·╔ё┼┌g6
			case 409://┴·╔ё┼┌g6
			   m_UserItem[sSlot].sSid = 1577;
			   break;
//=======================================================================================================╬ф╞ў═ъ
			case 1053://┴·╤└├▒
	        case 1054://╟┐╗п┴·╤└├▒
	        case 1055://╠╪╩т┴·╤└┐°
	        case 1056://┴·╤└┐°S╨═
				{ 
					int s = 1587;
					switch(m_byClass)
					{
					case 0:
						break;
					case 1:
						s = 1591;
			           	break;
			        case 2:
				        s = 1595;
				        break;
			        case 3:
				        s = 1599;
			        	break;
					}
					m_UserItem[sSlot].sSid = s;
					break;
				}
			case 1057://┴╥╤ц╒╜╝╫
				m_UserItem[sSlot].sSid = 1607;
				break;
			case 1058://╟┐╗п┴╥╤ц╒╜╝╫
				m_UserItem[sSlot].sSid = 1608;
				break;
			case 1059://┴╥╤ц╒╜╝╫G╨═
				m_UserItem[sSlot].sSid = 1609;
				break;
			case 1060://┴╥╤ц╒╜╝╫S╨═
				m_UserItem[sSlot].sSid = 1610;
				break;
			case 1061://┴╥╤ц╗д═╚
				m_UserItem[sSlot].sSid = 1611;
				break;
			case 1062://╟┐╗п┴╥╤ц╗д═╚
				m_UserItem[sSlot].sSid = 1612;
				break;
			case 1063://┴╥╤ц╗д═╚G╨═
				m_UserItem[sSlot].sSid = 1613;
				break;
			case 1064://┴╥╤ц╗д═╚S╨═
				m_UserItem[sSlot].sSid = 1614;
				break;
			case 1065://▓╘╘┬╓ою°
				m_UserItem[sSlot].sSid = 1615;
				break;
			case 1066://╟┐╗п▓╘╘┬╓ою°
				m_UserItem[sSlot].sSid = 1616;
				break;
			case 1067://▓╘╘┬╓ою°II╨═
				m_UserItem[sSlot].sSid = 1617;
				break;
			case 1068://▓╘╘┬╓ою°M╨═
				m_UserItem[sSlot].sSid = 1618;
				break;
			case 1069://▓╘╘┬╗д═╚
				m_UserItem[sSlot].sSid = 1619;
				break;
			case 1070://╟┐╗п▓╘╘┬╗д═╚
				m_UserItem[sSlot].sSid = 1620;
				break;
			case 1071://▓╘╘┬╗д═╚II╨═
				m_UserItem[sSlot].sSid = 1621;
				break;
			case 1072://▓╘╘┬╗д═╚M╨═
				m_UserItem[sSlot].sSid = 1622;
				break;
			case 1073://║о▒∙╓ою°
				m_UserItem[sSlot].sSid = 1623;
				break;
			case 1074://╟┐╗п║о▒∙╓ою°
				m_UserItem[sSlot].sSid = 1624;
				break;
			case 1075://║о▒∙╓ою°G╨═
				m_UserItem[sSlot].sSid = 1625;
				break;
			case 1076://║о▒∙╓ою°S╨═
				m_UserItem[sSlot].sSid = 1626;
				break;
			case 1077://║о▒∙╗д═╚
				m_UserItem[sSlot].sSid = 1627;
				break;
			case 1078://╟┐╗п║о▒∙╗д═╚
				m_UserItem[sSlot].sSid = 1628;
				break;
			case 1079://║о▒∙╗д═╚G╨═
				m_UserItem[sSlot].sSid = 1629;
				break;
			case 1080://║о▒∙╗д═╚S╨═
				m_UserItem[sSlot].sSid = 1630;
				break;
			case 1081://╝▓╖ч╒╜╝╫
				m_UserItem[sSlot].sSid = 1631;
				break;
			case 1082://╟┐╗п╝▓╖ч╒╜╝╫
				m_UserItem[sSlot].sSid = 1632;
				break;
			case 1083://╝▓╖ч╒╜╝╫II╨═
				m_UserItem[sSlot].sSid = 1633;
				break;
			case 1084://╝▓╖ч╒╜╝╫M╨═
				m_UserItem[sSlot].sSid = 1634;
				break;
			case 1085://╝▓╖ч╗д═╚
				m_UserItem[sSlot].sSid = 1635;
				break;
			case 1086://╟┐╗п╝▓╖ч╗д═╚
				m_UserItem[sSlot].sSid = 1636;
				break;
			case 1087://╝▓╖ч╗д═╚II╨═
				m_UserItem[sSlot].sSid = 1637;
				break;
			case 1088://╝▓╖ч╗д═╚M╨═
				m_UserItem[sSlot].sSid = 1638;
				break;
//============================================================================================================╥┬╖■┐у╫╙═ъ
			case 1089://┴·╣╟╤е
			case 1090://╟┐╗п┴·╣╟╤е
			case 1091://╠╪╩т┴·╣╟╤е
			case 1092://┴·╣╟╤еS╨═
				{
					//╚н╨м1650,╖и╨м1654,╡╢╨м1658,╟╣╨м1662,╓┘▓├1666
					int s = 1650;
					switch(m_byClass)
					{
					case 0:
						break;
					case 1:
						s = 1654;
						break;
					case 2:
						s = 1658;
						break;
					case 3:
						s = 1662;
						break;
					}
					m_UserItem[sSlot].sSid = s;
					break;
				}
			default:
				return FALSE;
				break;
				}
		}
				

//=======================================================================================================================================		
		if((tCount + iSuccess) >=10 )//┤є╙┌╗Є╡╚╙┌8╕─╠с╩╛
		{
			if(type==3) //┴щ╩п ╛з╩п ┤░┐┌
			{
				if( g_arItemTable[m_UserItem[sSlot].sSid]->m_byWear == 1 )
				{
					CString sysMsg;
                    sysMsg.Format(" %s ╩╣╙├┴щ╩п╜л [%s]╟┐╗п╬к %d ╝╢",this->m_strUserID,g_arItemTable[m_UserItem[sSlot].sSid]->m_strName ,tCount + iSuccess);
                    SendSystemMsg(sysMsg.GetBuffer(sysMsg.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);
				}else{
					CString sysMsg;
                    sysMsg.Format(" %s ╩╣╙├╛з╩п╜л [%s]╟┐╗п╬к %d ╝╢",this->m_strUserID,g_arItemTable[m_UserItem[sSlot].sSid]->m_strName ,tCount + iSuccess);
                    SendSystemMsg(sysMsg.GetBuffer(sysMsg.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);
				}
			}
			else if (type==2) //│м┴щ │м╛з ┤░┐┌
			{
				if( g_arItemTable[m_UserItem[sSlot].sSid]->m_byWear == 1 )
				{
					CString sysMsg;
                    sysMsg.Format(" %s ╩╣╙├│м╝╢┴щ╩п╜л [%s]╟┐╗п╬к %d ╝╢",this->m_strUserID,g_arItemTable[m_UserItem[sSlot].sSid]->m_strName ,tCount + iSuccess);
                    SendSystemMsg(sysMsg.GetBuffer(sysMsg.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);
				}else{
					CString sysMsg;
                    sysMsg.Format(" %s ╩╣╙├│м╝╢╛з╩п╜л [%s]╟┐╗п╬к %d ╝╢",this->m_strUserID,g_arItemTable[m_UserItem[sSlot].sSid]->m_strName ,tCount + iSuccess);
                    SendSystemMsg(sysMsg.GetBuffer(sysMsg.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);
				}
			}
		}
		MakeItemLog( &m_UserItem[sSlot], ITEMLOG_BLESS_UPGRADE_SUCCESS );
	}
	else												// ╜╟╞╨╟╥░ц┐ь ├р░· └╧╣▌└╕╖╬ │к┤й╛ю╝н └√┐ы╣▐┤┬┤┘.		
	{
		BOOL bRemove = FALSE;
		int iUp = m_UserItem[sSlot].tMagic[5];
		int iCur = m_UserItem[sSlot].tMagic[4];

		if(type == 3)									// └╧╣▌
		{
			iRandom = myrand(1, 10000);
		
			if(iRandom <= g_ItemNormalDownUpgrade[0]) 
			{
				iUp -= 1;
				iCur -= iValue;
			}
		}
		else if(type == 12)							// ├р ╛╞└╠┼█└║ ╣л┴╢░╟ 1╛ў▒█ ░и╝╥	
		{
			iUp -= 1;
			iCur -= iValue;
		}
		else											// ├р ╛╞└╠┼█└║ ╣л┴╢░╟ 1╛ў▒█ ░и╝╥	
		{
			iUp -= 1;
			iCur -= iValue;
		}

		if(iCur < 0) iCur = 0;
		if(iUp < 0) { iUp = 0; bRemove = TRUE; }

		//m_UserItem[sSlot].tMagic[4] = iCur;
		m_UserItem[sSlot].tMagic[5] = iUp;				

		if(bRemove)			// ╚ц╚ц...╟╤╣°╡╡ ╛╚╟╤ ╛╞┼█└║ │п╕░┤┘.
		{
			MakeItemLog( &m_UserItem[sSlot], ITEMLOG_BLESS_UPGRADE_FAIL );
			ReSetItemSlot(&m_UserItem[sSlot]);	iSuccess = 0; 
		}
		else MakeItemLog( &m_UserItem[sSlot], ITEMLOG_BLESS_UPGRADE_FAIL );
	}	

	FlushItemLog( TRUE );
	return iSuccess;
}

void USER::ChangeUpgradeAcc()
{
	int i = 0;
	int k = 0;
	int j = 0;

	int sid = -1;
	int count = 0;
	int emptyslot = -1;

	BOOL bExistResult = FALSE;

	CItemTable* pTable = NULL;
	ItemList changeItem;

	ItemList UserItemBackup[TOTAL_ITEM_NUM];

	CWordArray arPlusSlot;	arPlusSlot.RemoveAll();
	CWordArray arMinusSlot;	arMinusSlot.RemoveAll();

	for( i = 0; i < TOTAL_ITEM_NUM; i++ )
	{
		UserItemBackup[i] = m_UserItem[i];
	}

	for( i = EQUIP_ITEM_NUM; i < TOTAL_INVEN_MAX; i++ )
	{
		sid = m_UserItem[i].sSid;

		if( sid >= 0 && sid < g_arItemTable.GetSize() )
		{
			pTable = g_arItemTable[sid];
		}
		else
		{
			pTable = NULL;
		}

		if( !pTable ) continue;

		if( pTable->m_byWear != 6 && pTable->m_byWear != 7 && pTable->m_byWear != 8 )	// ╛╫╝╝╝н╕о░б ╛╞┤╧╢є╕щ
		{
			continue;
		}

		if( m_UserItem[i].sDuration != 0 )	// ╛ў▒╫╖╣└╠╡х ░б┤╔╟╤ ╜┼ ╛╞└╠┼█└╠╢є╕щ
		{
			continue;
		}

		count = m_UserItem[i].sCount;

		if( count <= 0 )	// ╣┘▓▄ ╛╞└╠┼█└╟ ─л┐ю╞о░б 0└╠╟╧╢є╕щ - └▀╕°╡╚ ╛╞└╠┼█└╠┤┘. ┐й▒т╝▒ ╟╪┤ч╡╟┴Ў ╛╩┤┬ ╛╞└╠┼█└╕╖╬ ├│╕о╟╧░э ▒╫│╔ │╤╛ю░г┤┘.
		{
			continue;
		}

		ReSetItemSlot( &changeItem );

		// ▒т┴╕ ╛╫╝╝╝н╕о╕ж ▒│├╝╟╥ ╛╞└╠┼█ ╡е└╠┼═╕ж ╕╕╡ч┤┘.
		changeItem.sLevel		= m_UserItem[i].sLevel;
		changeItem.sSid			= sid;
		changeItem.sCount		= 1;
		changeItem.sDuration	= pTable->m_sDuration;
		changeItem.sBullNum		= m_UserItem[i].sBullNum;
		for( k =0; k < MAGIC_NUM; k++ ) changeItem.tMagic[k] = m_UserItem[i].tMagic[k];
		changeItem.tIQ			= m_UserItem[i].tIQ;

		if( count == 1 )
		{
			m_UserItem[i].sLevel		= changeItem.sLevel;
			m_UserItem[i].sSid			= changeItem.sSid;
			m_UserItem[i].sCount		= changeItem.sCount;
			m_UserItem[i].sDuration		= changeItem.sDuration;
			m_UserItem[i].sBullNum		= changeItem.sBullNum;
			for( k =0; k < MAGIC_NUM; k++ ) m_UserItem[i].tMagic[k] = changeItem.tMagic[k];
			m_UserItem[i].tIQ			= changeItem.tIQ;

			arPlusSlot.Add( i );
		}
		else
		{
			for( j = 0; j < count; j++ )	// ╞ю├│┴· ░│╝Ў╕╕┼н ╡╖┤┘.
			{
				emptyslot = -1;

				for( k = EQUIP_ITEM_NUM; k < TOTAL_INVEN_MAX; k++ )	// ║є╜╜╖╘└╗ ├г┤┬┤┘.
				{
					if( m_UserItem[k].sSid == -1 )
					{
						emptyslot = k;
						break;
					}
				}

				if( emptyslot == -1 )	// ║є└┌╕о░б ╛°└╕╕щ
				{
					// ╖ч╟┴╕ж ║№┴о│к░г┤┘.
					break;
				}

				m_UserItem[emptyslot].sLevel		= changeItem.sLevel;
				m_UserItem[emptyslot].sSid			= changeItem.sSid;
				m_UserItem[emptyslot].sCount		= changeItem.sCount;
				m_UserItem[emptyslot].sDuration		= changeItem.sDuration;
				m_UserItem[emptyslot].sBullNum		= changeItem.sBullNum;
				for( k =0; k < MAGIC_NUM; k++ ) m_UserItem[emptyslot].tMagic[k] = changeItem.tMagic[k];
				m_UserItem[emptyslot].tIQ			= changeItem.tIQ;

				arPlusSlot.Add( emptyslot );
			}

			if( j <= 0 )	// ╞ю├│┴° ░│╝Ў░б ╟╧│к╡╡ ╛°┤┘╕щ
			{
				// ╛╞╣л░═╡╡ ║п╟╤░╘ ╛°┤┘.
				break;
			}
			else
			{
				m_UserItem[i].sCount -= j;		// ╞ю├│┴╪ ░│╝Ў╕╕┼н ▒т┴╕ ╛╫╝╝╝н╕о ░│╝Ў┐б╝н ╗й┴╪┤┘.

				if( m_UserItem[i].sCount <= 0 )
				{
					ReSetItemSlot( &m_UserItem[i] );
				}

				arMinusSlot.Add( i );
			}
		}
	}

	if( arPlusSlot.GetSize() || arMinusSlot.GetSize() )
	{
		if( UpdateUserItemDN() == FALSE )
		{
			for( i = 0; i < TOTAL_ITEM_NUM; i++ )		// ╛╞└╠┼█ ┴д║╕ ╚п┐°
			{
				m_UserItem[i] = UserItemBackup[i];
			}

			return;
		}

		if( arPlusSlot.GetSize() )
		{
			UpdateInvenSlot( &arPlusSlot, NULL, 3 );
			arPlusSlot.RemoveAll();
		}

		if( arMinusSlot.GetSize() )
		{
			UpdateInvenSlot( &arMinusSlot, NULL, 4 );
			arMinusSlot.RemoveAll();
		}

		SendSystemMsg( IDS_USER_CHANGE_UPGRADE_ACC_SUCCESS, SYSTEM_NORMAL, TO_ME);
	}
	else
	{
		SendSystemMsg( IDS_USER_CHANGE_UPGRADE_ACC_FAIL, SYSTEM_NORMAL, TO_ME);
	}
}

////////////////////////////////////////////////////////////////////////////////////////
//	╛╞└╠┼█ ░│├╩├│╕о╕ж ╟╤┤┘.
//
void USER::RemodelingItemReq(TCHAR *pBuf)
{
	if(m_dwDN < ITEM_REMODELING_COST) 
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return;		// ╛ў▒╫╖╣└╠╡х ╟╥ ╡╖└╠ ╛°└╕╕щ ╕о┼╧
	}

	short sSourceSid = -1;
	int i, j, index = 0;
	int iWeight = 0;
	short sMaterialSlot[4]	= {-1, -1, -1, -1};
	short sMaterialSid[4]	= {-1, -1, -1, -1};
	int iSuccess = 0, iMaterialCount = 0;
	BYTE bySlot = 0;
	short sPlanzing = 0;

	BOOL bDeleteSource = FALSE, bRemodelSuccess = FALSE;

	CByteArray arMaterial;
	arMaterial.RemoveAll();

	// Source Item
	short sSourceSlot = GetShort(pBuf, index);			// ╝▒┼├╟╤ ╛╞└╠┼█ ╜╜╖╘╣°╚г
	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX) return;

	sSourceSid = m_UserItem[sSourceSlot].sSid;
	if(sSourceSid < 0 || sSourceSid >= g_arItemTable.GetSize()) return;
	if( sSourceSid == 669 || sSourceSid == 670 )		// ╛ў▒╫╖╣└╠╡х ╟╧╖┴┤┬ ╛╞└╠┼█└╠ ▒█╖п▒╫┴╛╖∙╢є╕щ
	{
		SendSystemMsg( IDS_CANT_REMODELING, SYSTEM_ERROR, TO_ME);
		return;
	}

	if(g_arItemTable[sSourceSid]->m_byWear < 1 && g_arItemTable[sSourceSid]->m_byWear > 5) // ╣л▒т, ╣ц╛ю▒╕░б ╛╞┤╧╕щ ░│┴╢╟╥ ╝Ў ╛°┤┘.
	{
		SendSystemMsg( IDS_CANT_REMODELING, SYSTEM_ERROR, TO_ME);
		return;
	}

	if(m_UserItem[sSourceSlot].tMagic[5] >= 1)			// ╛ў▒╫╖╣└╠╡х╡╚ ╛╞└╠┼█└║ ░│┴╢╟╥ ╝Ў ╛°┤┘.
	{
		SendSystemMsg( IDS_CANT_REMODELING, SYSTEM_ERROR, TO_ME);
		return;
	}

	switch(m_UserItem[sSourceSlot].tIQ)
	{
	case RARE_ITEM:				// ░│┴╢ ╟╥ ╝Ў ╛°┤┬ ╛╞└╠┼█
	case UNIQUE_ITEM:
	case SET_ITEM:
	case REMODEL_MAGIC_ITEM:
		SendSystemMsg( IDS_CANT_REMODELING, SYSTEM_ERROR, TO_ME);
		return;

	case REMODEL_ITEM:			// └╠╣╠ 3┤▄ ░│┴╢▒ю┴Ў ╟╤ ╛╞└╠┼█
		if(m_UserItem[sSourceSlot].tMagic[0] >= 1 && m_UserItem[sSourceSlot].tMagic[1] >= 1 && m_UserItem[sSourceSlot].tMagic[2] >= 1)
		{
			SendSystemMsg( IDS_CANT_REMODELING, SYSTEM_ERROR, TO_ME);
			return;
		}
		break;
	}

	for(i = 0; i < 4; i++)
	{
		sMaterialSlot[i] = GetShort(pBuf, index);
		if(sMaterialSlot[i] == -1) break;
		if(sMaterialSlot[i] < EQUIP_ITEM_NUM || sMaterialSlot[i] >= TOTAL_INVEN_MAX) return;

		sMaterialSid[i] = m_UserItem[sMaterialSlot[i]].sSid;
		if(sMaterialSid[i] < 0 || sMaterialSid[i] >= g_arItemTable.GetSize()) return;

		iMaterialCount++;
	}

	// Remodeling Start ...
	iSuccess = 0;
	if(g_arItemTable[sSourceSid]->m_byWear == ATTACK_ITEM)	// Weapon
	{
		switch(m_UserItem[sSourceSlot].tIQ)
		{
		case NORMAL_ITEM:									// 1 ┤▄ ░│┴╢ ╜├╡╡
			for(i = 0; i < iMaterialCount; i++)
			{
				if(sMaterialSid[i] == 678) iSuccess++;			// ╞┐▒╕╖╗
				else if(sMaterialSid[i] == 858) iSuccess++;		// ┼╗▒╫╖¤
				else if(sMaterialSid[i] == 682 || sMaterialSid[i] == 679 || sMaterialSid[i] == 680 || sMaterialSid[i] == 681 || sMaterialSid[i] == 683) sPlanzing = sMaterialSid[i];
				else return;
			}
			if(iSuccess != 2) return;

			bRemodelSuccess = RemodelingItem(1, &m_UserItem[sSourceSlot], sPlanzing);
			if(bRemodelSuccess) 
			{
				arMaterial.Add((BYTE)sSourceSlot);	// ║п╚н╡╚ ╜╜╖╘ ├▀░б
			}

			break;

		case REMODEL_ITEM:
			if(m_UserItem[sSourceSlot].tMagic[0] > 0 && m_UserItem[sSourceSlot].tMagic[1] <= 0)		// 2 ┤▄ ░│┴╢ ╜├╡╡
			{
				for(i = 0; i < iMaterialCount; i++)
				{
					if(sMaterialSid[i] == 677) iSuccess++;			// ║з▒╕▒╫╖╗
					else if(sMaterialSid[i] == 858) iSuccess++;		// ┼╗▒╫╖¤
					else if(sMaterialSid[i] == 682 || sMaterialSid[i] == 679 || sMaterialSid[i] == 680 || sMaterialSid[i] == 681 || sMaterialSid[i] == 683) sPlanzing = sMaterialSid[i];
					else return;
				}
				if(iSuccess != 2) return;
				
				bRemodelSuccess = RemodelingItem(2, &m_UserItem[sSourceSlot], sPlanzing);
				if(bRemodelSuccess) 
				{
					arMaterial.Add((BYTE)sSourceSlot);	// ║п╚н╡╚ ╜╜╖╘ ├▀░б
				}
			}
			else if(m_UserItem[sSourceSlot].tMagic[1] > 0 && m_UserItem[sSourceSlot].tMagic[2] <= 0)	// 3 ┤▄ ░│┴╢ ╜├╡╡
			{
				for(i = 0; i < iMaterialCount; i++)
				{
					if(sMaterialSid[i] == 860) iSuccess++;			// ╟┴╖╬┼й╖╥
					else if(sMaterialSid[i] == 858) iSuccess++;		// ┼╗▒╫╖¤
					else if(sMaterialSid[i] == 685)					// D ╟├╖г┬б
					{
						sPlanzing = sMaterialSid[i];
						iSuccess++;		
					}
					else return;
				}
				if(iSuccess != 3) return;

				bRemodelSuccess = RemodelingItem(3, &m_UserItem[sSourceSlot], sPlanzing);

				arMaterial.Add((BYTE)sSourceSlot);	// ║п╚н╡╚ ╜╜╖╘ ├▀░б
				if(bRemodelSuccess == FALSE) 
				{
					bDeleteSource = TRUE;
				}
			}
			else return;
			
			break;
			
		case MAGIC_ITEM:
			for(i = 0; i < iMaterialCount; i++)
			{
				if(sMaterialSid[i] == 860) iSuccess++;			// ╟┴╖╬┼й╖╥
				else if(sMaterialSid[i] == 858) iSuccess++;		// ┼╗▒╫╖¤
				else if(sMaterialSid[i] == 685)					// D ╟├╖г┬б
				{
					sPlanzing = sMaterialSid[i];
					iSuccess++;		
				}
				else return;
			}
			if(iSuccess != 3) return;

			bRemodelSuccess = RemodelingItem(3, &m_UserItem[sSourceSlot], sPlanzing);
			
			arMaterial.Add((BYTE)sSourceSlot);	// ║п╚н╡╚ ╜╜╖╘ ├▀░б
			if(bRemodelSuccess == FALSE) 
			{
				bDeleteSource = TRUE;
			}
			break;
		}
	}
	else if(g_arItemTable[sSourceSid]->m_byWear >= 2 && g_arItemTable[sSourceSid]->m_byWear <= 5)	// Armor
	{
		switch(m_UserItem[sSourceSlot].tIQ)
		{
		case NORMAL_ITEM:
			for(i = 0; i < iMaterialCount; i++)
			{
				if(sMaterialSid[i] == 678) iSuccess++;			// ╞┐▒╕╖╗
				else if(sMaterialSid[i] == 859) iSuccess++;		// ┼м╕о┤╤
				else if(sMaterialSid[i] == 682 || sMaterialSid[i] == 679 || sMaterialSid[i] == 680 || sMaterialSid[i] == 681 || sMaterialSid[i] == 683) sPlanzing = sMaterialSid[i];
				else return;
			}
			if(iSuccess != 2) return;

			bRemodelSuccess = RemodelingItem(1, &m_UserItem[sSourceSlot], sPlanzing);
			if(bRemodelSuccess) 
			{
				arMaterial.Add((BYTE)sSourceSlot);	// ║п╚н╡╚ ╜╜╖╘ ├▀░б
			}

			break;

		case REMODEL_ITEM:
			if(m_UserItem[sSourceSlot].tMagic[0] > 0 && m_UserItem[sSourceSlot].tMagic[1] <= 0)		// 2 ┤▄ ░│┴╢ ╜├╡╡
			{
				for(i = 0; i < iMaterialCount; i++)
				{
					if(sMaterialSid[i] == 677) iSuccess++;			// ║з▒╕▒╫╖╗
					else if(sMaterialSid[i] == 859) iSuccess++;		// ┼м╕о┤╤
					else if(sMaterialSid[i] == 682 || sMaterialSid[i] == 679 || sMaterialSid[i] == 680 || sMaterialSid[i] == 681 || sMaterialSid[i] == 683) sPlanzing = sMaterialSid[i];
					else return;
				}
				if(iSuccess != 2) return;

				bRemodelSuccess = RemodelingItem(2, &m_UserItem[sSourceSlot], sPlanzing);
				if(bRemodelSuccess) 
				{
					arMaterial.Add((BYTE)sSourceSlot);	// ║п╚н╡╚ ╜╜╖╘ ├▀░б
				}
			}
			else if(m_UserItem[sSourceSlot].tMagic[1] > 0 && m_UserItem[sSourceSlot].tMagic[2] <= 0)	// 3 ┤▄ ░│┴╢ ╜├╡╡
			{
				for(i = 0; i < iMaterialCount; i++)
				{
					if(sMaterialSid[i] == 860) iSuccess++;			// ╟┴╖╬┼й╖╥
					else if(sMaterialSid[i] == 859) iSuccess++;		// ┼м╕о┤╤
					else if(sMaterialSid[i] == 684) iSuccess++;		// W ╟├╖г┬б
					else return;
				}
				if(iSuccess != 3) return;
				
				bRemodelSuccess = RemodelingItem(3, &m_UserItem[sSourceSlot], sPlanzing);
				
				arMaterial.Add((BYTE)sSourceSlot);	// ║п╚н╡╚ ╜╜╖╘ ├▀░б
				if(bRemodelSuccess == FALSE) 
				{
					bDeleteSource = TRUE;
				}
			}
			else return;

			break;
			
		case MAGIC_ITEM:
			for(i = 0; i < iMaterialCount; i++)
			{
				if(sMaterialSid[i] == 860) iSuccess++;			// ╟┴╖╬┼й╖╥
				else if(sMaterialSid[i] == 859) iSuccess++;		// ┼м╕о┤╤
				else if(sMaterialSid[i] == 684) iSuccess++;		// W ╟├╖г┬б
				else return;
			}
			if(iSuccess != 3) return;

			bRemodelSuccess = RemodelingItem(3, &m_UserItem[sSourceSlot], sPlanzing);
			arMaterial.Add((BYTE)sSourceSlot);	// ║п╚н╡╚ ╜╜╖╘ ├▀░б
			if(bRemodelSuccess == FALSE) 
			{
				bDeleteSource = TRUE;
			}
			break;
		}
	}
	else return;

	if(m_dwDN <= ITEM_REMODELING_COST) m_dwDN = 0;				// ░│┴╢ ║ё┐ы
	else m_dwDN = m_dwDN - ITEM_REMODELING_COST;				// ░│┴╢ ║ё┐ы
//	if(m_dwDN < 0) m_dwDN = 0;

	if(bDeleteSource)	// ░│┴╢░б ╜╟╞╨╟╪╝н ┐°║╗ ╛╞└╠┼█└╠ │п╢є░г ░ц┐ь
	{
		iWeight += g_arItemTable[sSourceSid]->m_byWeight;		
		ReSetItemSlot(&m_UserItem[sSourceSlot]);
		
	}

	// Item Log File Generation
	if(bRemodelSuccess)	MakeItemLog(&m_UserItem[sSourceSlot], ITEMLOG_REMODEL_SUCCESS);
	else MakeItemLog(&m_UserItem[sSourceSlot], ITEMLOG_REMODEL_FAIL);
	FlushItemLog(TRUE);

	for(i = 0; i < iMaterialCount; i++)	
	{
		if(m_UserItem[sMaterialSlot[i]].sCount <= 1)	ReSetItemSlot(&m_UserItem[sMaterialSlot[i]]);
		else											m_UserItem[sMaterialSlot[i]].sCount--;
		
		iWeight += g_arItemTable[sMaterialSid[i]]->m_byWeight;	// ╣л░╘║п╚н╕ж ├╝┼й╟╤┤┘.

		arMaterial.Add((BYTE)sMaterialSlot[i]);	// ║п╚н╡╚ ╜╜╖╘ ├▀░б
	}

	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...
	
	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();

	CBufferEx TempBuf;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	if(bRemodelSuccess)	TempBuf.Add(SUCCESS);
	else				TempBuf.Add(FAIL);
	TempBuf.Add((BYTE)arMaterial.GetSize());

	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		bySlot = (BYTE)arMaterial[i];
		
		TempBuf.Add(bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}

	Send(TempBuf, TempBuf.GetLength());

	arMaterial.RemoveAll();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//	╛╞└╠┼█ ░│┴╢╕ж ╝Ў╟р╟╤┤┘.
//
BOOL USER::RemodelingItem(int iStage, ItemList* pItem, short sPlanzing)
{
	int i, j, k;
	int iStart, iEnd;
	BYTE tRandom1, tRandom2;
	UINT uRandomSum, uRandomSumOld;
	
	RemodelingTableArray*	pTable;
	CWordArray*				pRandomIndex;
	int						iArmorIndex;

	short sReplace = 0;

	int iAdd = 0, iDel = 0;
	int iMagicIndex = 0;

	switch(iStage)
	{
	case 1:
		pTable = &g_arRemodelingTable1;
		pRandomIndex = &g_arRemodelingRandomIndex1;
		iArmorIndex = g_iRemodelingArmorIndex1;
		iMagicIndex = 0;
		break;
	case 2:
		pTable = &g_arRemodelingTable2;
		pRandomIndex = &g_arRemodelingRandomIndex2;
		iArmorIndex = g_iRemodelingArmorIndex2;
		iMagicIndex = 1;
		break;
	case 3:
		pTable = &g_arRemodelingTable3;
		pRandomIndex = &g_arRemodelingRandomIndex3;
		iArmorIndex = g_iRemodelingArmorIndex3;
		iMagicIndex = 2;
		break;
	default:
		return FALSE;
	}
 
	if(pItem->sSid < 0 || pItem->sSid >= g_arItemTable.GetSize()) return FALSE;
	if(g_arItemTable[pItem->sSid]->m_byWear == ATTACK_ITEM)
	{
		iStart = 0;
		iEnd = iArmorIndex + 1;
		if(iStage == 1 || iStage == 2) 
		{
			iAdd = 25;
			iDel = 1;
		}
	}
	else
	{
		iStart = iArmorIndex + 1;
		iEnd = pRandomIndex->GetSize();
		if(iStage == 1 || iStage == 2) 
		{
			iAdd = 25;
			iDel = 1;
		}
	}

	tRandom1 = myrand(1, 100);
	tRandom2 = myrand(1, 100);
	uRandomSum = uRandomSumOld = 0;
	for(i = iStart; i < iEnd; i++)	// ░│┴╢ ╝╙╝║ ░с┴д
	{
		j = pRandomIndex->GetAt(i);
		uRandomSum = uRandomSum + pTable->GetAt(j)->m_tRandom1 - iDel;
		if(iStage != 0 && sPlanzing != 0 && pTable->GetAt(j)->m_sPlan == sPlanzing) uRandomSum += iAdd;
		
		if(tRandom1 >= uRandomSumOld && tRandom1 <= uRandomSum)	// ░│┴╢╡╔ ╝╙╝║ ░с┴д╡╩
		{
			uRandomSumOld = uRandomSum = 0;
			k = 0;
			
			while(1)		// ░│┴╢╡╔ ╝╙╝║┴▀┐б ╛ю╢▓░к└╠ ├▀░б╡╔░╟┴Ў ░с┴д				
			{
				uRandomSum += pTable->GetAt(j + k)->m_tRandom2;
				if(tRandom2 >= uRandomSumOld && tRandom2 <= uRandomSum)
				{
					// ╛╞└╠┼█ ┼м╖б╜║┐═ ░│┴╢╝╙╝║ ┼м╖б╜║░б └╧─б╟╧┤┬┴Ў ░╦╗ч 
					if(CheckClassItem(g_arItemTable[pItem->sSid]->m_byClass, pTable->GetAt(j + k)->m_tNeedClass))	// └╧─б╟╧╕щ
					{
						pItem->tMagic[iMagicIndex] = (BYTE)pTable->GetAt(j + k)->m_sSid;
						if(pItem->tIQ == NORMAL_ITEM) pItem->tIQ = REMODEL_ITEM;
						else if(pItem->tIQ == MAGIC_ITEM) pItem->tIQ = REMODEL_MAGIC_ITEM;
						
						return TRUE;
					}
					else	// └╧─б╟╧┴Ў ╛╩└╕╕щ ┤ы├╝ ╝╙╝║ ║╬┐й
					{
						sReplace = pTable->GetAt(j + k)->m_tReplace;
						if(pTable->GetAt(sReplace - 1)->m_sRid == sReplace)
						{
							pItem->tMagic[iMagicIndex] = (BYTE)pTable->GetAt(sReplace - 1)->m_sSid;
							if(pItem->tIQ == NORMAL_ITEM) pItem->tIQ = REMODEL_ITEM;
							else if(pItem->tIQ == MAGIC_ITEM) pItem->tIQ = REMODEL_MAGIC_ITEM;
							
							return TRUE;
						}
					}
				}
				uRandomSumOld = uRandomSum + 1;
				if(uRandomSum >= 100) break;	// Safe Code
				k++;
			}
		}
		uRandomSumOld = uRandomSum + 1;
	}

	return FALSE;
}

BOOL USER::CheckOverGuildUserCount(int count)
{
	CString strMsg;

	CGuild *pGuild = NULL;

	pGuild = GetGuild( m_dwGuild );

	if(!pGuild) 
	{
		ReleaseGuild();				// ╟╪┴ж...

		strMsg.Format( "▒ц╡х╕ж ├г└╗ ╝Ў ╛°╜└┤╧┤┘" );
		SendSystemMsg( (LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME );
		return FALSE;
	}

	int i = 0;
	int j = 0;
	CGuildUser pGUser;

	for(i = 0; i < MAX_GUILD_USER; i++)
	{
		pGUser = pGuild->m_arUser[i];
		if(pGUser.m_lUsed != 0) j++;
	}

	ReleaseGuild();

	if( j < count ) 
	{
//		SendSystemMsg( IDS_USER_APPLY_CONDITION_GMEMBER, SYSTEM_NORMAL, TO_ME);
		strMsg.Format( "├╓╝╥ %d╕э └╠╗є└╬ ▒ц╡х┐б╝н╕╕ ╜┼├╗╟╥ ╝Ў └╓╜└┤╧┤┘.", count );
		SendSystemMsg( (LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME );
		return FALSE;
	}

	return TRUE;
}

void USER::ApplyGuildRun()
{
	CString			str;

	if( !CheckApplyGuildRun() )
	{
		SendSystemMsg( "└╠╣╠ ╜┼├╗╡╟╛ю └╓╜└┤╧┤┘.", SYSTEM_NORMAL, TO_ME);
		return;
	}

	char strGuildName[128];
	char strTitle[128];
	char strContent[1024];
	
	sprintf( strGuildName, "%s", m_strGuildName );
	sprintf( strTitle, "GUILD_RUN" );
	sprintf( strContent, "MasterID : %s, MasterAccount : %s", m_strUserID, m_strAccount );

	SDWORD sTitleLen	= _tcslen(strTitle);
	SDWORD sContentLen	= _tcslen(strContent);
	SDWORD sIDLen		= _tcslen(strGuildName);

	SQLHSTMT	hstmt = NULL;
	SQLRETURN	retcode;
	TCHAR		szSQL[8000];	::ZeroMemory(szSQL, sizeof(szSQL));

	int bbsnum = 2;		// └╠║е╞о┐ы ░╘╜├╞╟

	_sntprintf(szSQL, sizeof(szSQL), TEXT( "{call BBS_WRITE ( %d, ?, ?, ? )}" ), bbsnum );

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
//		TRACE("Fail To Write BBS (BBS:%d,Writer:%s,Title:%d) !!\n", bbsnum, m_strUserID, strTitle);

//		g_DBNew[m_iModSid].ReleaseDB(db_index);
		return;
	}

	int i = 1;
	SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, 20,		0, (TCHAR*)strGuildName,0, &sIDLen );
	SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, 50,		0, (TCHAR*)strTitle,	0, &sTitleLen );
	SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, 5000,	0, (TCHAR*)strContent,	0, &sContentLen );

	retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, sizeof(szSQL));
	if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
	{
	}
	else if (retcode == SQL_ERROR)
	{
		DisplayErrorMsg(hstmt);
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		BREAKPOINT();

		g_DBNew[m_iModSid].ReleaseDB(db_index);

		return;
	}
	
	SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);

	SendSystemMsg( "▒ц╡х ┤▐╕о▒т └╠║е╞о ╜┼├╗└╠ ┐╧╖с╡╟╛·╜└┤╧┤┘.", SYSTEM_NORMAL, TO_ME);

	return;
}

BOOL USER::CheckApplyGuildRun()
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode;
	TCHAR			szSQL[8000];
	BOOL			bExist = FALSE;

	::ZeroMemory(szSQL, sizeof(szSQL));
	_sntprintf(szSQL, sizeof(szSQL), TEXT("select * from bbs_2 where strWriter = \'%s\'"), m_strGuildName);

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );

	if( retcode != SQL_SUCCESS )
	{
		return FALSE;
	}

	retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, SQL_NTS);

	if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
	{
		retcode = SQLFetch( hstmt );

		if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
		{
			bExist = TRUE;
		}
		else if( retcode == SQL_NO_DATA )
		{
		}
		else
		{
		}
	}
	else
	{
		DisplayErrorMsg(hstmt);
		retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		BREAKPOINT();

		g_DBNew[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);

	if( bExist ) return FALSE;

	return TRUE;
}

//////////////////////////////////////////////////////////////////////////
//	└▄┼║╖о(╖╣╞╝┤╜╞╤╖о)╕ж ╝┬╞├╟╧░э ║п░ц└╠ ╗¤▒т╕щ ║п░ц┴д║╕╕ж ┼м╢є└╠╛Ё╞о╖╬ ║╕│╜┤┘.
//
void USER::SetDecBullNum(BYTE tSlot, short sDec)
{
	if(tSlot < 0 || tSlot >= TOTAL_ITEM_NUM) return;

	short sOldBullNum = m_UserItem[tSlot].sBullNum;
	
	m_UserItem[tSlot].sBullNum -= sDec;
	if(m_UserItem[tSlot].sBullNum < 0) m_UserItem[tSlot].sBullNum = 0;

	if(sOldBullNum != m_UserItem[tSlot].sBullNum) SendBullNum(tSlot);
}
//////////////////////////////////////////////////////////////////////////123321
//╛ш┐ю  ├┐╕Ў═ц╝╥╕─▒ф═╝▒э
void USER::SetXingfen()
{
	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	AddAbnormalInfo(ABNORMAL_HIEXP);
	if(m_isDoubleExp > 0 || g_sanJingYan== TRUE ) AddStateInfo(STATE_21);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);					
	Send(TempBuf, TempBuf.GetLength());

}

//////////////////////////////////////////////////////////////////////////123321
//╛ш┐ю  ├┐╕Ў═ц╝╥╕─▒ф═╝▒э
void USER::SetXingYun()
{
	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	AddAbnormalInfo(ABNORMAL_MAGICFIND);
	if(m_isDoubleBAOLV > 0 || g_sanBaoLv == TRUE ) AddStateInfo(STATE_22);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);					
	Send(TempBuf, TempBuf.GetLength());

}
void USER::DelXingfen()
{
	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	DeleteStateInfo(STATE_21);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);					
	Send(TempBuf, TempBuf.GetLength());

}
void USER::DelXingYun()
{
	
	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	DeleteStateInfo(STATE_22);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);					
	Send(TempBuf, TempBuf.GetLength());

}
///////////////////////////////////////////////////////////////////////////
//	│├▒т ╡е╣╠┴Ў╕ж ╝┬╞├╟╤┤┘.
//
void USER::SetColdDamage()
{
	if(m_tAbnormalKind != ABNORMAL_BYTE_NONE) return;		// └╠╣╠ ╗є┼┬└╠╗є└╠ ░╔╖┴└╓┤┬ ╗є┼┬└╠╕щ ╕о┼╧
	
	int iRandom = (int)(myrand(1, 1000) / 10);			
	if(iRandom > 53 || iRandom < 50) return;			// │├▒т ╡е╣╠┴Ў░б ░╔╕▒ ╚о└▓└║ 3%

	ClearAbnormalTime(ABNORMAL_TIME);

	m_tAbnormalKind = ABNORMAL_BYTE_COLD;
	m_dwAbnormalTime = COLD_TIME;
	m_dwLastAbnormalTime = GetTickCount();

	if(g_bDebug) SendSystemMsg( IDS_USER_COLD_DAMAGED, SYSTEM_NORMAL, TO_ME);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
//	TempBuf.Add(ABNORMAL_STATUS);
//	TempBuf.Add(ABNORMAL_COLD);
	AddAbnormalInfo(ABNORMAL_COLD);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());
}

//////////////////////////////////////////////////////////////////////////
//	╚н┐░╡е╣╠┴Ў╕ж ╝┬╞├╟╤┤┘.
//
void USER::SetFireDamage()
{
	if(m_tAbnormalKind != ABNORMAL_BYTE_NONE) return;		// └╠╣╠ ╗є┼┬└╠╗є└╠ ░╔╖┴└╓┤┬ ╗є┼┬└╠╕щ ╕о┼╧

	int iRandom = (int)(myrand(1, 1000) / 10);			
	if(iRandom > 53 || iRandom < 50) return;			// ╚н┐░ ╡е╣╠┴Ў░б ░╔╕▒ ╚о└▓└║ 3%

	ClearAbnormalTime(ABNORMAL_TIME);

	m_tAbnormalKind = ABNORMAL_BYTE_FIRE;
	m_dwAbnormalTime = FIRE_TIME;
	m_dwLastAbnormalTime = GetTickCount();

	if(g_bDebug) SendSystemMsg( IDS_USER_FIRE_DAMAGED, SYSTEM_NORMAL, TO_ME);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
//	TempBuf.Add(ABNORMAL_STATUS);
//	TempBuf.Add(ABNORMAL_FIRE);
	AddAbnormalInfo(ABNORMAL_FIRE);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());
}

///////////////////////////////////////////////////////////////////////////
//	└п└·░б ║╕░№╟╤ ╛╞└╠┼█, ╡╖... ║╕│╜┤┘.
//
void USER::BankOpenReq()
{
	int i, j;
	CBufferEx TempBuf;

	CByteArray arItemSlotList;

	m_dwBankDN = 0;
	InitUserBankItem();								// ║п╝Ў╕ж ▒·▓¤└╠ ╝╝┼╣╟╤┤┘.

	if(!LoadMemUserBank())
	{
		if(!LoadUserBank()) return;						// └п└·░б ║╕░№╟╤ └║╟р ╛╞└╠┼█└╗ ├│└╜ ┴в╝╙╟╥╢з ░б┴Ў░э ┐┬┤┘.
	}

	for(i = 0; i < TOTAL_BANK_ITEM_NUM; i++)
	{												// ╟Ў└ч ║╕░№╡╚ ╛╞└╠┼█╕╕ ║╕┐й┴╓▒т└з╟╪ ┴д╖─╟╤┤┘. 
		if(m_UserBankItem[i].sSid >= 0)
		{
			arItemSlotList.Add(i);
		}
	}

//	if(m_sLevel < ) return;							// └╠┐ы╟╥╝Ў└╓┤┬ ╖╣║з└╗ ┴ж╟╤╟╤┤┘.
	TempBuf.Add(BANK_OPEN);
	TempBuf.Add((BYTE)0x00);//╣·╖■┤╦┤ж╘Ў╝╙┴╦╥╗╕Ў┐╒╫╓╜┌
	TempBuf.Add((DWORD)m_dwBankDN);
	TempBuf.Add((BYTE)arItemSlotList.GetSize());

	for(i = 0; i < arItemSlotList.GetSize(); i++)
	{
		BYTE tempSlot = 0;
		tempSlot = arItemSlotList[i];
		TempBuf.Add(tempSlot);
		TempBuf.Add((short)m_UserBankItem[tempSlot].sLevel);
		TempBuf.Add((short)m_UserBankItem[tempSlot].sSid);
		TempBuf.Add((short)m_UserBankItem[tempSlot].sDuration);
		TempBuf.Add((short)m_UserBankItem[tempSlot].sBullNum);
		TempBuf.Add((short)m_UserBankItem[tempSlot].sCount);

		for(j = 0; j < MAGIC_NUM; j++) TempBuf.Add((BYTE)m_UserBankItem[tempSlot].tMagic[j]);

		TempBuf.Add((BYTE)m_UserBankItem[tempSlot].tIQ);
	}

	Send(TempBuf, TempBuf.GetLength());
	CheckBadItem();

}


///////////////////////////////////////////////////////////////////////////
//	└п└·░б ║╕░№╟╤ ╛╞└╠┼█, ╡╖└╗ DB┐б╝н ░б┴Ў░э ┐┬┤┘.
//
BOOL USER::LoadUserBank()
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode;
	TCHAR			szSQL[1024];

	::ZeroMemory(szSQL, sizeof(szSQL));
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call LOAD_USER_BANK (\'%s\')}"), m_strUserID);

	SQLUINTEGER iDN;
	SQLCHAR		strItem[_BANK_DB];
	
	SQLINTEGER	sInd;

	iDN = 0;
	::ZeroMemory(strItem, sizeof(strItem));

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );

	if( retcode != SQL_SUCCESS )
	{
//		TRACE("Fail To Load User Bank Data !!\n");

//		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, SQL_NTS);

	if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
	{
		retcode = SQLFetch( hstmt );

		if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
		{
			int i = 1;
			SQLGetData( hstmt, i++, SQL_C_ULONG,	&iDN,		sizeof(iDN),		&sInd );
			SQLGetData( hstmt, i++, SQL_C_BINARY,	strItem,	sizeof(strItem),	&sInd );
		}
		else if( retcode == SQL_NO_DATA )
		{
			g_DB[m_iModSid].ReleaseDB(db_index);	// ╡е└╠┼═░б ╛°└╕╣╟╖╬
			return FALSE;
		}
		else
		{
			g_DB[m_iModSid].ReleaseDB(db_index);	// ╡е└╠┼═░б ╛°└╕╣╟╖╬
			return FALSE;
		}
	}
	else
	{
		DisplayErrorMsg(hstmt);
		retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		BREAKPOINT();

		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	StrToUserBankItem((LPTSTR)strItem);

	m_dwBankDN = iDN;

	SetMemUserBank((LPCTSTR)strItem);

	return TRUE;
}

BOOL USER::LoadAccountBank()
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode;
	TCHAR			szSQL[1024];

	::ZeroMemory(szSQL, sizeof(szSQL));
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call LOAD_ACCOUNT_BANK (\'%s\')}")/*, m_iMyServer*/, m_strAccount);

	SQLUINTEGER iDN;
	SQLCHAR		strItem[_ACCOUNT_BANK_DB];
	
	SQLINTEGER	sInd;

	iDN = 0;
	::ZeroMemory(strItem, sizeof(strItem));

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );

	if( retcode != SQL_SUCCESS )
	{
		return FALSE;
	}

	retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, SQL_NTS);

	if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
	{
		retcode = SQLFetch( hstmt );

		if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
		{
			int i = 1;
			SQLGetData( hstmt, i++, SQL_C_ULONG,	&iDN,		sizeof(iDN),		&sInd );
			SQLGetData( hstmt, i++, SQL_C_BINARY,	strItem,	sizeof(strItem),	&sInd );
		}
		else if( retcode == SQL_NO_DATA )
		{
			g_DB[m_iModSid].ReleaseDB(db_index);	// ╡е└╠┼═░б ╛°└╕╣╟╖╬
			return TRUE;
		}
		else
		{
			g_DB[m_iModSid].ReleaseDB(db_index);	// ╡е└╠┼═░б ╛°└╕╣╟╖╬
			return FALSE;
		}
	}
	else
	{
		DisplayErrorMsg(hstmt);
		retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		BREAKPOINT();

		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	StrToAccountBankItem((LPTSTR)strItem);

	m_dwAccountBankDN = iDN;

	SetMemAccountBank((LPCTSTR)strItem);

	return TRUE;
}


///////////////////////////////////////////////////////////////////////////////
//	UserBankItem ┐б Buffer└╟ │╗┐ы└╗ Copy ╟╤┤┘.
//
void USER::StrToUserBankItem(TCHAR *pBuf)
{
	int index = 0;
	int i, j;
	MYINT64 itemserial;

	for(i = 0; i < TOTAL_BANK_ITEM_NUM; i++)
	{
		m_UserBankItem[i].sLevel	= GetShort(pBuf, index);
		m_UserBankItem[i].sSid		= GetShort(pBuf, index);
		m_UserBankItem[i].sDuration = GetShort(pBuf, index);
		m_UserBankItem[i].sBullNum	= GetShort(pBuf, index);
		m_UserBankItem[i].sCount	= GetShort(pBuf, index);

		if(m_UserBankItem[i].sCount <= 0) m_UserBankItem[i].sSid = -1;
		for(j = 0; j < MAGIC_NUM; j++) m_UserBankItem[i].tMagic[j] = GetByte(pBuf, index);
		
		m_UserBankItem[i].tIQ = GetByte(pBuf, index);

		for( j = 0; j < 8; j++ )
		{
			itemserial.b[j] = GetByte( pBuf, index );
		}
		m_UserBankItem[i].iItemSerial = itemserial.i;

		for( j = 0; j < ITEM_USER_RIGHT_NUM; j++ )
		{
			m_UserBankItem[i].uid[j] = -1;
			m_UserBankItem[i].SuccessRate[j] = 0;
		}

		if( m_UserBankItem[i].sSid == g_RR.m_iItemSid )				// └╠ ╛╞└╠┼█└╠ ╖╬╛т╖│║э ╗є╟░└╠░э
		{
			if( g_strARKRRWinner.CompareNoCase( m_strUserID ) )	// ╟Ў└ч ╜┬└┌░б ╛╞┤╥ ░ц┐ь
			{
				ReSetItemSlot( &(m_UserBankItem[i]) );					// ╗░┤┬┤┘.
			}
		}

		m_UserBankItem[i].dwTime = 0;
	}	
}

///////////////////////////////////////////////////////////////////////////////
//	AccountBankItem ┐б Buffer└╟ │╗┐ы└╗ Copy ╟╤┤┘.
//
void USER::StrToAccountBankItem(TCHAR *pBuf)
{
	int index = 0;
	int i, j;
	MYINT64 itemserial;

	for(i = 0; i < TOTAL_ACCOUNT_BANK_ITEM_NUM; i++)
	{
		m_AccountBankItem[i].sLevel		= GetShort(pBuf, index);
		m_AccountBankItem[i].sSid		= GetShort(pBuf, index);
		m_AccountBankItem[i].sDuration	= GetShort(pBuf, index);
		m_AccountBankItem[i].sBullNum	= GetShort(pBuf, index);
		m_AccountBankItem[i].sCount		= GetShort(pBuf, index);

		if(m_AccountBankItem[i].sCount <= 0) m_AccountBankItem[i].sSid = -1;
		for(j = 0; j < MAGIC_NUM; j++) m_AccountBankItem[i].tMagic[j] = GetByte(pBuf, index);
		
		m_AccountBankItem[i].tIQ = GetByte(pBuf, index);

		for( j = 0; j < 8; j++ )
		{
			itemserial.b[j] = GetByte( pBuf, index );
		}
		m_AccountBankItem[i].iItemSerial = itemserial.i;

		for( j = 0; j < ITEM_USER_RIGHT_NUM; j++ )
		{
			m_AccountBankItem[i].uid[j] = -1;
			m_AccountBankItem[i].SuccessRate[j] = 0;
		}

		m_AccountBankItem[i].dwTime = 0;
	}	
}

///////////////////////////////////////////////////////////////////////////////
//	Buffer ┐б UserBankItem ┴д║╕╕ж Copy ╟╤┤┘.
//
void USER::UserBankItemToStr(TCHAR *pBuf)
{
	int index = 0;
	int i, j;
	MYINT64 itemserial;

	for(i = 0; i < TOTAL_BANK_ITEM_NUM; i++)
	{
		SetShort(pBuf, m_UserBankItem[i].sLevel,	index);
		SetShort(pBuf, m_UserBankItem[i].sSid,		index);
		SetShort(pBuf, m_UserBankItem[i].sDuration,	index);
		SetShort(pBuf, m_UserBankItem[i].sBullNum,	index);
		SetShort(pBuf, m_UserBankItem[i].sCount,	index);

		for(j = 0; j < MAGIC_NUM; j++) SetByte(pBuf, m_UserBankItem[i].tMagic[j], index);

		SetByte(pBuf, m_UserBankItem[i].tIQ, index);

		itemserial.i = m_UserBankItem[i].iItemSerial;

		for( j = 0; j < 8; j++ )
		{
			SetByte( pBuf, itemserial.b[j], index );
		}
	}
}

void USER::UserAccountBankItemToStr(TCHAR *pBuf)
{
	int index = 0;
	int i, j;
	MYINT64 itemserial;

	for(i = 0; i < TOTAL_ACCOUNT_BANK_ITEM_NUM; i++)
	{
		SetShort(pBuf, m_AccountBankItem[i].sLevel,		index);
		SetShort(pBuf, m_AccountBankItem[i].sSid,		index);
		SetShort(pBuf, m_AccountBankItem[i].sDuration,	index);
		SetShort(pBuf, m_AccountBankItem[i].sBullNum,	index);
		SetShort(pBuf, m_AccountBankItem[i].sCount,		index);

		for(j = 0; j < MAGIC_NUM; j++) SetByte(pBuf, m_AccountBankItem[i].tMagic[j], index);

		SetByte(pBuf, m_AccountBankItem[i].tIQ, index);

		itemserial.i = m_AccountBankItem[i].iItemSerial;

		for( j = 0; j < 8; j++ )
		{
			SetByte( pBuf, itemserial.b[j], index );
		}
	}
}

///////////////////////////////////////////////////////////////////////////
//	║╕░№╡╚ ╛╞└╠┼█, ╡╖└╗ DB┐б╝н ┴д║╕╕ж ░╗╜┼╟╤┤┘.
//
BOOL USER::UpdateUserBank()
{
// fors test_account_bank offical	 if(UpdateMemUserBank()) return TRUE;
    UpdateMemUserBank();
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strFace[10], strSkill[_SKILL_DB], strItem[_ITEM_DB], strPsi[_PSI_DB], strBankItem[_BANK_DB], strAccountBankItem[_ACCOUNT_BANK_DB];
	TCHAR			strQuickItem[_QUICKITEM_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strBankItem, sizeof(strBankItem));
	::ZeroMemory(strFace, sizeof(strFace));
	::ZeroMemory(strSkill, sizeof(strSkill));
	::ZeroMemory(strItem, sizeof(strItem));
	::ZeroMemory(strPsi, sizeof(strPsi));
	::ZeroMemory(strAccountBankItem, sizeof(strAccountBankItem));

	::ZeroMemory(strQuickItem, sizeof(strQuickItem));
	
    ::CopyMemory(strFace, m_strFace, sizeof(m_strFace));

	UserBankItemToStr(strBankItem);
	UserSkillToDBStr(strSkill);
	UserItemToStr(strItem);
	UserPsiToStr(strPsi);
	UserAccountBankItemToStr(strAccountBankItem);	


	SDWORD sBankItemLen	= sizeof(strBankItem);
	SDWORD sFaceLen		= sizeof(strFace);
	SDWORD sSkillLen	= sizeof(strSkill);
	SDWORD sItemLen		= sizeof(strItem);
	SDWORD sPsiLen		= sizeof(strPsi);
	SDWORD sQuickLen	= sizeof(strQuickItem);
	SDWORD sAccountBankItemLen = sizeof(strAccountBankItem);
	
    m_tPsiOneKind = m_tPsiTwoKind = m_tPsiThreeKind = 0;
	m_dwPsiOneTime = m_dwPsiTwoTime = m_dwPsiThreeTime = 0;

	// Psionic One
	if(m_dwHasteTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_HASTE;
		m_dwPsiOneTime = m_dwHasteTime;
	}
	if(m_dwShieldTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_SHIELD;
		m_dwPsiOneTime = m_dwShieldTime;
	}
	if(m_dwDexUpTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_DEXUP;
		m_dwPsiOneTime = m_dwDexUpTime;
	}
	if(m_dwMaxHPUpTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_HPUP;
		m_dwPsiOneTime = m_dwMaxHPUpTime;
	}
	if(m_dwFastRunTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_FAST_RUN;
		m_dwPsiOneTime = m_dwFastRunTime;
	}
	if(m_dwMindShockTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_MIND_SHOCK;
		m_dwPsiOneTime = m_dwMindShockTime;
	}
	if(m_dwPsiShieldTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_PSI_SHIELD;
		m_dwPsiOneTime = m_dwPsiShieldTime;
	}
	if(m_dwBigShieldTime != 0) 
	{
		m_tPsiOneKind = 30;
		m_dwPsiOneTime = m_dwBigShieldTime;
	}
	if(m_dwPiercingShieldTime != 0) 
	{
		m_tPsiOneKind = PSIONIC_PIERCING_SHIELD;
		m_dwPsiOneTime = m_dwPiercingShieldTime;
	}

	// Psionic Two
	if(m_dwAdamantineTime != 0) 
	{
		m_tPsiTwoKind = PSIONIC_ADAMANTINE;
		m_dwPsiTwoTime = m_dwAdamantineTime;
	}
	if(m_dwMightyWeaponTime != 0) 
	{
		m_tPsiTwoKind = PSIONIC_MIGHTYWEAPON;
		m_dwPsiTwoTime = m_dwMightyWeaponTime;
	}
	if(m_dwBerserkerTime != 0) 
	{
		m_tPsiTwoKind = PSIONIC_BERSERKER;
		m_dwPsiTwoTime = m_dwBerserkerTime;
	}

	// Psionic Three
	if(m_dwMindGuardTime != 0) 
	{
		m_tPsiThreeKind = PSIONIC_MIND_GUARD;
		m_dwPsiThreeTime = m_dwMindGuardTime; //╝╙╫╓╢╬
	}
	
    _sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_USER_BANK_DATA (\'%s\',\'%s\',%d,%d,%d,%d,%d, %d,%d,%d, ?, \
		%d,%d,%d, %d,%d, %d, %d,%d,  %d,\
		%d,  %d, %d,%d,%d,%d, %d,%d,%d,%d, \
		?,?,?,?, %d, %d, \
		%d, %d, ?, ?, \
		%d, \
		%d, \
		%d, %d, %d, %d, %d, %d, %d, %d, %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,\
		\'%s\', \
		%d,%d,		%d,%d,		%d,%d)}")/*, 
		m_iMyServer*/, m_strAccount, m_strUserID,	m_sSTR,	m_sCON,	m_sDEX,	m_sVOL,	m_sWIS,	m_iSkin, m_iHair, m_sGender,  
		m_curz,	m_curx,	m_cury,		m_dwBuddy, m_dwGuild,		m_dwExp,		m_sPA, m_sSkillPoint,  	m_dwXP,
		m_sMaxHP, m_sHP, m_sMaxPP, m_sPP, m_sMaxSP,	m_sSP,		m_dwDN,	m_sCityRank, m_sLevel,	m_byClass, 
		m_tAbnormalKind, m_dwAbnormalTime, 

		m_dwBankDN, m_dwAccountBankDN,

		m_bLive,
		m_dwSaintTime, 
		m_dwHiExpTime, m_dwHtExpTime, m_dwMagicFindTime, m_dwMagicFtTime, m_dwNoChatTime,m_dwZF,m_dwXL, m_dwCloseTime, m_dwAutoMoney,m_dwPD,m_dwLingQu,m_dwShaGuai, m_dwGuarDianTianShi, m_dwShopPingDN, m_dwVIPTime,m_dwZaiXianTime,m_dwBFindTime,m_dwHXTime,m_dwSGTime,m_dwXYTime,m_dwZFTime,
		m_strLoveName,	//yskang 0.1 m_strLoveName ├▀░б
		m_tPsiOneKind, m_dwPsiOneTime,		m_tPsiTwoKind, m_dwPsiTwoTime,		m_tPsiThreeKind, m_dwPsiThreeTime);

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
//		TRACE("Fail To Update User Bank Data !!\n");

//		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strFace),	0, (TCHAR*)strFace,		0, &sFaceLen );

		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strSkill),	0, (TCHAR*)strSkill,	0, &sSkillLen );
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strItem),	0, (TCHAR*)strItem,		0, &sItemLen );
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strPsi),		0, (TCHAR*)strPsi,		0, &sPsiLen );
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strQuickItem),	0, (TCHAR*)strQuickItem,	0, &sQuickLen );

		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strBankItem),	0, (TCHAR*)strBankItem,		0, &sBankItemLen );
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strAccountBankItem),	0, (TCHAR*)strAccountBankItem,		0, &sAccountBankItemLen );
        
        retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			BREAKPOINT();

			g_DB[m_iModSid].ReleaseDB(db_index);
			return FALSE;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		BREAKPOINT();

		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

///////////////////////////////////////////////////////////////////////////
//	╜├╛▀╣№└з┐б └╓┤┬ └п└·┐б░╘ ┼╕┐ю╞ў┼╗╕ж └№╟╤┤┘.
//
void USER::SendMyTownPotal(BYTE towho, BYTE type)
{
	CBufferEx	TempBuf;
	int i;

	CPoint pos = ConvertToClient( m_curx, m_cury );
	if( pos.x == -1 || pos.y == -1 ) { pos.x = 1; pos.y = 1; }	// └╠║╬║╨└║ │к┴▀┐б ╣┘▓┘└┌

	TempBuf.Add(USER_INFO);
	TempBuf.Add(type);
	TempBuf.Add(m_uid + USER_BAND);

	TempBuf.AddString(m_strUserID);
		
	TempBuf.Add((short)pos.x);
	TempBuf.Add((short)pos.y);
		
	TempBuf.Add(m_iSkin);
	TempBuf.Add(m_iHair);
	TempBuf.Add((BYTE)m_sGender);
	TempBuf.AddData(m_strFace, 10);
		
	for( i = 0; i < EQUIP_ITEM_NUM; i++) TempBuf.Add(m_UserItem[i].sSid);

	TempBuf.Add(m_sHP);
	TempBuf.Add(m_sMagicMaxHP);

	TempBuf.Add(m_tDir);

//	TempBuf.Add((BYTE)m_strAbnormal[0]);			// Abnormal Info
//	TempBuf.Add(m_tPsiAbnormal);					

	TempBuf.Add(m_dwAbnormalInfo);				// ╗є┼┬└╠╗є ┴д║╕
	TempBuf.Add(m_dwAbnormalInfo_);
	TempBuf.Add((DWORD)0);
	TempBuf.Add((DWORD)0);
	//╣·╖■┤╦┤ж╢р16 byte 0
	for(int zero = 0;zero<16;zero++)
		TempBuf.Add((BYTE)0x00);
	TempBuf.Add(m_sCityRank);

	TempBuf.Add((int)m_dwGuild);					//&&&&&&&&&&&& Test Code
	TempBuf.AddString(m_strGuildName);			// ▒ц╡х └╠╕з└╗ ├▀░б
	TempBuf.Add(m_sGuildVersion);
	
	TempBuf.Add(m_byClass);
	m_bPkStatus=0x01;
	TempBuf.Add((BYTE)m_bPkStatus);

	TempBuf.AddString(m_strLoveName);//yskang 0.1

	for( i = TOTAL_INVEN_MAX; i < TOTAL_ITEM_NUM-2; i++) 
			TempBuf.Add(m_UserItem[i].sSid);	// EBody

	if(m_UserItem[TOTAL_ITEM_NUM-2].sSid!=-1&&m_UserItem[TOTAL_ITEM_NUM-2].sDuration!=0){
			TempBuf.Add((BYTE)(m_UserItem[TOTAL_ITEM_NUM-2].tMagic[0]));
			TempBuf.Add((BYTE)0x00);
	}else{
			TempBuf.Add(m_UserItem[TOTAL_ITEM_NUM-2].tMagic[0]);
			TempBuf.Add((BYTE)0xff);
	}
		
	TempBuf.AddString(m_PersonalShopName);
	//╣·╖■┤╦┤ж╢р5byte 0x0a 0x00 0x00 0x00 0x00
	TempBuf.Add((BYTE)0x01);
	TempBuf.Add((BYTE)0x00);
	TempBuf.Add((BYTE)0x00);
	TempBuf.Add((BYTE)0x00);
	TempBuf.Add((BYTE)m_tBabyCall);
	if(m_tBabyCall)
	{
		TempBuf.Add(g_szBabyName[m_sBabyID%2],strlen(g_szBabyName[m_sBabyID%2]));
		TempBuf.Add(m_sBabyID);
	}
	switch(towho)
	{
/*	case TO_ALL:
		SendAll(TempBuf, TempBuf.GetLength());
		break;
*/
	case TO_ME:
		Send(TempBuf, TempBuf.GetLength());
		break;
/*
	case TO_ZONE:
		SendZone(TempBuf, TempBuf.GetLength());
		break;
*/
	case TO_INSIGHT:
	default:
		SendInsight(TempBuf, TempBuf.GetLength());
		break;
	}
	SendHuFaInfo(this,towho);

}

///////////////////////////////////////////////////////////////////////////
//	╝┐┐б╝н ╚г├т╟╧┤┬ ┼╕┐ю╞ў┼╗└╙
//
void USER::SendUserTownPotal(USER *pUser, BYTE tMode)
{
	if( !pUser ) return;

	CBufferEx	TempBuf;

	CPoint pos = ConvertToClient( pUser->m_curx, pUser->m_cury );
	if( pos.x == -1 || pos.y == -1 ) { pos.x = 1; pos.y = 1; }	// └╠║╬║╨└║ │к┴▀┐б ╣┘▓┘└┌

	TempBuf.Add(USER_INFO);
	TempBuf.Add(tMode);
	
	TempBuf.Add(pUser->m_uid + USER_BAND);

	if(tMode == INFO_TOWNPOTAL_DELETE) { Send(TempBuf, TempBuf.GetLength()); return; }

	TempBuf.AddString(pUser->m_strUserID);

	TempBuf.Add((short)pos.x);
	TempBuf.Add((short)pos.y);

	TempBuf.Add(pUser->m_iSkin);
	TempBuf.Add(pUser->m_iHair);
	TempBuf.Add((BYTE)pUser->m_sGender);
	TempBuf.AddData(pUser->m_strFace, 10);
int i;
	for(i = 0; i < EQUIP_ITEM_NUM; i++) TempBuf.Add(pUser->m_UserItem[i].sSid);

//	TempBuf.Add(pUser->m_sHP);
//	TempBuf.Add(pUser->m_sMaxHP);
	TempBuf.Add(pUser->m_sHP);
	TempBuf.Add(pUser->m_sMagicMaxHP);

	TempBuf.Add(pUser->m_tDir);

//	TempBuf.Add((BYTE)pUser->m_strAbnormal[0]);			// Abnormal Info
//	TempBuf.Add(pUser->m_tPsiAbnormal);						//&&&&&&&&&&&& Test Code	

	TempBuf.Add(pUser->m_dwAbnormalInfo);				// ╗є┼┬└╠╗є ┴д║╕
	TempBuf.Add(pUser->m_dwAbnormalInfo_);
	TempBuf.Add((DWORD)0);
	TempBuf.Add((DWORD)0);
	//╣·╖■┤╦┤ж╢р16 byte 0
	for(int zero = 0;zero<16;zero++)
		TempBuf.Add((BYTE)0x00);
	TempBuf.Add(pUser->m_sCityRank);

	TempBuf.Add((int)pUser->m_dwGuild);					//&&&&&&&&&&&& Test Code
	TempBuf.AddString(pUser->m_strGuildName);			// ▒ц╡х └╠╕з└╗ ├▀░б
	TempBuf.Add(pUser->m_sGuildVersion);

	TempBuf.Add(pUser->m_byClass);
	TempBuf.Add((BYTE)pUser->m_bPkStatus);

	TempBuf.AddString(pUser->m_strLoveName);//yskang 0.1

	for( i = TOTAL_INVEN_MAX; i < TOTAL_ITEM_NUM-2; i++) TempBuf.Add(pUser->m_UserItem[i].sSid);	// EBody
	if(m_UserItem[TOTAL_ITEM_NUM-2].sSid!=-1&&m_UserItem[TOTAL_ITEM_NUM-2].sDuration!=0){
		TempBuf.Add((BYTE)(m_UserItem[TOTAL_ITEM_NUM-2].tMagic[0]));
		TempBuf.Add((BYTE)0x00);
	}else{
		TempBuf.Add(m_UserItem[TOTAL_ITEM_NUM-2].tMagic[0]);
		TempBuf.Add((BYTE)0xff);
	}
	TempBuf.AddString(pUser->m_PersonalShopName);
	//╣·╖■┤╦┤ж╢р5byte 0x0a 0x00 0x00 0x00 0x00
//	TempBuf.Add((BYTE)0x01);
	TempBuf.Add((BYTE)0x00);
	TempBuf.Add((BYTE)0x00);
	TempBuf.Add((BYTE)0x00);
	TempBuf.Add((BYTE)pUser->m_tBabyCall);
	if(pUser->m_tBabyCall)
	{
		TempBuf.Add(g_szBabyName[pUser->m_sBabyID%2],strlen(g_szBabyName[pUser->m_sBabyID%2]));
		TempBuf.Add(pUser->m_sBabyID);
	}
	Send(TempBuf, TempBuf.GetLength());
	SendHuFaInfo(pUser,TO_ME);

}


///////////////////////////////////////////////////////////////////////////
//	└║╟р┐б╝н └╘├т▒▌, └╘├т└╘ ╛╞└╠┼█└╗ ┤у┤ч╟╤┤┘.
//
void USER::BankItemMoveReq(TCHAR *pBuf)
{
#ifdef _ACTIVE_USER
//	if(m_iDisplayType == 6 && m_sLevel > 25) return; //yskang 0.5
	if(m_iDisplayType == 6) return; //yskang 0.5
#endif

	int index = 0;
	BYTE type = GetByte(pBuf, index);
/////////////////////////////////////////////╜н║■
	BOOL bSuccess = FALSE;
	if(!LoadCharData(m_strAccount))
	{
		return;
	}
	for (int i =0; i < 3 ; i++)	//bug ╖└╓╣╡┴║┼╦в╫░▒╕
	{
		if (m_strChar[i][0] == 0)
			continue;
		if (strcmp(m_strChar[i],m_strUserID) == 0)
			bSuccess = TRUE;
	}

	if (bSuccess == FALSE)	//BUG  
		return;
	if (m_bNowTrading == TRUE || m_bPShopOpen == TRUE) 
	   {
            CString strDate ="";
			SYSTEMTIME st;
			GetLocalTime(&st);
			strDate.Format("%d-%d-%d %d:%d",st.wYear,st.wMonth,st.wDay ,st.wHour,st.wMinute);
			TCHAR m_Log[500];
			sprintf_s(m_Log,"[ %s ]%s %d,%d ╬я╞╖╥╞╢п┤ц╘┌╖╟╖и2 \r\n",strDate,m_strUserID,m_bNowTrading,m_bPShopOpen);
		    WriteUserShopLog(m_Log);
			SendItemMoveFail();
		    return;
	 }           
	///////////////////////////////////////////////////////╜н║■

	switch(type)
	{
	case BANK_ITEM_INPUT:
		BankInPut(pBuf + index);
		break;
	case BANK_ITEM_OUTPUT:
		BankOutPut(pBuf + index);
		break;
	case BANK_DN_INPUT:
		BankInPutDN(pBuf + index);
		break;
	case BANK_DN_OUTPUT:
		BankOutPutDN(pBuf + index);
		break;
	}
}

///////////////////////////////////////////////////////////////////////////
//	└║╟р┐б ╛╞└╠┼█└╗ ║╕░№╟╤┤┘.
//
void USER::BankInPut(TCHAR *pBuf) //╕Ў╚╦▓╓┐т ┤ц╚ы
{	
	int i;
	int tDestSlot;
	int index = 0;
	int iOver = 0;
	short sSid = -1;
	short sHaveCount = 0;

	BYTE result = SUCCESS;

	CBufferEx TempBuf;

	ItemList MyItem[TOTAL_ITEM_NUM], BackItem;

	BYTE tSourceSlot = GetByte(pBuf, index);	// ╗ч┐ы└┌ ╛╞└╠┼█└╠ └╓┤° ╜╜╖╘ └з─б
	short sCount = GetShort(pBuf, index);		// ╛є╕╢╕╕┼н ║╕░№
												// ┐└╖╬┴Ў └╬║е╕╕ ░б┤╔╟╧┤┘.			
	if(tSourceSlot < EQUIP_ITEM_NUM || tSourceSlot >= TOTAL_INVEN_MAX) { result = FAIL; goto go_result; }

	if ( m_bPShopOpen == TRUE || m_bNowTrading == TRUE) { result = FAIL; goto go_result; } //╬┤╓кBUG

	sSid = m_UserItem[tSourceSlot].sSid;
	sHaveCount = m_UserItem[tSourceSlot].sCount;
												
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) { result = FAIL; goto go_result; }	// └▀╕°╡╚ sSid

	if(sCount > BANK_MAX_ITEM) 
	{
		SendSystemMsg( IDS_USER_ONCE_MOVE_MAX, SYSTEM_ERROR, TO_ME);
		result = FAIL; goto go_result;
	}
												// ╝╥┴Ў╟╤ ╛╞└╠┼█ ╝Ў║╕┤┘ ╕╣└╗ ░ц┐ь			
	if(sCount <= 0 || sCount > sHaveCount) { result = FAIL; goto go_result; }
			
	if(g_arItemTable[sSid]->m_sDuration > 0 && sCount > 1) { result = FAIL; goto go_result; }
	
	for(i = 0; i < TOTAL_ITEM_NUM; i++)	// ╛╞└╠┼█ ┴д║╕ ╣щ╛ў
	{
		MyItem[i] = m_UserItem[i];
	}

	ReSetItemSlot(&BackItem);					// DB╜╟╞╨┐б ┤ы║ё╟╤ ╣щ╛ў┐ы ├╩▒т╚н
												
	tDestSlot = GetSameItem(m_UserItem[tSourceSlot], BANK_SLOT);	// └╧┤▄ ░у─е╝Ў └╓┤┬┴Ў, ░у─б╕щ ░░└║ ╛╞└╠┼█└╠ └╓┤┬┴Ў ├г╛╞║╗┤┘.
	
	/***************************└║╟р ╛ў╣л ├│╕о********************************************/
	if(tDestSlot >= 0)							// ╟╫╗є ╗ї╖╬└╠ ├▀░б ╡╟┤┬░═└╗ ▒т┴╪└╕╖╬ ├│╕о
	{											
		BackItem = m_UserBankItem[tDestSlot];

		if(m_UserBankItem[tDestSlot].sCount >= BANK_MAX_ITEM)
		{
			SendSystemMsg( IDS_USER_SAVE_MAX_COUNT, SYSTEM_ERROR, TO_ME);
			result = FAIL; goto go_result;
		}

		if((m_UserBankItem[tDestSlot].sCount + sCount) > BANK_MAX_ITEM)
		{										
			iOver = m_UserBankItem[tDestSlot].sCount + sCount - BANK_MAX_ITEM;
			if(iOver <= 0) { result = FAIL; goto go_result; }

			m_UserBankItem[tDestSlot].sCount = BANK_MAX_ITEM;
			sCount = sCount - iOver;
		}
		else m_UserBankItem[tDestSlot].sCount += sCount;
	}
	else
	{											//	├▀░б
		tDestSlot = GetEmptySlot(BANK_SLOT);

		if(tDestSlot == -1) 
		{
			result = FAIL; goto go_result; 
		}

		m_UserBankItem[tDestSlot].sLevel = m_UserItem[tSourceSlot].sLevel;
		m_UserBankItem[tDestSlot].sSid = m_UserItem[tSourceSlot].sSid;
		m_UserBankItem[tDestSlot].sDuration = m_UserItem[tSourceSlot].sDuration;
		m_UserBankItem[tDestSlot].sBullNum = m_UserItem[tSourceSlot].sBullNum;
		m_UserBankItem[tDestSlot].sCount = sCount;
		for(i = 0; i < MAGIC_NUM; i++) m_UserBankItem[tDestSlot].tMagic[i] = m_UserItem[tSourceSlot].tMagic[i];
		m_UserBankItem[tDestSlot].tIQ = m_UserItem[tSourceSlot].tIQ;
		m_UserBankItem[tDestSlot].iItemSerial = m_UserItem[tSourceSlot].iItemSerial;
	}

	index = 0;
	index = g_arItemTable[m_UserItem[tSourceSlot].sSid]->m_byWeight * sCount;
	/**************************└п└· └╬║е ├│╕о*********************************************/
	if(sCount >= sHaveCount && iOver == 0) ReSetItemSlot(&m_UserItem[tSourceSlot]);	
	else m_UserItem[tSourceSlot].sCount -= sCount;
	
	/**************************DB Update ├│╕о*********************************************/
	if(UpdateUserBank() == FALSE)
	{
		for(i = 0; i < TOTAL_ITEM_NUM; i++)// ╛╞└╠┼█ ┴д║╕ ║╣┐°
		{
			m_UserItem[i] = MyItem[i];
		}
		m_UserBankItem[tDestSlot] = BackItem;
	}

go_result:
	TempBuf.Add(BANK_ITEM_MOVE_RESULT);

	if(result == FAIL)
	{
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	result = (BYTE)0x01;
	TempBuf.Add(result);

	TempBuf.Add((BYTE)tDestSlot);				// └║╟р╛ў╣л	
	TempBuf.Add(m_UserBankItem[tDestSlot].sLevel);
	TempBuf.Add(m_UserBankItem[tDestSlot].sSid);
	TempBuf.Add(m_UserBankItem[tDestSlot].sDuration);
	TempBuf.Add(m_UserBankItem[tDestSlot].sBullNum);
	TempBuf.Add(m_UserBankItem[tDestSlot].sCount);
	for(i = 0; i < MAGIC_NUM; i++) TempBuf.Add(m_UserBankItem[tDestSlot].tMagic[i]);
	TempBuf.Add(m_UserBankItem[tDestSlot].tIQ);

	TempBuf.Add((BYTE)tSourceSlot);				// └п└· └╬║е
	TempBuf.Add(m_UserItem[tSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[tSourceSlot].sSid);
	TempBuf.Add(m_UserItem[tSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[tSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[tSourceSlot].sCount);
	for(i = 0; i < MAGIC_NUM; i++) TempBuf.Add(m_UserItem[tSourceSlot].tMagic[i]);
	TempBuf.Add(m_UserItem[tSourceSlot].tIQ);

	Send(TempBuf, TempBuf.GetLength());

	m_iCurWeight -= index;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...

//	SendQuickChange();							// ─№╛╞└╠┼█ ╡ю╖╧╟╤░╘ ├ы╝╥╡╟┤┬┴Ў ╛╦╛╞║╗┤┘. 
//	SendItemWeightChange();				// ╟Ў└ч ╛╞└╠┼█ ╣л░╘╕ж ║╕│╜┤┘.
}

///////////////////////////////////////////////////////////////////////////
//	└║╟р┐б ╛╞└╠┼█└╗ ╡╟ ├г┤┬┤┘.
//
void USER::BankOutPut(TCHAR *pBuf)  //╕Ў╚╦▓╓┐т ╚б│Ў
{
	int i, iWeight = 0;
	int tDestSlot;
	int index = 0;
	int iOver = 0;
	short sSid = -1;
	short sHaveCount = 0;

	BYTE result = SUCCESS;

	CBufferEx TempBuf;

	ItemList MyItem[TOTAL_ITEM_NUM], BackItem;

	BYTE tSourceSlot = GetByte(pBuf, index);	// ╗ч┐ы└┌ ╛╞└╠┼█└╠ └╓┤° ╜╜╖╘ └з─б
	short sCount = GetShort(pBuf, index);
												// ┐└╖╬┴Ў └╬║е╕╕ ░б┤╔╟╧┤┘.		
	if ( m_bPShopOpen == TRUE || m_bNowTrading == TRUE) { result = FAIL; goto go_result; } //╬┤╓кBUG
	if(tSourceSlot >= TOTAL_BANK_ITEM_NUM) { result = FAIL; goto go_result; }

	sSid = m_UserBankItem[tSourceSlot].sSid;
	sHaveCount = m_UserBankItem[tSourceSlot].sCount;

	//===================================================================╧▐╓╞╕Ў╚╦▓╓┐т╚б│Ў╩¤┴┐

	if ( sSid == 724) //║╟║╟
	{
		if (sCount + FindItem( 724) > 32000)
		{

			 SendEventMsg("│м╣¤┐╔╨п┤°╡─╫ю┤є╩¤┴┐");
			result = FAIL; 
			goto go_result;
           
		}
	}
//==========================================================================

	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) { result = FAIL; goto go_result; }

	if(sCount <= 0 || sCount > sHaveCount/* || sCount > BANK_MAX_ITEM*/) { result = FAIL; goto go_result; }

	//if(g_arItemTable[sSid]->m_byWear <= 5 && sCount > 1) { result = FAIL; goto go_result; }
	if(g_arItemTable[sSid]->m_sDuration > 0 && sCount > 1) { result = FAIL; goto go_result; }

	iWeight = g_arItemTable[sSid]->m_byWeight * sCount;
	if(m_iMaxWeight < m_iCurWeight + iWeight)
	{
		SendSystemMsg( IDS_USER_OVER_WEIGHT1, SYSTEM_ERROR, TO_ME);
		result = FAIL; 
		goto go_result;
	}

	for(i = 0; i < TOTAL_ITEM_NUM; i++)	// ╛╞└╠┼█ ┴д║╕ ╣щ╛ў
	{
		MyItem[i] = m_UserItem[i];
	}

	ReSetItemSlot(&BackItem);					// DB╜╟╞╨┐б ┤ы║ё╟╤ ╣щ╛ў┐ы ├╩▒т╚н
	BackItem = m_UserBankItem[tSourceSlot];
												// └╧┤▄ ░у─е╝Ў └╓┤┬┴Ў, ░у─б╕щ ░░└║ ╛╞└╠┼█└╠ └╓┤┬┴Ў ├г╛╞║╗┤┘.
	tDestSlot = GetSameItem(m_UserBankItem[tSourceSlot], INVENTORY_SLOT);
	
	/***************************└║╟р ╛ў╣л ├│╕о********************************************/
	if(tDestSlot >= 0)							// ╟╫╗є ╗ї╖╬└╠ ├▀░б ╡╟┤┬░═└╗ ▒т┴╪└╕╖╬ ├│╕о
	{		
		m_UserItem[tDestSlot].sCount += sCount;
	}
	else
	{											//	├▀░б
		tDestSlot = GetEmptySlot(INVENTORY_SLOT);

		if(tDestSlot == -1) 
		{
			result = FAIL; goto go_result; 
		}

		m_UserItem[tDestSlot].sLevel = m_UserBankItem[tSourceSlot].sLevel;
		m_UserItem[tDestSlot].sSid = m_UserBankItem[tSourceSlot].sSid;
		m_UserItem[tDestSlot].sDuration = m_UserBankItem[tSourceSlot].sDuration;
		m_UserItem[tDestSlot].sBullNum = m_UserBankItem[tSourceSlot].sBullNum;
		m_UserItem[tDestSlot].sCount = sCount;
		for(i = 0; i < MAGIC_NUM; i++) m_UserItem[tDestSlot].tMagic[i] = m_UserBankItem[tSourceSlot].tMagic[i];
		m_UserItem[tDestSlot].tIQ = m_UserBankItem[tSourceSlot].tIQ;
		m_UserItem[tDestSlot].iItemSerial = m_UserBankItem[tSourceSlot].iItemSerial;
	}
	
	/**************************└п└· └║╟р └╬║е ├│╕о*********************************************/
	if(sCount >= sHaveCount) ReSetItemSlot(&m_UserBankItem[tSourceSlot]);	
	else m_UserBankItem[tSourceSlot].sCount -= sCount;
	
	/**************************DB Update ├│╕о*********************************************/
	if(UpdateUserBank() == FALSE)
	{
		for(i = 0; i < TOTAL_ITEM_NUM; i++)// ╛╞└╠┼█ ┴д║╕ ║╣┐°
		{
			m_UserItem[i] = MyItem[i];
		}
		m_UserBankItem[tSourceSlot] = BackItem;

		result = FAIL;
	}

go_result:
	TempBuf.Add(BANK_ITEM_MOVE_RESULT);

	if(result == FAIL)
	{
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	result = (BYTE)0x02;
	TempBuf.Add(result);
	TempBuf.Add((BYTE)tSourceSlot);
	TempBuf.Add(m_UserBankItem[tSourceSlot].sLevel);
	TempBuf.Add(m_UserBankItem[tSourceSlot].sSid);
	TempBuf.Add(m_UserBankItem[tSourceSlot].sDuration);
	TempBuf.Add(m_UserBankItem[tSourceSlot].sBullNum);
	TempBuf.Add(m_UserBankItem[tSourceSlot].sCount);
	for(i = 0; i < MAGIC_NUM; i++) TempBuf.Add(m_UserBankItem[tSourceSlot].tMagic[i]);
	TempBuf.Add(m_UserBankItem[tSourceSlot].tIQ);
	TempBuf.Add((BYTE)tDestSlot);
	TempBuf.Add(m_UserItem[tDestSlot].sLevel);
	TempBuf.Add(m_UserItem[tDestSlot].sSid);
	TempBuf.Add(m_UserItem[tDestSlot].sDuration);
	TempBuf.Add(m_UserItem[tDestSlot].sBullNum);
	TempBuf.Add(m_UserItem[tDestSlot].sCount);
	for(i = 0; i < MAGIC_NUM; i++) TempBuf.Add(m_UserItem[tDestSlot].tMagic[i]);
	TempBuf.Add(m_UserItem[tDestSlot].tIQ);
	Send(TempBuf, TempBuf.GetLength());

	m_iCurWeight += iWeight;
	GetRecoverySpeed();
}


///////////////////////////////////////////////////////////////////////////
//	└║╟р┐б └╘▒▌╟╤┤┘.
///////////////////////////////////////////////////////////////////////////
void USER::BankInPutDN(TCHAR *pBuf) //╕Ў╚╦▓╓┐т ┤ц╚ы╜Ё╟о
{
	CBufferEx TempBuf;

	BYTE result; 
	int index = 0;
	DWORD BackBankDN = 0, BackMyDN = 0;

	DWORD InputDN = GetDWORD(pBuf, index);

	TempBuf.Add(BANK_ITEM_MOVE_RESULT);

	if ( m_bPShopOpen == TRUE || m_bNowTrading == TRUE)//╬┤╓кBUG
	{
		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}
	if(InputDN <= 0 || InputDN > m_dwDN) 
	{
		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}
	
	BackMyDN = m_dwDN;
	BackBankDN = m_dwBankDN;
										// └║╟р┐б └╘▒▌
	if(!CheckMaxValueReturn(m_dwBankDN, InputDN))
	{									// ┤▄, MAX░к└╠╕щ ┬ў╛╫└║...
		CheckMaxValue(m_dwBankDN, InputDN);
		if(m_dwBankDN < InputDN) InputDN = 0;
		else InputDN = m_dwBankDN - InputDN;
	}
	else m_dwBankDN += InputDN;
										// ░б┴Ў░э └╓┤┬ ╝╥┴Ў▒▌┐б╝н ╗л┤┘.
	if(InputDN >= m_dwDN) m_dwDN = 0;
	else m_dwDN -= InputDN;
//	if(InputDN == m_dwDN) m_dwDN = 0;
//	else m_dwDN -= InputDN;

	if(UpdateUserBank() == FALSE)		// DB UpDate
	{
		m_dwDN = BackMyDN;
		m_dwBankDN = BackBankDN;

		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	result = (BYTE)0x03;				// 3 : DN └╘▒▌
	TempBuf.Add(result);

	TempBuf.Add(m_dwBankDN);			// └║╟р│╗ └╘▒▌╟╤ ├╤▒▌╛╫
	TempBuf.Add(m_dwDN);				// ╝╥┴Ў╟╤ ├╤▒▌╛╫

	Send(TempBuf, TempBuf.GetLength());
}

///////////////////////////////////////////////////////////////////////////
//	└║╟р┐б ├т▒▌╟╤┤┘.
///////////////////////////////////////////////////////////////////////////
void USER::BankOutPutDN(TCHAR *pBuf)  //╕Ў╚╦▓╓┐т ╚б│Ў╜Ё╟о
{
	CBufferEx TempBuf;

	BYTE result; 
	int index = 0;
	DWORD BackBankDN = 0, BackMyDN = 0;

	DWORD OutputDN = GetDWORD(pBuf, index);

	TempBuf.Add(BANK_ITEM_MOVE_RESULT);

	if ( m_bPShopOpen == TRUE || m_bNowTrading == TRUE)//╬┤╓кBUG
	{
		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}
	if(OutputDN <= 0 || OutputDN > m_dwBankDN)			// │╩╣л ┼й╕щ
	{
		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	BackMyDN = m_dwDN;					// ╣щ╛ў
	BackBankDN = m_dwBankDN;
										// ╗ч┐ы└┌ ╝╥┴Ў▒▌┐б ╟╒╗ъ╟╤┤┘.
	if(!CheckMaxValueReturn(m_dwDN, OutputDN))
	{									// ┤▄, MAX░к└╠╕щ ┬ў╛╫└║...
		CheckMaxValue(m_dwDN, OutputDN);
		if(m_dwDN < OutputDN) OutputDN = 0;
		else OutputDN = m_dwDN - OutputDN;
	}
	else m_dwDN += OutputDN;
										// └║╟р┐б╝н ╗л┤┘.
	if(OutputDN >= m_dwBankDN) m_dwBankDN = 0;
	else m_dwBankDN -= OutputDN;

	if(UpdateUserBank() == FALSE)		// DB UpDate
	{
		m_dwDN = BackMyDN;
		m_dwBankDN = BackBankDN;

		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	result = (BYTE)0x04;				// 4 : DN ├т▒▌
	TempBuf.Add(result);

	TempBuf.Add(m_dwBankDN);			// └║╟р│╗ └╘▒▌╟╤ ├╤▒▌╛╫
	TempBuf.Add(m_dwDN);				// ╝╥┴Ў╟╤ ├╤▒▌╛╫

	Send(TempBuf, TempBuf.GetLength());
}

///////////////////////////////////////////////////////////////////////////
//	╕о╜║┼╕╞о╟╧╕щ ░╘└╙╗є┐б╝н ┐м░с└╠ ▓Ў╛ю┴°┤┘.
//
void USER::RestartReq(TCHAR *pBuf)
{
	if( m_bLogOut == TRUE ) return;
	if( m_state != STATE_GAMESTARTED ) return;

	if(m_UserItem[39].sSid == 1184)
	{
		if(m_dwTransTime != 0 && m_iSkin == 170){
			if(m_UserItem[39].tMagic[5] == 1)	m_iSkin = 8;
			else if(m_UserItem[39].tMagic[5] == 2) m_iSkin = 8;
			else m_iSkin = 8;
		}else if(m_dwTransTime != 0 && m_iHair == 10015){
			if(m_UserItem[39].tMagic[5] == 1)	m_iHair = 10001;
			else if(m_UserItem[39].tMagic[5] == 2) m_iHair = 10002;
			else m_iHair = 0;
		}		
	}	

	g_pMainDlg->BridgeServerUserRestart(m_uid, m_strUserID);
	return;





	if(m_tGuildWar == GUILD_WARRING && m_dwFieldWar > 0)		
	{									// ╟╩╡х└№ ┴▀└╠╕щ ╛╦╖┴┴╪┤┘.
		if(m_bGuildMaster) 
		{
			CString strMsg = _T("");
			strMsg.Format( IDS_USER_GUILD_DEFEAT, m_strGuildName);
			SendGuildWarFieldEnd((LPTSTR)(LPCTSTR)strMsg);// ╟╫║╣
		}
	}

	if(m_bNowBuddy == TRUE)				// ╣Ў╡Ё┴▀└╠╕щ ┼ы║╕╟╤┤┘.
	{
		for(int i = 0; i < MAX_BUDDY_USER_NUM; i++)
		{
			if(strcmp(m_MyBuddy[i].m_strUserID, m_strUserID) == 0) SendBuddyUserLeave(i);
		}
	}

	if(m_bNowTrading == TRUE) 
	{
		BYTE result = 0x00;
		USER *pTradeUser = NULL;
		if(m_iTradeUid != -1)	pTradeUser = GetUser(m_iTradeUid - USER_BAND);

		if(pTradeUser != NULL)	pTradeUser->SendExchangeFail(result, (BYTE)0x05);
	}

	if(m_tGuildHouseWar == GUILD_WARRING) CheckGuildUserListInGuildHouseWar(); // ┤┘╕е └п└·╡щ└║ ╣╗╟╧│к ├╝┼й..

	if(m_bLive == USER_DEAD) m_sHP = m_sMaxHP;

	if(!UpdateMemBankDataOnly()) return;
	if(!UpdateMemAccountBankDataOnly()) return;
	if(!UpdateUserData(TRUE)) return;
	ReInitMemoryDB();

	// alisia
//	if(SendRestartLoginResult() == FALSE) return;
	int		index = 0;
	m_state = STATE_LOGOUT;

	index = 0;
	SetByte(m_TempBuf, RESTART_RESULT, index );
	SetByte(m_TempBuf, SUCCESS, index );
	Send(m_TempBuf, index);
	// alisia


	m_nHavePsiNum = 0;
	m_tIsOP = 0;
	MAP *pMap = NULL;

	if( m_ZoneIndex < 0 || m_ZoneIndex >= g_zone.GetSize() ) goto go_result;

	pMap = g_zone[m_ZoneIndex];
	if( m_curx < 0 || m_curx >= pMap->m_sizeMap.cx ) goto go_result;
	if( m_cury < 0 || m_cury >= pMap->m_sizeMap.cy ) goto go_result;

	if( g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser == USER_BAND + m_uid ) // ╕╩┐б╝н ╗ч╢є┴°┤┘.
		::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, 0);

go_result:
	::ZeroMemory(m_strUserID, sizeof(m_strUserID));

	SendMyInfo(TO_INSIGHT, INFO_DELETE);

//	m_state = STATE_GAMERESTART;		// ┴в╝╙ ╗є┼┬╕ж ╣┘▓█┤┘.
}

void USER::RestartReqWithThread(TCHAR *pBuf)
{
	LOGINOUTTHREADDATA *pLIOTD;
	pLIOTD = new LOGINOUTTHREADDATA;
	pLIOTD->CODE = RESTART_REQ;
	pLIOTD->UID = m_uid;
	pLIOTD->ID[0] = '\0';

	EnterCriticalSection( &m_CS_LoginData );
	RecvLoginData.AddTail(pLIOTD);
	nLoginDataCount = RecvLoginData.GetCount();
	LeaveCriticalSection( &m_CS_LoginData );
}

///////////////////////////////////////////////////////////////////////////
//	╕о╜║┼╕╞о╟╧╕щ ░╘└╙╗є┐б╝н ACCOUNT LOGIN╗є┼┬╖╬ ╡╟╡╣╛╞ ░г┤┘.
//
BOOL USER::SendRestartLoginResult()
{
	int		index = 0;
	BYTE	result = FAIL, error_code = 0;
	int		old_index = 0;
	TCHAR	szTemp[8096];

	if(!LoadCharData(m_strAccount))
	{
		// Load Character Data Fail...
		error_code = UNKNOWN_ERR;
		goto result_send;
	}
	else
	{
		m_state = STATE_CONNECTED;
		result = SUCCESS;
	}

result_send:

	index = 0;
	SetByte(m_TempBuf, RESTART_RESULT, index );
	SetByte(m_TempBuf, result, index );

	old_index = index;
	::CopyMemory(szTemp, m_TempBuf, old_index);

	if(result == SUCCESS)
	{
		SetByte(m_TempBuf, (BYTE)m_nCharNum, index);
	}
	else
	{
		SetByte(m_TempBuf, error_code, index);
		Send(m_TempBuf, index);
		return FALSE;
	}

	if(m_nCharNum != 0 && result == SUCCESS)
	{
		for(int i = 0; i < 3; i++)
		{
			if(m_strChar[i][0])	
			{
				SetByte(m_TempBuf, (BYTE)i, index);
				if(!SendCharInfo(m_strChar[i], m_TempBuf, index))
				{
					error_code = UNKNOWN_ERR;
					SetByte(szTemp, error_code, old_index);
					Send(szTemp, old_index);
					return FALSE;
				}
			}
		}
	}
	Send(m_TempBuf, index);
	return TRUE;
}


BOOL USER::IsPKZone(USER *pUser)
{
	BOOL mePK = FALSE;
	BOOL youPK = FALSE;

	int index = 0;

	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return FALSE;

	if(m_tGuildWar == GUILD_WARRING && m_dwFieldWar > 0) 
	{
		if(pUser->m_dwGuild == m_dwGuild) return FALSE;			// ╟╩╡х└№└╧╢з ░░└║ ▒ц╡х┐°└║ PK╟╥╝Ў ╛°┤┘.
	}
	if(m_curz == 409) return TRUE;
	if(m_ZoneIndex < 0 || m_ZoneIndex >= g_TownPotal.GetSize()) return FALSE;

//	if(!g_TownPotal[m_ZoneIndex]->iPkMode) return FALSE;		// PK ╟╥╝Ў└╓┤┬ ╛°┤┬ ┴Ў┐к(╗є┴б╛╚)└╠┤┘
	ZONEINFO* pZoneInfo = GetZoneInfo( m_curz );
	if( !pZoneInfo ) return FALSE;
	if( !pZoneInfo->iPkMode ) return FALSE;
//21 guildhouse war
	if(m_curz == 12) return TRUE;		// ^^ └╙╜├─┌╡х....

	int metype = CheckInvalidMapType();
	if(metype == 1 || metype == 4 ) return FALSE;    //┼г┼г╖т╔│─о╜√╓╣PK╨▐╕─║є╡─

	int type = pUser->CheckInvalidMapType();
	if(type == 1|| type == 4) return FALSE; //┼г┼г╖т╔│─о╜√╓╣PK╨▐╕─║є╡─


	// ╖╬┐н╖│║э ├╝┼й
#ifndef _EVENT_RR		// ┴Ў┐к ├╓░н └╠║е╞о░б ╛°└╕╕щ
	if( m_curz == g_RR.m_iZoneNum )
	{
		if( g_RR.m_bRRStatus != RR_START ) return FALSE;
	}
#endif

	if(!CheckInvalidZoneState(type))
	{
		if(m_dwGuild > 0 && pUser->m_dwGuild == m_dwGuild) return FALSE;

		return TRUE;
	}
	else
	{
//		if(type < 0 || type >= g_arMapTable.GetSize()) return TRUE;
//		if(metype < 0 || metype >= g_arMapTable.GetSize()) return TRUE;

		int mapindex = GetGuildMapIndex(metype);
		if(mapindex <= -1 || mapindex >= g_arMapTable.GetSize()) return TRUE;
		mePK = (BOOL)g_arMapTable[mapindex]->m_tPkMode;

		if( pUser->m_ZoneIndex < 0 || pUser->m_ZoneIndex >= g_zone.GetSize() ) return FALSE;
		if( pUser->m_curx >= g_zone[pUser->m_ZoneIndex]->m_sizeMap.cx || pUser->m_curx < 0 ) return FALSE;
		if( pUser->m_cury >= g_zone[pUser->m_ZoneIndex]->m_sizeMap.cy || pUser->m_cury < 0 ) return FALSE;
		type = ((g_zone[pUser->m_ZoneIndex]->m_pMap[pUser->m_curx][pUser->m_cury].m_dwType & 0xFF00 ) >> 8);
		mapindex = GetGuildMapIndex(type);
		// if(mapindex <= -1) return TRUE;
		if(mapindex < 0 || mapindex >= g_arMapTable.GetSize()) return FALSE;
		youPK = (BOOL)g_arMapTable[mapindex]->m_tPkMode;

//		mePK = (BOOL)g_arMapTable[metype]->m_tPkMode;
//		type = ((g_zone[pUser->m_ZoneIndex]->m_pMap[pUser->m_curx][pUser->m_cury].m_dwType & 0xFF00 ) >> 8);
//		youPK = (BOOL)g_arMapTable[type]->m_tPkMode;

		if(mePK != youPK) return FALSE;
		else return mePK;
	}

	return TRUE;				
}

BOOL USER::IsCity()
{
	if( m_ZoneIndex < 0 || m_ZoneIndex >= g_zone.GetSize() ) return FALSE;
	if(m_curx >= g_zone[m_ZoneIndex]->m_sizeMap.cx || m_curx < 0) return FALSE;
	if(m_cury >= g_zone[m_ZoneIndex]->m_sizeMap.cy || m_cury < 0) return FALSE;

	int type = ((g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_dwType & 0xFF00 ) >> 8);

	if(type == 1) return TRUE;
	if(type == 12) return TRUE;		// ┤ы╖├└х╡╡ ╡╡╜├╛╚┐б └╓└╕╣╟╖╬

	return FALSE;				
}

BOOL USER::IsInPKC()
{
	if(m_curz == 45 || m_curz == 40 || m_curz == 43 || m_curz == 44 || m_curz == 58)
		return TRUE;
	return FALSE;
}
///////////////////////////////////////////////////////////////////////////
//	└п└·└╟ ▒т║╗ ╝Ў─б╕ж ╕┼┴ў╝╙╝║┐б ║п╚н╡╚ ╡е└╠┼═╖╬ ┤ї╟╪╝н └√┐ы╟╤┤┘.  
//
void USER::SetUserToMagicUser(int iMaxHPUp)
{
	int iTempHP = 0, iTempPP = 0;

	m_sMagicSTR = m_sSTR + m_DynamicUserData[MAGIC_STR_UP];
	m_sMagicCON = m_sCON + m_DynamicUserData[MAGIC_CON_UP];
	m_sMagicDEX = m_sDEX + m_DynamicUserData[MAGIC_DEX_UP];
	m_sMagicVOL = m_sVOL + m_DynamicUserData[MAGIC_VOL_UP];
	m_sMagicWIS = m_sWIS + m_DynamicUserData[MAGIC_WIS_UP];

	m_sMagicMaxHP = g_sHPConst[m_byClass] * m_sMagicCON + g_sHPLV[m_byClass] * (m_sLevel - 1) + g_sHPAdd[m_byClass];
	m_sMagicMaxPP = g_sPPConst[m_byClass] * m_sMagicWIS + g_sPPLV[m_byClass] * (m_sLevel - 1) + g_sPPAdd[m_byClass];
	m_sMagicMaxSP = g_sSPConst[m_byClass] * m_sMagicCON + g_sSPLV[m_byClass] * (m_sLevel - 1) + g_sSPAdd[m_byClass];

	iTempHP = (int)((double)m_DynamicEBodyData[EBODY_CON_TO_HP] / 100 * (double)m_sMagicCON);
	iTempPP = (int)((double)m_DynamicEBodyData[EBODY_WIS_TO_PP] / 100 * (double)m_sMagicWIS);

	m_sMagicMaxHP += m_DynamicUserData[MAGIC_MAX_HP_UP] + (int)((double)m_DynamicEBodyData[EBODY_CON_TO_HP] / 100 * (double)m_sMagicCON);	// └╧┤▄└з┐б╝н ▒т║╗└√└╬░═└╗ ░ш╗ъ + ┐й▒т╝н ╕┼┴ў╝╙╝║	
	m_sMagicMaxPP += m_DynamicUserData[MAGIC_MAX_PP_UP] + (int)((double)m_DynamicEBodyData[EBODY_WIS_TO_PP] / 100 * (double)m_sMagicWIS);
	m_sMagicMaxSP += m_DynamicUserData[MAGIC_MAX_SP_UP];
	
	//╫░▒╕╘Ў╝╙╤к┴┐░┘╖╓▒╚
	if(m_nHPPoint)
	{
		iTempHP = m_sMagicMaxHP*m_nHPPoint/100;
		m_sMagicMaxHP +=iTempHP;
	}	
	//if(m_DynamicUserData[MAGIC_HP_RATING_UP])
	//{
	//	iTempHP = m_sMagicMaxHP*m_DynamicUserData[MAGIC_HP_RATING_UP]/100;
	//	m_sMagicMaxHP +=iTempHP;
	//}	


	m_iMaxWeight = (m_sMagicCON + m_sMagicSTR) * 10 + g_ClassWeight[m_byClass] + m_sLevel * 6;// ╟Ў└ч ╡щ╝Ў└╓┤┬ ├╓┤ы ╣л░╘└╗ ▒╕╟╤┤┘.
	m_iMaxWeight += (int)((double)m_DynamicEBodyData[EBODY_STR_TO_WEIGHT] / 100 * (double)m_sMagicSTR);

	// ░э╖╣║з└╟ └п└·┐б░╘ ╞п║░╟╤ ┤╔╖┬└╗...
	if(m_sLevel >= ADD_USER_LEVEL) 
	{
		m_sMagicMaxHP += g_arUserLevel[m_sLevel - ADD_USER_LEVEL]->m_sHP;
		m_sMagicMaxPP += g_arUserLevel[m_sLevel - ADD_USER_LEVEL]->m_sPP;
		m_iMaxWeight += g_arUserLevel[m_sLevel - ADD_USER_LEVEL]->m_sWeight;
	}
    m_iMaxWeight = m_iMaxWeight * 3;//300%╕║╓╪┬·
    m_iMaxWeight += (int)((double)m_DynamicEBodyData[EBODY_WEIGHT_UP] / 100 * (double)m_iMaxWeight);

	// ├╓┤ы HP ╣Ў▒╫╝Ў┴д jjs
	switch(iMaxHPUp)
	{
	case -1 :
	case 0:
		break;
	case 1:
		m_sMagicMaxHP = (int)(m_sMagicMaxHP * 1.2 + 0.5);
		break;
	}

	if(m_sHP > m_sMagicMaxHP) m_sHP = m_sMagicMaxHP;	// ├╓┤ы HP ┴ж╟╤
	
}

///////////////////////////////////////////////////////////////////////////
//	└п└·░б ╟Ў└ч ░б┴Ў░э └╓┤┬ ╜║┼│┴▀ sSid┐═ └╧─б╟╧┤┬ ╜║┼│└╟ ╖╣║з└╗ ▒╕╟╤┤┘.
//
short USER::GetSkillLevel(BYTE tWeaponClass, short sSid)
{
	if(tWeaponClass < BRAWL || tWeaponClass > FIREARMS) return 0;

	int iStart = tWeaponClass * SKILL_NUM; 
	short sLevel = 0;
	for(int i = iStart; i < iStart + SKILL_NUM; i++)
	{
		if(m_UserSkill[i].sSid == sSid)
		{
			sLevel = m_UserSkill[i].tLevel;
			if(sLevel < 0) sLevel = 0;
			break;
		}
	}

	return sLevel;
}

///////////////////////////////////////////////////////////////////////////
//	└п└·╕ж ┴Ў┴д╜├░г╡┐╛╚ Hast ╗є┼┬╖╬ ╕╕╡ч┤┘.
//
void USER::SetHaste(int iTime)
{
	if(m_tIsOP == 1) return;					// ┐ю┐╡└┌ └╧╢з┤┬ ╗ч└╠┐└┤╨╗є┼┬░б ║п╟╧╕щ ╛╚╡╚┤┘. (┼ї╕э└╠ ╟о╖┴╝н...)

	if(CheckAbnormalInfo(ABNORMAL_MAX_HP_UP))
	{
		SetUserToMagicUser(-1);
		SendMyInfo(TO_ME, INFO_MODIFY);
		if(m_bNowBuddy == TRUE) SendBuddyUserChange(BUDDY_CHANGE);		// ╣Ў╡Ё┴▀└╠╕щ ┤┘╕е ╣Ў╡Ё┐°┐б░╘ │п╕░┤┘.
	}

	ClearAbnormalTime(PSI_ONE_TIME);

	m_dwHasteTime = iTime * 1000;		// jjs07 2001.11.23
	m_dwLastHasteTime = GetTickCount();

	if(g_bDebug) SendSystemMsg(_T("Haste Start"), SYSTEM_NORMAL, TO_ME);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	AddAbnormalInfo(ABNORMAL_HASTE);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	
	Send(TempBuf, TempBuf.GetLength());
}

///////////////////////////////////////////////////////////////////////////
//
void USER::SetShield(int iTime)
{
	if(m_tIsOP == 1) return;					

	if(CheckAbnormalInfo(ABNORMAL_MAX_HP_UP))
	{
		SetUserToMagicUser(-1);
		SendMyInfo(TO_ME, INFO_MODIFY);
		if(m_bNowBuddy == TRUE) SendBuddyUserChange(BUDDY_CHANGE);		// ╣Ў╡Ё┴▀└╠╕щ ┤┘╕е ╣Ў╡Ё┐°┐б░╘ │п╕░┤┘.
	}

	BOOL bExistShield = CheckAbnormalInfo(ABNORMAL_SHIELD);

	ClearAbnormalTime(PSI_ONE_TIME);
	AddAbnormalInfo(ABNORMAL_SHIELD);

	m_dwShieldTime = iTime * 1000;		// jjs07 2001.11.23
	//m_dwShieldTime = DEFAULT_PSI_DELAY + (DWORD)((double)(iVol*1000)/3.0 + 0.5);	// old
	m_dwLastShieldTime = GetTickCount();

	if(g_bDebug) SendSystemMsg(_T("Shield Start"), SYSTEM_NORMAL, TO_ME);

	if(bExistShield == FALSE)
	{
		CBufferEx TempBuf;
		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);
		SendInsight(TempBuf, TempBuf.GetLength());
		//SendExactScreen(TempBuf, TempBuf.GetLength());
	}
}
void USER::SetBigShield(int iTime)
{
	if(m_tIsOP == 1) return;					// ┐ю┐╡└┌ └╧╢з┤┬ ╗ч└╠┐└┤╨╗є┼┬░б ║п╟╧╕щ ╛╚╡╚┤┘. (┼ї╕э└╠ ╟о╖┴╝н...)

	if(CheckAbnormalInfo(ABNORMAL_MAX_HP_UP))
	{
		SetUserToMagicUser(-1);
		SendMyInfo(TO_ME, INFO_MODIFY);
		if(m_bNowBuddy == TRUE) SendBuddyUserChange(BUDDY_CHANGE);		// ╣Ў╡Ё┴▀└╠╕щ ┤┘╕е ╣Ў╡Ё┐°┐б░╘ │п╕░┤┘.
	}

	BOOL bExistShield = CheckAbnormalInfo(ABNORMAL_SHIELD) || CheckAbnormalInfo(ABNORMAL_BIGSHIELD);

	ClearAbnormalTime(PSI_ONE_TIME);
	AddAbnormalInfo(ABNORMAL_BIGSHIELD);

	m_dwBigShieldTime = iTime * 1000;		// jjs07 2001.11.23
	//m_dwShieldTime = DEFAULT_PSI_DELAY + (DWORD)((double)(iVol*1000)/3.0 + 0.5);	// old
	m_dwLastBigShieldTime = GetTickCount();

	if(g_bDebug) SendSystemMsg(_T("Big Shield Start"), SYSTEM_NORMAL, TO_ME);

	if(bExistShield == FALSE)
	{
		CBufferEx TempBuf;
		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);
		SendInsight(TempBuf, TempBuf.GetLength());
		//SendExactScreen(TempBuf, TempBuf.GetLength());
	}
}

///////////////////////////////////////////////////////////////////////////
//	┴Ў┴д╡╚ ╜├░г╡┐╛╚ └п└·└╟ DEX ░к└╗ 10 ┴ї░б ╜├┼▓┤┘.
//
void USER::SetDexUp(int iTime)
{
	if(m_tIsOP == 1) return;					// ┐ю┐╡└┌ └╧╢з┤┬ ╗ч└╠┐└┤╨╗є┼┬░б ║п╟╧╕щ ╛╚╡╚┤┘. (┼ї╕э└╠ ╟о╖┴╝н...)

	if(CheckAbnormalInfo(ABNORMAL_MAX_HP_UP))
	{
		m_dwMaxHPUpTime = 0;

		SetUserToMagicUser(-1);
		SendMyInfo(TO_ME, INFO_MODIFY);
		if(m_bNowBuddy == TRUE) SendBuddyUserChange(BUDDY_CHANGE);		// ╣Ў╡Ё┴▀└╠╕щ ┤┘╕е ╣Ў╡Ё┐°┐б░╘ │п╕░┤┘.
	}

	ClearAbnormalTime(PSI_ONE_TIME);

	m_dwDexUpTime = iTime * 1000;
	m_dwLastDexUpTime = GetTickCount();

	if(g_bDebug) SendSystemMsg(_T("Dex Up Start"), SYSTEM_NORMAL, TO_ME);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
//	TempBuf.Add(ABNORMAL_PSI);
//	TempBuf.Add(ABNORMAL_DEX_UP);
	AddAbnormalInfo(ABNORMAL_DEX_UP);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());
}

///////////////////////////////////////////////////////////////////////////
//	┴Ў┴д╡╚ ╜├░г╡┐╛╚ └п└·└╟ Max HP ░к└╗ 20% ┴ї░б ╜├┼▓┤┘.
//
void USER::SetMaxHPUp(int iTime)
{
	if(m_tIsOP == 1) return;					// ┐ю┐╡└┌ └╧╢з┤┬ ╗ч└╠┐└┤╨╗є┼┬░б ║п╟╧╕щ ╛╚╡╚┤┘. (┼ї╕э└╠ ╟о╖┴╝н...)

	ClearAbnormalTime(PSI_ONE_TIME);

	m_dwMaxHPUpTime = iTime * 1000;
	m_dwLastMaxHPUpTime = GetTickCount();

	if(g_bDebug) SendSystemMsg(_T("Max HP Up Start"), SYSTEM_NORMAL, TO_ME);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
//	TempBuf.Add(ABNORMAL_PSI);
//	TempBuf.Add(ABNORMAL_MAX_HP_UP);
	AddAbnormalInfo(ABNORMAL_MAX_HP_UP);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());
	SetUserToMagicUser(1);
	//-----------------------------------------
	//yskang 0.7 MAX HP UP ╢┘┤┬ ╡╡┴▀┐б ╟о╕о╕щ ╕╒░б ░╔╕░ ░═ ├│╖│ └с▒ё ╕╪├у ╟Ў╗є ╣Ў░┼ ╝Ў┴д
	CBufferEx	TempBuf2;
	TempBuf2.Add(MAX_HP_EXIT);
	TempBuf2.Add(m_sHP);
	TempBuf2.Add(m_sMagicMaxHP);
	Send(TempBuf2,TempBuf2.GetLength());
	//SendMyInfo(TO_ME, INFO_MODIFY); //└№├╝ ╡е└╠┼╕┤┬ ║╕│╗┴Ў ╛╩┤┬┤┘.
	//--------------------------------------
	if(m_bNowBuddy == TRUE) SendBuddyUserChange(BUDDY_CHANGE);		// ╣Ў╡Ё┴▀└╠╕щ ┤┘╕е ╣Ў╡Ё┐°┐б░╘ │п╕░┤┘.
}

void USER::SetAdamantine(int iTime)
{
	if( m_tIsOP == 1 ) return;

	ClearAbnormalTime(PSI_TWO_TIME);
	m_dwAdamantineTime = iTime * 1000;
	m_dwLastAdamantineTime = GetTickCount();

	if( g_bDebug ) SendSystemMsg( _T("Adamantine Start"), SYSTEM_NORMAL, TO_ME );

	CBufferEx TempBuf;
	TempBuf.Add( SET_USER_STATE );
	TempBuf.Add( m_uid + USER_BAND );
//	TempBuf.Add( ABNORMAL_PSI );
//	TempBuf.Add( ABNORMAL_ADAMANTINE );
	AddAbnormalInfo(ABNORMAL_ADAMANTINE);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send( TempBuf, TempBuf.GetLength() );
}

void USER::SetMightyWeapon(int iTime)
{
	if( m_tIsOP == 1 ) return;

	ClearAbnormalTime(PSI_TWO_TIME);
	m_dwMightyWeaponTime = iTime * 1000;
	m_dwLastMightyWeaponTime = GetTickCount();

	if( g_bDebug ) SendSystemMsg( _T("MightyWeapon Start"), SYSTEM_NORMAL, TO_ME );

	CBufferEx TempBuf;
	TempBuf.Add( SET_USER_STATE );
	TempBuf.Add( m_uid + USER_BAND );
//	TempBuf.Add( ABNORMAL_PSI );
//	TempBuf.Add( ABNORMAL_MIGHTYWEAPON );
	AddAbnormalInfo(ABNORMAL_MIGHTYWEAPON);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);

	Send( TempBuf, TempBuf.GetLength() );
}

void USER::SetBerserker(int iTime)
{
	if( m_tIsOP == 1 ) return;

	ClearAbnormalTime(PSI_TWO_TIME);
	m_dwBerserkerTime = iTime * 1000;
	m_dwLastBerserkerTime = GetTickCount();

	if( g_bDebug ) SendSystemMsg( _T("Berserker Start"), SYSTEM_NORMAL, TO_ME );

	CBufferEx TempBuf;
	TempBuf.Add( SET_USER_STATE );
	TempBuf.Add( m_uid + USER_BAND );
	AddAbnormalInfo(ABNORMAL_BERSERKER);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	SendInsight( TempBuf, TempBuf.GetLength() );
//	SendExactScreen(TempBuf, TempBuf.GetLength());
}
///////////////////////////////////////////////////////////////////////////////
//	└╠╡┐ ╝╙╡╡╕ж 20% ║№╕г░╘ ╟╪┴╪┤┘.
//
void USER::SetFastRun(int iTime)
{
	if( m_tIsOP == 1 ) return;

	if(CheckAbnormalInfo(ABNORMAL_MAX_HP_UP))
	{
		m_dwMaxHPUpTime = 0;

		SetUserToMagicUser(-1);
		SendMyInfo(TO_ME, INFO_MODIFY);
		if(m_bNowBuddy == TRUE) SendBuddyUserChange(BUDDY_CHANGE);		// ╣Ў╡Ё┴▀└╠╕щ ┤┘╕е ╣Ў╡Ё┐°┐б░╘ │п╕░┤┘.
	}

	ClearAbnormalTime(PSI_ONE_TIME);
	m_dwFastRunTime = iTime * 1000;
	m_dwLastFastRunTime = GetTickCount();

	if( g_bDebug ) SendSystemMsg( _T("FastRun Start"), SYSTEM_NORMAL, TO_ME );

	CBufferEx TempBuf;
	TempBuf.Add( SET_USER_STATE );
	TempBuf.Add( m_uid + USER_BAND );
	AddAbnormalInfo(ABNORMAL_FASTRUN);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	SendInsight( TempBuf, TempBuf.GetLength() );
//	SendExactScreen(TempBuf, TempBuf.GetLength());
}

/////////////////////////////////////////////////////////////////////////////
//	┴Ў┴д╡╚ ╜├░г╡┐╛╚ ║╕┴╢ ╗ч└╠┐└┤╨└╗ ╛▓┴Ў ╕°╟╧░╘ ╟╤┤┘.
//
BOOL USER::SetMindShock(int iTime)
{
	if( m_tIsOP == 1 ) return FALSE;

	int iRandom = myrand(1, 100);
	if(iRandom > SUCCESS_RATE_MIND_SHOCK) return FALSE;	// ╕╢└╬╡х ╝ю┼й┤┬ ╝║░° ╚о└▓└╠ └╓┤┘.

	if(CheckAbnormalInfo(ABNORMAL_MAX_HP_UP))
	{
		m_dwMaxHPUpTime = 0;

		SetUserToMagicUser(-1);
		SendMyInfo(TO_ME, INFO_MODIFY);
		if(m_bNowBuddy == TRUE) SendBuddyUserChange(BUDDY_CHANGE);		// ╣Ў╡Ё┴▀└╠╕щ ┤┘╕е ╣Ў╡Ё┐°┐б░╘ │п╕░┤┘.
	}
    if ( m_dwBigShieldTime != 0 )
	{
	CBufferEx TempttBuf;
            DeleteAbnormalInfo(ABNORMAL_BIGSHIELD);
			TempttBuf.Add(SET_USER_STATE);
			TempttBuf.Add(m_uid + USER_BAND);
			TempttBuf.Add(m_dwAbnormalInfo);
			TempttBuf.Add(m_dwAbnormalInfo_);		
		    SendInsight(TempttBuf, TempttBuf.GetLength());
	}
	ClearAbnormalTime(PSI_ONE_TIME);
	m_dwMindShockTime = (iTime * 1000 )+ 5000;	// 15├╩╖╬ ║п░ц 2002.11.14
	m_dwLastMindShockTime = GetTickCount();

	if( g_bDebug ) SendSystemMsg( _T("Mind Shock Start"), SYSTEM_NORMAL, TO_ME );

	CBufferEx TempBuf;
	TempBuf.Add( SET_USER_STATE );
	TempBuf.Add( m_uid + USER_BAND );
	AddAbnormalInfo(ABNORMAL_MINDSHOCK);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
//	SendInsight( TempBuf, TempBuf.GetLength() );
	SendExactScreen(TempBuf, TempBuf.GetLength());

	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////
//	Mind Shock ╖╬ ║╬┼═ ║╕╚г╟╤┤┘.
//
void USER::SetMindGuard(int iTime)
{
	if( m_tIsOP == 1 ) return;

	m_dwMindShockTime = 0;
	m_dwLastMindShockTime = GetTickCount();
	DeleteAbnormalInfo(ABNORMAL_MINDSHOCK);

	m_dwMindGuardTime = iTime * 1000;
	m_dwLastMindGuardTime = GetTickCount();
	AddAbnormalInfo(ABNORMAL_MINDGUARD);

	if( g_bDebug ) SendSystemMsg( _T("Mind Guard Start"), SYSTEM_NORMAL, TO_ME );

	CBufferEx TempBuf;
	TempBuf.Add( SET_USER_STATE );
	TempBuf.Add( m_uid + USER_BAND );
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
//	SendInsight( TempBuf, TempBuf.GetLength() );
	SendExactScreen(TempBuf, TempBuf.GetLength());
}

/////////////////////////////////////////////////////////////////////////////
//	└┌╜┼└╟ ╕╢╣¤╣ц╛ю╖┬└╗ │Ї└╬┤┘.
//
void USER::SetPsiShield(int iTime)
{
	if( m_tIsOP == 1 ) return;

	if(CheckAbnormalInfo(ABNORMAL_MAX_HP_UP))
	{
		m_dwMaxHPUpTime = 0;

		SetUserToMagicUser(-1);
		SendMyInfo(TO_ME, INFO_MODIFY);
		if(m_bNowBuddy == TRUE) SendBuddyUserChange(BUDDY_CHANGE);		// ╣Ў╡Ё┴▀└╠╕щ ┤┘╕е ╣Ў╡Ё┐°┐б░╘ │п╕░┤┘.
	}

	ClearAbnormalTime(PSI_ONE_TIME);
	m_dwPsiShieldTime = iTime * 1000;
	m_dwLastPsiShieldTime = GetTickCount();

	if( g_bDebug ) SendSystemMsg( _T("Psionic Shield Start"), SYSTEM_NORMAL, TO_ME );

	CBufferEx TempBuf;

	TempBuf.Add( SET_USER_STATE );
	TempBuf.Add( m_uid + USER_BAND );
	AddAbnormalInfo(ABNORMAL_PSISHIELD);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	SendInsight( TempBuf, TempBuf.GetLength() );
//	SendExactScreen(TempBuf, TempBuf.GetLength());
}

/////////////////////////////////////////////////////////////////////////////
//	╜п╡х╕ж ╣л╜├╟╧░э ╡е╣╠┴Ў╕ж ┴╓╕ч 20%└╟ ╚о└▓╖╬ ╜п╡х╕ж ╞─▒л╟╤┤┘.
//
void USER::SetPiercingShield(int iTime)
{
	if( m_tIsOP == 1 ) return;

	if(CheckAbnormalInfo(ABNORMAL_MAX_HP_UP))
	{
		m_dwMaxHPUpTime = 0;

		SetUserToMagicUser(-1);
		SendMyInfo(TO_ME, INFO_MODIFY);
		if(m_bNowBuddy == TRUE) SendBuddyUserChange(BUDDY_CHANGE);		// ╣Ў╡Ё┴▀└╠╕щ ┤┘╕е ╣Ў╡Ё┐°┐б░╘ │п╕░┤┘.
	}

	ClearAbnormalTime(PSI_ONE_TIME);
	m_dwPiercingShieldTime = iTime * 1000;
	m_dwLastPiercingShieldTime = GetTickCount();

	if( g_bDebug ) SendSystemMsg( _T("Piercing Shield Start"), SYSTEM_NORMAL, TO_ME );

	CBufferEx TempBuf;
	TempBuf.Add( SET_USER_STATE );
	TempBuf.Add( m_uid + USER_BAND );
	AddAbnormalInfo(ABNORMAL_PIERCING_SHIELD);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
//	SendInsight( TempBuf, TempBuf.GetLength() );
	SendExactScreen(TempBuf, TempBuf.GetLength());
}

///////////////////////////////////////////////////////////////////////////
//	┴Ў┴д╡╚ ╜├░г╡┐╛╚ ╛ю╡╥╝╙└╟ └√└╗ ├г┤┬┤┘.
//
void USER::SetHide(int iTime)
{
/*
	if(m_tIsOP == 1) return;					// ┐ю┐╡└┌ └╧╢з┤┬ ╗ч└╠┐└┤╨╗є┼┬░б ║п╟╧╕щ ╛╚╡╚┤┘. (┼ї╕э└╠ ╟о╖┴╝н...)

	m_tPsiAbnormal = ABNORMAL_HIDE;
	m_dwHideTime = iTime * 1000;		// jjs07 2001.11.23
	//m_dwHideTime = 10000;	// old
	m_dwLastHideTime = GetTickCount();

	if(g_bDebug) SendSystemMsg(_T("Hide Start"), SYSTEM_NORMAL, TO_ME);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(ABNORAML_PSI);
	TempBuf.Add(ABNORMAL_HIDE);
	TempBuf.Add((BYTE)0);
	TempBuf.Add((BYTE)0);
	TempBuf.Add((BYTE)0);
	TempBuf.Add((BYTE)0);
	Send(TempBuf, TempBuf.GetLength());
	SendInsight(TempBuf, TempBuf.GetLength());	// ╜п╡х ╢╟┤┬ ╟╧└╠╡х░б └╠╗є
*/
}

/////////////////////////////////////////////////////////////////////////////////////////
//	╝°░г╚╕╟╟, ┼┌╖╣╞ў╞о├│╕о
//
BOOL USER::Teleport(int xpos, int ypos)
{
	if( m_ZoneIndex < 0 || m_ZoneIndex >= g_zone.GetSize() ) return FALSE;

	BYTE result = FAIL;
	int will_x, will_y;
	int index = 0;
	int	nCurMapType, nTellMapType;

	CPoint ptTeleport;

	CPoint startPt;

	will_x = xpos;	// ┐Є┴ў└╠╖┴┤┬ ┴б
	will_y = ypos;

	if(will_x <= 0) will_x = m_curx;
	if(will_y <= 0) will_y = m_cury;

	if(will_x >= g_zone[m_ZoneIndex]->m_sizeMap.cx) will_x = g_zone[m_ZoneIndex]->m_sizeMap.cx - 1;
	if(will_y >= g_zone[m_ZoneIndex]->m_sizeMap.cy) will_y = g_zone[m_ZoneIndex]->m_sizeMap.cy - 1;

	startPt.x = m_curx;
	startPt.y = m_cury;

	CPoint pt = FindNearAvailablePoint_S(will_x, will_y);
	if(pt.x != -1 && pt.y != -1) 
	{
		// │╗░б ╖╬┐н╖│║э ░ц▒т└х┐б └╓░э
#ifndef _EVENT_RR 
		if( m_curz == g_RR.m_iZoneNum )
		{
			// ╟Ў└ч ┴б░· ░б░э└┌ ╟╧┤┬ ┴б└╟ ╝╙╝║└╠ ┤┘╕г┤┘╕щ
			if( CheckInvalidMapType() != ((g_zone[m_ZoneIndex]->m_pMap[pt.x][pt.y].m_dwType & 0xFF00 ) >> 8) )
			{
				return FALSE;
			}
		}
#else
		if( m_curz == g_RR.m_iZoneNum || m_curz == 61 ||  m_curz == 62 ||  m_curz == 63 )
		{
			// ╟Ў└ч ┴б░· ░б░э└┌ ╟╧┤┬ ┴б└╟ ╝╙╝║└╠ ┤┘╕г┤┘╕щ
			if( CheckInvalidMapType() != ((g_zone[m_ZoneIndex]->m_pMap[pt.x][pt.y].m_dwType & 0xFF00 ) >> 8) )
			{
				return FALSE;
			}
		}
#endif

		nCurMapType = CheckInvalidMapType();
		nTellMapType = ((g_zone[m_ZoneIndex]->m_pMap[pt.x][pt.y].m_dwType & 0xFF00 ) >> 8);

		// ╕╕╛р │╗░б ╝н└╓┤┬ ░ў└╠ ░°╝║┴Ў┐к└╠ ╛╞┤╧░э ┼┌╟╧┤┬ ┴┬╟е░б ░°╝║┴Ў┐к└╠╢є╕щ ╕о┼╧
		if( (nCurMapType != 8 && nCurMapType != 10 && nCurMapType != 15)
			&& (nTellMapType == 8 || nTellMapType == 10 || nTellMapType == 15) )
			return FALSE;

		ptTeleport = ConvertToClient(pt.x, pt.y);		
		if (m_curx < 0 || m_cury < 0)	//bug ╫°▒ъ▒и┤э
			return FALSE;


		if(InterlockedCompareExchange((LONG*)&g_zone[m_ZoneIndex]->m_pMap[pt.x][pt.y].m_lUser, 
			(long)g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, (long)0) == (long)0)
		{
			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, 0);
		}
		else return FALSE;

		m_curx = pt.x;
		m_cury = pt.y;

		result = SUCCESS;
	}
	else return FALSE;
	
	m_tDir = GetDirection(startPt, pt);		// ╟Ў└ч ╣ц╟т└╗ ╟е╜├╟╤┤┘.;

	index = 0;
	SetByte(m_TempBuf, PSI_TOWN_POTAL, index);
	SetByte(m_TempBuf, result, index);

	SetByte(m_TempBuf, 0, index);				// ╟╫╗є ░░└║┴╕  // │к┴▀┐б ╛°╛┘░═

	SetInt(m_TempBuf, m_uid + USER_BAND, index);

	SetShort(m_TempBuf, ptTeleport.x, index);
	SetShort(m_TempBuf, ptTeleport.y, index);
	SetShort(m_TempBuf, m_curz, index);
	
	Send(m_TempBuf, index);

//	SendMyTownPotal(TO_INSIGHT, INFO_TOWNPOTAL);
	SendMyInfo(TO_INSIGHT, INFO_TOWNPOTAL);
	SightRecalc();

	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////////////////
//	┴╫└║ └п└·│─?
//
void USER::IsDeadUser()
{
	if(m_bLive == USER_LIVE || m_tIsOP == TRUE ) return;
	//if(m_sHP > 0) return;

	int i;
	int iPotalZone = -1;

	int rand = 0;

	int x = 0;		// ┼╕┐ю╞ў┼╗┐б └·└х╡╚ DB┴┬╟е╕ж ▒т┴╪└╕╖╬ ╡╡╜├┐б╝н ╗ь╛╞│▓	
	int y = 0;

	CPoint ptPotal, pt;

	ptPotal.x = 1; ptPotal.y = 1;
/*
	for(i = 0; i < g_TownPotal.GetSize(); i++)
	{
		if(g_TownPotal[i]->iZone == m_curz) { iPotalIndex = i; break; }
	}

	if(iPotalIndex <0) return;
*/
//	pt = GetTownPotal(iPotalZone);
//	x = pt.x;
//	y = pt.y;

//	if(iPotalZone <0) return;
//	x = g_TownPotal[iPotalIndex]->iPotalX;
//	y = g_TownPotal[iPotalIndex]->iPotalY;
/*
	if(g_TownPotal[iPotalIndex]->iPotalZone != m_curz)
	{
		SetZoneIndex(g_TownPotal[iPotalIndex]->iPotalZone);		// ┴╕ └╬╡ж╜║╝┬╞├
		m_curz = g_TownPotal[iPotalIndex]->iPotalZone;			// ┴╕ ║п╚п(┴╫╛·└╗╢з ░б▒ю┐ю ╕╢└╗╖╬ └╠╡┐╟╪╛▀╟╧╣╟╖╬ ┴╕└╗ ╣┘▓█┤┘.)
	}
*/
	for(i = 0; i < g_TownPotal.GetSize(); i++)					// ╛╞┤╧╕щ ░б▒ю┐ю ╡╡╜├╖╬ └╠╡┐╟╤┤┘.
	{
		if(g_TownPotal[i]->iZone == m_curz) { iPotalZone = i; break; }
	}

	if(iPotalZone < 0) return;

	CPoint temp = ConvertToClient(m_curx, m_cury);

	if(g_TownPotal[iPotalZone]->iPotalX <= 0) { x = g_TownPotal[iPotalZone]->iPotalX1; y = g_TownPotal[iPotalZone]->iPotalY1; }
	else if(g_TownPotal[iPotalZone]->iPotalX1 <= 0) { x = g_TownPotal[iPotalZone]->iPotalX; y = g_TownPotal[iPotalZone]->iPotalY; }
	else
	{
		int dx1 = abs(g_TownPotal[iPotalZone]->iPotalX - temp.x);
		int dy1 = abs(g_TownPotal[iPotalZone]->iPotalY - temp.y);

		int dx2 = abs(g_TownPotal[iPotalZone]->iPotalX1 - temp.x);
		int dy2 = abs(g_TownPotal[iPotalZone]->iPotalY1 - temp.y);

		if( (dx1 + dy1) < (dx2 + dy2) ) { x = g_TownPotal[iPotalZone]->iPotalX; y = g_TownPotal[iPotalZone]->iPotalY; }
		else							{ x = g_TownPotal[iPotalZone]->iPotalX1; y = g_TownPotal[iPotalZone]->iPotalY1; }
	}

	// alisia
	/*
	if(g_TownPotal[iPotalZone]->iPotalZone != m_curz)
	{
		SetZoneIndex(g_TownPotal[iPotalZone]->iPotalZone);		// ┴╕ └╬╡ж╜║╝┬╞├
		m_curz = g_TownPotal[iPotalZone]->iPotalZone;			// ┴╕ ║п╚п(┴╫╛·└╗╢з ░б▒ю┐ю ╕╢└╗╖╬ └╠╡┐╟╪╛▀╟╧╣╟╖╬ ┴╕└╗ ╣┘▓█┤┘.)
	}

	ptPotal = ConvertToServer(x, y);			// ░░└║ ┴╕└║ ╡√╖╬ ┴┬╟е║п╚н╕ж ...

	i = SEARCH_TOWN_POTAL_COUNT;				// ┴┬╟е╕ж ├г▒т└з╟╤ ╚╜╝Ў
	
	if(IsMovable_S(ptPotal.x, ptPotal.y) == FALSE)
	{
		while(TRUE)								// ┼╕┐ю╞ў┼╗ ╖е┤¤ ┴┬╟е╕ж ╛Є┤┬┤┘.
		{
			rand = myrand(-TOWN_POTAL_SIZE, TOWN_POTAL_SIZE);
			ptPotal.x += rand; ptPotal.y += rand;
			
			if(IsMovable_S(ptPotal.x, ptPotal.y) == TRUE) break;
			i--;
			if(i <= 0) 
			{
				ptPotal = ConvertToServer(x, y);
				break;
			}
		}
	}

	m_curx = ptPotal.x;
	m_cury = ptPotal.y;
	*/
	ZoneMoveReq( g_TownPotal[iPotalZone]->iPotalZone, x, y );
}

/////////////////////////////////////////////////////////////////////////////////////////
//╣е╗ў╝╞╦у
//
int USER::GetFinalDamage(USER *pUser, int nInitDamage, BYTE tMyWeapon,BOOL &bIsCritical,int max)//yskang 0.3
{
	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return 0;

	int iFinalDamage = 0, iFinalTemp;

	int iBasic = (int)((double)pUser->m_sMagicCON/3 + 0.5);
	if(iBasic < 0) iBasic = 0;

	BYTE tWeaponClass = 255;
	BOOL bCanUseSkill = pUser->IsCanUseWeaponSkill(tWeaponClass);

	int		iDefense = 1;
	double	dIron = 0;
	double	dShield = 0;
	double	dGuard = 0;
	double	dVital = 0;
	double	dCAttack = 0;
	double	dABDefense = 0;
	double	dDefenseUP = 0;
	double	dAdamantine = 0;
	double	dBerserker = 0;

	int		iSkillSid = 0;
	int		iIronLevel = 0;
	int		iGuardLevel = 0;
	int		iCounterAttackLevel = 0;
	int		iVitalLevel = 0;
	int		iABDefenseLevel = 0;
	int		iDefenseUPLevel = 0;

	int		iGS = 0;
	int		iVS = 0;
	int		iCA = 0;

	int i = 0;
	int iRandom = 0;
	int tClass = tWeaponClass * SKILL_NUM;
	int	tMyClass = tMyWeapon * SKILL_NUM;

	int iRandomProtect = (int)((double)XdY(1, 1000) / 10 + 0.5);



	iDefense = pUser->GetDefense();						// ╣ц╛ю▒╕

	if(tWeaponClass != 255)
	{
		for(i = tClass; i < tClass + SKILL_NUM; i++)	// IronSkill
		{
			iSkillSid = pUser->m_UserSkill[i].sSid;

			if(iSkillSid == SKILL_IRON)					// 0 index
			{
				iIronLevel = pUser->m_UserSkill[i].tLevel;
				if(iIronLevel < 0) iIronLevel = 0;
				
				// ╛╞└╠┼█┐б └╟╟╤ ╜║┼│ ║п╡┐ ╖╣║з
				if(iIronLevel >= 1) 
				{
					iIronLevel += pUser->m_DynamicUserData[g_DynamicSkillInfo[iSkillSid]]+ pUser->m_DynamicUserData[MAGIC_ALL_SKILL_UP];
				}
				
				if(iIronLevel >= SKILL_LEVEL) iIronLevel = SKILL_LEVEL - 1;
				if(iSkillSid >= g_arSkillTable.GetSize()) continue;
				
				iBasic = (int)((double)iBasic * (1 + (double)g_arSkillTable[iSkillSid]->m_arInc.GetAt(iIronLevel) / 100));
			}

			if(iSkillSid == SKILL_CRITICAL_GUARD)					// Critical Guard 11 index
			{
				iGuardLevel = pUser->m_UserSkill[i].tLevel;		
				if(iGuardLevel < 0) iGuardLevel = 0;
				
				// ╛╞└╠┼█┐б └╟╟╤ ╜║┼│ ║п╡┐ ╖╣║з
				if(iGuardLevel >= 1) iGuardLevel += pUser->m_DynamicUserData[g_DynamicSkillInfo[iSkillSid]]+ pUser->m_DynamicUserData[MAGIC_ALL_SKILL_UP];
				
				if(iGuardLevel >= SKILL_LEVEL) iGuardLevel = SKILL_LEVEL - 1;
				if(iSkillSid >= g_arSkillTable.GetSize()) continue;
				
				iRandom = (int)((double)XdY(1, 1000) / 10 + 0.5);
				if(max==0  ) {//╚ч╣√╩╟▒╪╔▒бгбг╛═╬▐╩╙╔┴▒▄╝╝─▄бг
					if(iRandom < g_arSkillTable[iSkillSid]->m_arSuccess.GetAt(iGuardLevel))
					{
						if ( m_byClass == 3)
						{
							dGuard = (double)(nInitDamage * (double)(g_arSkillTable[iSkillSid]->m_arInc.GetAt(iGuardLevel) - 40 )/100.0 );
						}else  if ( m_byClass == 0)
						{
							dGuard = (double)(nInitDamage * (double)(g_arSkillTable[iSkillSid]->m_arInc.GetAt(iGuardLevel) - 10 )/100.0 );
						}else{
						
							dGuard = (double)(nInitDamage * (double)g_arSkillTable[iSkillSid]->m_arInc.GetAt(iGuardLevel)/100.0);
					}
				}
			}
		}  
	        if(iSkillSid == SKILL_BACK_ATTACK)					// CounterAttack 2 index
			{
				if (pUser->m_dwFANTAnTime  == 0 )	/////│м╝╢╖┤╡п
				{
					if(m_byClass == FIREARMS || m_byClass == STAFF|| m_byClass == JUDGE ) 
					{
						if(tMyWeapon != 255) continue;	
					}
				}

				iCounterAttackLevel = pUser->m_UserSkill[i].tLevel;		
				if(iCounterAttackLevel < 0) iCounterAttackLevel = 0;
				
				// ╛╞└╠┼█┐б └╟╟╤ ╜║┼│ ║п╡┐ ╖╣║з
				if(iCounterAttackLevel >= 1) iCounterAttackLevel += pUser->m_DynamicUserData[g_DynamicSkillInfo[iSkillSid]]+ pUser->m_DynamicUserData[MAGIC_ALL_SKILL_UP];
				
				if(iCounterAttackLevel >= SKILL_LEVEL) iCounterAttackLevel = SKILL_LEVEL - 1;
				if(iSkillSid >= g_arSkillTable.GetSize()) continue;
				
				if(GetDistance(pUser->m_curx, pUser->m_cury, 1) == FALSE && pUser->m_dwFANTAnTime == 0 ) iCA = 0;	

				else
				{
					iRandom = (int)((double)XdY(1, 1000) / 10 + 0.5);
					if(iRandom < g_arSkillTable[iSkillSid]->m_arSuccess.GetAt(iCounterAttackLevel)) iCA = 1;
				}				
				
				if(m_dwFANTAnTime != 0)	//╖┤╗ў╩╪╗д
				dCAttack = (double)(nInitDamage * iCA * (double)((g_arSkillTable[iSkillSid]->m_arInc.GetAt(iCounterAttackLevel) +30) / 100.0) ); 
		     else 
				dCAttack = (double)(nInitDamage * iCA * (double)((g_arSkillTable[iSkillSid]->m_arInc.GetAt(iCounterAttackLevel) +20) / 100.0) ); 


			}

			if(iSkillSid == SKILL_ABSOLUTE_DEFENSE)					// Absolute Defense
			{
				iABDefenseLevel = pUser->m_UserSkill[i].tLevel;		
				if(iABDefenseLevel < 0) iABDefenseLevel = 0;
				
				// ╛╞└╠┼█┐б └╟╟╤ ╜║┼│ ║п╡┐ ╖╣║з
				if(iABDefenseLevel >= 1) iABDefenseLevel += pUser->m_DynamicUserData[MAGIC_ALL_SKILL_UP];
				
				if(iABDefenseLevel >= SKILL_LEVEL) iABDefenseLevel = SKILL_LEVEL - 1;
				if(iSkillSid >= g_arSkillTable.GetSize()) continue;
				
				iRandom = (int)((double)XdY(1, 1000) / 10 + 0.5);
				if(iRandom < g_arSkillTable[iSkillSid]->m_arSuccess.GetAt(iABDefenseLevel))
				{
					dABDefense = (double)(iDefense * (double)g_arSkillTable[iSkillSid]->m_arInc.GetAt(iABDefenseLevel)/100.0);
				}
			}
			if(iSkillSid == SKILL_DEFENSE_UP)					
			{
				iDefenseUPLevel = pUser->m_UserSkill[i].tLevel;		
				if(iDefenseUPLevel < 0) iDefenseUPLevel = 0;
				
				// ╛╞└╠┼█┐б └╟╟╤ ╜║┼│ ║п╡┐ ╖╣║з
				if(iDefenseUPLevel >= 1) iDefenseUPLevel += pUser->m_DynamicUserData[MAGIC_ALL_SKILL_UP];
				
				if(iDefenseUPLevel >= SKILL_LEVEL) iDefenseUPLevel = SKILL_LEVEL - 1;
				if(iSkillSid >= g_arSkillTable.GetSize()) continue;
				
				iRandom = (int)((double)XdY(1, 1000) / 10 + 0.5);
				if(iRandom < g_arSkillTable[iSkillSid]->m_arSuccess.GetAt(iDefenseUPLevel))
				{
					dDefenseUP = (double)(iDefense * (double)g_arSkillTable[iSkillSid]->m_arInc.GetAt(iDefenseUPLevel)/100.0);
				}
			}
		}
	}

	// ╜п╡х ░ш╗ъ
	if(pUser->m_bNecklaceOfShield && pUser->m_dwShieldTime != 0)		
	{
		if(m_dwPiercingShieldTime != 0)	dShield = (double)(nInitDamage * 0.01);
		else							dShield = (double)(nInitDamage * 0.10);
	}
	if(pUser->m_bNecklaceOfShield && pUser->m_dwBigShieldTime != 0)		
	{
		if(m_dwPiercingShieldTime != 0)	dShield = (double)(nInitDamage * 0.01);
		else							dShield = (double)(nInitDamage * 0.10);
	}
	else if(pUser->m_bNecklaceOfShield || pUser->m_dwShieldTime != 0 )	
	{
		if(m_dwPiercingShieldTime != 0)	dShield = 0;
		else dShield = (double)(nInitDamage * 0.10);
	}
	else if( pUser->m_dwBigShieldTime !=0 && !pUser->m_bNecklaceOfShield)
	{
		if(m_dwPiercingShieldTime != 0)	dShield = 0;
		else dShield = (double)(nInitDamage * 0.10);
	}
	if(m_dwPiercingShieldTime != 0)	
	{
        
		iRandom = (int)((double)myrand(1, 1000) / 10 + 0.5);
		if(iRandom < SUCCESS_RATE_PIERCING_SHIELD)	// ╟╟╛ю╜╠ ╜п╡х┤┬ 10% ╚о└▓╖╬ ╜п╡х╕ж ▒№┤┘.
		{
		  if ( pUser->m_dwShieldTime !=0 ) 
		  {
			pUser->m_dwShieldTime = 0;
			pUser->m_dwLastShieldTime = GetTickCount();
         	CBufferEx TempBuf;
			pUser->DeleteAbnormalInfo(ABNORMAL_SHIELD);
			TempBuf.Add(SET_USER_STATE);
			TempBuf.Add((int)(pUser->m_uid + USER_BAND));
			TempBuf.Add(pUser->m_dwAbnormalInfo);
			TempBuf.Add(pUser->m_dwAbnormalInfo_);			
			pUser->SendInsight(TempBuf, TempBuf.GetLength());
		  }
		  if ( pUser->m_dwBigShieldTime !=0 )
		  {
			pUser->m_dwBigShieldTime = 0;
			pUser->m_dwLastBigShieldTime = GetTickCount();
	        CBufferEx TempqqBuf;
			pUser->DeleteAbnormalInfo(ABNORMAL_BIGSHIELD);
			TempqqBuf.Add(SET_USER_STATE);
			TempqqBuf.Add((int)(pUser->m_uid + USER_BAND));
			TempqqBuf.Add(pUser->m_dwAbnormalInfo);
			TempqqBuf.Add(pUser->m_dwAbnormalInfo_);		
			pUser->SendInsight(TempqqBuf, TempqqBuf.GetLength());
		  }

		}
	}
	
	if(pUser->m_bNecklaceOfShield) pUser->SendAccessoriDuration(SID_NECKLACE_OF_SHIELD);

	/*if( pUser->m_dwAdamantineTime != 0 ) //╒т└я▓╗╘┌╝╞╦у 101─з╖и 105─з╖и    ╝╙─з╖и╓▒╜╙╧╘╩╛╩Ї╨╘
	{
		dAdamantine = (double)( (double)iDefense * 0.1 );
	}*/
	/*if( pUser->m_dwBerserkerTime != 0 )
	{
		dBerserker = (double)( (double)iDefense * 0.15 );
	}*/
	//╨▄▒ф╘Ў╝╙ 15%╖└
	//if(pUser->m_iSkin==2){
	//	dBerserker =dBerserker+ (double)( (double)iDefense * 0.15 );
	//}
	

	iDefense = (int)( iDefense + dABDefense + dDefenseUP + dAdamantine + dBerserker );

	if(tMyWeapon != 255)
	{
		for(i = tMyClass; i < tMyClass + SKILL_NUM; i++)	// Vital Critical
		{
			iSkillSid = m_UserSkill[i].sSid;

			if(iSkillSid == SKILL_VITAL_CRITICAL)			// 12 index
			{
				iVitalLevel = m_UserSkill[i].tLevel;		
				if(iVitalLevel < 0) iVitalLevel = 0;
				
				// ╛╞└╠┼█┐б └╟╟╤ ╜║┼│ ║п╡┐ ╖╣║з
				if(iVitalLevel >= 1) iVitalLevel += m_DynamicUserData[g_DynamicSkillInfo[iSkillSid]]+ m_DynamicUserData[MAGIC_ALL_SKILL_UP];
				
				if(iVitalLevel >= SKILL_LEVEL) iVitalLevel = SKILL_LEVEL - 1;		//├╓┤ы 41└╠╣╟╖╬ ╕▐╕Ё╕о┤┬ 40└╕╖╬ ┴ж╟╤
				if(iSkillSid >= g_arSkillTable.GetSize()) continue;
				
				iRandom = (int)((double)XdY(1, 1000) / 10 + 0.5);
				if(iRandom < g_arSkillTable[iSkillSid]->m_arSuccess.GetAt(iVitalLevel))//┤й┤╠│╔╣ж
				{
					dVital = (double)(g_arSkillTable[iSkillSid]->m_arInc.GetAt(iVitalLevel)/100.0);
					if(iRandomProtect <= RANDOM_PROTECT && pUser->m_bEarringOfProtect)	// ╝н╞ў╞о ▒═░╔└╠
					{
						dVital = 0;
						pUser->SendAccessoriDuration(SID_EARRING_OF_PROTECT);
					}
				}
			}
		}
	}

	if(dVital > 0)//┤й┤╠
	{
		bIsCritical = TRUE; //yskang 0.3
		//╓╟┴ж▒ф│╔╘╢│╠╔╦║ж┴ж
		int v4 = 0;
		if(m_byClass == JUDGE||m_byClass==FIREARMS)
		{
			v4=(int)((double)pUser->m_DynamicEBodyData[EBODY_WIS_TO_DAMAGE] *0.01 * pUser->m_sMagicWIS);
		}
		iFinalDamage = (int)(nInitDamage - (iDefense * dVital * (double)pUser->m_DynamicEBodyData[EBODY_VITAL_RESIST]/100 + \
			                 (int)((double)pUser->m_DynamicEBodyData[EBODY_CON_TO_VITAL_RESIST] / 100 * pUser->m_sMagicCON) + \
							 (int)((double)pUser->m_DynamicEBodyData[EBODY_DEX_TO_VITAL_RESIST] / 100 * pUser->m_sMagicDEX) + \
							 iBasic + dShield + dGuard)); 
	}
	else
	{
		iFinalDamage = (int)(nInitDamage - (iDefense + iBasic + dShield + dGuard)); 
	}

	if(iFinalDamage < 0) iFinalDamage = 0;
	if(iFinalDamage <= 15)
	{
		iFinalTemp = iFinalDamage;
		iFinalDamage += (int)((double)nInitDamage * 0.2 + 1.5);	// ├╓╝╥┤ы╣╠┴Ў╕ж ├╓┤ы 15└╕╖╬ ╟╤┤┘.
		if(iFinalDamage > 15) iFinalDamage = 15;
		iFinalDamage = max(iFinalDamage, iFinalTemp);
	}
		
	if(dCAttack > 0)	//	╖┤╗ў  ╖┤╗ў╩╪╗д
	{
		iDefense = (int)((double)m_sMagicCON/3 + 0.5);		// ╣ц╛ю▒╕
		iCA = (int)dCAttack - iDefense;						// ├╓┴╛ ╣▌░▌ ╡е╣╠┴Ў

		iCA = iCA * (1 - (int)((double)pUser->m_DynamicEBodyData[EBODY_BACK_RESIST]/100));
		iCA -= ((int)((double)pUser->m_DynamicEBodyData[EBODY_CON_TO_BACK_RESIST] / 100 * pUser->m_sMagicCON) + \
			   (int)((double)pUser->m_DynamicEBodyData[EBODY_DEX_TO_BACK_RESIST] / 100 * pUser->m_sMagicDEX)  );

		if(iCA > 0)	SetDamage(iCA);							// ╡е╣╠┴Ў ░ш╗ъ└╗ ╟╤┤┘.
	    pUser->SendDamageNum(0,m_uid+USER_BAND,iCA);//╚н╖┤╗ў╝╝─▄┤Є╚╦╧╘╩╛╩¤╫╓
		if(m_lDeadUsed == 1)  //   ╖┤╗ў╦└
			GetLevelDownExp(USER_PK, -1, FALSE,m_strUserID);
	}

	return iFinalDamage;
}

////////////////////////////////////////////////////////////////////////////////////
//	┐╣╛р╡╚ ╛╞└╠╡Ё└╬┴Ў ░╦╗ч╟╤┤┘.
//
BOOL USER::IsReservedID(char *szName)
{
	int nSize = sizeof(g_pszReservedID)/sizeof(char*);
	CString szCheck = szName;
	CString szCheck2;

	szCheck.MakeLower();

	for (int i=0; i< nSize; i++) 
	{
		szCheck2 = g_pszReservedID[i];
		szCheck2.MakeLower();

		if(szCheck.Find(szCheck2) != -1) return TRUE;

	}

	return FALSE;
}

BOOL USER::IsReservedLoveName(char *szName)
{
	int nSize = sizeof(g_pszReservedLoveName)/sizeof(char*);
	CString szCheck3 = szName;
	CString szCheck4;

	szCheck3.MakeLower();

	for (int i=0; i< nSize; i++) 
	{
		szCheck4 = g_pszReservedLoveName[i];
		szCheck4.MakeLower();

		if(szCheck3.Find(szCheck4) != -1) return TRUE;

	}

	return FALSE;
}

CPoint USER::FindNearAvailablePoint_S(int x, int y)
{
	if(x <= -1 || y <= -1) return CPoint(-1,-1);
	if( m_ZoneIndex < 0 || m_ZoneIndex >= g_zone.GetSize() ) return CPoint(-1,-1);
	if(x >= g_zone[m_ZoneIndex]->m_sizeMap.cx || y >= g_zone[m_ZoneIndex]->m_sizeMap.cy) return CPoint(-1,-1);

	if(IsMovable_S( x, y ))
	{
		return CPoint(x,y);
	}

	CPoint t;
	int tempX = x, tempY = y;
	int i;

	int dir[25][2];

//	X					Y
	dir[0][0]  =  0;		dir[0][1] =  0;		// 
	dir[1][0]  = -1;		dir[1][1] =  0;		// 
	dir[2][0]  = -1;		dir[2][1] =  1;		// 
	dir[3][0]  =  0;		dir[3][1] =  1;		// 
	dir[4][0]  =  1;		dir[4][1] =  1;		// 

	dir[5][0]  =  1;		dir[5][1] =  0;		// 
	dir[6][0]  =  1;		dir[6][1] = -1;		// 
	dir[7][0]  =  0;		dir[7][1] = -1;		// 
	dir[8][0]  = -1;		dir[8][1] = -1;		// 
	dir[9][0]  = -2;		dir[9][1] = -1;		// 

	dir[10][0] = -2;		dir[10][1] =  0;	// 
	dir[11][0] = -2;		dir[11][1] =  1;	// 
	dir[12][0] = -2;		dir[12][1] =  2;	// 
	dir[13][0] = -1;		dir[13][1] =  2;	// 
	dir[14][0] =  0;		dir[14][1] =  2;	// 

	dir[15][0] =  1;		dir[15][1] =  2;	// 
	dir[16][0] =  2;		dir[16][1] =  2;	// 
	dir[17][0] =  2;		dir[17][1] =  1;	// 
	dir[18][0] =  2;		dir[18][1] =  0;	// 
	dir[19][0] =  2;		dir[19][1] = -1;	// 

	dir[20][0] =  2;		dir[20][1] = -2;	// 
	dir[21][0] =  1;		dir[21][1] = -2;	// 
	dir[22][0] =  0;		dir[22][1] = -2;	// 
	dir[23][0] = -1;		dir[23][1] = -2;	// 
	dir[24][0] = -2;		dir[24][1] = -2;	// 

	for( i = 0; i < 25; i++)
	{
		if( IsMovable_S( tempX + dir[i][0], tempY + dir[i][1] ) )
		{
			return CPoint( tempX + dir[i][0], tempY + dir[i][1] );
		}
	}

	return CPoint(-1,-1);
}

CPoint USER::FindNearAvailablePoint_S(int zone,int x, int y)
{
	int ZoneIndex = -1;
	for(int j = 0; j < g_zone.GetSize(); j++)
	{
		if( g_zone[j]->m_Zone == zone )
		{
			ZoneIndex = j;
			break;
		}
	}
	if(x <= -1 || y <= -1) return CPoint(-1,-1);
	if( ZoneIndex < 0 || ZoneIndex >= g_zone.GetSize() ) return CPoint(-1,-1);
	if(x >= g_zone[ZoneIndex]->m_sizeMap.cx || y >= g_zone[ZoneIndex]->m_sizeMap.cy) return CPoint(-1,-1);

	if(IsMovable_S(zone, x, y ))
	{
		return CPoint(x,y);
	}

	CPoint t;
	int tempX = x, tempY = y;
	int i;

	int dir[25][2];

//	X					Y
	dir[0][0]  =  0;		dir[0][1] =  0;		// 
	dir[1][0]  = -1;		dir[1][1] =  0;		// 
	dir[2][0]  = -1;		dir[2][1] =  1;		// 
	dir[3][0]  =  0;		dir[3][1] =  1;		// 
	dir[4][0]  =  1;		dir[4][1] =  1;		// 

	dir[5][0]  =  1;		dir[5][1] =  0;		// 
	dir[6][0]  =  1;		dir[6][1] = -1;		// 
	dir[7][0]  =  0;		dir[7][1] = -1;		// 
	dir[8][0]  = -1;		dir[8][1] = -1;		// 
	dir[9][0]  = -2;		dir[9][1] = -1;		// 

	dir[10][0] = -2;		dir[10][1] =  0;	// 
	dir[11][0] = -2;		dir[11][1] =  1;	// 
	dir[12][0] = -2;		dir[12][1] =  2;	// 
	dir[13][0] = -1;		dir[13][1] =  2;	// 
	dir[14][0] =  0;		dir[14][1] =  2;	// 

	dir[15][0] =  1;		dir[15][1] =  2;	// 
	dir[16][0] =  2;		dir[16][1] =  2;	// 
	dir[17][0] =  2;		dir[17][1] =  1;	// 
	dir[18][0] =  2;		dir[18][1] =  0;	// 
	dir[19][0] =  2;		dir[19][1] = -1;	// 

	dir[20][0] =  2;		dir[20][1] = -2;	// 
	dir[21][0] =  1;		dir[21][1] = -2;	// 
	dir[22][0] =  0;		dir[22][1] = -2;	// 
	dir[23][0] = -1;		dir[23][1] = -2;	// 
	dir[24][0] = -2;		dir[24][1] = -2;	// 

	for( i = 0; i < 25; i++)
	{
		if( IsMovable_S(zone, tempX + dir[i][0], tempY + dir[i][1] ) )
		{
			return CPoint( tempX + dir[i][0], tempY + dir[i][1] );
		}
	}

	return CPoint(-1,-1);
}

//////////////////////////////////////////////////////////////////////////////////
//	┼м╢є└╠╛Ё╞о┴┬╟е ▒т┴╪└╕╖╬ ╟Ў└ч┴┬╟е┐═ ┴╓║п 25┴┬╟е ┴▀┐б ┐Є┴ў└╧ ╝Ў └╓┤┬ ┴б└╠ └╓┤┬┴Ў ╞╟┤▄.
//
CPoint USER::FindNearAvailablePoint_C(int x, int y)
{
	if( IsMovable_C( x, y ) )
	{
		return CPoint(x,y);
	}

	CPoint t = ConvertToServer( x, y );

	if( t.x == -1 || t.y == -1 )
	{
		return CPoint(-1,-1);
	}

	int tempX = t.x, tempY = t.y;
	int i;

	int dir[25][2];

//	X					Y
	dir[0][0]  =  0;		dir[0][1] =  0;		// 
	dir[1][0]  = -1;		dir[1][1] =  0;		// 
	dir[2][0]  = -1;		dir[2][1] =  1;		// 
	dir[3][0]  =  0;		dir[3][1] =  1;		// 
	dir[4][0]  =  1;		dir[4][1] =  1;		// 

	dir[5][0]  =  1;		dir[5][1] =  0;		// 
	dir[6][0]  =  1;		dir[6][1] = -1;		// 
	dir[7][0]  =  0;		dir[7][1] = -1;		// 
	dir[8][0]  = -1;		dir[8][1] = -1;		// 
	dir[9][0]  = -2;		dir[9][1] = -1;		// 

	dir[10][0] = -2;		dir[10][1] =  0;	// 
	dir[11][0] = -2;		dir[11][1] =  1;	// 
	dir[12][0] = -2;		dir[12][1] =  2;	// 
	dir[13][0] = -1;		dir[13][1] =  2;	// 
	dir[14][0] =  0;		dir[14][1] =  2;	// 

	dir[15][0] =  1;		dir[15][1] =  2;	// 
	dir[16][0] =  2;		dir[16][1] =  2;	// 
	dir[17][0] =  2;		dir[17][1] =  1;	// 
	dir[18][0] =  2;		dir[18][1] =  0;	// 
	dir[19][0] =  2;		dir[19][1] = -1;	// 

	dir[20][0] =  2;		dir[20][1] = -2;	// 
	dir[21][0] =  1;		dir[21][1] = -2;	// 
	dir[22][0] =  0;		dir[22][1] = -2;	// 
	dir[23][0] = -1;		dir[23][1] = -2;	// 
	dir[24][0] = -2;		dir[24][1] = -2;	// 

	for( i = 0; i < 25; i++)
	{
		if( IsMovable_S( tempX + dir[i][0], tempY + dir[i][1] ) )
		{
			return ConvertToClient( tempX + dir[i][0], tempY + dir[i][1] );			
		}
	}

	return CPoint(-1,-1);
}

///////////////////////////////////////////////////////////////////////////////////////
//	┼м╢є└╠╛Ё╞о ┴┬╟е╕ж ▒т┴╪└╕╖╬ x, y ░б └╠╡┐╟╥ ╝Ў └╓┤┬ ┴б└╬┴Ў ╞╟┤▄
//
BOOL USER::IsMovable_C(int x, int y)
{
	CPoint t = ConvertToServer( x, y );

	if( t.x == -1 || t.y == -1 ) return FALSE;

	return IsMovable_S(t.x, t.y);
}

///////////////////////////////////////////////////////////////////////////////////////
//	╝н╣Ў┴┬╟е╕ж ┼м╢є└╠╛Ё╞о ┴┬╟е╖╬ ╣┘▓█┤┘.
//
CPoint USER::ConvertToClient(int x, int y)
{
	if( m_ZoneIndex < 0 || m_ZoneIndex >= g_zone.GetSize() ) return CPoint(-1,-1);
	if(!g_zone[m_ZoneIndex]) return CPoint(-1, -1);

	int tempx, tempy;
	int temph = g_zone[m_ZoneIndex]->m_vMoveCell.m_vDim.cy / 2 - 1;

	if(x <= -1 || y <= -1) return CPoint(-1,-1); 
	if( y >= g_zone[m_ZoneIndex]->m_sizeMap.cy || x >= g_zone[m_ZoneIndex]->m_sizeMap.cx ) return CPoint(-1,-1);

	tempx = x - temph + y;
	tempy = y - x + temph;

	return CPoint( tempx, tempy );
}

///////////////////////////////////////////////////////////////////////////////////////
//	└п└·┴д║╕╕ж ╣Ў╞█┐б └·└х╟╤┤┘.
//
void USER::FillUserInfo(char *pBuf, int &index, BYTE flag)
{
	int nLen = 0, i;

	if( m_state != STATE_GAMESTARTED && flag == INFO_MODIFY ) return;

	SetByte(pBuf, USER_INFO, index);
	SetByte(pBuf, flag, index);
	SetInt(pBuf, m_uid + USER_BAND, index);

	if(flag == INFO_MODIFY || flag == INFO_TOWNPOTAL)
	{
		SetVarString(pBuf, m_strUserID, _tcslen(m_strUserID), index);

		CPoint t = ConvertToClient( m_curx, m_cury );
		if( t.x == -1 || t.y == -1 ) { t.x = 1; t.y = 1; }
		
		SetShort(pBuf, t.x, index);
		SetShort(pBuf, t.y, index);

		SetDWORD(pBuf, m_iSkin, index);
		SetDWORD(pBuf, m_iHair, index);
		SetByte(pBuf, (BYTE)m_sGender, index);
		SetString(pBuf, m_strFace, 10, index);

		for(i = 0; i < EQUIP_ITEM_NUM; i++) SetShort(pBuf, m_UserItem[i].sSid, index);

		SetShort(pBuf, m_sHP, index);
		SetShort(pBuf, m_sMagicMaxHP, index);

		SetByte(pBuf, m_tDir, index);

		SetDWORD(pBuf, m_dwAbnormalInfo, index);		
		SetDWORD(pBuf, m_dwAbnormalInfo_, index);
		SetDWORD( pBuf, 0, index);
		SetDWORD( pBuf, 0, index);
		//╣·╖■┤╦┤ж╢р16 byte 0
		for(int zero = 0;zero<16;zero++)
			SetByte(pBuf, (BYTE)0x00, index);
		SetShort(pBuf, m_sCityRank, index);

		SetInt( pBuf, m_dwGuild, index );

		nLen = strlen(m_strGuildName);
		if(nLen <= 0) nLen = 1;

		SetByte( pBuf, (BYTE)nLen, index );
		SetString( pBuf, m_strGuildName, nLen, index );		// Add Guild Name
		SetShort( pBuf, m_sGuildVersion, index );
		
		SetByte(pBuf, m_byClass, index);
		SetByte(pBuf, m_bPkStatus, index);
		//-- yskang 0.1 ├▀░б╡╟┤┬ ╞╨┼╢.... ╚г─к[╛╓─к]
	
		nLen = strlen(m_strLoveName);
		if(nLen < 1) nLen =1;
		SetByte(pBuf, (BYTE)nLen, index);//▒ц└╠┴Ў┴д
		SetString(pBuf,m_strLoveName,nLen,index);//╡е└╠┼═ │╓▒т

		for( i = TOTAL_INVEN_MAX; i < TOTAL_ITEM_NUM-2; i++) SetShort(pBuf, m_UserItem[i].sSid, index);	// EBody

		if(m_UserItem[TOTAL_ITEM_NUM-2].sSid!=-1&&m_UserItem[TOTAL_ITEM_NUM-2].sDuration!=0){
			SetByte(pBuf,(BYTE)(m_UserItem[TOTAL_ITEM_NUM-2].tMagic[0]),index);
			SetByte( pBuf, 0x00, index );
		}else{
			SetByte(pBuf,(BYTE)(m_UserItem[TOTAL_ITEM_NUM-2].tMagic[0]),index);
			SetByte( pBuf, 0xff, index );
		}
		SetByte(pBuf, strlen(m_PersonalShopName), index);
		SetString(pBuf, m_PersonalShopName, strlen(m_PersonalShopName), index);
		//╣·╖■┤╦┤ж╢р5byte 0x0a 0x00 0x00 0x00 0x00
		SetByte(pBuf,(BYTE)0x01,index);
		SetByte(pBuf,(BYTE)0x00,index);
		SetByte(pBuf,(BYTE)0x00,index);
		SetByte(pBuf,(BYTE)0x00,index);
		SetByte(pBuf,(BYTE)m_tBabyCall,index);
		if(m_tBabyCall)
		{
			int tmp = strlen(g_szBabyName[m_sBabyID%2]);
			SetByte(pBuf, tmp, index);
			SetString(pBuf, g_szBabyName[m_sBabyID%2],tmp, index);
			SetShort(pBuf,m_sBabyID,index);
		}
	}
	SendHuFaInfo(this,TO_ME);
}
/*
void USER::SendRangeInfoToMe(int min_x, int min_y, int max_x, int max_y, BYTE flag)
{
	int i, j, tuid;
	int throwindex;

	CPoint t;

	USER *pUser = NULL;
	CNpc *pNpc = NULL;
	ItemList* pThrowItem = NULL;
	MAP* pMap = g_zone[m_ZoneIndex];
	if(!pMap) return; 

	for( i = min_y; i < max_y; i++)
	{
		if( i >= pMap->m_sizeMap.cy || i < 0 ) continue;

		for( j = min_x; j < max_x; j++)
		{
			if( j >= pMap->m_sizeMap.cx || j < 0 ) continue;

			tuid = GetUid( j, i );

			if( tuid != 0 )
			{
				if( tuid != m_uid + USER_BAND )
				{
					if( tuid >= USER_BAND && tuid < NPC_BAND )
					{
						pUser = GetUser( tuid - USER_BAND );

						if(pUser->m_state != STATE_GAMESTARTED) continue;

						if( j != pUser->m_curx || i != pUser->m_cury )
						{
							SetUid(j, i, 0);
						}
						else
						{
							SendUserInfo( pUser, flag );
						}
					}
					else if( tuid >= NPC_BAND && tuid < INVALID_BAND)
					{
						pNpc = GetNpc( tuid - NPC_BAND );
						
						if( pNpc )
						{
							if( j != pNpc->m_sCurX || i != pNpc->m_sCurY )
							{
								SetUid( j, i, 0 );
							}
							else
							{
								SendNpcInfo( pNpc, flag );
							}
						}
					}
				}
			}

			throwindex = pMap->m_pMap[j][i].iIndex;

			if( throwindex != -1 && throwindex < MAX_THROW_ITEM )
			{
				pThrowItem = m_pCom->m_ThrowItemArray[throwindex]->m_pItem;

				if( pThrowItem )
				{
					t = ConvertToClient( j, i );

					if( t.x != -1 && t.y != -1 )
					{
						AddItemFieldInfoToMe( pThrowItem, flag, t.x, t.y );
					}
				}
			}
		}
	}
}
*/
void USER::SendRangeInfoToMe(int min_x, int min_y, int max_x, int max_y, BYTE flag)
{
	if( m_ZoneIndex < 0 || m_ZoneIndex >= g_zone.GetSize() ) return;

	int i, j, tuid;
	int throwindex;

	CPoint t;

	USER *pUser = NULL;
	CNpc *pNpc = NULL;
	ItemList* pThrowItem = NULL;
	MAP* pMap = g_zone[m_ZoneIndex];
	if(!pMap) return;

	int index = 0;
	int index_comp = 0;
	int count = 0;

	for( i = min_y; i < max_y; i++)
	{
		if( i >= pMap->m_sizeMap.cy || i < 0 )
		{
			continue;
		}

		for( j = min_x; j < max_x; j++)
		{
			if( j >= pMap->m_sizeMap.cx || j < 0 )
			{
				continue;
			}

			tuid = pMap->m_pMap[j][i].m_lUser;
//			tuid = GetUid( j, i );

			if( tuid != 0 )
			{
				if( tuid != m_uid + USER_BAND )
				{
					if( tuid >= USER_BAND && tuid < NPC_BAND )
					{
						pUser = GetUser( tuid - USER_BAND );
						if ( pUser == NULL ) continue;

						if(pUser->m_state != STATE_GAMESTARTED)
						{
							continue;
						}

						if( j != pUser->m_curx || i != pUser->m_cury )
						{
							SetUid(j, i, 0);
						}
						else
						{
//							SendUserInfo( pUser, flag );
							AddRangeInfoToMe( pUser, flag );
						}
					}
					else if( tuid >= NPC_BAND && tuid < INVALID_BAND)
					{
						pNpc = GetNpc( tuid - NPC_BAND );
						
						if( pNpc )
						{
							if( j != pNpc->m_sCurX || i != pNpc->m_sCurY )
							{
								if(pNpc->m_sDimension > 0) continue;

								SetUid( j, i, 0 );
							}
							else
							{
//								SendNpcInfo( pNpc, flag );
								AddRangeInfoToMe( pNpc, flag );
							}
						}
					}
				}
			}

			throwindex = pMap->m_pMap[j][i].iIndex;

			if( throwindex >= 0 && throwindex < MAX_THROW_ITEM )
			{
				// IKING 2001.1.
				if ( m_pCom->m_ThrowItemArray[throwindex] == NULL )
				{
					return;
				}
				//
				// IKING 2001.1.
				EnterCriticalSection( &m_pCom->m_critThrowItem );

				pThrowItem = m_pCom->m_ThrowItemArray[throwindex]->m_pItem;

				if( pThrowItem )
				{
					t = ConvertToClient( j, i );

					if( t.x != -1 && t.y != -1 )
					{
						if (flag > 4 || flag < 0)  //bug  ╫°▒ъ╥¤╞Ё╡─▒и┤э
							return;
						if(t.x >= 10000 || t.y >= 10000)
							return;		//bug  ╫°▒ъ╥¤╞Ё╡─▒и┤э

						AddItemFieldInfoToMe( pThrowItem, flag, t.x, t.y );
					}
				}

				LeaveCriticalSection( &m_pCom->m_critThrowItem );
			}
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////
//	└╧┴д ┐╡┐к└╟ └п└·┐б░╘ ╡е└╠┼═╕ж ║╕│╜┤┘.
//
void USER::SendToRange(char *pBuf, int index, int min_x, int min_y, int max_x, int max_y)
{
	if( index <= 0 || index >= SEND_BUF_SIZE ) return;

	SEND_DATA* pNewData = NULL;
	pNewData = new SEND_DATA;

	if( !pNewData ) return;

	pNewData->flag = SEND_RANGE;
	pNewData->len = index;

	::CopyMemory( pNewData->pBuf, pBuf, index );

	pNewData->uid = 0;
	pNewData->z = m_curz;
	pNewData->rect.left		= min_x;
	pNewData->rect.right	= max_x;
	pNewData->rect.top		= min_y;
	pNewData->rect.bottom	= max_y;
	pNewData->zone_index = m_ZoneIndex;

	// IKING 2001.1.
	//EnterCriticalSection( &(m_pCom->m_critSendData) );
	//m_pCom->m_arSendData.Add( pNewData );
	//LeaveCriticalSection( &(m_pCom->m_critSendData) );
	//PostQueuedCompletionStatus( m_pCom->m_hSendIOCP, 0, 0, NULL );
	m_pCom->Send(pNewData);
	delete pNewData;
	//
}

////////////////////////////////////////////////////////////////////////////////////
//	Client ┴┬╟е╕ж ╝н╣Ў┴┬╟е╖╬ ║п╚п╟╤┤┘
//
CPoint USER::ConvertToServer(int x, int y)
{
	if( m_ZoneIndex < 0 || m_ZoneIndex >= g_zone.GetSize() ) return CPoint(-1,-1);

	int tempx, tempy;
	int temph = g_zone[m_ZoneIndex]->m_vMoveCell.m_vDim.cy / 2 - 1;

	if(x <= -1 || y <= -1) return CPoint(-1,-1); 
	
	if( y >= g_zone[m_ZoneIndex]->m_vMoveCell.m_vDim.cy || x >= g_zone[m_ZoneIndex]->m_vMoveCell.m_vDim.cx ) return CPoint(-1,-1);

	if( (x+y)%2 == 0 )
	{
		tempx = temph - ( y / 2 ) + ( x / 2 );

		if( x % 2 ) tempy = ( y / 2 ) + ( ( x / 2 ) + 1 );
		else        tempy = ( y / 2 ) + ( x / 2 );

		return CPoint( tempx, tempy );
	}
	else return CPoint(-1,-1);
}

CPoint USER::ConvertToServerByZone(int z, int x, int y)
{
	int i;
	int cx = -1, cy = -1;

	for( i = 0; i < g_zonesize.GetSize(); i++ )
	{
		if( g_zonesize[i] )
		{
			if( g_zonesize[i]->m_Zone == z )
			{
				cx = g_zonesize[i]->m_vMoveCell.m_vDim.cx;
				cy = g_zonesize[i]->m_vMoveCell.m_vDim.cy;

				break;
			}
		}
	}

	if( cx < 0 || cy < 0 ) return CPoint( -1, -1 );

	int tempx, tempy;
	int temph = cy / 2 - 1;

	if(x <= -1 || y <= -1) return CPoint(-1,-1); 
	if( y >= cy || x >= cx ) return CPoint(-1,-1);

	if( (x+y)%2 == 0 )
	{
		tempx = temph - ( y / 2 ) + ( x / 2 );

		if( x % 2 ) tempy = ( y / 2 ) + ( ( x / 2 ) + 1 );
		else        tempy = ( y / 2 ) + ( x / 2 );

		return CPoint( tempx, tempy );
	}
	else return CPoint(-1,-1);
}

////////////////////////////////////////////////////////////////////////////////////
//	└п└· ┐╡┐к╛╚┐б ╝╙╟╤ ╕╩└╟ ├╤ ╛╞└╠┼█└╗ ╣Ў╞█┐б └·└х╟╤┤┘.  
//
void USER::AddItemFieldInfoToMe(ItemList *pItem, BYTE type, int x, int y)
{
/*
	if( !pItem && type == ITEM_INFO_MODIFY)
	{
		return;
	}

	if( m_ItemFieldInfoIndex >= 8000 )
	{
		SendItemFieldInfoToMe();
	}

	SetByte( m_ItemFieldInfoBuf, type, m_ItemFieldInfoIndex );

	SetShort( m_ItemFieldInfoBuf, x, m_ItemFieldInfoIndex );
	SetShort( m_ItemFieldInfoBuf, y, m_ItemFieldInfoIndex );

//	if(type == ITEM_INFO_MODIFY)
//	{
		if(pItem->tType == TYPE_ITEM)
		{
			SetShort( m_ItemFieldInfoBuf, pItem->sSid, m_ItemFieldInfoIndex );
			SetDWORD( m_ItemFieldInfoBuf, pItem->sCount, m_ItemFieldInfoIndex );
			SetByte( m_ItemFieldInfoBuf, pItem->tIQ, m_ItemFieldInfoIndex ); 
		}
		else
		{
			SetShort( m_ItemFieldInfoBuf, TYPE_MONEY_SID, m_ItemFieldInfoIndex );
			SetDWORD( m_ItemFieldInfoBuf, pItem->dwMoney, m_ItemFieldInfoIndex );
			SetByte( m_ItemFieldInfoBuf, 0, m_ItemFieldInfoIndex ); 
		}
//	}

	m_ItemFieldInfoCount++;
*/

	int index = 0;
	TCHAR pData[1024];

	SetByte( pData, FIELD_ITEM_INFO, index );
	SetShort( pData, (short)1, index );
	SetByte( pData, type, index );

	SetShort( pData, x, index );
	SetShort( pData, y, index );

	if(pItem->tType == TYPE_ITEM)
	{
		SetShort( pData, pItem->sSid, index );
		SetDWORD( pData, pItem->sCount, index );
		SetByte( pData, pItem->tIQ, index ); 
	}
	else
	{
		SetShort( pData, TYPE_MONEY_SID, index );
		SetDWORD( pData, pItem->dwMoney, index );
		SetByte( pData, 0, index ); 
	}

	if( index )
	{
		m_CompCount++;

		SetShort( m_CompBuf, index, m_iCompIndex );				// ╕╕╡щ╛ю┴° └п└· ┴д║╕└╟ ▒ц└╠
		::CopyMemory( m_CompBuf+m_iCompIndex, pData, index );	// ╕╕╡щ╛ю┴° ┴д║╕╕ж ╛╨├р╟╥ ╣Ў╞█┐б ║╣╗ч
		m_iCompIndex += index;

		if( m_iCompIndex >= 8000 )
		{
			SendCompressedRangeInfoToMe();
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////
//	╣Ў╞█┐б └╓┤┬ ╛╞└╠┼█ ┴д║╕╕ж ║╕│╜┤┘.  
//
void USER::SendItemFieldInfoToMe()
{
	int index = 0;

	CBufferEx TempBuf;

	if( m_ItemFieldInfoCount <= 0 )
	{
		return;
	}

	if( m_ItemFieldInfoIndex <= 0 )
	{
		return;
	}

	TempBuf.Add(FIELD_ITEM_INFO);
	TempBuf.Add((short)m_ItemFieldInfoCount);
	TempBuf.AddData(m_ItemFieldInfoBuf, m_ItemFieldInfoIndex);

	Send(TempBuf, TempBuf.GetLength());

	m_ItemFieldInfoCount = 0;
	memset( m_ItemFieldInfoBuf, NULL, 8192 );
	m_ItemFieldInfoIndex = 0;
}

////////////////////////////////////////////////////////////////////////////////////
//	├╓┤ы ┤ы╣╠┴Ў╕ж ▒╕╟╤┤┘.
//  ╝╞╦у╫ю┤є╣е╗ў╡╜╩Ї╨╘└╕
int USER::GetMaxDamage(BYTE tWeaponClass)
{
	int nFinalDamage = 0;	// ├╓┴╛╡е╣╠┴Ў
	int xyz = 0;			// ╣л▒т╡е╣╠┴Ў	

	int tClass = tWeaponClass * SKILL_NUM;

	double iBasic = 0;			// ▒т║╗╡е╣╠┴Ў

	int iSkillSid = 0;

	//if(tWeaponClass == FIREARMS){
	//	 iBasic = (int)((double)m_sMagicDEX/2 + 0.5);	
	//}else{
	//	iBasic = (int)((double)m_sMagicSTR/2 + 0.5);		
	//}
	//╟╣(├Ї╜▌+10)/2+╗·╨╡├Ї╜▌╫к╔╦║ж
	//(┴ж┴┐+10)/2+╗·╨╡┴ж┴┐╫к╔╦║ж
	switch(tWeaponClass)
	{
		//╟╣
	case FIREARMS:
		iBasic = (int)((double)(m_sMagicDEX + 10  ) / 2 + 0.5 + (int)((double)m_DynamicEBodyData[EBODY_DEX_TO_DAMAGE] / 100 * m_sMagicDEX));
		break;
	case JUDGE://╓╟┴ж╫к╔╦║ж
		iBasic = (int)((double)(m_sMagicWIS)/2 + 0.5+(int)((double)m_DynamicEBodyData[EBODY_WIS_TO_DAMAGE] / 100 * m_sMagicWIS) );
		//iBasic+=(int)((double)(m_sMagicWIS)/2 + 0.5);
		break;
	default:
		iBasic = (int)((double)(m_sMagicSTR)/2 + 0.5+(int)((double)m_DynamicEBodyData[EBODY_STR_TO_DAMAGE] / 100 * m_sMagicSTR) );	
		break;
	}
      /////╗·╨╡╩Ї╨╘╝╞╦у
	//iBasic += (int)((double)m_DynamicEBodyData[EBODY_STR_TO_DAMAGE] * m_sMagicSTR * 0.03);
	//iBasic += (int)((double)m_DynamicEBodyData[EBODY_DEX_TO_DAMAGE] * m_sMagicDEX * 0.01);
    

	//╓╟┴ж▒ф│╔╘╢│╠╣е╗ў
	//if(m_byClass == JUDGE||m_byClass == FIREARMS)
	//{
		//iBasic+= (int)((double)m_DynamicEBodyData[EBODY_WIS_TO_DAMAGE] / 100 * m_sMagicWIS);
	//	iBasic=iBasic+(int)((double)(m_DynamicEBodyData[EBODY_WIS_TO_DAMAGE]* m_sMagicWIS) *(0.01) +0.5);
	//}
	
	if (m_byClass == 0 || m_byClass == 2 || m_byClass == 3 || m_byClass == 4)  //╚н/╜г/╟╣/╓┘▓├135╝╢─з╖и╘Ў╝╙300╬я╣е╝╞╦у╡╜╩Ї╨╘└╕
	{
		//if(m_dwFANTAnTime != 0) iBasic += 300;
		if(m_dwFENGLiTime != 0) iBasic += 150;
		if(m_dwDUOCHONgTime != 0) iBasic += 150;
		
	}
//	if ( m_byClass != 1) iBasic += m_sLevel* 2;   ///└╟▒ф╝╙╣е╗ў ╧╘╩╛│Ў└┤

	 

    if(iBasic < 0) iBasic = 0;

	if(tWeaponClass == 255) return (int)iBasic;

	xyz = GetWeaponDamage(m_UserItem[RIGHT_HAND].sSid, TRUE);

	nFinalDamage = (int)(iBasic + xyz);
	if (m_byClass == 1)
	{
		if(m_UserItem[RIGHT_HAND].sSid >= 0 && m_UserItem[RIGHT_HAND].sSid < g_arItemTable.GetSize())
		{
			int up_count = m_UserItem[4].tMagic[5];
			if(m_dwHtExpTime > 0) 
			{
				if(m_byClass == 1) up_count += 1;	
			}
			if(up_count > 0 && up_count <= MAX_ITEM_UPGRADE_COUNT + 1)
			{
				if(up_count<=9)
				{
					nFinalDamage+=(up_count*4);
				}else
				{
					nFinalDamage += ((up_count - 9) * 10) + 4*9;
				}
			}
		}
	}

	if(m_sLevel >= ADD_USER_LEVEL )//20160302
	{
		if (m_byClass != 1)
		{
			nFinalDamage += g_arUserLevel[m_sLevel - ADD_USER_LEVEL]->m_sDamage;
		}
	}



	if (m_byClass == 0 || m_byClass == 2 || m_byClass == 3)
	{
	  if( m_dwBerserkerTime != 0 ) //╒т└я╧╘╩╛│Ў└┤┐ё▒й ╬ф╞ў╟┐╗п╡╜╩Ї╨╘└╕  ╝╙─з╖и╓▒╜╙╧╘╩╛╩Ї╨╘
	 {
		 nFinalDamage += (int)((double)nFinalDamage * 0.15);
	   }else if (m_dwMightyWeaponTime !=0)
	   {
          nFinalDamage += (int)((double)nFinalDamage * 0.1);
	   }
	}
	//====================================================================================================╔ё╩е╫г╕г

	if (m_dwZFTime !=0)
	{
		if  ( m_dwZF == 11)
		{
			if( m_byClass != 1)
			{
				nFinalDamage += (int)((double)nFinalDamage * 0.05);                   //╬я└э╔╦║ж╠с╔¤5%    ╧╘╩╛╣й╕°╝╞╦у
			}
		}
	}
	
	return nFinalDamage;
}

////////////////////////////////////////////////////////////////////////////////////
//	╕ў ░°░▌┐б ┤ы╟╤ └п└·└╟ ╣▌░▌ ┤ы╣╠┴Ў╕ж ░ш╗ъ╟╤┤┘.
//
void USER::SetCounterAttack(int uid, int damage)
{
	for(int i = 0; i < COUNTERATTACK_MAX_NUM; i++)
	{
		if(InterlockedCompareExchange((LONG*)&m_CounterAttackList[i].lSid, (long)1, (long)0) == (long)0)
		{
			m_CounterAttackList[i].iNpcUid = uid;
			m_CounterAttackList[i].iDamage = damage;
			m_CounterAttackList[i].dwLastAttackTime = GetTickCount();
			break;
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////
//	░╚▒т ╡┐└█╜├└╟ SPEED HACK ╗ч┐ы└п╣л╕ж ├╝┼й╟╤┤┘.
//  ╖■╬ё╞ў▒ф╦┘╧р╣╪
BOOL USER::CheckMoveSpeedHack(DWORD checkTick)
{
////////////////////////////////╘н└┤▒ф╦┘╝ь▓т┤·┬ы////////////////////////////////////////////
/*	DWORD curTick = GetTickCount();
    DWORD tmpS = 0;
	if( m_iTickCount == 0 )
	{
		m_dLastCheckTick = checkTick;
		m_dCheckTick = curTick;
		m_dTotCheckTick = 0;
		
		m_iTickCount += 1;
	}
	else if( m_iTickCount == 5 )
	{
/////////////////////////////Release▒р╥ы╨▐╕─┤ж┐к╩╝//////////////////////////////////
		DWORD client = abs((int)checkTick - (int)m_dLastCheckTick );
		DWORD server = abs((int)curTick - (int)m_dCheckTick );
/////////////////////////////Release▒р╥ы╨▐╕─┤ж╜с╩°//////////////////////////////////

/////////////////////////////Debug▒р╥ы╨▐╕─┤ж┐к╩╝//////////////////////////////////
//		DWORD client = abs( checkTick - m_dLastCheckTick );
//		DWORD server = abs( curTick - m_dCheckTick );
/////////////////////////////Debug▒р╥ы╨▐╕─┤ж╜с╩°//////////////////////////////////
		double gap = (double)client / (double)server;

		m_dTotCheckTick -= m_dTotCheckTick / 20;
		if( ( gap < 0.75 || gap > 1.25 ) && ( server < m_dTotCheckTick ) )
		{
			SYSTEMTIME time;
			GetLocalTime(&time);

			CString str;
			str.Format( IDS_USER_SYSTEM_MSG01,
				time.wMonth, time.wDay, time.wHour, time.wMinute, m_strUserID, server, client, m_dTotCheckTick );
			g_fpSpeedHack.Write( str, str.GetLength() );
			tmpS = server * 2;
			if ( m_dTotCheckTick >= tmpS) 
			{
            USER* pUser = GetUser(m_strUserID);
            if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return TRUE;
			pUser->SoftClose();//╔╧╧▀╙╨╥╞╢п╦┘╢╚╛═╥к╫в╩═╡Ї╒т╛ф,╫ў╙├:╜т╛Ў╥╞╢п╦┘╢╚╣¤┐ь╡Ї╧▀╡─├л▓б.
			m_iTickCount = 0;
			return TRUE;
			}
			else
			  m_iTickCount += 1;
		}
		m_iTickCount = 0;
	}
	else
	{
		m_dTotCheckTick += CLIENT_WALK_TICK;
		m_iTickCount += 1;
	}
	
	return FALSE;*/
////////////////////////////////╘н└┤▒ф╦┘╝ь▓т┤·┬ы////////////////////////////////////////////
//
////////////////////////////////╧╓╘┌╖т▒ф╦┘╝ь▓т┤·┬ы////////////////////////////////////////////
	if((m_UserItem[1].sSid == 1489) || (m_UserItem[1].sSid == 1488) || (m_UserItem[1].sSid == 1479) || (m_UserItem[1].sSid == 1356) || (m_UserItem[1].sSid == 1787) || (m_UserItem[1].sSid == 1788)) return FALSE;//┤·▓╜╣д╛▀▓╗╝ь▓т╦┘╢╚
    if (m_bSpeedHackEnble && (GetTickCount() - m_dLastCheckTick) < 200 )
	{
		//SendSystemMsg("╟ы╣╪▒╒[▒ф╦┘╞ў],╖ё╘Є╡╝╓┬─·╬▐╖и╥╞╢п!", SYSTEM_SPECIAL, TO_ME);
		SendSystemMsg("─·╩╣╙├[▒ф╦┘╞ў]╗Є[═°┬ч║▄┐и],╡╝╓┬╬▐╖и╥╞╢п!", SYSTEM_NPC, TO_ME);
		return TRUE;
	}
	if( m_iTickCount == 0 )
	{
		m_dCheckTick = GetTickCount();
	}

	m_iTickCount += 1;

	if( m_iTickCount == 3 )
	{
		unsigned int server = GetTickCount() - m_dCheckTick;
		
		TRACE("move : %d\r\n",server);
		m_iTickCount = 0;

		if (server < checkTick)
		{
			int lastTime = GetTickCount() - m_dwServerTick;
			m_dwServerTick = GetTickCount();

			if (lastTime <= 1800 )
			{
				 m_dLastCheckTick = GetTickCount();
				m_bSpeedHackEnble = TRUE;
				return TRUE;
			}
		}
	} ///╖т╝╙╦┘
	return FALSE;
////////////////////////////////╧╓╘┌╖т▒ф╦┘╝ь▓т┤·┬ы////////////////////////////////////////////
}

///////////////////////////////////////////////////////////////////////////////////////
//	╢█╢з SPEED HACK ╗ч┐ы└п╣л╕ж ├╝┼й╟╤┤┘.
//╝ь▓щ╥╞╢п╦┘╢╚
BOOL USER::CheckRunSpeedHack(DWORD checkTick, BOOL bTwo)
{
////////////////////////////////╘н└┤╥╞╢п╦┘╢╚╝ь▓т┤·┬ы////////////////////////////////////////////
/*	DWORD curTick = GetTickCount();
    DWORD tmpS = 0;
	if( m_iTickCount == 0 )
	{
		m_dLastCheckTick = checkTick;
		m_dCheckTick = curTick;
		m_dTotCheckTick = 0;
		
		m_iTickCount += 1;
	}
	else if( m_iTickCount == 5 )
	{
/////////////////////////////Release▒р╥ы╨▐╕─┤ж┐к╩╝//////////////////////////////////
		DWORD client = abs((int)checkTick - (int)m_dLastCheckTick );
		DWORD server = abs((int) curTick - (int)m_dCheckTick );
/////////////////////////////Release▒р╥ы╨▐╕─┤ж╜с╩°//////////////////////////////////

/////////////////////////////Debug▒р╥ы╨▐╕─┤ж┐к╩╝//////////////////////////////////
//		DWORD client = abs( checkTick - m_dLastCheckTick );
//		DWORD server = abs( curTick - m_dCheckTick );
/////////////////////////////Debug▒р╥ы╨▐╕─┤ж╜с╩°//////////////////////////////////
		double gap = (double)client / (double)server;

		m_dTotCheckTick -= m_dTotCheckTick / 20;
		if( ( gap < 0.75 || gap > 1.25 ) && ( server < m_dTotCheckTick ) )
		{
			SYSTEMTIME time;
			GetLocalTime(&time);

			CString str;
			str.Format( IDS_USER_SYSTEM_MSG01,
				time.wMonth, time.wDay, time.wHour, time.wMinute, m_strUserID, server, client, m_dTotCheckTick );
			g_fpSpeedHack.Write( str, str.GetLength() );
			tmpS=server*2;
            if (m_dTotCheckTick >= tmpS )  
			{
            USER* pUser = GetUser(m_strUserID);
            if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return TRUE;
			pUser->SoftClose();
			m_iTickCount = 0;
			return TRUE;
			}
			else
            	m_iTickCount += 1;
		}
		m_iTickCount = 0;
	}
	else
	{
		m_dTotCheckTick += CLIENT_RUN_TICK;
		if(bTwo) m_dTotCheckTick += CLIENT_RUN_TICK;
		m_iTickCount += 1;
	}

	return FALSE;*/
////////////////////////////////╘н└┤╥╞╢п╦┘╢╚╝ь▓т┤·┬ы////////////////////////////////////////////

////////////////////////////////╧╓╘┌╖т▒ф╦┘╝╙╥╞╢п╦┘╢╚╝ь▓т┤·┬ы////////////////////////////////////////////
	return CheckMoveSpeedHack(680);
////////////////////////////////╧╓╘┌╖т▒ф╦┘╝╙╥╞╢п╦┘╢╚╝ь▓т┤·┬ы////////////////////////////////////////////

}

///////////////////////////////////////////////////////////////////////////////////////
//	╗є┤ы╣ц┐б░╘ ┼╕░▌└╗┴┘╢з ┴д┤ч╣ц└з┐й║╬╕ж ╞╟┤▄.
//
void USER::IsLegalDefence(USER *pUser)
{
	CBufferEx TempBuf;

	int rank = CAIN_RANK - CITY_RANK_INTERVAL;			// -1 ║╬┼═┤┬ ┴д┤ч╣ц└з╝║╕│
	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
	if(pUser->m_sCityRank <= rank || pUser->m_bPkStatus) return;
	if(pUser->m_curz == 67 || pUser->m_curz == 66 || pUser->m_curz == 45 || pUser->m_curz == 40 || pUser->m_curz == 43 || pUser->m_curz == 44 || pUser->m_curz == 58) return;		//PK╛║╚№//PKC▓╗║ь├√

	if(CheckInvalidZoneInGuildWar(pUser)) return;
	if(CheckInvalidZoneInFreeFight(pUser)) return;

	m_bPkStatus = TRUE;				// ┴Ў▒▌ ─л┐└╗є┼┬┤┘.
	m_dwPkStatusTime = GetTickCount();
	
	TempBuf.Add(SET_USER_PK_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add((BYTE)0x02);
	TempBuf.Add((BYTE)m_bPkStatus);

	SendInsight(TempBuf, TempBuf.GetLength());
//	SendExactScreen(TempBuf, TempBuf.GetLength());
}

//yskang 0.7 ▒ц╡х└№╜├ ╗є┤ы ▒ц╡х┐° ┴╫└╠╕щ ─л┐└┤я
BOOL USER::IsLegalDefence_isdead(USER *pUser)
{
	CBufferEx TempBuf;

	int rank = CAIN_RANK - CITY_RANK_INTERVAL;			// -1 ║╬┼═┤┬ ┴д┤ч╣ц└з╝║╕│
	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return FALSE;
	if(pUser->m_sCityRank <= rank || pUser->m_bPkStatus) return FALSE;
	if(pUser->m_curz == 67 || pUser->m_curz == 66 || pUser->m_curz == 45 || pUser->m_curz == 40 || pUser->m_curz == 43 || pUser->m_curz == 44 || pUser->m_curz == 58) return FALSE;		//PK╛║╚№//PKC▓╗║ь├√

	if(CheckInvalidZoneInGuildWar(pUser)) return TRUE;
	if(CheckInvalidZoneInFreeFight(pUser)) return TRUE;

	int type = 0;
	type = CheckInvalidMapType();
	if(m_tFortressWar == GUILD_WARRING || m_tGuildWar == GUILD_WARRING) //╓╗╙╨╔є╟ы╛№═┼▓┼▓╗║ь├√,▒Ё╡─╕·╞╜╩▒╥╗╤∙.
	if(type == 8 || type == 10 || type == 15 || type == 9 || type == 11 || type == 16) return FALSE;  m_bPkStatus = FALSE; 	
	m_bPkStatus = TRUE;				// ╛Ў╢иPK║ь├√
	m_dwPkStatusTime = GetTickCount();
	
	TempBuf.Add(SET_USER_PK_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add((BYTE)0x02);
	TempBuf.Add((BYTE)m_bPkStatus);

	SendInsight(TempBuf, TempBuf.GetLength());
	return FALSE;
}
///////////////////////////////////////////////////////////////////////////////////////
//	┴Ў▒▌ │к│к ╗є┤ы └п└·░б ▒ц╡х└№ ┴▀└╠╕щ ╝║╟т┐б ┐╡╟т└╗ ╣▐┴Ў ╛╩╡╡╖╧╟╤┤┘ 
//
BOOL USER::CheckInvalidZoneInGuildWar(USER *pUser)
{	
	int me, you, type;

	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return FALSE;

	type = CheckInvalidMapType();

	int mapindex = GetGuildMapIndex(type);
	if(mapindex <= -1 || mapindex >= g_arMapTable.GetSize()) return FALSE;

	if(!CheckInvalidZoneState(type)) // ░°╝║└№ ╢╟┤┬ ╟╩╡х ╗є┴б└№└╧╢з┤┬ ▒╕┐к└╕╖╬ ╣л┴╢░╟...
	{
		if(g_arMapTable[mapindex] == NULL) return FALSE;
		me = g_arMapTable[mapindex]->m_sStoreID;

		type = pUser->CheckInvalidMapType();
		mapindex = GetGuildMapIndex(type);
		if(mapindex <= -1 || mapindex >= g_arMapTable.GetSize()) return FALSE;

		you = g_arMapTable[mapindex]->m_sStoreID;

		if(me == you) return TRUE;				// ░░└║ ╗є┴б └╬╡ж╜║╕щ ╕Ё╡╬ ║╕╢є╡╣└╠░б ╛╞┤╘...
	}

	if(m_tGuildWar == GUILD_WARRING) //|| m_tFortressWar == GUILD_WARRING)					// │╗░б ▒ц╡х└№ ┴▀└╠░э
	{
		if(m_dwFieldWar > 0) 
		{												// ╟╩╡х└№┴▀└╠╕щ ┴д┤ч╣ц└з		
			if(pUser->m_dwGuild == m_dwFieldWar) 
			{
				CString strMsg = _T("");				// ╗є┤ы ▒ц╕╢░б ┴╫└╕╕щ ░╘└╙ │б..
				if(pUser->m_bLive == USER_DEAD && pUser->m_bGuildMaster)
				{
					strMsg.Format( IDS_USER_GUILD_WAR_WINNER, m_strGuildName);
					SendGuildWarFieldEnd((LPTSTR)(LPCTSTR)strMsg);
				}
				return TRUE;
			}
		}
	}
	return FALSE;
}

///////////////////////////////////////////////////////////////////////////////////////
//	╟Ў└ч └╓┤┬ ░ў└╠ ┤ы╖├└х└╠╕щ ╝║╟т┐б ┐╡╟т╛°└╜
//	TRUE - ╟Ў└ч └╓┤┬ ░ў└╠ ┤ы╖├└х ╛╞┤╘, FALSE - ┤ы╖├└х└╠░┼│к ┐└╖∙
BOOL USER::CheckInvalidZoneInFreeFight(USER *pUser)
{
	int me, you;

	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return FALSE;

	me = CheckInvalidMapType();
	you = CheckInvalidMapType();

	if( me == 12 && you == me ) return TRUE;

	return FALSE;
}

///////////////////////////////////////////////////////////////////////////////////////
//	╜├╣╬╡ю▒▐└╗ ┴╢└¤╟╤┤┘.
//
void USER::IsChangeCityRank(int iMyCityRank, USER *pUser)
{
	// PK╖╬ ┴╫╛·└╗╢з├│╕о
	CBufferEx TempBuf;

	int step = 0;
	int rank = 0;

	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
	if(pUser->m_bLive != USER_DEAD || pUser->m_sHP > 0) return;	// ╚д ┴╫┴Ў╡╡ ╛╩╛╥┤┬╡е ┐└╕щ ╣Ў▒╫...
	if (pUser->m_curz == 67 || pUser->m_curz == 66)	return;
											// ├╓┐ь╝▒└√└╕╖╬ └№└я└╗ ░╦╗ч	
	if(CheckInvalidZoneInGuildWar(pUser)) return;
	if(CheckInvalidMapType() == 12 ) return;	// ┤ы╖├└х ░╦╗ч

	
	if(pUser->m_bPkStatus || pUser->m_sCityRank < 0)
	{
		pUser->SendCityRank(iMyCityRank);
		return;
	}

	pUser->SendCityRank(iMyCityRank);
	
	if(m_sCityRank >= 0)					 // ╛╞┴ў▒ю┴Ў ╝▒╟╥╢з
	{
		m_iCityValue = 0;					

		if(pUser->m_sLevel > m_sLevel)  step = 0;		// ▒я┤┬ ╝Ў─б┤┬ ╗є┤ы╣ц ╖╣║з┐б╡√╢є... 
		else if(pUser->m_sLevel < m_sLevel) step = 2;
		else  step = 1;

		rank = 4;	

		m_iCityValue -= g_CityRank[rank][step];
		SendUserStatusSkill();

	}
	else												// ╛╟└╧╢з
	{
		if(pUser->m_sLevel > m_sLevel)  step = 0;
		else if(pUser->m_sLevel < m_sLevel) step = 2;
		else  step = 1;

		rank = m_sCityRank + CITY_RANK_INTERVAL;	// ┤ї╟╧┤┬ └╠└п┤┬ ╣ш┐н└╠ 0║╬┼═ ╜├└█╟╧▒т╢з╣о
		
		m_iCityValue = -1 * m_iCityValue;			// └╠░╟ ░к└╗ ┤ї╟╧▒т└з╟╪ └╧╜├└√└╕╖╬ ╟╘(//&&&&&&&&&│к┴▀┐б ░э─б└┌ ^^)
		CheckMaxValue((int &)m_iCityValue, (int &)g_CityRank[rank][step]);
		m_iCityValue = -1 * m_iCityValue;			// ┐ф▒т╝н ╣┘▓┘┬б...
		if(m_iCityValue < -2000000000) m_iCityValue = -2000000000;  // └╠╖╕░╘ ║п╟▀└╕┤╧▒ё └н┴┘╡╡ ╣┘▓у╛▀╟╤┤┘...^^
		SendUserStatusSkill();///╔▒╚╦║є╝ї╚е╩╨├ё╡╚╝╢

	}

	CheckMaxValue(m_sKillCount, 1);					// ┤й└√░к└╠ ░ш╝╙ ┴ї░б╟╤┤┘.
	SendUserStatusSkill();
													// ├╓╛╟╡ю▒▐└╧╢з
	int oldRank = m_sCityRank;			
	for(int i = 0; i < 13; i++)
	{
		if(m_iCityValue < g_CityRankValue[i])// ┤й└√─б░к└╠ ▒т┴╪ ╝│┴д░к║╕┤┘ └█└║┴Ў ╞╟┤▄╟╤┤┘.
		{
			m_sCityRank = i - CITY_RANK_INTERVAL;
			break;
		}
	}

	if(oldRank != m_sCityRank) 
	{
		CheckGuildUserInFortress();			// ╜├╣╬ ╡ю▒▐└╠ ║п╟╥╢з ┤┘╜├ ╝┬╞├(╞ў╞о╕о╜║╕ж└з╟╪)

		TempBuf.Add(SET_USER_PK_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		TempBuf.Add((BYTE)0x01);
		TempBuf.Add(m_sCityRank);

		SendInsight(TempBuf, TempBuf.GetLength());
//		SendExactScreen(TempBuf, TempBuf.GetLength());	
	}

	rank = m_sCityRank + CITY_RANK_INTERVAL;
	if( rank != ANGEL_RANK )		// ╛ю┬ю ║п╟▀╡ч ╝╝└╬╞о░б ╛╞┤╧╢є╕щ
	{
		m_dwSaintTime = 0;
	}
}	

///////////////////////////////////////////////////////////////////////////////////////
//	┐й▒ф ╕ў└╗ ┴╫┐┤└╗╢з ╜├╣╬╡ю▒▐ ╟т╗є╕ж ┴╢└¤╟╤┤┘.
//
void USER::GetCityRank()
{
	CBufferEx TempBuf;

	int		i;
	BOOL	bRank = FALSE;
	int		iCityRank = m_sCityRank;

	for(i = 0; i < 13; i++)
	{
		if(m_iCityValue < g_CityRankValue[i])// ┤й└√─б░к└╠ ▒т┴╪ ╝│┴д░к║╕┤┘ └█└║┴Ў ╞╟┤▄╟╤┤┘.
		{
			if(i < 6) { m_sCityRank = i - CITY_RANK_INTERVAL; }
			else { m_sCityRank = i -1 - CITY_RANK_INTERVAL; }
			break;
		}
	}

	if(m_iCityValue >= g_CityRankValue[12]) m_sCityRank = 7;

	if(iCityRank != m_sCityRank)
	{
		CheckGuildUserInFortress();			// ╜├╣╬ ╡ю▒▐└╠ ║п╟╥╢з ┤┘╜├ ╝┬╞├(╞ў╞о╕о╜║╕ж└з╟╪)

		TempBuf.Add(SET_USER_PK_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		TempBuf.Add((BYTE)0x01);
		TempBuf.Add(m_sCityRank);

		SendInsight(TempBuf, TempBuf.GetLength());
//		SendExactScreen(TempBuf, TempBuf.GetLength());
	}
}

///////////////////////////////////////////////////////////////////////////////////////
//	░в ╜├╣╬╡ю▒▐║░╖╬ ╣░░╟░к└╗ ╡√╖╬ ╝│┴д╟╤┤┘.
//
DWORD USER::GetItemCostByCityRank(int sid, int nRate)
{
	if(sid <0 || sid >= g_arItemTable.GetSize()) return 10000000; 
		
	int iCost = g_arItemTable[sid]->m_iDN;
	int rank = m_sCityRank + CITY_RANK_INTERVAL;

	iCost = iCost + (int)( iCost * ((double)nRate/100) );
	switch(rank)
	{
	case CHAONISE_RANK:
		iCost += (int)( iCost * ((double)25/100) );
		break;
	case DEATH_RANK:
		iCost += (int)( iCost * ((double)20/100) );
		break;
	case EVIL_RANK:
		iCost += (int)( iCost * ((double)15/100) );
		break;
	case VILLAIN_RANK:
		iCost += (int)( iCost * ((double)10/100) );
		break;
	case WARRIOR_RANK:
		iCost -= (int)( iCost * ((double)3/100) );
		break;
	case HERO_RANK:
		iCost -= (int)( iCost * ((double)6/100) );
		break;
	case SAINT_RANK:
		iCost -= (int)( iCost * ((double)10/100) );
		break;
	case GUARDANT_RANT:
		iCost -= (int)( iCost * ((double)12/100) );
		break;
	case ANGEL_RANK:
		iCost -= (int)( iCost * ((double)15/100) );
		break;
	}

	if(iCost < 0) iCost = 1;

	return (DWORD)iCost;
}

///////////////////////////////////////////////////////////////////////////////////////
//	╛╞└╠┼█░· ╡╖┐б░№╟╤ DB Update
//
BOOL USER::UpdateUserItemDN()
{
	if(UpdateMemUserAll()) return TRUE;

	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strItem[_ITEM_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strItem, sizeof(strItem));
	
	UserItemToStr(strItem);

	SDWORD sItemLen		= sizeof(strItem);
	
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_USER_ITEM_DATA (\'%s\',%d, ?)}"), m_strUserID, m_dwDN ); 

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode != SQL_SUCCESS)
		return FALSE;

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strItem),	0, (TCHAR*)strItem,		0, &sItemLen );

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}
BOOL USER::UpdateUserItemShopPingDN()
{
	if(UpdateMemUserAll()) return TRUE;

	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strItem[_ITEM_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strItem, sizeof(strItem));
	
	UserItemToStr(strItem);

	SDWORD sItemLen		= sizeof(strItem);
	
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_USER_ITEM_DATA (\'%s\',%d, ?)}"), m_strUserID, m_dwShopPingDN ); 

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode != SQL_SUCCESS)
		return FALSE;

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strItem),	0, (TCHAR*)strItem,		0, &sItemLen );

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}
BOOL USER::UpdateUserItemShopPattern()//▒г┤ц║═┤ц┤в╫к╗╗╔╠╡ъ─г╩╜╩¤╛▌
{
	if(UpdateMemUserAll()) return TRUE;

	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strItem[_ITEM_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strItem, sizeof(strItem));
	
	UserItemToStr(strItem);

	SDWORD sItemLen		= sizeof(strItem);
	
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_USER_ITEM_DATA (\'%s\',%d, ?)}"), m_strUserID, m_dwNoChatTime); 

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode != SQL_SUCCESS)
		return FALSE;

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strItem),	0, (TCHAR*)strItem,		0, &sItemLen );

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}
BOOL USER::UpdateUserItemZaiXianTime()//▒г┤ц╘┌╧▀╩▒╝ф╩¤╛▌
{
	if(UpdateMemUserAll()) return TRUE;

	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strItem[_ITEM_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strItem, sizeof(strItem));
	
	UserItemToStr(strItem);

	SDWORD sItemLen		= sizeof(strItem);
	
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_USER_ITEM_DATA (\'%s\',%d, ?)}"), m_strUserID, m_dwZaiXianTime ); 

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode != SQL_SUCCESS)
		return FALSE;

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strItem),	0, (TCHAR*)strItem,		0, &sItemLen );

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

BOOL USER::UpdateUserItemHiExpTime()
{
	if(UpdateMemUserAll()) return TRUE;

	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strItem[_ITEM_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strItem, sizeof(strItem));
	
	UserItemToStr(strItem);

	SDWORD sItemLen		= sizeof(strItem);
	
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_USER_ITEM_DATA (\'%s\',%d, ?)}"), m_strUserID, m_dwHiExpTime ); 

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode != SQL_SUCCESS)
		return FALSE;

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strItem),	0, (TCHAR*)strItem,		0, &sItemLen );

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}
BOOL USER::UpdateUserItemMagicFindTime()
{
	if(UpdateMemUserAll()) return TRUE;

	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strItem[_ITEM_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strItem, sizeof(strItem));
	
	UserItemToStr(strItem);

	SDWORD sItemLen		= sizeof(strItem);
	
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_USER_ITEM_DATA (\'%s\',%d, ?)}"), m_strUserID, m_dwMagicFindTime ); 

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode != SQL_SUCCESS)
		return FALSE;

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strItem),	0, (TCHAR*)strItem,		0, &sItemLen );

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}
////////////////////////////////////////////////////////////////////////////////
//	╚б╡├╖и╩ж╛л╨▐╔╦║ж
//
int USER::GetPsiAttackUp()
{
	int iLevel = 0;
	int iSkillSid = 0;

	int iAttackUp = 0;
	int tClass = 0;

	BYTE tWeaponClass = 0;

	IsCanUseWeaponSkill(tWeaponClass);
	tClass = tWeaponClass * SKILL_NUM;

	for(int i = tClass; i < tClass + SKILL_NUM; i++)
	{
		iSkillSid  = m_UserSkill[i].sSid;
		if(iSkillSid == SKILL_PSI_SUCCESS_UP) // ╝║░°╖№ ┴ї░б		7 index
		{
			// ╝°╝Ў ╜║┼│ ╖╣║з 
			iLevel = m_UserSkill[i].tLevel;		
			if(iLevel < 0) iLevel = 0;
			
			// ╛╞└╠┼█┐б └╟╟╤ ╜║┼│ ║п╡┐ ╖╣║з
			if(iLevel >= 1) iLevel += m_DynamicUserData[g_DynamicSkillInfo[iSkillSid]]+ m_DynamicUserData[MAGIC_ALL_SKILL_UP];
			
			if(iLevel >= SKILL_LEVEL) iLevel = SKILL_LEVEL - 1;		// ╡Ё║ё┐б └╓┤┬ ╖╣║з║╕┤┘┤┬ └█╛╞╛▀╟╤┤┘
			if(iSkillSid >= g_arSkillTable.GetSize()) return 0;
			iAttackUp = g_arSkillTable[iSkillSid]->m_arSuccess.GetAt(iLevel);
		}
	}

	return iAttackUp;	
}

////////////////////////////////////////////////////////////////////////////////
//	╗ч└╠┐└┤╨ ╣№└з ░°░▌┐б ┤ы╟╤ ╡е╣╠┴Ў╕ж ░ш╗ъ╟╤┤┘.
//
void USER::GetWideRangeAttack(int x, int y, int damage)	// ┴Ў▒▌└║ ░°░▌╕╕ ├│╕о...
{
	if( m_ZoneIndex < 0 || m_ZoneIndex >= g_zone.GetSize() ) return;

	int dir[9][2];
	int ix, iy;
	int nTarget = 0;
	int nDamage = 0;

	USER* pUser = NULL;
	CNpc* pNpc = NULL;
	MAP* pMap = g_zone[m_ZoneIndex];
	if(!pMap) return;

	dir[0][0]  =  0;		dir[0][1] =  0;		// 
	dir[1][0]  = -1;		dir[1][1] =  0;		// 
	dir[2][0]  = -1;		dir[2][1] =  1;		// 
	dir[3][0]  =  0;		dir[3][1] =  1;		// 
	dir[4][0]  =  1;		dir[4][1] =  1;		// 

	dir[5][0]  =  1;		dir[5][1] =  0;		// 
	dir[6][0]  =  1;		dir[6][1] = -1;		// 
	dir[7][0]  =  0;		dir[7][1] = -1;		// 
	dir[8][0]  = -1;		dir[8][1] = -1;		// 

	for(int i = 1; i < 9; i++)
	{
		ix = x + dir[i][0];
		iy = y + dir[i][1];

		if(ix < 0) ix = 0;
		if(iy < 0) iy = 0;
		if(ix >= pMap->m_sizeMap.cx) ix = pMap->m_sizeMap.cx - 1;
		if(iy >= pMap->m_sizeMap.cy) iy = pMap->m_sizeMap.cy - 1;

		nTarget = pMap->m_pMap[ix][iy].m_lUser;

		if(nTarget >= USER_BAND && nTarget < NPC_BAND)	// USER
		{
			pUser = GetUser(nTarget - USER_BAND);			// User Pointer ╕ж ╛Є┤┬┤┘.
			if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;	
			if(pUser->m_bLive == USER_DEAD || pUser->m_uid == m_uid)	continue;		// Target User ░б └╠╣╠ ┴╫╛ю└╓└╕╕щ ╕о┼╧
			if(!pUser->m_bPkStatus) continue;				// └╧╜├└√ ─л┐└░б ╛╞┤╧╕щ ░°░▌└╠ ╛╚╡╚┤┘.

			if(m_dwGuild > 0)
			{
				if(m_tGuildWar == GUILD_WARRING && pUser->m_tGuildWar == GUILD_WARRING)
				{												
					if(pUser->m_dwGuild == m_dwGuild)  return;
				}

				if(m_tFortressWar == GUILD_WARRING && pUser->m_tFortressWar == GUILD_WARRING)
				{												// ▒ц╡х└№└╧╢з └╧╜├└√ ─л┐└┤┬ ░░└║▒ц╡х┐°┐б░╘┤┬ ╣л╜├
					if(pUser->m_dwGuild == m_dwGuild)  return;
				}																			
			}

			nDamage = (int)((double)damage *  ((double)m_sMagicVOL / (m_sMagicVOL + pUser->m_sMagicVOL + pUser->m_DynamicUserData[MAGIC_PSI_RESIST_UP] + \
				                               (int)((double)pUser->m_DynamicEBodyData[EBODY_PSI_RESIST_UP] / 100) \
											  )));
			//╫ю╓╒╔╦║ж═│╝╞
			nDamage -= pUser->m_DynamicUserData[MAGIC_PSI_ATTACK_DOWN];
			nDamage -= pUser->m_DynamicUserData[MAGIC_FINALLY_ATTACK_DOWN];
			nDamage = (int)((double)nDamage/2 + 0.5);	// ╡е╣╠┴Ў└╟ 50%╕╕ ╡щ╛ю░г┤┘.
			
			pUser->SetDamage(nDamage);
			if(pUser->m_sHP > 0)		// ╗ь└║ ░ц┐ь └№▒т╡е╣╠┴Ў ├▀░б
			{
//				pUser->SetColdDamage();
			}
			else if(pUser->m_lDeadUsed == 1)
			{
				int tempRank = m_sCityRank + CITY_RANK_INTERVAL;
				IsChangeCityRank(m_sCityRank, pUser);
				pUser->GetLevelDownExp(USER_PK, tempRank, FALSE,m_strUserID);			// ░ц╟ш─б┐═ ▒╫┐▄ ║п╚н╖о╕ж ╣▌┐╡╟╤┤┘.
			}
		}
		else if(nTarget >= NPC_BAND)				// NPC
		{
			pNpc = GetNpc(nTarget - NPC_BAND);				// NPC Point ╕ж ╛Є┤┬┤┘.
			if(pNpc == NULL) continue;					// └▀╕°╡╚ NPC └╠╕щ ╕о┼╧
			if(pNpc->m_NpcState == NPC_DEAD || pNpc->m_tNpcType != NPCTYPE_MONSTER) continue;	// NPC ░б └╠╣╠ ┴╫╛ю └╓└╕╕щ ╕о┼╧
			if(pNpc->m_sHP <= 0) continue;
			if(pNpc->m_byAX == 0 && pNpc->m_byAZ == 0 && pNpc->m_tNpcType == 0) continue;			// ░°░▌┤╔╖┬└╠ ╛°┤┬ ╕є╜║┼═(╟Ў└ч ┐°╝о)└║ └╧╣▌ ░°░▌└╠ ╡╟┴Ў ╛╩┤┬┤┘.

			nDamage = (int)(damage *  ((double)m_sMagicVOL / (m_sMagicVOL + pNpc->m_sVOL)));
			nDamage = (int)((double)nDamage/2 + 0.5);	// ╡е╣╠┴Ў└╟ 50%╕╕ ╡щ╛ю░г┤┘.

//			if(pNpc->SetDamage(nDamage, m_strUserID, m_uid + USER_BAND, m_pCom) == FALSE)
			if(pNpc->SetDamage(nDamage, m_uid + USER_BAND, m_pCom) == FALSE)
			{
				if(m_tGuildHouseWar == GUILD_WARRING && pNpc->m_NpcVirtualState == NPC_WAIT)
				{
					CheckGuildHouseWarEnd();
				}

				pNpc->SendExpToUserList(m_pCom); // ░ц╟ш─б ║╨╣ш!!
				int diffLevel = abs(m_sLevel - pNpc->m_byClassLevel);
				if(diffLevel <= o_yehuoini[0]->djxz || pNpc->m_sEvent != 0 )
				{
					if (m_isDoubleBAOLV  > 0 || g_sanBaoLv == TRUE || m_dwGuarDianTianShi > 0)
						pNpc->SendDead(m_pCom,1,TRUE);
					else
						pNpc->SendDead(m_pCom);
				}
				else
				{
					pNpc->SendDead(m_pCom,0);
					SendSystemMsg("─·║═╡▒╟░╣╓╬я╡╚╝╢╧р▓ю20,├╗╙╨╚╬║╬╦∙╡├", SYSTEM_ERROR,TO_ME);
				}
			/*if (m_dwShaGuai >= 3000 ) 
			{
	            SendSystemMsg("─·╜ё╚╒╔▒╣╓╩¤┴┐╥╤┬·,┤Є╣╓╬▐╖и╗ё╡├╚╬║╬╛н╤щ╓╡", SYSTEM_ERROR,TO_ME);
			}  */
			 //if(diffLevel <= o_yehuoini[0]->djxz  &&  pNpc->m_tNpcType == 0 )
			 //  {
				//   CString strMsg;
				//   if (m_dwShaGuai == 1000)
				//   {
				//	   SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 5 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	   m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 2000)
				//   {
				//	    SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	   
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 10 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	  m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 3000)
				//   {
				//	    SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	    
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 15 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 4000)
				//   {
				//	   SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	    
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 20 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 5000)
				//   {
				//	    SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	   
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 30 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }
			 //  }

			
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
				if(diffLevel < 40)
				{
					m_iCityValue=m_iCityValue+250;
					m_dwShaGuai=m_dwShaGuai+1;
					GetCityRank();
					CheckMaxValue(m_dwXP, 1);		// ╕ў└╠ ┴╫└╗╢з╕╕ 1 ┴ї░б!	
					SendXP();
					SendUserStatusSkill();
				}
			}
			else									// ╗ь└║ ░ц┐ь └№▒т╡е╣╠┴Ў ├▀░б
			{
//				pNpc->SetColdDamage();
			}
		    SendDamageNum(1,nTarget,nDamage);
			SendNpcHP(nTarget,pNpc->m_sHP);		
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
//	╝╥╚п╟╥ ╕ў└╟ ╡е└╠┼╕░к└╗ ╝┬╞├╟╤┤┘.
//
void USER::GetNpcData(CNpc *pNpc, int x, int y)
{
	int  iCount = 0,i;
	CPoint pt;

	if(m_tIsOP != 1) return;
	if(pNpc == NULL) return;

	CNpc* pEventNpc	= GetEventNpc();

	if(pEventNpc == NULL)
	{
		SendSystemMsg( IDS_USER_CALL_MONSTER_COUNT_MAX, SYSTEM_NORMAL, TO_ME);
		return;
	}

	MYSHORT sAI;
	BYTE upTemp = 0;			// ╗є└з 8║ё╞о
	BYTE dwTemp = 0;			// ╟╧└з 8║ё╞о

	CString strMsg = _T(""); 

	pEventNpc->m_sSid			= pNpc->m_sSid;		// MONSTER(NPC) Serial ID

	pEventNpc->m_sPid			= pNpc->m_sPid;		// MONSTER(NPC) Picture ID
	_tcscpy(pEventNpc->m_strName, pNpc->m_strName);		// MONSTER(NPC) Name
	
	pEventNpc->m_sSTR			= pNpc->m_sSTR;		// ╚√
	pEventNpc->m_sDEX			= pNpc->m_sDEX;		// ╣╬├╕
	pEventNpc->m_sVOL			= pNpc->m_sVOL;		// └╟┴Ў
	pEventNpc->m_sWIS			= pNpc->m_sWIS;		// ┴Ў╟¤
	
	pEventNpc->m_sHP			= pNpc->m_sMaxHP;		// ├╓┤ы HP
	pEventNpc->m_sMaxHP			= pNpc->m_sMaxHP;		// ╟Ў└ч HP
	pEventNpc->m_sPP			= pNpc->m_sMaxPP;		// ├╓┤ы PP
	pEventNpc->m_sMaxPP			= pNpc->m_sMaxPP;		// ╟Ў└ч PP
	
	pEventNpc->m_byClass		= pNpc->m_byClass;		// ╣л▒т░ш┐н
	pEventNpc->m_byClassLevel	= pNpc->m_byClassLevel;// ╣л▒т░ш┐н ╖╣║з
	pEventNpc->m_sExp			= pNpc->m_sExp;		
	
	pEventNpc->m_byAX			= pNpc->m_byAX;		// ░°░▌░к X
	pEventNpc->m_byAY			= pNpc->m_byAY;		// ░°░▌░к Y
	pEventNpc->m_byAZ			= pNpc->m_byAZ;		// ░°░▌░к Z

	pEventNpc->m_iDefense		= pNpc->m_iDefense;	// ╣ц╛ю░к
	pEventNpc->m_byRange		= pNpc->m_byRange;		// ╗ч┴д░┼╕о
	pEventNpc->m_sAI			= pNpc->m_sAI;		// └╬░°┴Ў┤╔ └╬╡ж╜║
	pEventNpc->m_sAttackDelay	= pNpc->m_sAttackDelay;// ░°░▌╡Ї╖╣└╠
	pEventNpc->m_byVitalC		= pNpc->m_byVitalC;	// ╜┼├╝╡е╣╠┴Ў ┼й╕о╞╝─├
	pEventNpc->m_byWildShot		= pNpc->m_byWildShot;	// │н╗ч ╖╣║з
	pEventNpc->m_byExcitedRate	= pNpc->m_byExcitedRate;			// ╚я║╨ ╖╣║з
	pEventNpc->m_byIronSkin		= pNpc->m_byIronSkin;
	pEventNpc->m_byReAttack		= pNpc->m_byReAttack;
	pEventNpc->m_bySubAttack	= pNpc->m_bySubAttack;	// ╗є┼┬└╠╗є ╣▀╗¤(║╬░б░°░▌)
	pEventNpc->m_byState		= pNpc->m_byState;		// ╕є╜║┼═ (NPC) ╗є┼┬└╠╗є
	pEventNpc->m_byPsi			= pNpc->m_byPsi;		// ╗ч└╠┐└┤╨ └√┐ы
	pEventNpc->m_byPsiLevel		= pNpc->m_byPsiLevel;	// ╗ч└╠┐└┤╨╖╣║з

	pEventNpc->m_bySearchRange	= pNpc->m_bySearchRange;			// └√ ┼╜┴Ў ╣№└з
	pEventNpc->m_sSpeed			= pNpc->m_sSpeed;		// └╠╡┐╝╙╡╡	
	
	pEventNpc->m_sInclination	= pNpc->m_sInclination;
	pEventNpc->m_byColor		= pNpc->m_byColor;
	pEventNpc->m_sStandTime		= pNpc->m_sStandTime;

	//////// MONSTER POS ////////////////////////////////////////
	pEventNpc->m_sCurZ			= pEventNpc->m_sOrgZ = m_curz;
	pEventNpc->m_sCurX			= pEventNpc->m_sOrgX = m_curx;
	pEventNpc->m_sCurY			= pEventNpc->m_sOrgY = m_cury;
	
	pEventNpc->m_sMinX			= pNpc->m_sMinX;
	pEventNpc->m_sMinY			= pNpc->m_sMinY;
	pEventNpc->m_sMaxX			= pNpc->m_sMaxX;
	pEventNpc->m_sMaxY			= pNpc->m_sMaxY;
	
	pEventNpc->m_sRegenTime		= pNpc->m_sRegenTime;

	pEventNpc->m_sEvent			= pNpc->m_sEvent;		// └╠║е╞о ╣°╚г
	pEventNpc->m_sEZone			= pNpc->m_sEZone;
	pEventNpc->m_byType			= pNpc->m_byType;
	pEventNpc->m_sDimension		= pNpc->m_sDimension;	// ╟Ў└ч ╕ю╝┐╕ж ┬ў┴Ў╟╧┤┬┴Ў ╞╟┤▄

	pEventNpc->m_tNpcType		= pNpc->m_tNpcType;	// NPC Type

	pEventNpc->m_sFamilyType	= pNpc->m_sFamilyType;	// NPC Type
	pEventNpc->m_tItemPer		= pNpc->m_tItemPer;	// NPC Type
	pEventNpc->m_tDnPer			= pNpc->m_tDnPer;	// NPC Type
	pEventNpc->m_sHaveItem		= pNpc->m_sHaveItem;

	pEventNpc->m_ZoneIndex		= -1;

	pEventNpc->m_sClientSpeed	= pNpc->m_sClientSpeed;
	pEventNpc->m_dwStepDelay	= GetTickCount();

	sAI.i = (short)pNpc->m_sAI;						// NPC AI╕ж ╝┬╞├
	upTemp = sAI.b[0];
	dwTemp = sAI.b[1];

	pEventNpc->m_tNpcAttType = upTemp >> 7;			// │к┴▀┐б ├▀░б╟╪╛▀╟╤┤┘.
	upTemp = upTemp << 1;
	pEventNpc->m_tNpcLongType = upTemp >> 7;
	upTemp = upTemp << 1;
	pEventNpc->m_tNpcGroupType = upTemp >> 7;

	if(pEventNpc->m_sClientSpeed <= 20) pEventNpc->m_sClientSpeed = 20;	// ╣ц╛ю ─┌╡х;

	for(i = 0; i < g_zone.GetSize(); i++)
	{
		if(g_zone[i]->m_Zone == pEventNpc->m_sCurZ) 
		{
			pEventNpc->m_ZoneIndex = i;
			break;
		}
	}

	BOOL bSuccess = FALSE;
	pEventNpc->EventNpcInit(x, y);
	
	for(i = 0; i < NPC_NUM; i++ ) 
	{
		if(InterlockedCompareExchange((LONG*)&g_arEventNpcThread[0]->m_ThreadInfo.m_lNpcUsed[i], (long)1, (long)0) == (long)0)
		{
			bSuccess = TRUE;
			g_arEventNpcThread[0]->m_ThreadInfo.pNpc[i] = pEventNpc;
			break;
		}
	}

	if(!bSuccess)
	{
		InterlockedExchange(&pEventNpc->m_lEventNpc, (LONG)0);
		SendSystemMsg( IDS_USER_CALL_FAIL, SYSTEM_NORMAL, TO_ME);
		return;
	}

	strMsg.Format( IDS_USER_CALL_WHAT, pNpc->m_strName);
	SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
}

////////////////////////////////////////////////////////////////////////////////
//	├▀░б╟╥ ╝╥╚п╕ў└╟ ╕▐╕Ё╕о╕ж ┬№┴╢╟╧▒т└з╟╪ ╟├╖б▒╫░б 0└╬ ╗є┼┬░═╕╕ │╤▒ф┤┘.
//
CNpc* USER::GetEventNpc()
{
	for(int i = g_TotalNPC; i < g_arNpc.GetSize(); i++)
	{
		if( g_arNpc[i] )
		{
			if(InterlockedCompareExchange((LONG*)&g_arNpc[i]->m_lEventNpc, (long)1, (long)0) == (long)0)
			{
				return g_arNpc[i];				
			}
		}
	}
	return NULL;
}

////////////////////////////////////////////////////////////////////////////////
//	├╤▒т░ш┐н└╟ └║╜┼ ╟╪┴жOFF
//
void USER::SendHideOff()
{
/*	CBufferEx TempBuf;

	m_tPsiAbnormal = 0;
	m_dwHideTime = 0;
	m_dwLastHideTime = GetTickCount();
		
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(ABNORAML_PSI);
	TempBuf.Add(ABNORMAL_NONE);
	TempBuf.Add((BYTE)0);
	TempBuf.Add((BYTE)0);
	TempBuf.Add((BYTE)0);
	TempBuf.Add((BYTE)0);	
	Send(TempBuf, TempBuf.GetLength());
	SendInsight(TempBuf, TempBuf.GetLength());
*/
}

////////////////////////////////////////////////////////////////////////////////
//	└п└·░б ╝╥┴Ў╟╤ ╛╞└╠┼█└╟ ╣л░╘ ║п╚н╕ж ╛╦╕░┤┘.
//
void USER::SendItemWeightChange()
{
/*	CBufferEx TempBuf;

	TempBuf.Add(ITEM_WEIGHT_CHANGE);
	TempBuf.Add((short)m_iMaxWeight);
	TempBuf.Add((short)m_iCurWeight);

	Send(TempBuf, TempBuf.GetLength());
*/
}

////////////////////////////////////////////////////////////////////////////////
//	╟╪┤ч ▒ц╡х└╬╡ж╜║ └╟ ╞ў└╬┼═╕ж ╣▌╚п
//
CGuild* USER::GetGuild(int num)
{
	EnterCriticalSection( &(m_pCom->m_critGuild) );

	if( num <= 0 ) return NULL;			// ▒ц╡х └╬╡ж╜║┤┬ 1║╬┼═ ╜├└█╟╤┤┘.
	if( num >= g_arGuildData.GetSize() ) return NULL; 

	CGuild* pGuild = NULL;

	if(g_arGuildData[num])
	{
		pGuild = g_arGuildData[num];
		if( pGuild->m_lSid == num )
		{
			return pGuild;
		}
	}

	return NULL;
}

////////////////////////////////////////////////////////////////////////////////
//	╟╪┤ч ▒ц╡х└╠╕з└╕╖╬ ╞ў└╬┼═╣▌╚п
//
CGuild* USER::GetGuildByName(TCHAR *guildname)
{
	EnterCriticalSection( &(m_pCom->m_critGuild) );

	int i, j = 0;
	CGuild* pGuild = NULL;

	CString tempName;

	tempName.Format( "%s", guildname );

	for(i = 0; i < g_arGuildData.GetSize(); i++)
	{
		if( g_arGuildData[i] )
		{
			pGuild = g_arGuildData[i];

			if( !tempName.CompareNoCase( pGuild->m_strGuildName ) )
			{
				return pGuild;
			}

			j = 0;
		}
//		else j++;

//		if(j >= 100) break;	// ├╓┤ы 100░│ ▒ю┴Ў ┤ї ░╦╗Ў╟╪║╕░э ┴▀┤▄
	}

	return NULL;
}

////////////////////////////////////////////////////////////////////////////////
//	╟╪┤ч ▒ц╡х└╬╡ж╜║╖╬ ▒ц╡х└╠╕з ╣▌╚п
//
BOOL USER::GetGuildName(int guildnum, TCHAR *guildname)
{
	if( guildnum < 0 || guildnum >= MAX_GUILD )
	{
		return FALSE;
	}

	EnterCriticalSection( &(m_pCom->m_critGuild) );

	CGuild* pGuild = NULL;

	if( !g_arGuildData[guildnum] )
	{
		LeaveCriticalSection( &(m_pCom->m_critGuild) );
		return FALSE;
	}

	pGuild = g_arGuildData[guildnum];

	if( pGuild->m_lSid != guildnum )
	{
		LeaveCriticalSection( &(m_pCom->m_critGuild) );
		return FALSE;
	}

	strcpy( guildname, pGuild->m_strGuildName );
	
	LeaveCriticalSection( &(m_pCom->m_critGuild) );

	return TRUE;
}

////////////////////////////////////////////////////////////////////////////////
//	║є ▒ц╡х └╬╡ж╜║╕ж ╣▌╚п
//
int USER::GetEmptyGuildNum()
{
/*	EnterCriticalSection( &(m_pCom->m_critGuild) );

	int nCount = 1;

	InterlockedIncrement(&g_CurrentGuildCount);

	for(int i = 0; i < g_arGuildData.GetSize(); i++)
	{
		if(!g_arGuildData[i]) continue;

		int temp = g_arGuildData[i]->m_lSid;
		if(g_arGuildData[i]->m_lSid >= nCount) nCount = g_arGuildData[i]->m_lSid + 1;
	}

	if(nCount >= MAX_GUILD) nCount = -1;			// └╠╖▓╢й DB┴д╕о ╛ў╡е└╠╞о╟╪╛▀╟╤┤┘...

	return nCount;
*/
	EnterCriticalSection( &(m_pCom->m_critGuild) );

	for( int i = 1; i < g_arGuildData.GetSize(); i++)
	{
		if( g_arGuildData[i]->m_lSid <= 0 )
		{
			return i;
		}
	}

	return -1;

}

////////////////////////////////////////////////////////////////////////////////
//	
//
void USER::ReleaseGuild()
{
	LeaveCriticalSection( &(m_pCom->m_critGuild) );
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ╝│╕│ ┴╢░╟└╠ ╡╟┤┬┴Ў ╞╟┤▄
//
void USER::GuildOpen()
{
#ifdef _ACTIVE_USER
//	if(m_iDisplayType == 6 && m_sLevel > 25) return; //yskang 0.5
	if(m_iDisplayType == 6) return; //yskang 0.5
#endif

	CBufferEx TempBuf;

	CString strTemp = _T("");
	CString strMsg = _T("");

	strTemp.Format("%s", m_strGuildName);

	if(!strTemp.IsEmpty()) 
	{
		strMsg.Format( IDS_USER_ALREADY_GUILD_IN, m_strGuildName);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);	
		return;
	}

	if(m_sGuildVersion >= 0)
	{
		strMsg.Format( IDS_USER_ALREADY_OTHER_GUILD_IN );
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);	
		return;
	}

	if(m_sLevel < GUILD_MAKE_LEVEL)  // ╖╣║з ┴ж╟╤┐б..
	{
		strMsg.Format( IDS_USER_GUILD_MAKE_LEVEL, GUILD_MAKE_LEVEL);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);	
		return;
	}

	if(m_dwDN < GUILD_MAKE_DN)  // ├в╕│ └┌▒▌┐б...
	{
		strMsg.Format( IDS_USER_GUILD_MAKE_DINA, GUILD_MAKE_DN);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;
	}

	int rank = m_sCityRank + CITY_RANK_INTERVAL;

	if(rank < HERO_RANK)
	{
		strMsg.Format( IDS_USER_GUILD_MAKE_CITY_RANK, "Hero");
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return;
	}

	TempBuf.Add(GUILD_DIALOG);
	Send(TempBuf, TempBuf.GetLength());
}

////////////////////////////////////////////////////////////////////////////////
//	╗ї╖╬┐ю ▒ц╡х╕ж ╕╕╡ч┤┘.	
//
void USER::NewGuild(TCHAR *pBuf)
{
	if ( pBuf == NULL ) return;

	BYTE error_code = 0;
	BOOL bRes = TRUE;
	
	int i;
	int index = 0;
	int nLength = 0;
	int iGuildId = 0;
	TCHAR szGuildName[255];

	CString szTemp;
	CBufferEx	TempBuf;

	WORD *pwMark = NULL;
	CGuild *pGuild = NULL;
//	CGuildUser *pGuildUser = NULL;

	if(m_dwGuild > 0) { error_code = ERR_5; goto go_result; }  // ┤┘╕е ▒ц╡х┐°└╬ ╗є┼┬

	nLength = GetVarString(sizeof(szGuildName), szGuildName, pBuf, index);
	if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) { error_code = ERR_1; goto go_result; } // ▒ц╡х ╕э─к ┴ж╟╤┐б ░╔╕▓

	szTemp = szGuildName;

	if(!UNI_CHAR::CheckString(szTemp))
	{
		error_code = 255; 
		goto go_result;
	}

	if(szTemp.Find(' ') != -1 || szTemp.Find('\'') != -1 || szTemp.Find('"') != -1 || szTemp.Find('/') != -1)
	{
		error_code = 255; 
		goto go_result;
	}

	if(IsReservedID(szGuildName))
	{
		error_code = 04; 
		goto go_result;
	}

	if(m_sLevel < GUILD_MAKE_LEVEL) { error_code = ERR_1; goto go_result; } // ╖╣║з ┴ж╟╤┐б..

	if(m_dwDN < GUILD_MAKE_DN) { error_code = ERR_1; goto go_result; } // ├в╕│ └┌▒▌┐б...

	pGuild = GetGuildByName(szGuildName);

	ReleaseGuild();

	if(pGuild) { error_code = ERR_4; goto go_result; }  // └╠╣╠ ╡ю╖╧╟╤ ▒ц╡х └╠╕з└╧╢з...

	iGuildId = GetEmptyGuildNum();

	if(iGuildId <= 0)
	{
		ReleaseGuild();
		//InterlockedDecrement(&g_CurrentGuildCount);
		return;
	}

//	pGuild = new CGuild;
	pGuild = g_arGuildData[iGuildId];
	if(pGuild == NULL) return;
/*
	if(strlen(pGuild->m_strGuildName) > 0)
	{
		ReleaseGuild();
		return;
	}
*/
	if(pGuild->m_lSid > 0) 
	{
		ReleaseGuild();
		return;
	}
/*
	pGuildUser = new CGuildUser;		// ╕▐╕Ё╕о╟╥┤ч┐б ╜╟╞╨╟╧╕щ...
	if(!pGuildUser)
	{
		ReleaseGuild();
		return;
	}
*/

	// alisia - ║ъ╕┤┴Ў ╝н╣Ў╖╬ ▒ц╡х ╗ї╖╬ ╕╕╡ч┤┘┤┬ ╜┼╚г╕ж ║╕│╗░э ╕о┼╧╟╤┤┘. ╚─┐б ░с░·╕ж ╣▐╛╞╝н ▒ц╡х╕ж ┐╧╝║╟╤┤┘.
	g_pMainDlg->BridgeServerGuildNewReq( m_uid, m_strUserID, iGuildId, szGuildName );
	ReleaseGuild();
	return;





	pGuild->m_lSid = iGuildId;

	strcpy(pGuild->m_strGuildName, szGuildName);
	strcpy(pGuild->m_strMasterName, m_strUserID);

	pGuild->m_dwGuildDN = 0;
	pGuild->m_sVersion = -1;

	
	pwMark = (WORD*)(&pGuild->m_strMark[0]);
	for (i=0; i<GUILD_MARK_SIZE/sizeof(WORD); i++) {
		pwMark[i] = (0x1f<<11 | 0x1f);	// Client┐б╝н ╗ч┐ы╟╧┤┬ ┼ї╕э╗Ў└╕╖╬ ├╩▒т╚н╟╤┤┘.
	}

	if(!InsertGuild(pGuild))
	{
//		delete pGuild;
//		if(pGuildUser) delete pGuildUser;

//		InterlockedDecrement(&g_CurrentGuildCount);
		ReleaseGuild();
		return;
	}

//	::ZeroMemory(pGuildUser->m_strUserId, sizeof(pGuildUser->m_strUserId));

//	nLength = 0;
//	nLength = strlen(m_strUserID);

//	pGuildUser->m_lSid = iGuildId;
//	strncpy(pGuildUser->m_strUserId, m_strUserID, nLength);

//	pGuild->m_arUser.Add(pGuildUser);
	pGuild->AddUser(m_strUserID, iGuildId);

	g_arGuildData[iGuildId] = pGuild;

	ReleaseGuild();

	if( m_dwDN <= GUILD_MAKE_DN ) m_dwDN = 0;
	else m_dwDN -= GUILD_MAKE_DN;		// ▒ц╡х ╝│╕│ └┌▒▌╕ж ╗л┤┘.

	m_bGuildMaster = TRUE;
	m_dwGuild = iGuildId;

	nLength = 0;
	nLength = strlen(szGuildName);
	if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return; 
	strncpy(m_strGuildName, szGuildName, nLength);
	bRes = FALSE;

go_result:
	//////////////////////////////PACKET///////////////////////////////////////
	TempBuf.Add(GUILD_OPEN_RESULT);

	if(bRes)
	{
		TempBuf.Add((BYTE)0x00);		// ╜╟╞╨
		TempBuf.Add(error_code);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	TempBuf.Add((BYTE)0x01);		// ╝║░°
	TempBuf.Add((int)iGuildId);
	TempBuf.AddString(m_strGuildName);

	Send(TempBuf, TempBuf.GetLength());

	SendMoneyChanged();
	SendMyGuildInfo();//(TO_INSIGHT, INFO_MODIFY);
}

void USER::NewGuildWithThread(TCHAR *pBuf)
{
	int index = 0;
	int nLength = 0;
	TCHAR szGuildName[255];

	nLength = GetVarString(sizeof(szGuildName), szGuildName, pBuf, index);
	if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return; 

	int Datalength;
	BYTE *pData;
	SQLDATAPACKET *pSDP;
	pSDP = new SQLDATAPACKET;
	pSDP->code = GUILD_OPEN_REQ;
	Datalength = index;
	pSDP->dcount = Datalength;
	pSDP->UID = m_uid;
	pData = new BYTE[Datalength+1];
	memset(pData, 0, Datalength+1);
	memcpy(pData, pBuf, Datalength);
	pSDP->pData = pData;

	EnterCriticalSection( &m_CS_SqlData );
	RecvSqlData.AddTail(pSDP);
	nSqlDataCount = RecvSqlData.GetCount();
	LeaveCriticalSection( &m_CS_SqlData );
}

////////////////////////////////////////////////////////////////////////////////
//	╗ї╖╬┐ю ▒ц╡х╕ж ╕╕╡ч┤┘.	
//
BOOL USER::InsertGuild(CGuild *pGuild)
{
	if(pGuild == NULL) return FALSE;
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		

	::ZeroMemory(szSQL, sizeof(szSQL));

	int index = 0;

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call INSERT_GUILD (%d, \'%s\', \'%s\')}"), pGuild->m_lSid, pGuild->m_strGuildName, m_strUserID); 

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode != SQL_SUCCESS)
		return FALSE;

	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}
	
	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

////////////////////////////////////////////////////////////////////////////////
//	┼╫└╠║э┐б ▒ц╡х ░б└╘└╗ ╝┬╞├╟╤┤┘.	
//
BOOL USER::InsertGuildUser(int guildID, TCHAR *strUserID)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[2000];		

	::ZeroMemory(szSQL, sizeof(szSQL));

	int index = 0;

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call INSERT_GUILD_USER (%d, \'%s\')}"), guildID, strUserID); 

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}
	else
	{
		//if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
//		BREAKPOINT();

//		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х┐б ╡ю╖╧╡╚ ╣о╛ч└╗ ╛ў╡е└╠╞о╟╤┤┘.
//
BOOL USER::UpdateGuildMark(TCHAR *pMark, CGuild *pGuild)
{
	if(pGuild == NULL) return FALSE;
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strMark[450];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strMark, sizeof(strMark));

	int index = 0;

	SDWORD sMarkLen		= sizeof(strMark);

	::CopyMemory(strMark, pMark, GUILD_MARK_SIZE);

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_GUILD_MARK (\'%s\',%d, ?)}"), pGuild->m_strGuildName, pGuild->m_sVersion ); 

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strMark), 0, (TCHAR*)strMark, 0, &sMarkLen );

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}
	else
	{
		//if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
//		BREAKPOINT();

//		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х└п└·┼╫└╠║э┐б╝н ╟╪┤ч └п└· ╡е└╠┼═╕ж ╗ш┴ж╟╤┤┘.
//
BOOL USER::DeleteGuildUser(TCHAR *strUserID)
{
	if ( strUserID == NULL ) return FALSE;
//╜т╛Ўt_strUserID ┤э╬є
	if(strlen(strUserID)<=0)
		return FALSE;

	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
//	char			t_strUserID[20];//└╧┤·┬ы╔ш╓├
	char			t_strUserID[CHAR_NAME_LENGTH+1];

	::ZeroMemory(szSQL, sizeof(szSQL));

	strcpy( t_strUserID, strUserID );

	int index = 0;

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call DELETE_GUILD_USER (\'%s\')}"), t_strUserID ); 

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}
	else
	{
		//if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
//		BREAKPOINT();
//		g_DBNew[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

BOOL USER::DeleteGuildUserWithThread(TCHAR *strUserID)
{
	if ( strUserID == NULL ) return FALSE;

	int nLen = strlen(strUserID);
	if(nLen <= 0 || nLen > CHAR_NAME_LENGTH) return FALSE;

	int Datalength;
	BYTE *pData;
	SQLDATAPACKET *pSDP;
	pSDP = new SQLDATAPACKET;
	pSDP->code = DEL_GUILD_CHAR_REQ;
	Datalength = strlen(strUserID);
	pSDP->dcount = Datalength;
	pSDP->UID = m_uid;
	pData = new BYTE[Datalength+1];
	memset(pData, 0, Datalength+1);
	memcpy(pData, strUserID, Datalength);
	pSDP->pData = pData;

	EnterCriticalSection( &m_CS_SqlData );
	RecvSqlData.AddTail(pSDP);
	nSqlDataCount = RecvSqlData.GetCount();
	LeaveCriticalSection( &m_CS_SqlData );

	return TRUE;
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ╕╢┼й╕ж ░╗╜┼╟╤┤┘.
//
void USER::GuildMarkAddReq(TCHAR *pBuf)
{
	if ( pBuf == NULL ) return;

	CBufferEx TempBuf;
	TCHAR GuildMark[GUILD_MARK_SIZE+1];

	BOOL bRes = TRUE;
	BYTE error_code = 0;

	CGuild *pGuild = NULL;

	if(!m_bGuildMaster) return; // { error_code = ERR_1; goto go_result; }// ▒ц╡х┬п└╠ ╛╞┤╧╕щ │к░и

	::ZeroMemory(GuildMark, sizeof(GuildMark));

	pGuild = GetGuild(m_dwGuild);

	if(!pGuild) { error_code = ERR_2; goto go_result; }		// ╟╪┤ч ▒ц╡х░б ╛°└╕╕щ │к░и..

	if(strcmp(pGuild->m_strMasterName, m_strUserID) != 0) { error_code = ERR_1; goto go_result; }// ▒ц╡х┬п└╠ ╞▓╕о╕щ │к░и...

	::CopyMemory(GuildMark, pBuf, GUILD_MARK_SIZE);
	
	// alisia
	g_pMainDlg->BridgeServerGuildMarkReq( m_uid, m_strUserID, (int)m_dwGuild, GuildMark );
	ReleaseGuild();
	return;




	if(pGuild->m_sVersion >= 0) CheckMaxValue((short &)pGuild->m_sVersion, (short)1);
	else pGuild->m_sVersion = 0;

	if(!UpdateGuildMark(GuildMark, pGuild))	// DB┐б ╛▓▒т ╜╟╞╨╕щ │к░и..
	{
		pGuild->m_sVersion = -1;
		error_code = 255;
		goto go_result; 
	}
	
//	pGuild->m_sVersion += 1;
	m_sGuildVersion = pGuild->m_sVersion;	// ▒ц╡х ╣о╛ч ╣Ў┴п

	::CopyMemory(pGuild->m_strMark, GuildMark, GUILD_MARK_SIZE);

	bRes = FALSE;

go_result:
	ReleaseGuild();				// ╟╪┴ж...

	TempBuf.Add(GUILD_MARK_ADD_RESULT);

	if(bRes)
	{
		TempBuf.Add((BYTE)0x00);
		TempBuf.Add(error_code);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}
	
	TempBuf.Add((BYTE)0x01);				// ╗ї╖╬┐ю ╣о╛ч└╠ ╡ю╖╧╡╟╛·└╕╕щ ┴Ў▒▌ ╡ю╖╧╟╤ ▒ц╡х └п└· ╕Ё╡╬┐б░╘ ║╕│╗╛▀ ╟╧│к
	TempBuf.Add(pGuild->m_sVersion);		// ╛╞┤╘ ╣Ў┴п╕╕ ░б╕г├─┴р╝н ╞▓╕о╕щ ░ш╝╙ ║╕│╗╛▀ ╟╧│к...
											// ┴Ў▒▌└║ ╣Ў┴п╕╕ ║╕│╗╝н...			
	Send(TempBuf, TempBuf.GetLength());

	SendMyGuildInfo();
											// ╟╪┤ч ▒ц╡х╟╧┐ь╜║ ╣о╛ч└╗ ║п░ц╟╤┤┘.		
	for(int i = 0; i < g_arGuildHouse.GetSize(); i++)
	{
		if(pGuild->m_lSid == g_arGuildHouse[i]->iGuild)
		{
			int modify_index = 0;
			char modify_send[2048];	

			CNpc *pNpc = NULL;
			pNpc = GetNpc(g_arGuildHouse[i]->iMarkNpc);
			if(!pNpc) return;

			modify_index = 0;
			pNpc->m_sMaxHP = m_sGuildVersion;
			::ZeroMemory(modify_send, sizeof(modify_send));
			pNpc->FillNpcInfo(modify_send, modify_index, INFO_MODIFY);
			pNpc->SendInsight(m_pCom, modify_send, modify_index);
		
			break;
		}
	}

//	SendMyInfo(TO_INSIGHT, INFO_MODIFY);
}

void USER::GuildMarkAddReqWithThread(TCHAR *pBuf)
{
	int Datalength;
	BYTE *pData;
	SQLDATAPACKET *pSDP;
	pSDP = new SQLDATAPACKET;
	pSDP->code = GUILD_MARK_ADD_REQ;
	Datalength = GUILD_MARK_SIZE;
	pSDP->dcount = Datalength;
	pSDP->UID = m_uid;
	pData = new BYTE[Datalength+1];
	memset(pData, 0, Datalength+1);
	memcpy(pData, pBuf, Datalength);
	pSDP->pData = pData;

	EnterCriticalSection( &m_CS_SqlData );
	RecvSqlData.AddTail(pSDP);
	nSqlDataCount = RecvSqlData.GetCount();
	LeaveCriticalSection( &m_CS_SqlData );
}

////////////////////////////////////////////////////////////////////////////////
//	┼м╢є└╠╛Ё╞о┐б ╗ї╖╬┐ю ▒ц╡х░б ├▀░б╡╟╛·░┼│к ░╗╜┼╗ч╟╫└╠ └╓┤┬┴Ў ╛╦╖┴┴╪┤┘. 
//
void USER::GuildAddReq(TCHAR *pBuf)
{	
	CBufferEx TempBuf; 

	int index = 0;
	BOOL bRes = TRUE;
	BYTE error_code = 0;

	int iGuildID = GetInt(pBuf, index);

	CGuild *pGuild = NULL;

	if(iGuildID < 0) return;
	TempBuf.Add(GUILD_ADD_RESULT);

	pGuild = GetGuild(iGuildID);

	if(!pGuild) { error_code = ERR_1; goto go_result; }		// ╟╪┤ч ▒ц╡х░б ╛°└╕╕щ │к░и..

	if(!pGuild->m_strMark) { error_code = 255; goto go_result; }

	TempBuf.Add((BYTE)0x01);
	TempBuf.Add((int)pGuild->m_lSid);
	TempBuf.AddString(pGuild->m_strGuildName);
	TempBuf.Add(pGuild->m_sVersion);
	TempBuf.AddData((TCHAR*)pGuild->m_strMark, GUILD_MARK_SIZE);
	bRes = FALSE;

go_result:
	ReleaseGuild();				// ╟╪┴ж...

	if(bRes)
	{
		TempBuf.Add((BYTE)0x00);
		TempBuf.Add(error_code);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	Send(TempBuf, TempBuf.GetLength());
}

////////////////////////////////////////////////////////////////////////////////
//	Memory DB ╕ж ├╩▒т╚н ╟╤┤┘.
//
BOOL USER::InitMemoryDB(int uid)
{

	m_pSharedMemory = g_arSharedMemory[uid];
	m_pMD = (CMemUser*) m_pSharedMemory->m_lpData;

	m_pMD->m_uid = uid;
	m_pMD->m_UB.m_uid = uid;
	m_pMD->m_AB.m_uid = uid;
	m_pMD->m_iMyServer = m_iMyServer;

	::ZeroMemory(m_pMD->m_strAccount, sizeof(m_pMD->m_strAccount));
	strncpy(m_pMD->m_strAccount, m_strAccount, strlen(m_strAccount));

	::ZeroMemory(m_pMD->m_strUserID, sizeof(m_pMD->m_strUserID));
	strncpy(m_pMD->m_strUserID, m_strUserID, strlen(m_strUserID));

	::ZeroMemory(m_pMD->m_UB.m_strUserID, sizeof(m_pMD->m_UB.m_strUserID));
	strncpy(m_pMD->m_UB.m_strUserID, m_strUserID, strlen(m_strUserID));

	::ZeroMemory(m_pMD->m_AB.m_strAccount, sizeof(m_pMD->m_AB.m_strAccount));
	strncpy(m_pMD->m_AB.m_strAccount, m_strAccount, strlen(m_strAccount));

	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////////////////////
//	╕▐╕Ё╕о DB└╟ │╗┐ы└╗ DB╖╬ ┐┼▒ф┤┘.
//
void USER::UpdateMem2DB(CMemUser *pMD)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strFace[10], strSkill[_SKILL_DB], strItem[_ITEM_DB], strPsi[_PSI_DB], strTel[_TEL_DB];
	TCHAR			strQuickItem[_QUICKITEM_DB];
	TCHAR			strHaveEvent[_EVENT_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));

	::ZeroMemory(strFace, sizeof(strFace));
	::ZeroMemory(strSkill, sizeof(strSkill));
	::ZeroMemory(strItem, sizeof(strItem));
	::ZeroMemory(strPsi, sizeof(strPsi));
	::ZeroMemory(strTel, sizeof(strTel));
	::ZeroMemory(strHaveEvent, sizeof(strHaveEvent));
	
    ::ZeroMemory(strQuickItem, sizeof(strQuickItem));

	::CopyMemory(strFace, pMD->m_strFace, sizeof(strFace));
	::CopyMemory(strSkill, pMD->m_strSkill, sizeof(strSkill));
	::CopyMemory(strItem, pMD->m_strItem, sizeof(strItem));
	::CopyMemory(strPsi, pMD->m_strPsi, sizeof(strPsi));
	::CopyMemory(strTel, pMD->m_strTel, sizeof(strTel));
	::CopyMemory(strHaveEvent, pMD->m_strHaveEvent, sizeof(strHaveEvent));

	::CopyMemory(strQuickItem, pMD->m_strQuickItem, sizeof(strQuickItem));
	

	SDWORD sFaceLen		= sizeof(strFace);
	SDWORD sSkillLen	= sizeof(strSkill);
	SDWORD sItemLen		= sizeof(strItem);
	SDWORD sPsiLen		= sizeof(strPsi);
	SDWORD sQuickLen	= sizeof(strQuickItem);
	SDWORD sEventLen	= sizeof(strHaveEvent);
	SDWORD sTelLen		= sizeof(strTel);
	
         /////////////////////╝╙╫╓╢╬
    _sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_USER_DATA (\'%s\',%d,%d,%d,%d,%d,%d,%d,%d,\
		?, %d,%d,%d, %d, %d,%d,  %d,%d,  %d, \
		%d,%d,%d,%d,%d,%d, %d,%d,%d,%d, \
		?,?,?,?, %d,%d,\
		%d, %d, ?, %d, %d,\
		?, %d,\
		%d, %d, %d, %d, %d, %d,%d, %d, %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,\
		\'%s\', \
		%d,%d,		%d,%d,		%d,%d)}"), 
		pMD->m_strUserID, pMD->m_sSTR, pMD->m_sCON,	pMD->m_sDEX, pMD->m_sVOL, pMD->m_sWIS, pMD->m_iSkin, pMD->m_iHair, pMD->m_sGender,	
		pMD->m_curz, pMD->m_curx, pMD->m_cury, pMD->m_dwBuddy, pMD->m_dwGuild, pMD->m_dwExp, pMD->m_sPA, pMD->m_sSkillPoint, pMD->m_dwXP,
		pMD->m_sMaxHP, pMD->m_sHP, pMD->m_sMaxPP, pMD->m_sPP, pMD->m_sMaxSP, pMD->m_sSP, pMD->m_dwDN, pMD->m_sCityRank, pMD->m_sLevel, pMD->m_byClass,

		pMD->m_tAbnormalKind, pMD->m_dwAbnormalTime, 

		pMD->m_bLive, pMD->m_iCityValue, pMD->m_sKillCount, pMD->m_dwSaveTime,
		pMD->m_dwSaintTime, 
		pMD->m_dwHiExpTime, pMD->m_dwHtExpTime, pMD->m_dwMagicFindTime, pMD->m_dwMagicFtTime, pMD->m_dwNoChatTime,pMD->m_dwZF,pMD->m_dwXL, pMD->m_dwCloseTime, pMD->m_dwAutoMoney,pMD->m_dwPD,pMD->m_dwLingQu,pMD->m_dwShaGuai, pMD->m_dwGuarDianTianShi, pMD->m_dwShopPingDN,pMD->m_dwVIPTime,pMD->m_dwZaiXianTime,pMD->m_dwBFindTime,pMD->m_dwHXTime,pMD->m_dwSGTime,pMD->m_dwXYTime,pMD->m_dwZFTime,
		pMD->m_strLoveName, //--yskang 0.1 
		pMD->m_tPsiOneKind, pMD->m_dwPsiOneTime,		pMD->m_tPsiTwoKind, pMD->m_dwPsiTwoTime,		pMD->m_tPsiThreeKind, pMD->m_dwPsiThreeTime); 

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strFace),	0, (TCHAR*)strFace,		0, &sFaceLen );

		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strSkill),	0, (TCHAR*)strSkill,	0, &sSkillLen );
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strItem),	0, (TCHAR*)strItem,		0, &sItemLen );
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strPsi),		0, (TCHAR*)strPsi,		0, &sPsiLen );
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strQuickItem),	0, (TCHAR*)strQuickItem,	0, &sQuickLen );

		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strHaveEvent),	0, (TCHAR*)strHaveEvent,	0, &sEventLen );
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strTel),	0, (TCHAR*)strTel,	0, &sTelLen );
		
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}
	else
	{
		//if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
//		BREAKPOINT();

//		g_DB[m_iModSid].ReleaseDB(db_index);
		return;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);
}

void USER::UpdateBankMem2DB(CMemUser *pMD)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strBankItem[_BANK_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strBankItem, sizeof(strBankItem));
	
	::CopyMemory(strBankItem, pMD->m_UB.m_UserBankItem, sizeof(strBankItem));
	
	SDWORD sBankItemLen	= sizeof(strBankItem);
	
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_BANK_DATA_ONLY (\'%s\',%d, ?)}"), pMD->m_UB.m_strUserID, pMD->m_UB.m_dwBankDN);

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
//		TRACE("Fail To Update User Bank Data Only!!\n");

//		g_DB[m_iModSid].ReleaseDB(db_index);
		return;
	}

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter(hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strBankItem), 0, (TCHAR*)strBankItem, 0, &sBankItemLen);

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			BREAKPOINT();

			g_DB[m_iModSid].ReleaseDB(db_index);
			return;
		}
	}	

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return;

	return;
}

void USER::UpdateAccountBankMem2DB(CMemUser *pMD)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];
	TCHAR			strBankItem[_ACCOUNT_BANK_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strBankItem, sizeof(strBankItem));
	
	::CopyMemory(strBankItem, pMD->m_AB.m_AccountBankItem, sizeof(strBankItem));
	
	SDWORD sBankItemLen	= sizeof(strBankItem);
	
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_ACCOUNT_BANK_DATA_ONLY (\'%s\',%d, ?)}")/*, pMD->m_iMyServer*/, pMD->m_AB.m_strAccount, pMD->m_AB.m_dwBankDN);

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		return;
	}

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter(hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strBankItem), 0, (TCHAR*)strBankItem, 0, &sBankItemLen);

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			BREAKPOINT();

			g_DB[m_iModSid].ReleaseDB(db_index);
			return;
		}
	}	

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return;

	return;
}

////////////////////////////////////////////////////////////////////////////////
//	Memory DB┐б ╟Ў└ч ╕Ё╡ч └п└· Data ╕ж ╛┤┤┘.
//
BOOL USER::UpdateMemUserAll(BOOL bBank)
{
	TCHAR strBankItem[_BANK_DB];
	TCHAR strAccountBankItem[_ACCOUNT_BANK_DB];

	if(m_pSharedMemory == NULL) return FALSE;
	if(m_pSharedMemory->m_hMapping == NULL) return FALSE;
	if(m_pMD == NULL) return FALSE;
	if(m_pMD->m_uid == -1) return FALSE;

	if(m_pMD->m_uid != m_uid || _stricmp(m_strUserID, m_pMD->m_strUserID) != 0) return FALSE;

	DWORD curTime = ConvertCurTimeToSaveTime();
	if(m_pMD->m_dwSaveTime > curTime) return FALSE;

	if(bBank)
	{
		if(m_pMD->m_uid != m_pMD->m_UB.m_uid) return FALSE;
		if(_stricmp(m_strUserID, m_pMD->m_UB.m_strUserID) != 0) return FALSE;
		if(_stricmp(m_strAccount, m_pMD->m_AB.m_strAccount) != 0) return FALSE;

		m_pMD->m_UB.m_dwBankDN = 0;
		::ZeroMemory(strBankItem, sizeof(strBankItem));
		UserBankItemToStr(strBankItem);
		memcpy(m_pMD->m_UB.m_UserBankItem, strBankItem, sizeof(strBankItem));
		m_pMD->m_UB.m_dwBankDN = m_dwBankDN;

		m_pMD->m_AB.m_dwBankDN = 0;
		::ZeroMemory(strAccountBankItem, sizeof(strAccountBankItem));
		UserAccountBankItemToStr( strAccountBankItem );
		memcpy(m_pMD->m_AB.m_AccountBankItem, strAccountBankItem, sizeof(strAccountBankItem));
		m_pMD->m_AB.m_dwBankDN = m_dwAccountBankDN;
	}

	m_pMD->m_dwSaveTime = curTime;			// ╟Ў└ч ╣Ў┴п

	m_pMD->m_sSTR = m_sSTR;					// ╚√
	m_pMD->m_sCON = m_sCON;					// ░╟░н
	m_pMD->m_sDEX = m_sDEX;					// ╣╬├╕╝║
	m_pMD->m_sVOL = m_sVOL;					// └╟┴Ў
	m_pMD->m_sWIS = m_sWIS;					// ┴Ў╟¤
	
	m_pMD->m_iSkin = m_iSkin;				// ╟╟║╬╗Ў
	m_pMD->m_iHair = m_iHair;				// ╕╙╕о╗Ў
	m_pMD->m_sGender = m_sGender;			// ╝║║░
//	_tcscpy(m_pMD->m_strFace, m_strFace);	// ╛є▒╝╕Ё╛ч
	memcpy(m_pMD->m_strFace, m_strFace, sizeof(m_strFace));	// ╛є▒╝╕Ё╛ч

	m_pMD->m_curx = m_curx;					// ╟Ў└ч X ┴┬╟е
	m_pMD->m_cury = m_cury;					// ╟Ў└ч Y ┴┬╟е
	m_pMD->m_curz = m_curz;					// ╟Ў└ч ┴╕

	m_pMD->m_dwBuddy = m_dwBuddy;			// ╣Ў╡Ё╣°╚г
	m_pMD->m_dwGuild = m_dwGuild;			// ▒ц╡х╣°╚г

	m_pMD->m_dwExp = m_dwExp;				// ╖╣║з░ц╟ш─б

	m_pMD->m_sPA = m_sPA;					// PA Point
	m_pMD->m_sSkillPoint = m_sSkillPoint;	// Skill Point
	
	m_pMD->m_dwXP = m_dwXP;					// X Point

	m_pMD->m_sMaxHP	= m_sMaxHP;				// ├╓┤ы HP
	m_pMD->m_sHP	= m_sHP;				// ╟Ў└ч HP
	m_pMD->m_sMaxPP = m_sMaxPP;				// ├╓┤ы PP
	m_pMD->m_sPP	= m_sPP;				// ╟Ў└ч PP
	m_pMD->m_sMaxSP = m_sMaxSP;				// ├╓┤ы SP
	m_pMD->m_sSP	= m_sSP;				// ╟Ў└ч SP

	m_pMD->m_dwDN = m_dwDN;					// ╝╥┴Ў▒▌

	m_pMD->m_sCityRank = m_sCityRank;		// ╜├╣╬ ╡ю▒▐
	m_pMD->m_sKillCount = m_sKillCount;		// ╟Ў└ч PK╟╤ ╚╜╝Ў

	m_pMD->m_sLevel = m_sLevel;				// ░ш┐н╖╣║з
	m_pMD->m_byClass = m_byClass;			// ┼м╖б╜║
	m_pMD->m_dwZaiXianTime = m_dwZaiXianTime;	


	TCHAR strSkill[_SKILL_DB], strItem[_ITEM_DB], strPsi[_PSI_DB], strHaveEvent[_EVENT_DB], strTel[_TEL_DB];

	::ZeroMemory(strSkill, sizeof(strSkill));
	::ZeroMemory(strItem, sizeof(strItem));
	::ZeroMemory(strPsi, sizeof(strPsi));
	::ZeroMemory(strTel, sizeof(strTel));
	::ZeroMemory(strHaveEvent, sizeof(strHaveEvent));

	UserSkillToDBStr(strSkill);
	UserItemToStr(strItem);
	UserPsiToStr(strPsi);
	UserTelToStr(strTel);
	UserHaveEventDataToStr(strHaveEvent);
/*
	strcpy(m_pMD->m_strSkill, strSkill);	// User Skill DB
	strcpy(m_pMD->m_strItem, strItem);		// User Item DB
	strcpy(m_pMD->m_strPsi, strPsi);		// User Psionic DB
	strcpy(m_pMD->m_strHaveEvent, strHaveEvent);// User Event DB
*/
	memcpy(m_pMD->m_strSkill, strSkill, sizeof(strSkill));
	memcpy(m_pMD->m_strItem, strItem, sizeof(strItem));
	memcpy(m_pMD->m_strPsi, strPsi, sizeof(strPsi));
	memcpy(m_pMD->m_strTel, strTel, sizeof(strTel));
	memcpy(m_pMD->m_strHaveEvent, strHaveEvent, sizeof(strHaveEvent));

	::CopyMemory(m_pMD->m_sChangeClass, m_sChangeClass, sizeof(m_sChangeClass));	// └№┴ў╜├ ┼м╖б╜║╖╣║з └·└х
	
	// ╗є┼┬└╠╗є ┴д║╕ └·└х
	m_pMD->m_tAbnormalKind = m_tAbnormalKind;
	m_pMD->m_dwAbnormalTime = m_dwAbnormalTime;

	m_pMD->m_tIsOP = m_tIsOP;				// ┐ю┐╡└┌└╬┴Ў ╞╟┤▄
											// 0: Normal User
											// 1: Game Operator
											// 2: Server Operator

	m_pMD->m_bLive = m_bLive;				// ┴╫╛·┤╧? ╗ь╛╥┤╧?

	m_pMD->m_sTempSTR = m_sTempSTR;			// ╚√
	m_pMD->m_sTempCON = m_sTempCON;			// ░╟░н
	m_pMD->m_sTempDEX = m_sTempDEX;			// ╣╬├╕╝║
	m_pMD->m_sTempVOL = m_sTempVOL;			// └╟┴Ў
	m_pMD->m_sTempWIS = m_sTempWIS;			// ┴Ў╟¤

	m_pMD->m_iCityValue = m_iCityValue;		// ╟Ў└ч ┤й└√ ╝║╟т░к

	m_pMD->m_dwSaintTime		= m_dwSaintTime;
	
	m_pMD->m_dwHiExpTime		= m_dwHiExpTime;
	m_pMD->m_dwHtExpTime		= m_dwHtExpTime;
	m_pMD->m_dwMagicFindTime	= m_dwMagicFindTime;
	m_pMD->m_dwMagicFtTime		= m_dwMagicFtTime;
	m_pMD->m_dwNoChatTime		= m_dwNoChatTime;
	m_pMD->m_dwZF		= m_dwZF;
	m_pMD->m_dwXL		= m_dwXL;
    m_pMD->m_dwCloseTime		= m_dwCloseTime;
	m_pMD->m_dwAutoMoney		= m_dwAutoMoney;
	m_pMD->m_dwPD		        = m_dwPD;
	m_pMD->m_dwLingQu   		= m_dwLingQu;
	m_pMD->m_dwShaGuai   		= m_dwShaGuai;
	m_pMD->m_dwGuarDianTianShi	= m_dwGuarDianTianShi;
	m_pMD->m_dwShopPingDN		= m_dwShopPingDN;
	m_pMD->m_dwVIPTime			= m_dwVIPTime;//vip╙├╗з
	m_pMD->m_dwZaiXianTime		= m_dwZaiXianTime;
	m_pMD->m_dwBFindTime		= m_dwBFindTime;
	m_pMD->m_dwHXTime		    = m_dwHXTime;
	m_pMD->m_dwSGTime		    = m_dwSGTime;
	m_pMD->m_dwXYTime		    = m_dwXYTime;
	m_pMD->m_dwZFTime		    = m_dwZFTime;
	
	m_pMD->m_tPsiOneKind = m_pMD->m_tPsiTwoKind = m_pMD->m_tPsiThreeKind = 0;
	m_pMD->m_dwPsiOneTime = m_pMD->m_dwPsiTwoTime = m_pMD->m_dwPsiThreeTime = 0;

	// Psionic One
	if(m_dwHasteTime != 0) 
	{
		m_pMD->m_tPsiOneKind = PSIONIC_HASTE;
		m_pMD->m_dwPsiOneTime = m_dwHasteTime;
	}
	if(m_dwShieldTime != 0) 
	{
		m_pMD->m_tPsiOneKind = PSIONIC_SHIELD;
		m_pMD->m_dwPsiOneTime = m_dwShieldTime;
	}
	if(m_dwDexUpTime != 0) 
	{
		m_pMD->m_tPsiOneKind = PSIONIC_DEXUP;
		m_pMD->m_dwPsiOneTime = m_dwDexUpTime;
	}
	if(m_dwMaxHPUpTime != 0) 
	{
		m_pMD->m_tPsiOneKind = PSIONIC_HPUP;
		m_pMD->m_dwPsiOneTime = m_dwMaxHPUpTime;
	}
	if(m_dwFastRunTime != 0) 
	{
		m_pMD->m_tPsiOneKind = PSIONIC_FAST_RUN;
		m_pMD->m_dwPsiOneTime = m_dwFastRunTime;
	}
	if(m_dwMindShockTime != 0) 
	{
		m_pMD->m_tPsiOneKind = PSIONIC_MIND_SHOCK;
		m_pMD->m_dwPsiOneTime = m_dwMindShockTime;
	}
	if(m_dwPsiShieldTime != 0) 
	{
		m_pMD->m_tPsiOneKind = PSIONIC_PSI_SHIELD;
		m_pMD->m_dwPsiOneTime = m_dwPsiShieldTime;
	}
	if(m_dwBigShieldTime != 0) 
	{
		m_pMD->m_tPsiOneKind = 30;
		m_pMD->m_dwPsiOneTime = m_dwBigShieldTime;
	}
	if(m_dwPiercingShieldTime != 0) 
	{
		m_pMD->m_tPsiOneKind = PSIONIC_PIERCING_SHIELD;
		m_pMD->m_dwPsiOneTime = m_dwPiercingShieldTime;
	}

	// Psionic Two
	if(m_dwAdamantineTime != 0) 
	{
		m_pMD->m_tPsiTwoKind = PSIONIC_ADAMANTINE;
		m_pMD->m_dwPsiTwoTime = m_dwAdamantineTime;
	}
	if(m_dwMightyWeaponTime != 0) 
	{
		m_pMD->m_tPsiTwoKind = PSIONIC_MIGHTYWEAPON;
		m_pMD->m_dwPsiTwoTime = m_dwMightyWeaponTime;
	}
	if(m_dwBerserkerTime != 0) 
	{
		m_pMD->m_tPsiTwoKind = PSIONIC_BERSERKER;
		m_pMD->m_dwPsiTwoTime = m_dwBerserkerTime;
	}

	// Psionic Three
	if(m_dwMindGuardTime != 0) 
	{
		m_pMD->m_tPsiThreeKind = PSIONIC_MIND_GUARD;
		m_pMD->m_dwPsiThreeTime = m_dwMindGuardTime;
	}
	//m_pMD->m_dwBSTime=m_dwBSTime;
	m_pMD->m_dwDNMoney = m_dwDNMoney;
	m_pMD->m_dwShTsTime = m_dwShTsTime;
	m_pMD->m_isDoubleExp = m_isDoubleExp;
	m_pMD->m_isDoubleBAOLV = m_isDoubleBAOLV;
	return TRUE;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// DB┐б └║╟р╡е└╠┼═, Memory DB┐б └п└· ╡е└╠┼╕╕ж └·└х╟╤┤┘
//
BOOL USER::UpdateMemUserBank()
{
//	if(!UpdateBankDataOnly()) return FALSE;
	return UpdateMemUserAll(TRUE);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//	DB┐б └║╟р┐б ░№╖├╡╚ ╡е└╠┼═╕ж └·└х╟╤┤┘.
//
BOOL USER::UpdateBankDataOnly()
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strBankItem[_BANK_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strBankItem, sizeof(strBankItem));
	
	UserBankItemToStr(strBankItem);
	
	SDWORD sBankItemLen	= sizeof(strBankItem);
	
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_BANK_DATA_ONLY (\'%s\',%d, ?)}"), m_strUserID, m_dwBankDN);

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
//		TRACE("Fail To Update User Bank Data Only!!\n");

//		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter(hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strBankItem), 0, (TCHAR*)strBankItem, 0, &sBankItemLen);

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			BREAKPOINT();

			g_DB[m_iModSid].ReleaseDB(db_index);
			return FALSE;
		}
	}	

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//	Restart ╡ю└╗ ╟╥ ╢з ┤┘╜├ ╕▐╕Ё╕о ╡Ё║ё╕ж ├╩▒т╚н ╟╤┤┘.
//
void USER::ReInitMemoryDB()
{
	if(m_pMD != NULL) 
	{
		m_pMD->m_uid = -1;
		m_pMD->m_sSTR = 0;
		m_pMD->m_UB.m_uid = -1;
		m_pMD->m_AB.m_uid = -1;
		m_pMD->m_dwSaveTime = 0;

		::ZeroMemory(m_pMD->m_strUserID, sizeof(m_pMD->m_strUserID));
		::ZeroMemory(m_pMD->m_strAccount, sizeof(m_pMD->m_strUserID));
	}
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ┬п░· ╝н╖╬ ╕╢┴╓ ║╗╗є┼┬┐б╝н ░б└╘╟╤┤┘. 
//
void USER::GuildInvite(int uid)
{	
//	if ( pBuf == NULL ) return;

	int index = 0;
	BYTE error_code = 0;

	int nLen = 0;

//	int uid = 0;
	int iCount = 0;
	USER* pUser = NULL;
	CGuild *pGuild = NULL;
	CGuildUser *pGuildUser = NULL;

	BOOL bRes = TRUE;

	if(!m_bGuildMaster && !m_bRepresentationGuild) { error_code = ERR_10; goto go_result; }	// ▒ц╡х ▒╟╟╤└╠ ╛°┤┘.

//	uid = GetInt(pBuf, index);

	pUser = GetUser(uid - USER_BAND);

	if(!pUser) { error_code = ERR_3; goto go_result; }				// └п└·░б ╛°┤┘.

	if(IsThereUser(pUser) == FALSE || strcmp(m_strUserID, pUser->m_strUserID) == 0)
	{
		SendSystemMsg( IDS_USER_SEE_EACH_OTHER, SYSTEM_NORMAL, TO_ME);
		return;
	}

	nLen = strlen(pUser->m_strUserID);
	if(nLen <= 0) return;

	if(pUser->m_dwGuild > 0)  { error_code = ERR_9; goto go_result; }// └╠╣╠ ┤┘╕е ▒ц╡х┐б ░б└╘╟╤ └п└· 
	
	if(CheckInGuildWarring()) return;								// ▒ц└№┴▀┐б┤┬ ╟у╢Ї┴A╝Ў╛°┤┘.

	pGuild = GetGuild(m_dwGuild);

	if(!pGuild) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_7;			// ╟╪┤ч ▒ц╡х░б ╛°┤┘.
		goto go_result;				
	}
									// ┐└╖∙...
//	if(strcmp(pGuild->m_strMasterName, m_strUserID) != 0) 
	if( !pGuild->IsMasterPower(m_strUserID) )
	{
		ReleaseGuild();				// ╟╪┴ж...

		m_bGuildMaster = FALSE;
		m_bRepresentationGuild = FALSE;
		error_code = ERR_10;		// 
		goto go_result;
	}

	index = -1;
	index = pGuild->GetUser(pUser->m_strUserID);
	if(index >= 0) 
	{ 
		ReleaseGuild();				// ╟╪┴ж...

		pUser->m_dwGuild = m_dwGuild;			// ▒ц╡х ╣°╚г╕ж ┤┘╜├ ╝┬╞├╟╤┤┘.
		SendGuildInfo(pUser);

		error_code = ERR_9; 
		goto go_result; 
	}// └╠╣╠ ┤┘╕е ▒ц╡х┐б ░б└╘╟╤ └п└·	
/*
	iCount = pGuild->m_arUser.GetSize();
	if(iCount <= 0 || iCount >= MAX_GUILD_USER) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_11;			// 
		goto go_result;
	}

	pGuildUser = new CGuildUser;	// ╕▐╕Ё╕о ╟╥┤ч ╜╟╞╨╕щ..
	if(!pGuildUser)
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = 255;			// 
		goto go_result;
	}
*/

	// alisia
	g_pMainDlg->BridgeServerGuildInviteReq( m_uid, pUser->m_uid, m_strUserID, pUser->m_strUserID, (int)m_dwGuild );
	ReleaseGuild();
	return;
	//




	if(!pGuild->AddUser(pUser->m_strUserID, pGuild->m_lSid)) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_11;			// 
		goto go_result;
	}

	if(!InsertGuildUser(pGuild->m_lSid, pUser->m_strUserID)) // ╟╪┤ч ▒ц╡х┐б ░б└╘└╗ ╝┬╞├
	{
		pGuild->RemoveUser(pUser->m_strUserID);
		
		ReleaseGuild();				// ╟╪┴ж...
		error_code = 255;			// 
		goto go_result;
	}

	pUser->m_dwGuild = pGuild->m_lSid;
	pUser->m_bGuildMaster = FALSE;
	pUser->m_sGuildVersion = pGuild->m_sVersion;
	pUser->m_bRepresentationGuild = FALSE;
	strcpy(pUser->m_strGuildName, pGuild->m_strGuildName);
	bRes = FALSE;

go_result:
	if(bRes)
	{
		CBufferEx TempBuf;
		TempBuf.Add(CHAT_RESULT);
		TempBuf.Add((BYTE)0x00);		//╜╟╞╨
		TempBuf.Add(error_code);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

//	pGuildUser = new CGuildUser;	
//	pGuildUser->m_lSid = 0;
//	::ZeroMemory(pGuildUser->m_strUserId, sizeof(pGuildUser->m_strUserId));

//	pGuildUser->m_lSid = m_dwGuild;	
//	strncpy(pGuildUser->m_strUserId, pUser->m_strUserID, nLen);

//	pGuild->m_arUser.Add(pGuildUser);

	ReleaseGuild();

	UpdateUserData();

	AddGuildUserInFortress(pUser);

	SendGuildInviteUser(pUser);			// ▒ц╡х ╕о╜║╞о╕ж ┴╓░э ╣▐▒т
	SendGuildInfo(pUser);				// ╜├╛▀ ╣№└з┐б ▒ц╡х┐б ░б└╘╟╤ ╗ч╢ў└╠ └╓└╕┤╧▒ё ╣о╛ч└╗ ║╕└╠╢є░э ╟╤┤┘...

//	SendSystemMsg( IDS_USER_ENTER_SUCCESS, SYSTEM_NORMAL, TO_ME);
//	pUser->SendSystemMsg( IDS_USER_ENTER_SUCCESS, SYSTEM_NORMAL, TO_ME);
}

void USER::GuildInviteWithThread(TCHAR *pBuf)
{	
//	uid = GetInt(pBuf, index);
	int Datalength;
	BYTE *pData;
	SQLDATAPACKET *pSDP;
	pSDP = new SQLDATAPACKET;
	pSDP->code = GUILD_INVITE_USER_REQ;			// ╗ї╖╬╕╕╡ч┤┘.
	Datalength = sizeof(int);
	pSDP->dcount = Datalength;
	pSDP->UID = m_uid;
	pData = new BYTE[Datalength+1];
	memset(pData, 0, Datalength+1);
	memcpy(pData, pBuf, Datalength);
	pSDP->pData = pData;

	EnterCriticalSection( &m_CS_SqlData );
	RecvSqlData.AddTail(pSDP);
	nSqlDataCount = RecvSqlData.GetCount();
	LeaveCriticalSection( &m_CS_SqlData );
}

////////////////////////////////////////////////////////////////////////////////
//	╟╪┤ч ▒ц╡х┐°╡щ┐б░╘ ╗ї╖╬└╠ ▒ц╡х┐°└╠╡╚ └п└·╕ж ╛╦╕░┤┘.
//
void USER::SendGuildInviteUser(USER *pUser)
{
	int i;
	int nLen = 0;	
	int nCount = -1;

	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
	if(m_dwGuild <= 0) return;

	USER *pGUser = NULL;

	CBufferEx TempBuf;

	CString strMsg = _T("");
	strMsg.Format( IDS_USER_NEW_MEMBER, pUser->m_strUserID);

	for(i = 0; i< MAX_USER; i++)
	{
		pGUser = m_pCom->GetUserUid(i);

		if(pGUser == NULL || pGUser->m_state != STATE_GAMESTARTED) continue;		

		if(m_dwGuild == pGUser->m_dwGuild)
		{
			pGUser->SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
	}
/*
//	SetGuildUserIndex(pUser);										// ▒ц╕╢░б ╕╒└· └√┐ы...

	for(i = 0; i < MAX_GUILD_USER; i++)								// └╠╖╕░╘ ╡√╖╬ ╕о╜║╞о╕ж ░№╕о╟╧┤┬░╟...
	{																	
		pUser->m_MyGuildUser[i].uid = -1;
		pUser->m_MyGuildUser[i].lUsed = 0;							// ╟╪┤ч └п└· ╕о╜║╞о╕ж ├╩▒т╚н╟╤┤┘.
		::ZeroMemory(pUser->m_MyGuildUser[i].GuildUser, sizeof(pUser->m_MyGuildUser[i].GuildUser));

		nLen = strlen(m_MyGuildUser[i].GuildUser);
																	// ░б└╘╟╤ └п└·┐б░╘ ▒ц╡х ╕о╜║╞о╕ж copy╟╪ ┴╪┤┘	
		if(nLen > 0 && nLen <= CHAR_NAME_LENGTH) strncpy(pUser->m_MyGuildUser[i].GuildUser, m_MyGuildUser[i].GuildUser, nLen);
		else continue;

		pGUser = GetUser(m_MyGuildUser[i].uid);

		if(!pGUser)													// └╠└№ uid╖╬ ├г└╗╝Ў ╛°┤┘╕щ ┤┘╜├ ╛╞└╠╡Ё╖╬ ░╦╗Ў	
		{
			pGUser = GetUser(m_MyGuildUser[i].GuildUser);
			if(!pGUser) 
			{ 
				pUser->m_MyGuildUser[i].uid = -1;
				m_MyGuildUser[i].uid = -1; 
				continue; 
			}
		}
		else if(strcmp(m_MyGuildUser[i].GuildUser, pGUser->m_strUserID) != 0)
		{															// uid░б ╝н╖╬ ┤┘╕г╕щ ┤┘╜├ ░╦╗Ў╟╪╝н uid╕ж ╝┬╞├	
			pGUser = GetUser(m_MyGuildUser[i].GuildUser);			// └╠╖╕░╘ ╟╤└╠└п┤┬ strUserID╖╬ ├г┤┬░═└╗ ╟╟╟╧▒т└з╟╪
			if(!pGUser) 
			{
				pUser->m_MyGuildUser[i].uid = -1;
				m_MyGuildUser[i].uid = -1; 
				continue; 
			}
		}

		nCount = pGUser->SetGuildUserIndex(pUser);					// ░в ▒ц╡х┐°┐б░╘ ╗ї╖╬ ░б└╘╟╤ └п└·┴д║╕╕ж ║╕│┐

		pUser->m_MyGuildUser[i].uid = pGUser->m_uid;				// ┴Ў▒▌ ░╫╝╙┐б └╓└╕╕щ ╕о╜║╞о╗є┐б╝н uid╕ж ╝┬╞├

		pGUser->SendSystemMsg(strMsg.GetBuffer(strMsg.GetLength()), SYSTEM_NORMAL, TO_ME);
	}	
*/
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х╕ж ┼╗┼Ё╟╤┤┘.
//
void USER::GuildOff(TCHAR *pBuf)
{
	int index = 0;
	BYTE error_code = 0;

	USER *pUser = NULL;
	CGuild *pGuild = NULL;
	CGuildUser *pGuildUser = NULL;

	BOOL bRes = TRUE;

	if(m_dwGuild <= 0) { error_code = ERR_8; goto go_result; }
	
	if(m_bGuildMaster) { error_code = ERR_8; goto go_result; }

	if(m_tGuildHouseWar == GUILD_WARRING || m_tGuildWar == GUILD_WARRING || m_tFortressWar == GUILD_WARRING) 
	{ 
		SendSystemMsg( IDS_USER_NO_OUT_IN_WAR, SYSTEM_ERROR, TO_ME);
		return; 
	}

	if(CheckInGuildWarring()) return;								// ▒ц└№┴▀┐б┤┬ ╟у╢Ї┴A╝Ў╛°┤┘.

	pGuild = GetGuild(m_dwGuild);

	if(!pGuild) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_7;
		goto go_result;
	}

	index = -1;
	index = pGuild->GetUser(m_strUserID);

	if(index < 0)					// ╟╪┤ч ▒ц╡х┐б╝н └п└·░б ╛°└╕╕щ...
	{
		m_dwGuild = -1;							// ├╩▒т╚н╟╤┤┘.
		m_sGuildVersion = -1;					// ▒ц╡х ╣о╛ч ╣Ў┴п
		::ZeroMemory(m_strGuildName, sizeof(m_strGuildName));	
		m_bGuildMaster = FALSE;					// ▒ц╡х ╕╢╜║┼═
		m_bRepresentationGuild = FALSE;			// ▒╟╟╤ ┤ы╟р ┐й║╬	 	

		ReleaseGuild();				
		error_code = ERR_8;
		goto go_result;
	}
												// ▒ц╡х ╕╢╜║┼═░б ┼╗┼Ё└╟╗ч╕ж ╣р╚ў╕щ ┐б╖п...^^			
	if(strcmp(pGuild->m_strMasterName, m_strUserID) == 0)
	{
		ReleaseGuild();				
		error_code = ERR_8;
		goto go_result;
	}

	// alisia
	g_pMainDlg->BridgeServerGuildOffReq( m_uid, m_strUserID, m_strUserID, (int)m_dwGuild );
	ReleaseGuild();
	return;




	if(!pGuild->RemoveUser(m_strUserID))
	{
		ReleaseGuild();				
		error_code = ERR_8;
		goto go_result;
	}

	if(!DeleteGuildUser(m_strUserID))		// ┼╫└╠║э┐б╝н ┴Ў┐ю┤┘.
	{
		pGuild->AddUser(m_strUserID, m_dwGuild);

		ReleaseGuild();				
		error_code = 255;
		goto go_result;
	}

	//if(!DeleteGuildUserWithThread(m_strUserID))		// ┼╫└╠║э┐б╝н ┴Ў┐ю┤┘.
	//{
	//	ReleaseGuild();				
	//	error_code = 255;
	//	goto go_result;
	//}

//	pGuild->RemoveUser(m_strUserID);		// ╕▐╕Ё╕о┐б╝н ┴Ў┐ю┤┘.
	ReleaseGuild();
	bRes = FALSE;

go_result:
	if(bRes)
	{
		CBufferEx TempBuf;
		TempBuf.Add(CHAT_RESULT);
		TempBuf.Add((BYTE)0x00);
		TempBuf.Add(error_code);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	pUser = GetUser(m_uid);

	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;

	SendGuildOffUser(pUser);				// ┤┘╕е ▒ц╡х┐°┐б░╘ │╗░б ┼╗┼Ё╟╤ ╗ч╜╟└╗ ╛╦╕░┤┘.

	DelGuildUserInFortress(m_strUserID, m_dwGuild);

	m_dwGuild = -1;							// ├╩▒т╚н╟╤┤┘.
	m_sGuildVersion = -1;					// ▒ц╡х ╣о╛ч ╣Ў┴п
	::ZeroMemory(m_strGuildName, sizeof(m_strGuildName));	
	m_bGuildMaster = FALSE;					// ▒ц╡х ╕╢╜║┼═
	m_bRepresentationGuild = FALSE;			// ▒╟╟╤ ┤ы╟р ┐й║╬	 	

	SendMyGuildInfo();						// ▒ц╡х ┼╗┼Ё╕ж ╛╦╕░┤┘.

	UpdateUserData();
//	SendSystemMsg( IDS_USER_OUT_GUILD, SYSTEM_NORMAL, TO_ME);
}

void USER::GuildOffWithThread(TCHAR *pBuf)
{
	int index = 0;
	BYTE error_code = 0;
	USER *pUser = NULL;
	BOOL bRes = TRUE;

	if(m_dwGuild <= 0) { error_code = ERR_8; goto go_result; }
	
	if(m_bGuildMaster) { error_code = ERR_8; goto go_result; }

	if(m_tGuildHouseWar == GUILD_WARRING || m_tGuildWar == GUILD_WARRING || m_tFortressWar == GUILD_WARRING) 
	{ 
		SendSystemMsg( IDS_USER_NO_OUT_IN_WAR, SYSTEM_ERROR, TO_ME);
		return; 
	}

	int Datalength;
	SQLDATAPACKET *pSDP;

	pSDP = new SQLDATAPACKET;
	pSDP->code = GUILD_OFF_WITH_THREAD;
	Datalength = 0;
	pSDP->dcount = Datalength;
	pSDP->UID = m_uid;
	pSDP->pData = NULL;

	EnterCriticalSection( &m_CS_SqlData );
	RecvSqlData.AddTail(pSDP);
	nSqlDataCount = RecvSqlData.GetCount();
	LeaveCriticalSection( &m_CS_SqlData );
	return;	

go_result:
	if(bRes)
	{
		CBufferEx TempBuf;
		TempBuf.Add(CHAT_RESULT);
		TempBuf.Add((BYTE)0x00);
		TempBuf.Add(error_code);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	pUser = GetUser(m_uid);
	SendGuildOffUser(pUser);				// ┤┘╕е ▒ц╡х┐°┐б░╘ │╗░б ┼╗┼Ё╟╤ ╗ч╜╟└╗ ╛╦╕░┤┘.

	m_dwGuild = -1;							// ├╩▒т╚н╟╤┤┘.
	m_sGuildVersion = -1;					// ▒ц╡х ╣о╛ч ╣Ў┴п
	::ZeroMemory(m_strGuildName, sizeof(m_strGuildName));	
	m_bGuildMaster = FALSE;					// ▒ц╡х ╕╢╜║┼═
	m_bRepresentationGuild = FALSE;			// ▒╟╟╤ ┤ы╟р ┐й║╬	 	

	SendMyGuildInfo();						// ▒ц╡х ┼╗┼Ё╕ж ╛╦╕░┤┘.


//	SendSystemMsg( IDS_USER_OUT_GUILD, SYSTEM_NORMAL, TO_ME);
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х╕ж ┼╗┼Ё╟╤ └п└·╕ж ┤┘╕е ▒ц╡х┐°┐б░╘ ╛╦╕░┤┘.
//
void USER::SendGuildOffUser(USER *pUser)
{
	int i;
	int nLen = 0;	
	int nCount = -1;

	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
	if(m_dwGuild <= 0) return;

	USER *pGUser = NULL;

	CBufferEx TempBuf;

	CString strMsg = _T("");
	strMsg.Format( IDS_USER_OUT_MEMBER, pUser->m_strUserID);

	for(i = 0; i< MAX_USER; i++)
	{
		pGUser = m_pCom->GetUserUid(i);

		if(pGUser == NULL || pGUser->m_state != STATE_GAMESTARTED) continue;		

		if(m_dwGuild == pGUser->m_dwGuild) pGUser->SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
	}


}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╕╢░б └┌▒т ▒ц╡х╕ж ╟╪╗ъ ╜├┼▓┤┘.
//
void USER::GuildDisperse(TCHAR *pBuf)
{
#ifdef _ACTIVE_USER
//	if(m_iDisplayType == 6 && m_sLevel > 25) return; //yskang 0.5
	if(m_iDisplayType == 6) return; //yskang 0.5
#endif

	int i;//, j;
	int index = 0, nLen = 0;
	BYTE error_code = 0;

	USER *pUser = NULL;
	CGuild *pGuild = NULL;
	CGuildUser *pGuildUser = NULL;

	CStore *pStore = NULL;
	CGuildFortress *pFort = NULL;

	if( m_curz == 56 || m_curz == 57 || m_curz == 58 || m_curz == 59 )	// ARK┐б╝н┤┬ ▒ц╡х ╟╪╗ъ ╟╥ ╝Ў ╛°┤┘.
	{
		SendSystemMsg( _T("A.R.K.┐б╝н┤┬ ▒ц╡х╕ж ╟╪╗ъ ╟╥ ╝Ў ╛°╜└┤╧┤┘."), SYSTEM_ERROR, TO_ME);
		return;
	}

	if(!m_bGuildMaster) 
	{
		SendSystemMsg( IDS_USER_NO_PERMISSION_USE, SYSTEM_ERROR, TO_ME);		
		return;
	}

	if(m_dwGuild <= 0 || m_dwGuild >= g_arGuildData.GetSize()) return;

	if(CheckInGuildWarring()) return;								// ▒ц└№┴▀┐б┤┬ ╟у╢Ї┴A╝Ў╛°┤┘.

	// Field War└╧╢з
	if(m_tGuildWar == GUILD_WARRING && m_dwFieldWar > 0)
	{
		SendSystemMsg( IDS_USER_CANT_DISMISS_IN_WAR, SYSTEM_ERROR, TO_ME);
		return;
	}

	for(i = 0; i < g_arGuildFortress.GetSize(); i++)
	{
		if(!g_arGuildFortress[i]) continue;

		pFort = g_arGuildFortress[i];

		if(pFort->m_iGuildSid == m_dwGuild)
		{
			SendSystemMsg( IDS_USER_CANT_DISMISS_FORTRESS, SYSTEM_ERROR, TO_ME);
			return;
		}
	}

	pGuild = GetGuild(m_dwGuild);

	if(!pGuild) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		return;
	}

	nLen = strlen(m_strUserID);
	if(nLen <= 0 || nLen > CHAR_NAME_LENGTH)
	{
		ReleaseGuild();				
		return;
	}

	if(strcmp(pGuild->m_strMasterName, m_strUserID) != 0)
	{
		ReleaseGuild();				
		return;
	}

	// alisia - ▒ц╡х ├в░э╕ж ╗ч┐ы┴▀└╠ ╛╞┤╧╕щ ╗ч┐ы┴▀└╕╖╬ ╕╕╡щ░э ▒ц╡х ╟╪╗ъ└╗ ╜┼├╗╟╤╚─ ╕о┼╧╟╤┤┘.
	if(InterlockedCompareExchange((LONG*)&g_arGuildData[m_dwGuild]->m_lUsed, (long)1, (long)0) == (long)0)
	{
		g_pMainDlg->BridgeServerGuildDisperseReq( m_uid, m_strUserID, (int)m_dwGuild );
	}
	else
	{
		SendSystemMsg( IDS_USER_CANT_DISMISS_IN_BANK, SYSTEM_ERROR, TO_ME);
	}
	ReleaseGuild();
	return;





	// ╟╪┤ч ▒ц╡х ├в░э░б ╗ч┐ы┴▀└╠ ╛╞┤╧╕щ ╜├└█...
	if(InterlockedCompareExchange((LONG*)&g_arGuildData[m_dwGuild]->m_lUsed, (long)1, (long)0) == (long)0)
	{
		if(!DeleteGuildDB()) 				// DB ╗ш┴ж
		{
			ReleaseGuild();
			::InterlockedExchange(&g_arGuildData[m_dwGuild]->m_lUsed, 0);
			return;
		}
											// ╗є┴б└╗ ╝╥└п ╟▀┤┘╕щ ├╩▒т╚н	
/*		for(i = 0; i < g_arStore.GetSize(); i++)
		{
			pStore = g_arStore[i];
			if(!pStore) continue;

			if(pStore->m_iGuildSid == m_dwGuild)
			{
				::ZeroMemory(pStore->m_strGuildName, CHAR_NAME_LENGTH + 1);
				::ZeroMemory(pStore->m_strMasterName, CHAR_NAME_LENGTH + 1);

				pStore->InitStoreInfo(-1);
				SetGuildStoreTex(pStore->m_sStoreID, 0);	// Tax Rate Init
				InitMemStore(pStore);
				break;
			}
		}
*/
		index = m_dwGuild;

		// ▒ц╡х╟╧┐ь╜║░б └╓┤┘╕щ └╠┐ы║╥░б╖╬ ╕╕╡щ╛ю ┴╪┤┘. 
		for(i = 0; i < g_arGuildHouse.GetSize(); i++)
		{
			if(m_dwGuild == g_arGuildHouse[i]->iGuild)
			{
				CNpc *pNpc = NULL;				// ╣о╞╨╡╡...
				pNpc = GetNpc(g_arGuildHouse[i]->iMarkNpc);
				if(pNpc)
				{
					pNpc->m_sPid = 0;
					pNpc->m_sMaxHP = 1;
					::ZeroMemory(pNpc->m_strName, sizeof(pNpc->m_strName));
				}

				g_arGuildHouse[i]->iGuild = 0;
				break;
			}
		}

		// ┐ф╗ї░б └╓┤┘╕щ └╠┐ы║╥░б╖╬ ╕╕╡щ╛ю ┴╪┤┘. 
		for(i = 0; i < g_arGuildFortress.GetSize(); i++)
		{
			if(!g_arGuildFortress[i]) continue;

			pFort = g_arGuildFortress[i];

			if(pFort->m_iGuildSid == m_dwGuild)
			{
				if(pFort->m_lViolenceUsed == 1) 
				{
					pFort->m_wMopPartyTime.wYear = 2030;		// ▒ц╡х░б ╟╪╗ъ╡╟╕щ╝н │к╕╙┴Ў┤┬ ╕Ё╡╬ ├╩▒т╚н╕ж
					pFort->SetNpcToFortressViolenceEnd(m_pCom);
					pFort->GetOutof(m_pCom);
				}

				pFort->SetInitFortress();
				pFort->InitMemFortress(GUILD_WAR_DECISION);
				break;
			}
		}


		g_arGuildData[m_dwGuild]->InitGuild();

		ReleaseGuild();

		for(i = 0; i < MAX_USER; i++)		// ▒ц╡х┐°╡щ ╝┬╞├
		{
			pUser = m_pCom->GetUserUid(i);

			if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;
			if(pUser->m_dwGuild <= 0) continue;

			if(pUser->m_dwGuild == index)
			{
				pUser->SendSystemMsg( IDS_USER_DISMISS_COMPLETED, SYSTEM_NORMAL, TO_ME);

				pUser->m_dwGuild = -1;							// ├╩▒т╚н╟╤┤┘.
				pUser->m_sGuildVersion = -1;					// ▒ц╡х ╣о╛ч ╣Ў┴п
				::ZeroMemory(pUser->m_strGuildName, sizeof(pUser->m_strGuildName));	
				pUser->m_bGuildMaster = FALSE;					// ▒ц╡х ╕╢╜║┼═
				pUser->m_bRepresentationGuild = FALSE;			// ▒╟╟╤ ┤ы╟р ┐й║╬	 	

				pUser->m_bFieldWarApply = FALSE;
				pUser->m_tGuildWar = GUILD_WAR_AFFTER;
				pUser->m_tGuildHouseWar = GUILD_WAR_AFFTER;
				pUser->m_tFortressWar = GUILD_WAR_AFFTER;

				pUser->SendMyGuildInfo();				
			}
		}
		// DB┐б╝н ╗ш┴ж..
		// ┴в╝╙╟╤ └п└·┐б╝н ╗ш┴ж...
		// ┐ь╝▒ ╕▐╕Ё╕о┐б╝н ╗ш┴ж... (Guild, Guild_House_Rank, 
	}
	else 
	{
		ReleaseGuild();
		SendSystemMsg( IDS_USER_CANT_DISMISS_IN_BANK, SYSTEM_ERROR, TO_ME);
	}

	UpdateUserData();
//	ReleaseGuild();
}

void USER::GuildDisperseWithThread(TCHAR *pBuf)
{
	int i, j;
	int index = 0, nLen = 0;
	BYTE error_code = 0;

	USER *pUser = NULL;
	CGuild *pGuild = NULL;
	CGuildUser *pGuildUser = NULL;

	CStore *pStore = NULL;
	CGuildFortress *pFort = NULL;

	if(!m_bGuildMaster) return;
	if(m_dwGuild <= 0 || m_dwGuild >= g_arGuildData.GetSize()) return;

	// ░°╝║└№└╧╢з...
	for(i = 0; i < g_arGuildFortress.GetSize(); i++)
	{
		pFort = g_arGuildFortress[i];
		if(!pFort) continue;

		if(g_arGuildFortress[i]->m_lUsed == 1)
		{
			if(pFort->m_iGuildSid == m_dwGuild)	// ╣ц╛ю├°└╬┴Ў
			{
				SendSystemMsg( IDS_USER_CANT_DISMISS_IN_WAR, SYSTEM_ERROR, TO_ME);
				return;
			}

			for(j =0; j < GUILD_ATTACK_MAX_NUM; j++)// ░°░▌├°└╬┴Ў..
			{
				if(pFort->m_arAttackGuild[j].lGuild == m_dwGuild)
				{
					SendSystemMsg( IDS_USER_CANT_DISMISS_IN_WAR, SYSTEM_ERROR, TO_ME);
					return;
				}
			}
		}
	}
	// ▒ц╡х╗є┴б...
/*	for(i = 0; i < g_arStore.GetSize(); i++)
	{
		pStore = g_arStore[i];
		if(!pStore) continue;

		if(g_arStore[i]->m_lUsed == 1)
		{
			if(pStore->m_iGuildSid == m_dwGuild)	// ╣ц╛ю├°└╬┴Ў
			{
				SendSystemMsg( IDS_USER_CANT_DISMISS_IN_WAR, SYSTEM_ERROR, TO_ME);
				return;
			}

			for(j =0; j < GUILD_ATTACK_MAX_NUM; j++)// ░°░▌├°└╬┴Ў..
			{
				if(pStore->m_arAttackGuild[j] == m_dwGuild)
				{
					SendSystemMsg( IDS_USER_CANT_DISMISS_IN_WAR, SYSTEM_ERROR, TO_ME);
					return;
				}
			}
		}
	}
*/
	// Virtual Room┐б └╓└╗╢з
	for(i = 0; i < g_arGuildHouseWar.GetSize(); i++)
	{
		if(!g_arGuildHouseWar[i]) continue;

		if(g_arGuildHouseWar[i]->m_CurrentGuild.lUsed == 1)
		{
			if(g_arGuildHouseWar[i]->m_CurrentGuild.lGuild == m_dwGuild)
			{
				SendSystemMsg( IDS_USER_CANT_DISMISS_IN_WAR, SYSTEM_ERROR, TO_ME);
				return;
			}
		}
	}

	// Field War└╧╢з
	if(m_tGuildWar == GUILD_WARRING && m_dwFieldWar > 0)
	{
		SendSystemMsg( IDS_USER_CANT_DISMISS_IN_WAR, SYSTEM_ERROR, TO_ME);
		return;
	}

	int Datalength;
	SQLDATAPACKET *pSDP;

	pSDP = new SQLDATAPACKET;
	pSDP->code = GUILD_DISPERSE;
	Datalength = 0;
	pSDP->dcount = Datalength;
	pSDP->UID = m_uid;
	pSDP->pData = NULL;

	EnterCriticalSection( &m_CS_SqlData );
	RecvSqlData.AddTail(pSDP);
	nSqlDataCount = RecvSqlData.GetCount();
	LeaveCriticalSection( &m_CS_SqlData );

}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╕╢░б ▒ц╡х┐°└╗ ┼Ё├т╜├┼▓┤┘. ^^
//
void USER::GuildKickOut(TCHAR *pBuf)
{
	if ( pBuf == NULL ) return;

	int index = 0;
	BYTE error_code = 0;

	USER *pUser = NULL;
	CGuild *pGuild = NULL;
	CGuildUser *pGuildUser = NULL;

	BOOL bRes = TRUE;

	CString strTemp = _T("");

	TCHAR szUserName[255];
	::ZeroMemory(szUserName, sizeof(szUserName));

	if(!m_bGuildMaster && !m_bRepresentationGuild) return;

	int nLength = GetVarString(sizeof(szUserName), szUserName, pBuf, index);
	if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) // └▀╕°╡╚ └п└·╛╞└╠╡Ё
	{
		error_code = ERR_6;
		goto go_result;
	}

	if(m_dwGuild <= 0) { error_code = ERR_8; goto go_result; }

	if(CheckInGuildWarring()) return;			// ▒ц└№┴▀┐б┤┬ ╟у╢Ї┴A╝Ў╛°┤┘.
	
	pGuild = GetGuild(m_dwGuild);

	if(!pGuild)									// ▒ц╡х░б ╛°└╕╕щ
	{
		ReleaseGuild();		
		error_code = ERR_7;
		goto go_result;
	}
												// ▒ц╡х ╕╢╜║┼═░б ┼╗┼Ё└╟╗ч╕ж ╣р╚ў╕щ ┐б╖п...^^			
//	if(strcmp(pGuild->m_strMasterName, szUserName) == 0)
	if( !pGuild->IsMasterPower(m_strUserID) )
	{
		ReleaseGuild();				

		m_bGuildMaster = FALSE;
		m_bRepresentationGuild = FALSE;
		error_code = ERR_10;
		goto go_result;
	}

	if( pGuild->IsMasterPower(szUserName) )
	{
		ReleaseGuild();				
		error_code = ERR_8;
		goto go_result;
	}
	
	index = -1;
	index = pGuild->GetUser(szUserName);			// ╟╪┤ч └╠╕з└╟ ▒ц╡х┐°└╠ └╓┤┬┴Ў..

	if(index < 0)
	{
		ReleaseGuild();		
		error_code = ERR_8;
		goto go_result;
	}
														// ╟Ў└ч ▒ц╡х├в░э └╠┐ы┴▀└╠╕щ ├▀╣ц└╠ ╜╟╞╨...
	if(strcmp(pGuild->m_strUsedUser, szUserName) == 0)
	{
		ReleaseGuild();	
		error_code = 255;
		goto go_result;
	}

	// alisia
//	g_pMainDlg->BridgeServerGuildOffReq( m_uid, m_strUserID, szUserName, (int)m_dwGuild );
//	ReleaseGuild();
//	return;



	if(!DeleteGuildUser(szUserName))		// ┼╫└╠║э┐б╝н ╗ш┴ж
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = 255;
		goto go_result;
	}



	pGuild->RemoveUser(szUserName);		// ╕▐╕Ё╕о╗є┐б╝н ╗ш┴ж
	ReleaseGuild();
	bRes = FALSE;

go_result:
	if(bRes)
	{
		CBufferEx TempBuf;
		TempBuf.Add(CHAT_RESULT);
		TempBuf.Add((BYTE)0x00);
		TempBuf.Add(error_code);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	DelGuildUserInFortress(szUserName, m_dwGuild);		// ├╩▒т╚н╕ж ╟╪╛▀╟╤┤┘.

	pUser = GetUser(szUserName);			// ╟Ў└ч ┴в╝╙┴▀└╬ └п└·╕щ...
	if(pUser)
	{
		pUser->m_dwGuild = -1;
		pUser->m_sGuildVersion = -1;		// ▒ц╡х ╣о╛ч ╣Ў┴п
		::ZeroMemory(pUser->m_strGuildName, sizeof(pUser->m_strGuildName));	
		pUser->m_bGuildMaster = FALSE;			// ▒ц╡х ╕╢╜║┼═
		pUser->m_bRepresentationGuild = FALSE;	// ▒╟╟╤ ┤ы╟р ┐й║╬	 	
		pUser->SendMyGuildInfo();
		pUser->SendSystemMsg( IDS_USER_KICKOUT_GUILD, SYSTEM_NORMAL, TO_ME);

		SendGuildOffUser(pUser);
	}

	UpdateUserData();

	strTemp.Format( IDS_USER_KICKOUT_MEMBER, szUserName);
	SendSystemMsg((LPTSTR)(LPCTSTR)strTemp, SYSTEM_NORMAL, TO_ME);
}

void USER::GuildKickOutWithThread(TCHAR *pBuf)
{
	int index = 0;
	BYTE error_code = 0;

	USER *pUser = NULL;
	BOOL bRes = TRUE;

	CString strTemp = _T("");

	TCHAR szUserName[255];
	::ZeroMemory(szUserName, sizeof(szUserName));

	if(!m_bGuildMaster) return;

	int nLength = GetVarString(sizeof(szUserName), szUserName, pBuf, index);
	if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) // └▀╕°╡╚ └п└·╛╞└╠╡Ё
	{
		error_code = ERR_6;
		goto go_result;
	}

	if(m_dwGuild <= 0) { error_code = ERR_8; goto go_result; }

	int Datalength;
	SQLDATAPACKET *pSDP;
	BYTE *pData;

	pSDP = new SQLDATAPACKET;
	pSDP->code = GUILD_KICK_OUT;
	Datalength = nLength;
	pSDP->dcount = Datalength;
	pSDP->UID = m_uid;
	pData = new BYTE[Datalength+1];
	memset(pData, NULL, Datalength+1);
	memcpy(	pData, pBuf, Datalength );
	pSDP->pData = pData;

	EnterCriticalSection( &m_CS_SqlData );
	RecvSqlData.AddTail(pSDP);
	nSqlDataCount = RecvSqlData.GetCount();
	LeaveCriticalSection( &m_CS_SqlData );

	return;	

go_result:
	if(bRes)
	{
		CBufferEx TempBuf;
		TempBuf.Add(CHAT_RESULT);
		TempBuf.Add((BYTE)0x00);
		TempBuf.Add(error_code);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	pUser = GetUser(szUserName);			// ╟Ў└ч ┴в╝╙┴▀└╬ └п└·╕щ...
	if(pUser)
	{
		pUser->m_dwGuild = -1;
		pUser->m_sGuildVersion = -1;		// ▒ц╡х ╣о╛ч ╣Ў┴п
		::ZeroMemory(pUser->m_strGuildName, sizeof(pUser->m_strGuildName));	
		pUser->m_bGuildMaster = FALSE;			// ▒ц╡х ╕╢╜║┼═
		pUser->m_bRepresentationGuild = FALSE;	// ▒╟╟╤ ┤ы╟р ┐й║╬	 	
		pUser->SendMyGuildInfo();
		pUser->SendSystemMsg( IDS_USER_KICKOUT_GUILD, SYSTEM_NORMAL, TO_ME);

		SendGuildOffUser(pUser);
	}

	strTemp.Format( IDS_USER_KICKOUT_MEMBER, szUserName);
	SendSystemMsg((LPTSTR)(LPCTSTR)strTemp, SYSTEM_NORMAL, TO_ME);
}

////////////////////////////////////////////////////////////////////////////////
//	╟╪┤ч └п└· ▒ц╡х ┴д║╕╕ж ║╕│╜┤┘.
//
void USER::SendGuildInfo(USER *pUser)
{
	CBufferEx TempBuf;

	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;

	TempBuf.Add(GUILD_INFO);
	TempBuf.Add(pUser->m_uid + USER_BAND);
	TempBuf.Add((int)pUser->m_dwGuild);
	TempBuf.AddString(pUser->m_strGuildName);
	TempBuf.Add((short)pUser->m_sGuildVersion);

	pUser->Send(TempBuf, TempBuf.GetLength());
	SendInsight(TempBuf, TempBuf.GetLength());
}

////////////////////////////////////////////////////////////////////////////////
//	│╗ ▒ц╡х ┴д║╕╕ж ║╕│╜┤┘.
//
void USER::SendMyGuildInfo()
{
	CBufferEx TempBuf;

	TempBuf.Add(GUILD_INFO);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add((int)m_dwGuild);
	TempBuf.AddString(m_strGuildName);
	TempBuf.Add((short)m_sGuildVersion);

	Send(TempBuf, TempBuf.GetLength());
	SendInsight(TempBuf, TempBuf.GetLength());
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ├в░э ╛╞└╠┼█└╗ ░б┴Ў░э ┐┬┤┘.
//
void USER::GuildWharehouseOpenReq()
{
	int i, j;
	int nLen = 0;
	
	CBufferEx TempBuf;

	CByteArray arItemSlotList;

	USER *pUser = NULL;

	CString guild = _T("");
	guild.Format("%s", m_strGuildName);
	if(guild.IsEmpty()) return;
	if(m_dwGuild <= 0) return;

	CGuild *pGuild = GetGuild(m_dwGuild);

	ReleaseGuild();

	if(!pGuild)
	{
		m_dwGuild = -1;
		return;
	}

	if(InterlockedCompareExchange((LONG*)&g_arGuildData[m_dwGuild]->m_lUsed, (long)1, (long)0) == (long)0)
	{
		m_dwGuildDN = 0;
		InitGuildItem();								// ║п╝Ў╕ж ▒·▓¤└╠ ╝╝┼╣╟╤┤┘.

		nLen = strlen(m_strUserID);
		if(nLen <= 0 || nLen > CHAR_NAME_LENGTH) 
		{ 
			InterlockedExchange(&g_arGuildData[m_dwGuild]->m_lUsed, (LONG)0); 
			return; 
		}

		if(!LoadGuildWarehouse())						// ▒ц╡х ╛╞└╠┼█└╗ ├│└╜ ┴в╝╙╟╥╢з ░б┴Ў░э ┐┬┤┘.
		{ 
			InterlockedExchange(&g_arGuildData[m_dwGuild]->m_lUsed, (LONG)0); 
			return; 
		}
		
		g_arGuildData[m_dwGuild]->m_iUsedUser = m_uid;
		strncpy(g_arGuildData[m_dwGuild]->m_strUsedUser, m_strUserID, nLen);

		for(i = 0; i < TOTAL_BANK_ITEM_NUM; i++)
		{												// ╟Ў└ч ║╕░№╡╚ ╛╞└╠┼█╕╕ ║╕┐й┴╓▒т└з╟╪ ┴д╖─╟╤┤┘. 
			if(m_GuildItem[i].sSid >= 0)
			{
				arItemSlotList.Add(i);
			}
		}

		TempBuf.Add(GUILD_WAREHOUSE_OPEN);
		TempBuf.Add((DWORD)m_dwGuildDN);
		TempBuf.Add((BYTE)arItemSlotList.GetSize());

		for(i = 0; i < arItemSlotList.GetSize(); i++)
		{
			BYTE tempSlot = 0;
			tempSlot = arItemSlotList[i];
			TempBuf.Add(tempSlot);
			TempBuf.Add((short)m_GuildItem[tempSlot].sLevel);
			TempBuf.Add((short)m_GuildItem[tempSlot].sSid);
			TempBuf.Add((short)m_GuildItem[tempSlot].sDuration);
			TempBuf.Add((short)m_GuildItem[tempSlot].sBullNum);
			TempBuf.Add((short)m_GuildItem[tempSlot].sCount);

			for(j = 0; j < MAGIC_NUM; j++) TempBuf.Add((BYTE)m_GuildItem[tempSlot].tMagic[j]);

			TempBuf.Add((BYTE)m_GuildItem[tempSlot].tIQ);
		}

		Send(TempBuf, TempBuf.GetLength());
	}
	else 
	{
		CString strMsg = _T("");
		nLen = strlen(g_arGuildData[m_dwGuild]->m_strUsedUser);
		if(nLen <= 0) 
		{
			InterlockedExchange(&g_arGuildData[m_dwGuild]->m_lUsed, (LONG)0);
			return;
		}

		if(strcmp(g_arGuildData[m_dwGuild]->m_strUsedUser, _ID(IDS_USER_OPERATOR)) == 0)
		{
			strMsg.Format( IDS_USER_CANT_USE_GUILD_BANK_NOW, g_arGuildData[m_dwGuild]->m_strUsedUser);
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
			return;
		}

		strMsg.Format( IDS_USER_GUILD_BANK_IN_USE, g_arGuildData[m_dwGuild]->m_strUsedUser);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);

		if(nLen > 0)										// ▒ц╡х ├в░э╕ж └╠┐ы┴▀ ║ё┴д╗є ┴╛╖с╡╟┤┬ └п└·╕ж ╚о└╬╟╧┤┬ └¤┬ў. 
		{
			pUser = GetUser(g_arGuildData[m_dwGuild]->m_iUsedUser);
			//(g_arGuildData[m_dwGuild]->m_strUsedUser);			// └╠┐ы┴▀ ║ё┴д╗є ┴╛╖с╡╟╕щ ╟о╛ю┴╪┤┘.	
			if(!pUser || strcmp(pUser->m_strUserID, g_arGuildData[m_dwGuild]->m_strUsedUser) != 0)
			{
				g_arGuildData[m_dwGuild]->m_iUsedUser = -1;
				::ZeroMemory(g_arGuildData[m_dwGuild]->m_strUsedUser, sizeof(g_arGuildData[m_dwGuild]->m_strUsedUser));
				InterlockedExchange(&g_arGuildData[m_dwGuild]->m_lUsed, (LONG)0); 
			}
		}
	}
}

void USER::GuildWharehouseOpenReqWithThread()
{
	int Datalength;
	SQLDATAPACKET *pSDP;

	pSDP = new SQLDATAPACKET;
	pSDP->code = DB_GUILD_WHEREHOUSE_EVENT_REQ;
	Datalength = 0;
	pSDP->dcount = Datalength;
	pSDP->UID = m_uid;
	pSDP->pData = NULL;

	EnterCriticalSection( &m_CS_SqlData );
	RecvSqlData.AddTail(pSDP);
	nSqlDataCount = RecvSqlData.GetCount();
	LeaveCriticalSection( &m_CS_SqlData );
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ├в░э╕ж ┤▌┤┬┤┘. 
//
void USER::GuildWharehouseCloseReq()
{
	int nLen = 0;
	CString guild = _T("");
	guild.Format("%s", m_strGuildName);
	if(guild.IsEmpty()) return;
	if(m_dwGuild <= 0 || m_dwGuild >= g_arGuildData.GetSize()) return;
	if(!g_arGuildData[m_dwGuild]) return;

	nLen = strlen(m_strUserID);
	if(nLen <= 0 || nLen > CHAR_NAME_LENGTH) return;
	if(strcmp(g_arGuildData[m_dwGuild]->m_strUsedUser, m_strUserID) != 0) return;

	g_arGuildData[m_dwGuild]->m_iUsedUser = -1;
	::ZeroMemory(g_arGuildData[m_dwGuild]->m_strUsedUser, sizeof(g_arGuildData[m_dwGuild]->m_strUsedUser));
	InterlockedExchange(&g_arGuildData[m_dwGuild]->m_lUsed, (LONG)0);
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ├в░э ╛╞└╠┼█└╗ └╨╛ю┐┬┤┘.
//
BOOL USER::LoadGuildWarehouse()
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode;
	TCHAR			szSQL[1024];

	::ZeroMemory(szSQL, sizeof(szSQL));
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call LOAD_GUILD_WAREHOUSE (\'%s\')}"), m_strGuildName);

	SQLUINTEGER iDN;
	SQLCHAR		strItem[_BANK_DB];
	
	SQLINTEGER	sInd;

	iDN = 0;
	::ZeroMemory(strItem, sizeof(strItem));

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );

	if( retcode != SQL_SUCCESS )
	{
//		TRACE("Fail To Load Guild Warehouse Data !!\n");

//		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, SQL_NTS);

	if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
	{
		retcode = SQLFetch( hstmt );

		if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
		{
			int i = 1;
			SQLGetData( hstmt, i++, SQL_C_ULONG,	&iDN,		sizeof(iDN),		&sInd );
			SQLGetData( hstmt, i++, SQL_C_BINARY,	strItem,	sizeof(strItem),	&sInd );
		}
		else 
		{
			retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			g_DB[m_iModSid].ReleaseDB(db_index);
			return FALSE;
		}
	}

	retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);

	StrToGuildItem((LPTSTR)strItem);
	m_dwGuildDN = iDN;

	return TRUE;
}

///////////////////////////////////////////////////////////////////////////////
//	m_GuildItem ┐б Buffer└╟ │╗┐ы└╗ Copy ╟╤┤┘.
//
void USER::StrToGuildItem(TCHAR *pBuf)
{
	int index = 0;
	int i, j;
	MYINT64 serial;

	for(i = 0; i < TOTAL_BANK_ITEM_NUM; i++)
	{
		m_GuildItem[i].sLevel	= GetShort(pBuf, index);
		m_GuildItem[i].sSid		= GetShort(pBuf, index);
		m_GuildItem[i].sDuration = GetShort(pBuf, index);
		m_GuildItem[i].sBullNum	= GetShort(pBuf, index);
		m_GuildItem[i].sCount	= GetShort(pBuf, index);

		if(m_GuildItem[i].sCount <= 0) m_GuildItem[i].sSid = -1;
		for(j = 0; j < MAGIC_NUM; j++) m_GuildItem[i].tMagic[j] = GetByte(pBuf, index);
		
		m_GuildItem[i].tIQ = GetByte(pBuf, index);

		for( j = 0; j < 8; j++ ) serial.b[j] = GetByte( pBuf, index );

		m_GuildItem[i].iItemSerial = serial.i;
	}	
}

////////////////////////////////////////////////////////////////////////////////
//	Buffer┐б m_GuildItem└╟ │╗┐ы└╗ Copy ╟╤┤┘.
//
void USER::GuildItemToStr(TCHAR *pBuf)
{
	int index = 0;
	int i, j;
	MYINT64 serial;

	for(i = 0; i < TOTAL_BANK_ITEM_NUM; i++)
	{
		SetShort(pBuf, m_GuildItem[i].sLevel,	index);
		SetShort(pBuf, m_GuildItem[i].sSid,		index);
		SetShort(pBuf, m_GuildItem[i].sDuration,index);
		SetShort(pBuf, m_GuildItem[i].sBullNum,	index);
		SetShort(pBuf, m_GuildItem[i].sCount,	index);

		for(j = 0; j < MAGIC_NUM; j++) SetByte(pBuf, m_GuildItem[i].tMagic[j], index);

		SetByte(pBuf, m_GuildItem[i].tIQ, index);

		serial.i = m_GuildItem[i].iItemSerial;

		for(j = 0; j < 8; j++ ) SetByte( pBuf, serial.b[j], index );
	}
}

///////////////////////////////////////////////////////////////////////////
//	▒ц╡х ├в░э┐б╝н └╘├т▒▌, └╘├т└╘ ╛╞└╠┼█└╗ ┤у┤ч╟╤┤┘.
//
void USER::GuildItemMoveReq(TCHAR *pBuf)
{
#ifdef _ACTIVE_USER
//	if(m_iDisplayType == 6 && m_sLevel > 25) return; //yskang 0.5
	if(m_iDisplayType == 6) return; //yskang 0.5
#endif

	int index = 0;
	BYTE type = GetByte(pBuf, index);

	if(m_dwGuild < 0 || m_dwGuild >= g_arGuildData.GetSize()) return;
	if(!g_arGuildData[m_dwGuild]) return;

	int nLen = strlen(g_arGuildData[m_dwGuild]->m_strUsedUser);

	if(nLen <= 0 || nLen > CHAR_NAME_LENGTH) return;

	if(strcmp(m_strUserID, g_arGuildData[m_dwGuild]->m_strUsedUser) == 0)
	{
		if(g_arGuildData[m_dwGuild]->m_lUsed == 1)
		{
			switch(type)
			{
			case GUILD_ITEM_INPUT:
				GuildInPut(pBuf + index);
				break;
			case GUILD_ITEM_OUTPUT:
				GuildOutPut(pBuf + index);
				break;
			case GUILD_DN_INPUT:
				GuildInPutDN(pBuf + index);
				break;
			case GUILD_DN_OUTPUT:
				GuildOutPutDN(pBuf + index);
				break;
			}
		}
		else 
		{
			g_arGuildData[m_dwGuild]->m_iUsedUser = -1;
			::ZeroMemory(g_arGuildData[m_dwGuild]->m_strUsedUser, sizeof(g_arGuildData[m_dwGuild]->m_strUsedUser));
		}
	}
}

void USER::GuildItemMoveReqWithThread(TCHAR *pBuf)
{
	int index = 0;
	BYTE type = GetByte(pBuf, index);

	if(m_dwGuild < 0) return;
	if(!g_arGuildData[m_dwGuild]) return;

	int nLen = strlen(g_arGuildData[m_dwGuild]->m_strUsedUser);

	if(nLen <= 0 || nLen > CHAR_NAME_LENGTH) return;

	if(strcmp(m_strUserID, g_arGuildData[m_dwGuild]->m_strUsedUser) == 0)
	{
		if(g_arGuildData[m_dwGuild]->m_lUsed == 1)
		{
			int Datalength;
			BYTE *pData;
			SQLDATAPACKET *pSDP;
			pSDP = new SQLDATAPACKET;
			pSDP->code = DB_GUILD_ITEM_MOVE_REQ;

			if ( type == GUILD_ITEM_INPUT || type == GUILD_ITEM_OUTPUT)
				Datalength = sizeof(BYTE)+sizeof(BYTE)+sizeof(short);
			else
				Datalength = sizeof(BYTE)+sizeof(DWORD);

			pSDP->dcount = Datalength;
			pSDP->UID = m_uid;
			pData = new BYTE[Datalength+1];
			memset(pData, 0, Datalength+1);
			memcpy(pData, pBuf, Datalength);
			pSDP->pData = pData;

			EnterCriticalSection( &m_CS_SqlData );
			RecvSqlData.AddTail(pSDP);
			nSqlDataCount = RecvSqlData.GetCount();
			LeaveCriticalSection( &m_CS_SqlData );		
		}
		else 
		{
			g_arGuildData[m_dwGuild]->m_iUsedUser = -1;
			::ZeroMemory(g_arGuildData[m_dwGuild]->m_strUsedUser, sizeof(g_arGuildData[m_dwGuild]->m_strUsedUser));
		}
	}
}
////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ├в░э┐б ╛╞└╠┼█└╗ │╓┤┬┤┘.
//
void USER::GuildInPut(TCHAR *pBuf)//╛№═┼▓╓┐т ┤ц╚ы
{
	int i;
	int tDestSlot;
	int index = 0;
	int iOver = 0;
	short sSid = -1;
	short sHaveCount = 0;

	BYTE result = SUCCESS;

	CBufferEx TempBuf;

	ItemList MyItem[TOTAL_ITEM_NUM], BackItem;

	BYTE tSourceSlot = GetByte(pBuf, index);	// ╗ч┐ы└┌ ╛╞└╠┼█└╠ └╓┤° ╜╜╖╘ └з─б
	short sCount = GetShort(pBuf, index);		// ╛є╕╢╕╕┼н ║╕░№
												// ┐└╖╬┴Ў └╬║е╕╕ ░б┤╔╟╧┤┘.			
	if(tSourceSlot < EQUIP_ITEM_NUM || tSourceSlot >= TOTAL_INVEN_MAX) { result = FAIL; goto go_result; }

	if(!m_MItemLock && o_yehuoini[0]->mimabaohu == 1 )
	{
        SendSystemMsg( "╟ы╧╚╜т│¤├▄┬ы▒г╗д║є╘┌▓┘╫ў", SYSTEM_ERROR, TO_ME);
		result = FAIL;
		goto go_result;
	}
	if ( m_bPShopOpen == TRUE || m_bNowTrading == TRUE) { result = FAIL; goto go_result; }//╬┤╓кBUG

	sSid = m_UserItem[tSourceSlot].sSid;
	sHaveCount = m_UserItem[tSourceSlot].sCount;
												// └▀╕°╡╚ sSid		
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) { result = FAIL; goto go_result; }

	if(g_arItemTable[sSid]->m_sEvent >= EVENT_UNIQUE_ITEM_BAND)
	{
		SendSystemMsg( IDS_USER_CANT_SHARE_EVENT_ITEM, SYSTEM_ERROR, TO_ME);
		result = FAIL; goto go_result; 
	}

	if(sCount >= BANK_MAX_ITEM) 
	{
		SendSystemMsg( IDS_USER_ONCE_MOVE_MAX, SYSTEM_ERROR, TO_ME);
		result = FAIL; goto go_result;
	}
												
	if(sCount <= 0 || sCount > sHaveCount) { result = FAIL; goto go_result; }	// ╝╥┴Ў╟╤ ╛╞└╠┼█ ╝Ў║╕┤┘ ╕╣└╗ ░ц┐ь			
	if(g_arItemTable[sSid]->m_sDuration > 0 && sCount > 1) { result = FAIL; goto go_result; }
	
	for(i = 0; i < TOTAL_ITEM_NUM; i++)	// ╛╞└╠┼█ ┴д║╕ ╣щ╛ў
	{
		MyItem[i] = m_UserItem[i];
	}

	ReSetItemSlot(&BackItem);					// DB╜╟╞╨┐б ┤ы║ё╟╤ ╣щ╛ў┐ы ├╩▒т╚н
												// └╧┤▄ ░у─е╝Ў └╓┤┬┴Ў, ░у─б╕щ ░░└║ ╛╞└╠┼█└╠ └╓┤┬┴Ў ├г╛╞║╗┤┘.
	tDestSlot = GetSameItem(m_UserItem[tSourceSlot], GUILD_SLOT);
	
	/***************************▒ц╡х ├в░э ╛ў╣л ├│╕о********************************************/
	if(tDestSlot >= 0)							// ╟╫╗є ╗ї╖╬└╠ ├▀░б ╡╟┤┬░═└╗ ▒т┴╪└╕╖╬ ├│╕о
	{											
		BackItem = m_GuildItem[tDestSlot];

		if(m_GuildItem[tDestSlot].sCount >= BANK_MAX_ITEM)
		{
			SendSystemMsg( IDS_USER_SAVE_MAX_COUNT, SYSTEM_ERROR, TO_ME);
			result = FAIL; goto go_result;
		}

		if((m_GuildItem[tDestSlot].sCount + sCount) > BANK_MAX_ITEM)
		{										// MAX░к└╗ │╤└╕╕щ ▓╦├д┐ь░э │к╕╙┴Ў ├│╕о			
			iOver =m_GuildItem[tDestSlot].sCount + sCount - BANK_MAX_ITEM;
			if(iOver <= 0) { result = FAIL; goto go_result; }

			m_GuildItem[tDestSlot].sCount = BANK_MAX_ITEM;
			sCount = sCount - iOver;
		}
		else m_GuildItem[tDestSlot].sCount += sCount;
	}
	else
	{											//	├▀░б
		tDestSlot = GetEmptySlot(GUILD_SLOT);

		if(tDestSlot == -1) 
		{
			result = FAIL; goto go_result; 
		}

		m_GuildItem[tDestSlot].sLevel = m_UserItem[tSourceSlot].sLevel;
		m_GuildItem[tDestSlot].sSid = m_UserItem[tSourceSlot].sSid;
		m_GuildItem[tDestSlot].sDuration = m_UserItem[tSourceSlot].sDuration;
		m_GuildItem[tDestSlot].sBullNum = m_UserItem[tSourceSlot].sBullNum;
		m_GuildItem[tDestSlot].sCount = sCount;
		for(i = 0; i < MAGIC_NUM; i++) m_GuildItem[tDestSlot].tMagic[i] = m_UserItem[tSourceSlot].tMagic[i];
		m_GuildItem[tDestSlot].tIQ = m_UserItem[tSourceSlot].tIQ;
		m_GuildItem[tDestSlot].iItemSerial = m_UserItem[tSourceSlot].iItemSerial;
	}

	index = 0;
	index = g_arItemTable[m_UserItem[tSourceSlot].sSid]->m_byWeight * sCount;
	/**************************└п└· └╬║е ├│╕о*********************************************/
	if(sCount >= sHaveCount && iOver == 0)
	{
		MakeItemLog( &m_GuildItem[tDestSlot], ITEMLOG_GUILD_BANKIN );
		ReSetItemSlot(&m_UserItem[tSourceSlot]);	
	}
	else m_UserItem[tSourceSlot].sCount -= sCount;
	
	/**************************DB Update ├│╕о*********************************************/
	if(UpdateGuildWarehouse() == FALSE)
	{
		for(i = 0; i < TOTAL_ITEM_NUM; i++)// ╛╞└╠┼█ ┴д║╕ ║╣┐°
		{
			m_UserItem[i] = MyItem[i];
		}
		m_GuildItem[tDestSlot] = BackItem;

		result = FAIL;

		FlushItemLog( FALSE );

		goto go_result;
	}

	FlushItemLog( TRUE );

	UpdateUserData();

go_result:
	TempBuf.Add(GUILD_ITEM_MOVE_RESULT);

	if(result == FAIL)
	{
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	m_iCurWeight -= index;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	result = (BYTE)0x01;
	TempBuf.Add(result);

	TempBuf.Add((BYTE)tDestSlot);				// ▒ц╡х	
	TempBuf.Add(m_GuildItem[tDestSlot].sLevel);
	TempBuf.Add(m_GuildItem[tDestSlot].sSid);
	TempBuf.Add(m_GuildItem[tDestSlot].sDuration);
	TempBuf.Add(m_GuildItem[tDestSlot].sBullNum);
	TempBuf.Add(m_GuildItem[tDestSlot].sCount);
	for(i = 0; i < MAGIC_NUM; i++) TempBuf.Add(m_GuildItem[tDestSlot].tMagic[i]);
	TempBuf.Add(m_GuildItem[tDestSlot].tIQ);

	TempBuf.Add((BYTE)tSourceSlot);				// └п└· └╬║е
	TempBuf.Add(m_UserItem[tSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[tSourceSlot].sSid);
	TempBuf.Add(m_UserItem[tSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[tSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[tSourceSlot].sCount);
	for(i = 0; i < MAGIC_NUM; i++) TempBuf.Add(m_UserItem[tSourceSlot].tMagic[i]);
	TempBuf.Add(m_UserItem[tSourceSlot].tIQ);

	Send(TempBuf, TempBuf.GetLength());

	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...

//	SendQuickChange();							// ─№╛╞└╠┼█ ╡ю╖╧╟╤░╘ ├ы╝╥╡╟┤┬┴Ў ╛╦╛╞║╗┤┘. 
//	SendItemWeightChange();				// ╟Ў└ч ╛╞└╠┼█ ╣л░╘╕ж ║╕│╜┤┘.
}


////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ├в░э┐б╝н ╛╞└╠┼█└╗ ░б┴о┐┬┤┘.
//
void USER::GuildOutPut(TCHAR *pBuf) //╛№═┼▓╓┐т ╚б│Ў
{
	int i, iWeight = 0;
	int tDestSlot;
	int index = 0;
	int iOver = 0;
	short sSid = -1;
	short sHaveCount = 0;

	BYTE result = SUCCESS;

	CBufferEx TempBuf;

	ItemList MyItem[TOTAL_ITEM_NUM], BackItem;

	if(!m_bGuildMaster) 
	{
		SendSystemMsg( IDS_USER_NO_PERMISSION_USE, SYSTEM_NORMAL, TO_ME);
		return;
	}
	BYTE tSourceSlot = GetByte(pBuf, index);	// ╗ч┐ы└┌ ╛╞└╠┼█└╠ └╓┤° ╜╜╖╘ └з─б
	short sCount = GetShort(pBuf, index);
												// ┐└╖╬┴Ў └╬║е╕╕ ░б┤╔╟╧┤┘.			
	if(tSourceSlot >= TOTAL_BANK_ITEM_NUM) { result = FAIL; goto go_result; }

	if ( m_bPShopOpen == TRUE || m_bNowTrading == TRUE) { result = FAIL; goto go_result; }//╬┤╓кBUG

	sSid = m_GuildItem[tSourceSlot].sSid;
	sHaveCount = m_GuildItem[tSourceSlot].sCount;
    
    if(sSid == 724)
	{
		if ( FindItem(724) +  sCount >32000)
		{
			SendEventMsg("│м╣¤╫ю┤є╨п┤°┴┐!");
		    result = FAIL;
		    goto go_result;
		}
	}

    if(sSid < 0 || sSid >= g_arItemTable.GetSize()) { result = FAIL; goto go_result; }

	if(sCount < 0 || sCount > sHaveCount/* || sCount > BANK_MAX_ITEM*/) { result = FAIL; goto go_result; }

//	if(g_arItemTable[sSid]->m_byWear <= 5 && sCount > 1) { result = FAIL; goto go_result; }
	if(g_arItemTable[sSid]->m_sDuration > 0 && sCount > 1) { result = FAIL; goto go_result; }

	iWeight = g_arItemTable[sSid]->m_byWeight * sCount;
	if(m_iMaxWeight < m_iCurWeight + iWeight)
	{
		SendSystemMsg( IDS_USER_OVER_WEIGHT1, SYSTEM_ERROR, TO_ME);
		result = FAIL; 
		goto go_result;
	}

	for(i = 0; i < TOTAL_ITEM_NUM; i++)	// ╛╞└╠┼█ ┴д║╕ ╣щ╛ў
	{
		MyItem[i] = m_UserItem[i];
	}

	ReSetItemSlot(&BackItem);					// DB╜╟╞╨┐б ┤ы║ё╟╤ ╣щ╛ў┐ы ├╩▒т╚н
	BackItem = m_GuildItem[tSourceSlot];

												
	tDestSlot = GetSameItem(m_GuildItem[tSourceSlot], INVENTORY_SLOT);
	
	/***************************▒ц╡х├в░э ╛ў╣л ├│╕о********************************************/
	if(tDestSlot >= 0)							// ╟╫╗є ╗ї╖╬└╠ ├▀░б ╡╟┤┬░═└╗ ▒т┴╪└╕╖╬ ├│╕о
	{		
		m_UserItem[tDestSlot].sCount += sCount;
	}
	else
	{											//	├▀░б
		tDestSlot = GetEmptySlot(INVENTORY_SLOT);

		if(tDestSlot == -1) 
		{
			result = FAIL; goto go_result; 
		}

		m_UserItem[tDestSlot].sLevel = m_GuildItem[tSourceSlot].sLevel;
		m_UserItem[tDestSlot].sSid = m_GuildItem[tSourceSlot].sSid;
		m_UserItem[tDestSlot].sDuration = m_GuildItem[tSourceSlot].sDuration;
		m_UserItem[tDestSlot].sBullNum = m_GuildItem[tSourceSlot].sBullNum;
		m_UserItem[tDestSlot].sCount = sCount;
		for(i = 0; i < MAGIC_NUM; i++) m_UserItem[tDestSlot].tMagic[i] = m_GuildItem[tSourceSlot].tMagic[i];
		m_UserItem[tDestSlot].tIQ = m_GuildItem[tSourceSlot].tIQ;
		m_UserItem[tDestSlot].iItemSerial = m_GuildItem[tSourceSlot].iItemSerial;

		MakeItemLog( &m_UserItem[tDestSlot], ITEMLOG_GUILD_BANKOUT );
	}

	/**************************▒ц╡х  ├│╕о*********************************************/
	if(sCount >= sHaveCount) ReSetItemSlot(&m_GuildItem[tSourceSlot]);	
	else m_GuildItem[tSourceSlot].sCount -= sCount;
	
	/**************************DB Update ├│╕о*********************************************/
	if(UpdateGuildWarehouse() == FALSE)
	{
		for(i = 0; i < TOTAL_ITEM_NUM; i++)// ╛╞└╠┼█ ┴д║╕ ║╣┐°
		{
			m_UserItem[i] = MyItem[i];
		}
		m_GuildItem[tSourceSlot] = BackItem;

		result = FAIL;

		FlushItemLog( FALSE );

		goto go_result;
	}

	FlushItemLog( TRUE );

	UpdateUserData();

go_result:
	TempBuf.Add(GUILD_ITEM_MOVE_RESULT);

	if(result == FAIL)
	{
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	result = (BYTE)0x02;
	TempBuf.Add(result);

	TempBuf.Add((BYTE)tSourceSlot);
	TempBuf.Add(m_GuildItem[tSourceSlot].sLevel);
	TempBuf.Add(m_GuildItem[tSourceSlot].sSid);
	TempBuf.Add(m_GuildItem[tSourceSlot].sDuration);
	TempBuf.Add(m_GuildItem[tSourceSlot].sBullNum);
	TempBuf.Add(m_GuildItem[tSourceSlot].sCount);
	for(i = 0; i < MAGIC_NUM; i++) TempBuf.Add(m_GuildItem[tSourceSlot].tMagic[i]);
	TempBuf.Add(m_GuildItem[tSourceSlot].tIQ);

	TempBuf.Add((BYTE)tDestSlot);
	TempBuf.Add(m_UserItem[tDestSlot].sLevel);
	TempBuf.Add(m_UserItem[tDestSlot].sSid);
	TempBuf.Add(m_UserItem[tDestSlot].sDuration);
	TempBuf.Add(m_UserItem[tDestSlot].sBullNum);
	TempBuf.Add(m_UserItem[tDestSlot].sCount);
	for(i = 0; i < MAGIC_NUM; i++) TempBuf.Add(m_UserItem[tDestSlot].tMagic[i]);
	TempBuf.Add(m_UserItem[tDestSlot].tIQ);

	Send(TempBuf, TempBuf.GetLength());

	if(m_UserItem[tDestSlot].sSid < 0 || m_UserItem[tDestSlot].sSid >= g_arItemTable.GetSize()) return;

	m_iCurWeight += (g_arItemTable[m_UserItem[tDestSlot].sSid]->m_byWeight * sCount);
	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...
//	SendItemWeightChange();				// ╟Ў└ч ╛╞└╠┼█ ╣л░╘╕ж ║╕│╜┤┘.
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ├в░э┐б ╡╖└╗ │╓┤┬┤┘.
//
void USER::GuildInPutDN(TCHAR *pBuf)  //╛№═┼▓╓┐т ┤ц╚ы╜Ё╟о
{
	CBufferEx TempBuf;

	BYTE result; 
	int index = 0;
	DWORD BackGuildDN = 0, BackMyDN = 0;

	DWORD InputDN = GetDWORD(pBuf, index);

	TempBuf.Add(GUILD_ITEM_MOVE_RESULT);

	if(InputDN > m_dwDN) 
	{
		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}
	if ( m_bPShopOpen == TRUE || m_bNowTrading == TRUE)
	{
		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return; //╬┤╓кBUG
	}
	
	BackMyDN = m_dwDN;
	BackGuildDN = m_dwGuildDN;
										// └║╟р┐б └╘▒▌
	if(!CheckMaxValueReturn(m_dwGuildDN, InputDN))
	{									// ┤▄, MAX░к└╠╕щ ┬ў╛╫└║...
		CheckMaxValue(m_dwGuildDN, InputDN);
		if(m_dwGuildDN < InputDN) InputDN = 0;
		else InputDN = m_dwGuildDN - InputDN;
	}
	else m_dwGuildDN += InputDN;
										// ░б┴Ў░э └╓┤┬ ╝╥┴Ў▒▌┐б╝н ╗л┤┘.
	if(m_dwDN <= InputDN) m_dwDN = 0;
	else m_dwDN -= InputDN;

	MakeMoneyLog( InputDN, ITEMLOG_GUILD_BANKIN_MONEY, NULL, m_dwGuildDN );

	if(UpdateGuildWarehouse() == FALSE)		// DB UpDate
	{
		m_dwDN = BackMyDN;
		m_dwGuildDN = BackGuildDN;

		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		FlushItemLog( FALSE );
		return;
	}

	FlushItemLog( TRUE );

	UpdateUserData();

	result = (BYTE)0x03;				// 3 : DN └╘▒▌
	TempBuf.Add(result);

	TempBuf.Add(m_dwGuildDN);			// └║╟р│╗ └╘▒▌╟╤ ├╤▒▌╛╫
	TempBuf.Add(m_dwDN);				// ╝╥┴Ў╟╤ ├╤▒▌╛╫

	Send(TempBuf, TempBuf.GetLength());
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ├в░э┐б╝н ╡╖└╗ ░б┴о┐┬┤┘.
//
void USER::GuildOutPutDN(TCHAR *pBuf) //╛№═┼▓╓┐т ╚б│Ў╜Ё╟о
{
	CBufferEx TempBuf;

	BYTE result; 
	int index = 0;

	if(!m_bGuildMaster) 
	{
		SendSystemMsg( IDS_USER_NO_PERMISSION_USE, SYSTEM_NORMAL, TO_ME);
		return;
	}
	if ( m_bPShopOpen == TRUE || m_bNowTrading == TRUE) return; //╬┤╓кBUG

	DWORD BackGuildDN = 0, BackMyDN = 0;

	DWORD OutputDN = GetDWORD(pBuf, index);

	TempBuf.Add(GUILD_ITEM_MOVE_RESULT);

	if(OutputDN > m_dwGuildDN)			// │╩╣л ┼й╕щ
	{
		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	BackMyDN = m_dwDN;					// ╣щ╛ў
	BackGuildDN = m_dwGuildDN;
										
	if(!CheckMaxValueReturn(m_dwDN, OutputDN))
	{									// ┤▄, MAX░к└╠╕щ ┬ў╛╫└║...
		CheckMaxValue(m_dwDN, OutputDN);
		if(m_dwDN < OutputDN) OutputDN = 0;
		else OutputDN = m_dwDN - OutputDN;
	}
	else m_dwDN += OutputDN;
										// ▒ц╡х┐б╝н ╗л┤┘.
	if(OutputDN == m_dwGuildDN) m_dwGuildDN = 0;
	else m_dwGuildDN -= OutputDN;

	MakeMoneyLog( OutputDN, ITEMLOG_GUILD_BANKOUT_MONEY, NULL, m_dwGuildDN );

	if(UpdateGuildWarehouse() == FALSE)		// DB UpDate
	{
		m_dwDN = BackMyDN;
		m_dwGuildDN = BackGuildDN;

		result = FAIL;
		TempBuf.Add(result);
		Send(TempBuf, TempBuf.GetLength());

		FlushItemLog( FALSE );
		return;
	}

	FlushItemLog( TRUE );

	UpdateUserData();

	result = (BYTE)0x04;				// 4 : DN ├т▒▌
	TempBuf.Add(result);

	TempBuf.Add(m_dwGuildDN);			// ▒ц╡х│╗ └╘▒▌╟╤ ├╤▒▌╛╫
	TempBuf.Add(m_dwDN);				// ╝╥┴Ў╟╤ ├╤▒▌╛╫

	Send(TempBuf, TempBuf.GetLength());
}

////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ├в░э ║п╚н╕ж ░╗╜┼╟╤┤┘.
//
BOOL USER::UpdateGuildWarehouse()
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strItem[_ITEM_DB], strGuildItem[_BANK_DB], strQuickItem[_QUICKITEM_DB];
	int				i;

	SQLSMALLINT	sRet = 0;
	SQLINTEGER sRetInd;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strGuildItem, sizeof(strGuildItem));
	::ZeroMemory(strItem, sizeof(strItem));
	::ZeroMemory(strQuickItem, sizeof(strQuickItem));

	GuildItemToStr(strGuildItem);
	UserItemToStr(strItem);

	SDWORD sGuildItemLen= sizeof(strGuildItem);
	SDWORD sItemLen		= sizeof(strItem);
	SDWORD sQuickLen	= sizeof(strQuickItem);

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_GUILD_WAREHOUSE_DATA (\'%s\', \'%s\', %d, ?, ?, %d, ?, ?)}"), m_strUserID, m_strGuildName, m_dwDN, m_dwGuildDN);

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Update Guild Warehouse Data !!\n");

		//g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}
	
	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strItem),	0, (TCHAR*)strItem,		0, &sItemLen );
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strQuickItem),	0, (TCHAR*)strQuickItem,	0, &sQuickLen );
		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strGuildItem),	0, (TCHAR*)strGuildItem,0, &sGuildItemLen );
		SQLBindParameter( hstmt, i++ ,SQL_PARAM_OUTPUT,SQL_C_SSHORT, SQL_SMALLINT, 0, 0, &sRet, 0, &sRetInd);

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			BREAKPOINT();

			g_DB[m_iModSid].ReleaseDB(db_index);
			return FALSE;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		BREAKPOINT();

		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);
	
	if(sRet == 255) return FALSE;

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

////////////////////////////////////////////////////////////////////////////////
//	E_Body ╗є┴б└╗ ┐м┤┘.
//
void USER::SendEBodyOpen(int nStore)
{
/*
	CBufferEx TempBuf;
	int i = 0;
	short sid = 0;
	short sCount = 0;
	DWORD dwCost = 0, dwXP = 0;

	CStore* pStore = NULL;

	pStore = GetEbodyStore(nStore);
	if(pStore == NULL) return;

	sCount = pStore->m_arItems.GetSize();
	TempBuf.Add(EBODY_OPEN);
	TempBuf.Add((short)nStore);
	TempBuf.Add(sCount);

	for(i = 0; i < pStore->m_arItems.GetSize(); i++)
	{
		sid = (short)pStore->m_arItems[i];

		dwCost = g_arEBodyTable[sid]->m_iDN;
		dwXP = g_arEBodyTable[sid]->m_iXP;

		TempBuf.Add(sid);
		TempBuf.Add(dwXP);
		TempBuf.Add(dwCost);
	}

	Send(TempBuf, TempBuf.GetLength());
*/
}

////////////////////////////////////////////////////////////////////////////////
//	E_Body ▒╕└╘└╗ ╟╤┤┘.
//
void USER::EBodyBuyReq(TCHAR *pBuf)
{
/*
	return;			//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

	int index = 0;
	short sSid = 0;
	short sStoreID = 0;			// ╗є┴б ╛╞└╠╡Ё

	BOOL bSell = FALSE;	

	CBufferEx TempBuf;

	BYTE tNeedClass;
	BYTE tMyClass;
	BYTE tTemp = 1;	
	BYTE tFire = 0;
	BYTE tEdge = 0;
	BYTE tStaff = 0;
	BYTE tBrawl = 0;

	CStore* pStore = NULL;

	sStoreID = GetShort(pBuf, index);

	pStore = GetEbodyStore(sStoreID);
	if(pStore == NULL) return;//{ tResult = FAIL; goto go_result; }

	sSid = GetShort(pBuf, index);

	if(sSid < 0 || sSid >= g_arEBodyTable.GetSize()) return;

	for(int i = 0; i < pStore->m_arItems.GetSize(); i++)
	{
		if(pStore->m_arItems[i] == sSid) { bSell = TRUE; break; }
	}

	if(!bSell) return;

	tNeedClass = g_arEBodyTable[sSid]->m_tClass;
	tMyClass = m_byClass;

	tFire	 = tTemp & tNeedClass; tTemp = 2; 
	tEdge	 = tTemp & tNeedClass; tTemp = 4;
	tStaff	 = tTemp & tNeedClass; tTemp = 8;
	tBrawl	 = tTemp & tNeedClass;

	tFire = tFire & tMyClass;
	tEdge = tEdge & tMyClass;
	tStaff = tStaff & tMyClass;
	tBrawl = tBrawl & tMyClass;

	tTemp = tFire^tEdge^tStaff^tBrawl;
	if(!tTemp) return;

	if(m_dwXP < g_arEBodyTable[sSid]->m_iXP) return;

	if(m_dwDN < g_arEBodyTable[sSid]->m_iDN) return;

	if(m_sSTR + g_arEBodyTable[sSid]->m_sAddBasic[0] < m_sTempSTR) return;
	if(m_sCON + g_arEBodyTable[sSid]->m_sAddBasic[1] < m_sTempCON) return;
	if(m_sDEX + g_arEBodyTable[sSid]->m_sAddBasic[2] < m_sTempDEX) return;
	if(m_sVOL + g_arEBodyTable[sSid]->m_sAddBasic[3] < m_sTempVOL) return;
	if(m_sWIS + g_arEBodyTable[sSid]->m_sAddBasic[4] < m_sTempWIS) return;

	if(g_arEBodyTable[sSid]->m_sAddBasic[0] != 0)
	{
		m_sSTR = m_sSTR + g_arEBodyTable[sSid]->m_sAddBasic[0];
	}

	if(g_arEBodyTable[sSid]->m_sAddBasic[1] != 0)
	{
		m_sCON = m_sCON + g_arEBodyTable[sSid]->m_sAddBasic[1];
	}

	if(g_arEBodyTable[sSid]->m_sAddBasic[2] != 0)
	{
		m_sDEX = m_sDEX + g_arEBodyTable[sSid]->m_sAddBasic[2];
	}

	if(g_arEBodyTable[sSid]->m_sAddBasic[3] != 0)
	{
		m_sVOL = m_sVOL + g_arEBodyTable[sSid]->m_sAddBasic[3];
	}

	if(g_arEBodyTable[sSid]->m_sAddBasic[4] != 0)
	{
		m_sWIS = m_sWIS + g_arEBodyTable[sSid]->m_sAddBasic[4];
	}

	SetUserToMagicUser();
	SendUserStatusSkill();

	TempBuf.Add(EBODY_BUY_RESULT);
	TempBuf.Add((BYTE)0x01);
	TempBuf.Add(sSid);

	Send(TempBuf, TempBuf.GetLength());
*/
}


////////////////////////////////////////////////////////////////////////////////
//	╟Ў└ч ┴в╝╙┴▀└╬ ▒ц╡х┐° ┴д║╕╕ж ║╕│╜┤┘.
//
void USER::GuildUserInfoReq(TCHAR *pBuf)
{
	int i;
	int nCount = 0; 
	int nLength = 0;
	USER *pUser = NULL;
	CGuild *pGuild = NULL;
//	CGuildUser *pGuildUser = NULL;

	TCHAR GuildMaster[CHAR_NAME_LENGTH + 1];						// ▒ц╕╢ └╠╕з

	CBufferEx TempBuf, TempBufData; 
//	CWordArray	arLevel;

	if(m_dwGuild <= 0) return;										// ▒ц╡х╣°╚г░б ╛°└╕╕щ ▒ц╡х┐°└╠ ╛╞┤╧┤┘.
	
	pGuild = GetGuild(m_dwGuild);

	if(!pGuild)														// ╟╪┤ч ▒ц╡х░б ┴╕└ч╟╧┴Ў ╛╩┤┬┤┘.	
	{
		m_dwGuild = -1;
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}

	nCount = -1;
	nCount = pGuild->GetUser(m_strUserID);
	if(nCount < 0)													// ▒ц╡х┐°└╠ ╛╞┤╧╕щ	
	{
		m_dwGuild = -1;												// └╧┤▄ ▒ц╡х └╬╡ж╜║╕ж ├╩▒т╚н
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}
/*
	nCount = pGuild->m_arUser.GetSize();

	if(nCount <= 0 || nCount > MAX_GUILD_USER)						// ▒ц╡х└╬┐°╝Ў░б ├╓┤ы─б╕ж │╤╛·┤┘.
	{
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}
*/
	nLength = strlen(pGuild->m_strMasterName);
	::ZeroMemory(GuildMaster, sizeof(GuildMaster));
	if(nLength > 0 && nLength <= CHAR_NAME_LENGTH) strncpy(GuildMaster, pGuild->m_strMasterName, nLength);
	else															// ╟╪┤ч ▒ц╡х┐б ▒ц╕╢░б ┴╕└ч╟╧┴Ў ╛╩┤┬┤┘.	
	{
		m_dwGuild = -1;
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}

	ReleaseGuild();													// ╟╪┴ж...

	nCount = 0;
	for(i = 0; i< MAX_USER; i++)
	{
		pUser = m_pCom->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;

		if(m_dwGuild == pUser->m_dwGuild)
		{
			TempBufData.AddString(pUser->m_strUserID);
			TempBufData.Add(pUser->m_sLevel);
			nCount++;
		}
	}

	TempBuf.Add(GUILD_USER_INFO_RESULT);
	//TempBuf.Add((BYTE)0x00);										// └╧╣▌ ▒ц╡х └п└·░б ┐ф▒╕
	TempBuf.Add(m_nGuildUserInfoType);								//yskang 0.2
	TempBuf.AddString(GuildMaster);									// ▒ц╡х ╕╢╜║┼═ └╠╕з└╗ ╕╒└·
	TempBuf.Add((BYTE)nCount);										// ╟Ў└ч ▒ц╡х┐° └п└·╝Ў
	TempBuf.AddData(TempBufData, TempBufData.GetLength());
	m_nGuildUserInfoType = 0x00;
	Send(TempBuf, TempBuf.GetLength());
}

//	▒ц╡х┬п└╠ └№├╝ ▒ц╡х┐° ┴д║╕╕ж ┐ф▒╕.
//
//=======================================================================================╛№═┼╒┘╗╜
void USER::GuildUserInfoReqzh()
{
	int i;
	int nCount = 0; 
	int nLength = 0;
	USER *pUser = NULL;
	CGuild *pGuild = NULL;
//	CGuildUser *pGuildUser = NULL;

	TCHAR GuildMaster[CHAR_NAME_LENGTH + 1];						// ▒ц╕╢ └╠╕з

	CBufferEx TempBuf, TempBufData; 
//	CWordArray	arLevel;

	if(m_dwGuild <= 0) return;										// ▒ц╡х╣°╚г░б ╛°└╕╕щ ▒ц╡х┐°└╠ ╛╞┤╧┤┘.
	if ( m_curz == 416)
	{
		SendEventMsg("┤╦╡╪╓╖▓╗╘╩╨э╩╣╙├╒┘╗╜!");
		return;
	}
	
	pGuild = GetGuild(m_dwGuild);

	if(!pGuild)														// ╟╪┤ч ▒ц╡х░б ┴╕└ч╟╧┴Ў ╛╩┤┬┤┘.	
	{
		m_dwGuild = -1;
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}

	nCount = -1;
	nCount = pGuild->GetUser(m_strUserID);
	if(nCount < 0)													// ▒ц╡х┐°└╠ ╛╞┤╧╕щ	
	{
		m_dwGuild = -1;												// └╧┤▄ ▒ц╡х └╬╡ж╜║╕ж ├╩▒т╚н
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}
/*
	nCount = pGuild->m_arUser.GetSize();

	if(nCount <= 0 || nCount > MAX_GUILD_USER)						// ▒ц╡х└╬┐°╝Ў░б ├╓┤ы─б╕ж │╤╛·┤┘.
	{
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}
*/
	nLength = strlen(pGuild->m_strMasterName);
	::ZeroMemory(GuildMaster, sizeof(GuildMaster));
	if(nLength > 0 && nLength <= CHAR_NAME_LENGTH) strncpy(GuildMaster, pGuild->m_strMasterName, nLength);
	else															// ╟╪┤ч ▒ц╡х┐б ▒ц╕╢░б ┴╕└ч╟╧┴Ў ╛╩┤┬┤┘.	
	{
		m_dwGuild = -1;
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}

	ReleaseGuild();													// ╟╪┴ж...

	nCount = 0;
	for(i = 0; i< MAX_USER; i++)
	{
		pUser = m_pCom->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED|| pUser->m_bPShopOpen == TRUE || pUser->m_bNowTrading == TRUE  || pUser->m_bSessionOnline == TRUE || pUser->m_TuoJi==1 ) continue;

		if(m_dwGuild == pUser->m_dwGuild)
		{
			TempBufData.AddString(pUser->m_strUserID);
			TempBufData.Add(pUser->m_sLevel);
			nCount++;
		}
	}

	TempBuf.Add(GUILD_USER_INFO_RESULT);
	//TempBuf.Add((BYTE)0x00);										// └╧╣▌ ▒ц╡х └п└·░б ┐ф▒╕
	TempBuf.Add(m_nGuildUserInfoType);								//yskang 0.2
	TempBuf.AddString(GuildMaster);									// ▒ц╡х ╕╢╜║┼═ └╠╕з└╗ ╕╒└·
	TempBuf.Add((BYTE)nCount);										// ╟Ў└ч ▒ц╡х┐° └п└·╝Ў
	TempBuf.AddData(TempBufData, TempBufData.GetLength());
	m_nGuildUserInfoType = 0x00;
	Send(TempBuf, TempBuf.GetLength());
}
void USER::GuildUserAllInforChat()
{
	int i;
	int nCount = 0; 
	int nLength = 0;
	USER *pUser = NULL;
	CGuild *pGuild = NULL;
//	CGuildUser *pGuildUser = NULL;

	CBufferEx TempBuf, TempBufData; 
//	CWordArray	arLevel;

	if(m_dwGuild <= 0) return;										// ▒ц╡х╣°╚г░б ╛°└╕╕щ ▒ц╡х┐°└╠ ╛╞┤╧┤┘.
	if(!m_bGuildMaster) return;										// ▒ц╡х╣°╚г░б ╛°└╕╕щ ▒ц╡х┐°└╠ ╛╞┤╧┤┘.
	
	pGuild = GetGuild(m_dwGuild);

	if(!pGuild)														// ╟╪┤ч ▒ц╡х░б ┴╕└ч╟╧┴Ў ╛╩┤┬┤┘.	
	{
		m_dwGuild = 0;
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}
/*	
	nCount = pGuild->m_arUser.GetSize();

	if(nCount <= 0 || nCount > MAX_GUILD_USER)						// ▒ц╡х└╬┐°╝Ў░б ├╓┤ы─б╕ж │╤╛·┤┘.
	{
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}
*/
	for(i = 0; i < MAX_GUILD_USER; i++)
	{
		if(pGuild->m_arUser[i].m_lUsed != 0)
		{
			TempBufData.AddString(pGuild->m_arUser[i].m_strUserId);
			TempBufData.Add((short)0x00);
			nCount++;
		}
	}

	ReleaseGuild();	// ╟╪┴ж...
/*
	nCount = 0;
	for(i = 0; i< MAX_USER; i++)
	{
		pUser = m_pCom->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;

		if(m_dwGuild == pUser->m_dwGuild)
		{
			TempBufData.AddString(pUser->m_strUserID);
			TempBufData.Add(pUser->m_sLevel);
			nCount++;
		}
	}
*/
	TempBuf.Add(GUILD_USER_INFO_RESULT);
	TempBuf.Add((BYTE)0x00);										// └╧╣▌ ▒ц╡х └п└·░б ┐ф▒╕
	TempBuf.AddString(m_strUserID);									// ▒ц╡х ╕╢╜║┼═ └╠╕з└╗ ╕╒└·
	TempBuf.Add((BYTE)nCount);										// ╟Ў└ч ▒ц╡х┐° └п└·╝Ў
	TempBuf.AddData(TempBufData, TempBufData.GetLength());
	
	Send(TempBuf, TempBuf.GetLength());
}
/*
////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х┬п└╠ └№├╝ ▒ц╡х┐° ┴д║╕╕ж ┐ф▒╕.
//
void USER::GuildUserAllInforChat()
{
	int i;
	int nCount = 0; 
	int nLength = 0;
	USER *pUser = NULL;
	CGuild *pGuild = NULL;
	CGuildUser *pGuildUser = NULL;

	CBufferEx TempBuf, TempBufData; 
	CWordArray	arLevel;

	if(m_dwGuild <= 0) return;										// ▒ц╡х╣°╚г░б ╛°└╕╕щ ▒ц╡х┐°└╠ ╛╞┤╧┤┘.
	if(!m_bGuildMaster) return;										// ▒ц╡х╣°╚г░б ╛°└╕╕щ ▒ц╡х┐°└╠ ╛╞┤╧┤┘.
	
	pGuild = GetGuild(m_dwGuild);

	if(!pGuild)														// ╟╪┤ч ▒ц╡х░б ┴╕└ч╟╧┴Ў ╛╩┤┬┤┘.	
	{
		m_dwGuild = 0;
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}
	
	nCount = pGuild->m_arUser.GetSize();

	if(nCount <= 0 || nCount > MAX_GUILD_USER)						// ▒ц╡х└╬┐°╝Ў░б ├╓┤ы─б╕ж │╤╛·┤┘.
	{
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}

	ReleaseGuild();	// ╟╪┴ж...

	nCount = 0;

	for(i = 0; i< MAX_USER; i++)
	{
		pUser = m_pCom->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;

		if(m_dwGuild == pUser->m_dwGuild)
		{
			TempBufData.AddString(pUser->m_strUserID);
			TempBufData.Add(pUser->m_sLevel);
			nCount++;
		}
	}

	TempBuf.Add(GUILD_USER_INFO_RESULT);
	TempBuf.Add((BYTE)0x00);										// └╧╣▌ ▒ц╡х └п└·░б ┐ф▒╕
	TempBuf.AddString(m_strUserID);									// ▒ц╡х ╕╢╜║┼═ └╠╕з└╗ ╕╒└·
	TempBuf.Add((BYTE)nCount);										// ╟Ў└ч ▒ц╡х┐° └п└·╝Ў
	TempBuf.AddData(TempBufData, TempBufData.GetLength());
	
	Send(TempBuf, TempBuf.GetLength());
}
*/
////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х ╟╧┐ь╜║║╨╛ч┐б ┬№░б╟╧▒т└з╟╪ ╟Ў└ч ░░└║ ┴╕└╟ ▒ц╡х┐° ┴д║╕╕ж ║╕│╜┤┘.
//
void USER::SendGuildUserInfo(int zone)
{
	int i, index = -1;
	int nCount = 0; 
	int nLength = 0;

	BOOL bSame = FALSE;

	USER *pUser = NULL;
	CGuild *pGuild = NULL;
//	CGuildUser *pGuildUser = NULL;
	CGuildUser *pGuildUser = NULL;
	CGuildFortress *pFort = NULL;

	TCHAR GuildMaster[CHAR_NAME_LENGTH + 1];						// ▒ц╕╢ └╠╕з

	CBufferEx TempBuf, TempBufData; 
//	CDWordArray	arUid;
	
//	arUid.RemoveAll();

	if(m_dwGuild <= 0) return;										// ▒ц╡х╣°╚г░б ╛°└╕╕щ ▒ц╡х┐°└╠ ╛╞┤╧┤┘.
	if(!m_bGuildMaster) return;										// ┐└╖╬┴Ў ▒ц╕╢╕╕└╠ ╜┼├╗╟╥╝Ў └╓┤┘.	

	for(i = 0; i < g_arGuildFortress.GetSize(); i++)
	{
		if(!g_arGuildFortress[i]) continue;

		pFort = g_arGuildFortress[i];

		if(pFort->m_iGuildSid == m_dwGuild) 
		{
			SendSystemMsg( IDS_USER_CANT_APPLY_HAVE_FORTRESS, SYSTEM_NORMAL, TO_ME);
			return;
		}
	}

	i = GetCityNumForVirtualRoom(zone);
	if(i < 0 || i >= g_arGuildHouseWar.GetSize()) return;

	if(g_arGuildHouseWar[i]->m_CurrentGuild.lUsed == 1) 
	{		
		SendSystemMsg( IDS_USER_ALREADY_OTHER_GUILD_USE, SYSTEM_ERROR, TO_ME);
		return;
	}

	for(i = 0; i < g_arGuildHouseWar.GetSize(); i++)
	{
		if(g_arGuildHouseWar[i]->m_CurrentGuild.iWarZone == m_curz) { bSame = TRUE; break; }
	}

	if(bSame) return;

	pGuild = GetGuild(m_dwGuild);

	if(!pGuild)														// ╟╪┤ч ▒ц╡х░б ┴╕└ч╟╧┴Ў ╛╩┤┬┤┘.	
	{
		m_dwGuild = -1;
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}

	index = pGuild->GetUser(m_strUserID);

	if(index < 0)														// ▒ц╡х┐°└╠ ╛╞┤╧╕щ	
	{
		m_dwGuild = -1;												// └╧┤▄ ▒ц╡х └╬╡ж╜║╕ж ├╩▒т╚н
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}

/*	nCount = pGuild->m_arUser.GetSize();

	if(nCount <= 0 || nCount > MAX_GUILD_USER)						
	{
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}
*/
	nLength = strlen(pGuild->m_strMasterName);
	::ZeroMemory(GuildMaster, sizeof(GuildMaster));
	if(nLength > 0 && nLength <= CHAR_NAME_LENGTH) strncpy(GuildMaster, pGuild->m_strMasterName, nLength);
	else															// ╟╪┤ч ▒ц╡х┐б ▒ц╕╢░б ┴╕└ч╟╧┴Ў ╛╩┤┬┤┘.	
	{
		m_dwGuild = -1;
		ReleaseGuild();												// ╟╪┴ж...
		return;
	}

	ReleaseGuild();													// ╟╪┴ж...

	nCount = 0;
	for(i = 0; i< MAX_USER; i++)
	{
		pUser = m_pCom->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;

		if(m_dwGuild == pUser->m_dwGuild)
		{
			TempBufData.AddString(pUser->m_strUserID);
			TempBufData.Add(pUser->m_sLevel);
			TempBufData.Add(pUser->m_uid + USER_BAND);
			nCount++;
		}
	}

	TempBuf.Add(GUILD_USER_INFO_RESULT);
	TempBuf.Add((BYTE)0x01);										// └╧╣▌ ▒ц╡х └п└·░б ┐ф▒╕
	TempBuf.AddString(m_strUserID);									// ▒ц╡х ╕╢╜║┼═ └╠╕з└╗ ╕╒└·
	TempBuf.Add((BYTE)nCount);										// ╟Ў└ч ▒ц╡х┐° └п└·╝Ў
	TempBuf.AddData(TempBufData, TempBufData.GetLength());
	TempBuf.Add((short)zone);
	
	Send(TempBuf, TempBuf.GetLength());
}

////////////////////////////////////////////////////////////////////////////////////////
// └║╟р┴д║╕╕ж ╕▐╕Ё╕о DB┐б └·└х╟╤┤┘ (╟Ў└ч┤┬ LoadUserBank┐б╝н╕╕ ║╬╕е┤┘.)
//
void USER::SetMemUserBank(LPCTSTR strItem)
{
	if(m_pSharedMemory->m_hMapping == NULL) return;
	if(m_pMD == NULL) return;
	if(m_pMD->m_uid == -1) return;

	if(m_pMD->m_uid != m_uid || _stricmp(m_strUserID, m_pMD->m_strUserID) != 0) return;

	m_pMD->m_UB.m_uid = m_uid;
	strcpy(m_pMD->m_UB.m_strUserID, m_strUserID);
	//strncpy(m_pMD->m_UB.m_UserBankItem, strItem, _BANK_DB);
	memcpy(m_pMD->m_UB.m_UserBankItem, strItem, _BANK_DB);
	m_pMD->m_UB.m_dwBankDN = m_dwBankDN;
}

void USER::SetMemAccountBank(LPCTSTR strItem)
{
	if(m_pSharedMemory->m_hMapping == NULL) return;
	if(m_pMD == NULL) return;
	if(m_pMD->m_uid == -1) return;

	if(m_pMD->m_uid != m_uid || _stricmp(m_strUserID, m_pMD->m_strUserID) != 0) return;

	m_pMD->m_AB.m_uid = m_uid;
	strcpy(m_pMD->m_AB.m_strAccount, m_strAccount);
	memcpy(m_pMD->m_AB.m_AccountBankItem, strItem, _ACCOUNT_BANK_DB);
	m_pMD->m_AB.m_dwBankDN = m_dwAccountBankDN;
}

////////////////////////////////////////////////////////////////////////////////////////
//	╕▐╕Ё╕о╡Ё║ё┐б └п└·└║╟р┴д║╕░б └╓└╕╕щ ░б┴о┐┬┤┘.
//
BOOL USER::LoadMemUserBank()
{
	if(m_pSharedMemory->m_hMapping == NULL) return FALSE;
	if(m_pMD == NULL) return FALSE;
	if(m_pMD->m_uid == -1) return FALSE;
	if(m_pMD->m_uid != m_uid || _stricmp(m_strUserID, m_pMD->m_strUserID) != 0) return FALSE;
	if(m_pMD->m_UB.m_uid != m_uid || _stricmp(m_strUserID, m_pMD->m_UB.m_strUserID) != 0) return FALSE;

	StrToUserBankItem((LPTSTR)m_pMD->m_UB.m_UserBankItem);
	m_dwBankDN = m_pMD->m_UB.m_dwBankDN;

	return TRUE;
}

BOOL USER::LoadMemAccountBank()
{
	if(m_pSharedMemory->m_hMapping == NULL) return FALSE;
	if(m_pMD == NULL) return FALSE;
	if(m_pMD->m_uid == -1) return FALSE;
	if(m_pMD->m_uid != m_uid || _stricmp(m_strUserID, m_pMD->m_strUserID) != 0) return FALSE;

	if(m_pMD->m_AB.m_uid != m_uid || _stricmp(m_strAccount, m_pMD->m_AB.m_strAccount) != 0) return FALSE;

	StrToAccountBankItem((LPTSTR)m_pMD->m_AB.m_AccountBankItem);
	m_dwAccountBankDN = m_pMD->m_AB.m_dwBankDN;

	return TRUE;
}

BOOL USER::UpdateMemBankDataOnly()
{
	if(m_pSharedMemory->m_hMapping == NULL) return FALSE;
	if(m_pMD == NULL) return FALSE;
	if(m_pMD->m_uid == -1) return FALSE;
	if(m_pMD->m_uid != m_uid || _stricmp(m_strUserID, m_pMD->m_strUserID) != 0) return FALSE;
	if(m_pMD->m_UB.m_uid != m_uid || _stricmp(m_strUserID, m_pMD->m_UB.m_strUserID) != 0) return FALSE;

	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strBankItem[_BANK_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strBankItem, sizeof(strBankItem));
	
	::CopyMemory(strBankItem, m_pMD->m_UB.m_UserBankItem, _BANK_DB);
	
	SDWORD sBankItemLen	= sizeof(strBankItem);
	
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_BANK_DATA_ONLY (\'%s\',%d, ?)}"), m_strUserID, m_pMD->m_UB.m_dwBankDN);

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Update Mem User Bank Data Only!!\n");

		//g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter(hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strBankItem), 0, (TCHAR*)strBankItem, 0, &sBankItemLen);

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

			g_DB[m_iModSid].ReleaseDB(db_index);
			return FALSE;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return FALSE;

	m_pMD->m_UB.m_uid = -1;

	return TRUE;
}

BOOL USER::UpdateMemAccountBankDataOnly()
{
	if(m_pSharedMemory->m_hMapping == NULL) return FALSE;
	if(m_pMD == NULL) return FALSE;
	if(m_pMD->m_uid == -1) return FALSE;
	if(m_pMD->m_uid != m_uid || _stricmp(m_strUserID, m_pMD->m_strUserID) != 0) return FALSE;

	if(m_pMD->m_AB.m_uid != m_uid || _stricmp(m_strAccount, m_pMD->m_AB.m_strAccount) != 0) return FALSE;

	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strBankItem[_ACCOUNT_BANK_DB];
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strBankItem, sizeof(strBankItem));
	
	::CopyMemory(strBankItem, m_pMD->m_AB.m_AccountBankItem, _ACCOUNT_BANK_DB);
	
	SDWORD sBankItemLen	= sizeof(strBankItem);
	
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_ACCOUNT_BANK_DATA_ONLY (\'%s\',%d, ?)}")/*, m_pMD->m_iMyServer*/, m_pMD->m_strAccount, m_pMD->m_AB.m_dwBankDN);

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );

	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Update Mem User Bank Data Only!!\n");

		return FALSE;
	}

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter(hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strBankItem), 0, (TCHAR*)strBankItem, 0, &sBankItemLen);

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

			g_DB[m_iModSid].ReleaseDB(db_index);
			return FALSE;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

		g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return FALSE;

	m_pMD->m_AB.m_uid = -1;

	return TRUE;
}

////////////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х┐°│в╕о ├д╞├
//
void USER::GuildChat(TCHAR *pBuf)
{
	int i;

	USER *pUser = NULL;

	CBufferEx TempBuf;

	if(m_dwGuild <= 0) return;

	// alisia
	g_pMainDlg->BridgeServerUserGuildChatReq( m_uid, (int)m_dwGuild, m_strUserID, pBuf+1 );
	return;
	//

	TempBuf.Add(CHAT_RESULT);
	TempBuf.Add(SUCCESS);
	TempBuf.Add(GUILD_CHAT);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.AddString(m_strUserID);
	TempBuf.AddString(pBuf + 1);

	for(i = 0; i< MAX_USER; i++)
	{
		pUser = m_pCom->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;

		if(m_dwGuild == pUser->m_dwGuild) pUser->Send(TempBuf, TempBuf.GetLength());
	}
}


void USER::SendStoreTax(int nStore)
{
	CBufferEx TempBuf;

	int nLen = 0;
	short sTax = 0;

	CStore* pStore = NULL;
	CGuildFortress* pFort = NULL;

	if(!m_bGuildMaster) 
	{
		SendSystemMsg( IDS_USER_ONLY_USE_GUILD_MASTER, SYSTEM_ERROR, TO_ME);
		return;
	}

	if(nStore >= FORTRESS_BAND)						// ┐ф╗ї┐б ╝╙╟╤ ╗є┴б└╠╕щ...
	{
		pFort = GetFortress(nStore);
		if(pFort == NULL) return;

		if(pFort->m_iGuildSid != m_dwGuild) return;

		SYSTEMTIME st;
		SYSTEMTIME guildTime;

		GetLocalTime(&guildTime);
		st = pFort->m_wLastWarTime;
		COleDateTime LastTime(st.wYear, st.wMonth, st.wDay, st.wHour, 0, 0);
		COleDateTime CurrTime = COleDateTime(guildTime);

		if(CurrTime.m_status == COleDateTime::valid && LastTime.m_status == COleDateTime::valid)
		{
/*			CTime curr(CurrTime.GetYear(), CurrTime.GetMonth(), CurrTime.GetDay(), CurrTime.GetHour(), 0, 0);
			CTime last(LastTime.GetYear(), LastTime.GetMonth(), LastTime.GetDay(), LastTime.GetHour(), 0, 0);
			CTimeSpan DiffTime = curr - last;	
			
			int nTime = DiffTime.GetHours();
		
			if(nTime < UPDATE_GUILD_INVEN_TIME)
			{
				SendSystemMsg( IDS_USER_TEXT_CONTROL, SYSTEM_ERROR, TO_ME);
				return;
			}
*/
			sTax = pFort->m_tTaxRate;
		}
	}
	else
	{
		pStore = GetStore(nStore);
		if(pStore == NULL) return;

		sTax = pStore->m_sRate;
	}

	TempBuf.Add(GUILD_TAX_OPEN);
	TempBuf.Add((short)nStore);
	TempBuf.Add((short)sTax);
	Send(TempBuf, TempBuf.GetLength());
}

void USER::SendGuildWarScheme(int nStore)
{
	int nChatNum = -1;

	CBufferEx TempBuf;

	CStore* pStore = NULL;
	CGuildFortress* pFort = NULL;	

	if(nStore >= FORTRESS_BAND)						// ┐ф╗ї┐б ╝╙╟╤ ╗є┴б└╠╕щ...
	{
		pFort = GetFortress(nStore);
		if(pFort == NULL) return;
		
		if(pFort->m_tWarType == GUILD_WAR_DECISION)
		{
			if(pFort->m_sFortressID == 1000) nChatNum = 144;
			else if(pFort->m_sFortressID == 1001) nChatNum = 164;
			else if(pFort->m_sFortressID == 1002) nChatNum = 317;

			EditHyperFortressText(pFort, nChatNum);
			return;
		}		
	}
	else
	{
		pStore = GetStore(nStore);
		if(pStore == NULL) return;

		if(pStore->m_tWarType == GUILD_WAR_DECISION) 
		{
			if(pStore->m_sStoreID == 4) nChatNum = 34;		// └╠╣╠ └╧┴д└╠ └т╟Ї └╓└╕╕щ client┐б ║╕│╗┴Ў╛╩┤┬┤┘.
			else if(pStore->m_sStoreID == 5) nChatNum = 44;
			else if(pStore->m_sStoreID == 6) nChatNum = 54;

			EditHyperText(pStore, nChatNum);
			return;
		}
	}

	if(!m_bGuildMaster)
	{
		SendSystemMsg( IDS_USER_ONLY_USE_GUILD_MASTER, SYSTEM_ERROR, TO_ME);
		return;
	}

	SYSTEMTIME temp;
	GetLocalTime(&temp);

	TempBuf.Add(GUILD_WAR_OPEN);
	TempBuf.Add((short)nStore);

	TempBuf.Add((short)temp.wYear);
	TempBuf.Add((BYTE)temp.wMonth);
	TempBuf.Add((BYTE)temp.wDay);

	Send(TempBuf, TempBuf.GetLength());
}

////////////////////////////////////////////////////////////////////////////////////////
//	╟╪┤ч ▒ц╕╢░б ╗є┴б└╟ ╝╝▒▌└╗ ┴╢┴д╟╤┤┘.
//
void USER::GetStoreTax(TCHAR *pBuf)
{
	int index = 0;
	CStore* pStore = NULL;

	short nStore = GetShort(pBuf, index);
	short nTax = GetShort(pBuf, index);

	if(nTax < 0 || nTax > GUILD_MAX_TAX) return;		// ├╓┤ы 200 % ▒ю┴Ў

	SetGuildStoreTex(nStore, nTax);
}

////////////////////////////////////////////////////////////////////////////////////////
//	╡ў╒√╦░┬╩
void USER::SetGuildStoreTex(int iSid, int iRate)
{
	int nChatNum = -1;

	CBufferEx TempBuf;

	CStore* pStore = NULL;
	CGuildFortress* pFort = NULL;

	if(m_dwGuild <= 0 || !m_bGuildMaster)
	{
		SendSystemMsg( IDS_USER_ONLY_USE_GUILD_MASTER, SYSTEM_ERROR, TO_ME);//"╓╗╙╨╛№═┼│д▓┼─▄╩╣╙├."
		return;
	}

	if(iSid >= FORTRESS_BAND)						// ┐ф╗ї┐б ╝╙╟╤ ╗є┴б└╠╕щ...
	{
		pFort = GetFortress(iSid);
		if(pFort == NULL) return;

		if(pFort->m_lUsed == 1)
		{
			SendSystemMsg( IDS_USER_CANT_USE_IN_DEFENCE, SYSTEM_ERROR, TO_ME);//"▒г╬└╒╜╜°╨╨╓╨╬▐╖и╩╣╙├."
			return;
		}
        if(pFort->m_iGuildSid == m_dwGuild)
		{
			if(iRate > GUILD_MAX_TAX)  //╠э╝╙╦░╩╒
			{
				SendSystemMsg( IDS_USER_TEX_MAX, SYSTEM_ERROR, TO_ME);
				return;
			}
			pFort->m_tTaxRate = iRate;
			pFort->ApplyTaxToStore();				// ░в ╗є┴б┐б ╝╝▒▌└╗ ╝┬╞├.
			UpdateMemStoreTax(iSid, iRate);

			UpdateTaxToDB(pFort,iRate);
			CString str;
			str.Format("╥к╚√│╟╓ў[ %s ]╜л╦░┬╩╡ў╒√╬к%d%%",m_strUserID,iRate);//╖в╦═╦░┬╩╡ў╒√╧√╧в
			SendSystemMsg(str.GetBuffer(0), SYSTEM_ANNOUNCE, TO_ALL);
			return;
		}
	}
/*	else
	{
		pStore = GetStore(iSid);
		if(pStore == NULL) return;

		if(pStore->m_sStoreID == (short)iSid)
		{
			pStore->m_sRate = iRate;

			UpdateMemStoreTax(iSid, iRate);
			return;
		}
	}
*/
}

////////////╬▓░═

void USER::GetGuildWarScheme(TCHAR *pBuf)
{
	int index = 0;

	short nStore = GetShort(pBuf, index);

	if(nStore < 0) return;

	if(nStore >= FORTRESS_BAND)
	{
		SetFortressGuildWarScheme(pBuf + index, nStore);
	}
/*	else 
	{
		SetStoreGuildWarScheme(pBuf + index, nStore);
	}
*/
}

////////////////////////////////////////////////////////////////////////////////////////
//	╟╩╡х ╗є┴б└╟ └№└я │п┬е╕ж ░с┴д╟╤┤┘.
//
void USER::SetStoreGuildWarScheme(TCHAR *pBuf, int nStore)
{
	int index = 0;
	int nCount = 0;
	CStore* pStore = NULL;

	int iMon[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

	short sYear = GetShort(pBuf, index);
	BYTE tMon = GetByte(pBuf, index);
	BYTE tDay = GetByte(pBuf, index);
	BYTE tTime = GetByte(pBuf, index);

	if(sYear >= 2500) 
	{
		SendSystemMsg( IDS_USER_INVALID_YEAR, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(tMon >= 13)
	{
		SendSystemMsg( IDS_USER_INVALID_MONTH, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(tDay >= 32)
	{
		SendSystemMsg( IDS_USER_INVALID_DAY, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(tTime < 20 && tTime > 23)
	{
		SendSystemMsg( IDS_USER_INVALID_HOUR, SYSTEM_ERROR, TO_ME);
		return;
	}

	pStore = GetStore(nStore);
	if(pStore == NULL) return;

	if(pStore->m_tWarType == GUILD_WAR_DECISION)
	{
		SendSystemMsg( IDS_USER_ALREADY_EXIST_SCHEDULE, SYSTEM_ERROR, TO_ME);
		return;// └╠╣╠ ▒ц╡х└№ └╧┴д└╠ └т╟Ї └╓└╕╕щ ╕°╣┘▓█┤┘.
	}

	int totalDay = DayCalculation((int)sYear, (int)tMon, (int)tDay); 
	int defDay = DayCalculation(pStore->m_wLastWarTime.wYear, pStore->m_wLastWarTime.wMonth, pStore->m_wLastWarTime.wDay); 

	nCount = abs(totalDay - defDay);
	if(nCount > 3)
	{
		SendSystemMsg( IDS_USER_GUILD_WAR_DELAY, SYSTEM_ERROR, TO_ME);
		return;
	}

	SYSTEMTIME temp;
	GetLocalTime(&temp);

	if(tMon == temp.wMonth && tDay <= temp.wDay)
	{
		SendSystemMsg( IDS_USER_PASS_MIN_DAY, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(tDay == temp.wDay && tTime < temp.wHour) 
	{
		SendSystemMsg( IDS_USER_INVALID_TIME, SYSTEM_ERROR, TO_ME);
		return;
	}

	CTime CurrTime = CTime::GetCurrentTime();

	CTime LastTime(pStore->m_wLastWarTime);
	CTimeSpan DiffTime = CurrTime - LastTime;
	if(DiffTime.GetTotalHours() >= 12)
	{
		SendSystemMsg( IDS_USER_SCHEDULE_FIX, SYSTEM_ERROR, TO_ME);
		return;
	}
	
	CString strMsg;
	pStore->m_wPlanWarTime.wYear = sYear;
	pStore->m_wPlanWarTime.wMonth = tMon;
	pStore->m_wPlanWarTime.wDay = tDay;
	pStore->m_wPlanWarTime.wHour = tTime;

	if(!UpdateGuildStoreWarTime(pStore)) 
	{
		SendSystemMsg( IDS_USER_EDIT_SCHEDULE_FAIL, SYSTEM_ERROR, TO_ME);
		return;
	}

	pStore->m_tWarType = GUILD_WAR_DECISION;

	strMsg.Format( IDS_USER_SCHEDULE_FIXED, sYear, tMon, tDay, tTime); 
	SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);

	UpdateMemStoreWarType(pStore);
}

////////////////////////////////////////////////////////////////////////////////////////
//	░°╝║└№└╟ └№└я │п┬е╕ж ░с┴д╟╤┤┘.
//
void USER::SetFortressGuildWarScheme(TCHAR *pBuf, int nStore)
{
	int index = 0;
	int nCount = 0;
	CGuildFortress* pFort = NULL;

	int iMon[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

	short sYear = GetShort(pBuf, index);
	BYTE tMon = GetByte(pBuf, index);
	BYTE tDay = GetByte(pBuf, index);
	BYTE tTime = GetByte(pBuf, index);

	if(sYear >= 2500) 
	{
		SendSystemMsg( IDS_USER_INVALID_YEAR, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(tMon >= 13)
	{
		SendSystemMsg( IDS_USER_INVALID_MONTH, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(tDay >= 32)
	{
		SendSystemMsg( IDS_USER_INVALID_DAY, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(tTime != 21)
	{
		SendSystemMsg( IDS_USER_INVALID_HOUR, SYSTEM_ERROR, TO_ME);
		return;
	}

	pFort = GetFortress(nStore);
	if(pFort == NULL) return;

	if(pFort->m_lUsed == 1)
	{
		SendSystemMsg( IDS_USER_CANT_USE_IN_DEFENCE, SYSTEM_ERROR, TO_ME);
		return;
	}

	if(pFort->m_tWarType == GUILD_WAR_DECISION)
	{
		SendSystemMsg( IDS_USER_ALREADY_EXIST_SCHEDULE, SYSTEM_ERROR, TO_ME);
		return;// └╠╣╠ ▒ц╡х└№ └╧┴д└╠ └т╟Ї └╓└╕╕щ ╕°╣┘▓█┤┘.
	}

	int totalDay = DayCalculation((int)sYear, (int)tMon, (int)tDay); 
	int defDay = DayCalculation(pFort->m_wLastWarTime.wYear, pFort->m_wLastWarTime.wMonth, pFort->m_wLastWarTime.wDay); 

	nCount = abs(totalDay - defDay);
	if(nCount > 7)
	{
		SendSystemMsg( IDS_USER_GUILD_WAR_DELAY1, SYSTEM_ERROR, TO_ME);
		return;
	}

/*	nCount = abs(totalDay - defDay);
	if(nCount > 2)
	{
		SendSystemMsg( IDS_USER_GUILD_WAR_DELAY2, SYSTEM_ERROR, TO_ME);
		return;
	}
*/
	SYSTEMTIME temp;
	GetLocalTime(&temp);

	if(tMon == temp.wMonth && tDay <= temp.wDay)
	{
		SendSystemMsg( IDS_USER_PASS_MIN_DAY, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(tDay == temp.wDay && tTime < temp.wHour) 
	{
		SendSystemMsg( IDS_USER_INVALID_TIME, SYSTEM_ERROR, TO_ME);
		return;
	}

	CTime CurrTime = CTime::GetCurrentTime();

	CTime LastTime(pFort->m_wLastWarTime);
	CTimeSpan DiffTime = CurrTime - LastTime;
	if(DiffTime.GetTotalHours() >= 12)
	{
		SendSystemMsg( IDS_USER_SCHEDULE_FIX, SYSTEM_ERROR, TO_ME);
		return;
	}
	
	CString strMsg;
	pFort->m_wPlanWarTime.wYear = sYear;
	pFort->m_wPlanWarTime.wMonth = tMon;
	pFort->m_wPlanWarTime.wDay = tDay;
	pFort->m_wPlanWarTime.wHour = tTime;

	if(!UpdateGuildFortressWarTime(pFort)) 
	{
		SendSystemMsg( IDS_USER_EDIT_SCHEDULE_FAIL, SYSTEM_ERROR, TO_ME);
		return;
	}

	pFort->m_tWarType = GUILD_WAR_DECISION;

	strMsg.Format( IDS_USER_FORTRESS_SCHEDULE_FIXED, sYear, tMon, tDay, tTime); 
	SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);

	UpdateMemFortressWarType(pFort);
}

int USER::DayCalculation(int iYear, int iMon, int iDay)
{
	int iTotalDays = 0;
	int ilastyear = iYear - 1;
	int iMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30 , 31, 30, 31};
	if((iYear % 4 == 0 && iYear % 100 != 0) || iYear % 400 == 0){
		iMonth[1] = 29;
	}
	
	iTotalDays = ilastyear * 365 + ilastyear / 4 + ilastyear / 400 - ilastyear / 100;
	for(int i=0;i<iMon - 1;i++)
	{
		iTotalDays += iMonth[i];	
	}

	iTotalDays += iDay;
	return iTotalDays;
}

////////////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х└№└╠ │б│╡░э ╕Ё╡ч ╗є╚▓└╠ ┴╛╖с╡╟╛·┤┘░э ╛╦╕░┤┘.
//
BOOL USER::StoppingTheGuildWar(CStore *pStore)
{
	if(m_dwGuild <= 0) return FALSE;

	if(pStore == NULL) return FALSE;

	int nLen = CHAR_NAME_LENGTH;

//	USER *pUser = NULL;
	CGuild *pGuild = NULL;
	pGuild = GetGuild(m_dwGuild);

	if(!pGuild) { ReleaseGuild(); return FALSE; }
	
	if(UpdateGuildStore(pStore->m_sStoreID, pGuild->m_strMasterName) == FALSE) { ReleaseGuild(); return FALSE; }
										// ╗є┴б└╗ ├╩▒т╚н╟╤┤┘.(┐я ▒ц╡х╖╬...^^)
	::ZeroMemory(pStore->m_strGuildName, CHAR_NAME_LENGTH + 1);
	::ZeroMemory(pStore->m_strMasterName, CHAR_NAME_LENGTH + 1);
	strncpy(pStore->m_strGuildName, m_strGuildName, nLen);
	strncpy(pStore->m_strMasterName, pGuild->m_strMasterName, nLen);

	ReleaseGuild();						// ╟╪┴ж...

	SendGuildMsgForAnnounceGuildWarEnd(pStore);
	pStore->InitStoreInfo(m_dwGuild);

	SetGuildStoreTex(pStore->m_sStoreID, 0);	// Tax Rate Init

	InitMemStore(pStore);

	return TRUE;
}

////////////////////////////////////////////////////////////////////////////////////////
//	DB┐б ╝┬╞├╟╤┤┘.
//
BOOL USER::UpdateGuildStore(int nSid, TCHAR *strGuildMasterName)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		

	::ZeroMemory(szSQL, sizeof(szSQL));

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call INSERT_GUILD_STORE(%d,%d,\'%s\',\'%s\')}"), nSid, m_dwGuild, m_strGuildName, strGuildMasterName);

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Update Guild_Store Data Only!!\n");

		//g_DBNew[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			BREAKPOINT();

			g_DBNew[m_iModSid].ReleaseDB(db_index);
			return FALSE;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		BREAKPOINT();

		g_DBNew[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

void USER::BeginGuildWar()
{
	m_tGuildWar = GUILD_WARRING;
//	SendSystemMsg( IDS_USER_START_GUILD_WAR, SYSTEM_NORMAL, TO_ME);
}

void USER::EndGuildWar(BYTE tWarType)
{
	CBufferEx TempBuf;

	m_tGuildWar = GUILD_WAR_AFFTER;

	m_FieldWarGMUid = 0;
	m_dwFieldWar = 0;

	TempBuf.Add(GUILD_WAR);
	TempBuf.Add((BYTE)0x02);							// ▒ц╡х└№ ┴╛╖с...
	TempBuf.Add(tWarType);

	if(tWarType == GUILD_FIELD_WARRING) TempBuf.Add((short)0x00); // ╟╩╡х└№└╧╢з┤┬ 0└╕╖╬ 

	Send(TempBuf, TempBuf.GetLength());
//	SendSystemMsg( IDS_USER_END_GUILD_WAR, SYSTEM_NORMAL, TO_ME);
}

void USER::BeginFortressWar()
{
	m_tFortressWar = GUILD_WARRING;
}
/*
void USER::EndFortressWar()
{
	CBufferEx TempBuf;

	m_tFortressWar = GUILD_WAR_AFFTER;

	TempBuf.Add(GUILD_WAR);
	TempBuf.Add((BYTE)0x02);							// ▒ц╡х└№ ┴╛╖с...
	TempBuf.Add((BYTE)GUILD_FOTRESS_WARRING);

	Send(TempBuf, TempBuf.GetLength());
}
*/

//////////////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х└№└╠ │б│╡└╜└╗ ╛╦╕░┤┘.
//
void USER::SendGuildMsgForAnnounceGuildWarEnd(CStore *pStore)
{
	int i, j;
	CString strMsg;
	CBufferEx TempBuf;

	USER* pUser = NULL;

	if(!pStore) return;

	strMsg.Format( IDS_USER_THIS_AREA_GUILD_HAVE, m_strGuildName);

	for(i = 0; i < MAX_USER; i++)
	{
		pUser = m_pCom->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;
		
		if(pStore->m_iGuildSid == pUser->m_dwGuild) pUser->EndGuildWar(GUILD_STORE_WARRING);
		else
		{
			for(j =0; j < GUILD_ATTACK_MAX_NUM; j++)
			{
				if(pStore->m_arAttackGuild[j] == pUser->m_dwGuild)
				{
					pUser->EndGuildWar(GUILD_STORE_WARRING);			// ▒ц╡х └№└╠ │б│▓
//					pUser->SendSystemMsg(strMsg.GetBuffer(strMsg.GetLength()), SYSTEM_NORMAL, TO_ME);
					break;
				}
			}
		}

		pUser->SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
	}
}

//////////////////////////////////////////////////////////////////////////////////////////
//	░°╝║└№└╠ │б│╡└╜└╗ ╛╦╕░┤┘.
//
/*
void USER::SendGuildMsgForAnnounceFortressWarEnd(CGuildFortress *pFort)
{
	int i, j;
	CString strMsg;
	CBufferEx TempBuf;

	USER* pUser = NULL;

	if(!pFort) return;

	strMsg.Format( IDS_USER_THIS_AREA_GUILD_HAVE, m_strGuildName);

	for(i = 0; i < MAX_USER; i++)
	{
		pUser = m_pCom->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;
		
		if(pFort->m_iGuildSid == pUser->m_dwGuild) pUser->EndFortressWar();
		else
		{
			for(j =0; j < GUILDFORTRESS_ATTACK_MAX_NUM; j++)
			{
				if(pFort->m_arAttackGuild[j].lGuild == pUser->m_dwGuild)
				{
					pUser->EndFortressWar();			// ▒ц╡х └№└╠ │б│▓
					break;
				}
			}
		}

		pUser->SendSystemMsg(strMsg.GetBuffer(strMsg.GetLength()), SYSTEM_NORMAL, TO_ME);
	}
}
*/

//////////////////////////////////////////////////////////////////////////////////////////
//	┴╓╣╬╡ю╖╧╣°╚г░б └╧─б╟╧┤┬┴Ў ░╦╗ч
//
BOOL USER::CheckJuminNumber(LPCTSTR szAccount, LPCTSTR szJumin)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode;
	TCHAR			szSQL[1024];

	CString			szTemp = szJumin;
	szTemp.Insert(6, '-');

	BOOL bQuerySuccess = TRUE;
	::ZeroMemory(szSQL, sizeof(szSQL));

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call GET_JUMIN_NO (\'%s\')}"), szAccount); 
	
	SQLCHAR		strJuminSQL[20];
	SQLINTEGER	strInd = SQL_NTS;

	::ZeroMemory(strJuminSQL, sizeof(strJuminSQL));

	int db_index = 0;
	CDatabase* pDB = g_DBSession[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle((SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt);
	if( retcode != SQL_SUCCESS )
	{
		//g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, SQL_NTS );
	if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
	{
		retcode = SQLFetch( hstmt );

		if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
		{
			SQLGetData(hstmt, 1, SQL_C_CHAR, strJuminSQL, sizeof(strJuminSQL), &strInd);
		}
	}
	else
	{
		//DisplayErrorMsg(hstmt);
		bQuerySuccess = FALSE;

		if (hstmt!=NULL) SQLFreeHandle((SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		//g_DBSession[m_iModSid].ReleaseDB(db_index);
		TRACE("*** ┴╓╣╬╡ю╖╧ ╣°╚г DB[%d/%d] ┐└╖∙... ***\n", m_iModSid, db_index );
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle((SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBSession[m_iModSid].ReleaseDB(db_index);
	
	if(bQuerySuccess && szTemp.Compare((LPTSTR)strJuminSQL) == 0) return TRUE;
	
	return FALSE;
}

/////////////////////////////////////////////////////////////////////////////////////////
//	╗є┴б┐б╝н ╞╟ ╣░░╟┐б ┤ы╟╤ ╝╝▒▌└╗ ▒ц╡х ├в░э(╕▐╕Ё╕о DB)┐б └√╕│╟╤┤┘.
//
void USER::UpdateMemStoreDN(int iStoreID, DWORD dwDN)
{
	/*
	int nSize = g_arStoreSharedMemory.GetSize();
	CSharedMemory* pShared = NULL;
	CMemStore* pData = NULL;

	for(int i = 0; i < nSize; i++)
	{
		pShared = g_arStoreSharedMemory[i];

		if(pShared == NULL) continue;
		if(pShared->m_hMapping == NULL) continue;

		pData = (CMemStore*) pShared->m_lpData;

		if(pData == NULL) continue;
		if(pData->m_sStoreID == -1) continue;
		if(pData->m_iGuildSid <= 0) continue;

		if(iStoreID == pData->m_sStoreID)
		{
			pData->m_dwStoreDN = dwDN;
			return;
		}
	}
	*/
	int nSize, i;
	int iID = 0;

	if(iStoreID >= FORTRESS_BAND)
	{
		nSize = g_arFortressSharedMemory.GetSize();
		CSharedMemory* pShared = NULL;
		CMemFortress* pData = NULL;

		for(i = 0; i < nSize; i++)
		{
			pShared = g_arFortressSharedMemory[i];
			if(pShared == NULL) return;
			if(pShared->m_hMapping == NULL) return;

			pData = (CMemFortress*) pShared->m_lpData;
			
			if(pData == NULL) return;
			if(pData->m_sFortressID < 1000) return;
			if(pData->m_iGuildSid <= 0) return;

			iID = pData->m_sFortressID;
			if(iID == iStoreID)
			{
				pData->m_dwStoreDN = dwDN;
				break;
			}
		}
	}
/*	else
	{
		nSize = g_arStoreSharedMemory.GetSize();
		CSharedMemory* pShared = NULL;
		CMemStore* pData = NULL;

		if(iStoreID >= nSize) return;
		if((int)dwDN < 0) return;

		pShared = g_arStoreSharedMemory[iStoreID];
		
		if(pShared == NULL) return;
		if(pShared->m_hMapping == NULL) return;
		
		pData = (CMemStore*) pShared->m_lpData;
		
		if(pData == NULL) return;
		if(pData->m_sStoreID == -1) return;
		if(pData->m_iGuildSid <= 0) return;
		
		pData->m_dwStoreDN = dwDN;
	}
*/
}

/////////////////////////////////////////////////////////////////////////////////////////
//	╟╩╡х ╗є┴б┐б ┤ы╟╤ ╕▐╕Ё╕о DB└╟ │╗┐ы└╗ ├╩▒т╚н ╟╤┤┘.
//
void USER::InitMemStore(CStore *pStore)
{
/*	if(pStore == NULL) return;

	int nSize = g_arStoreSharedMemory.GetSize();
	CSharedMemory* pShared = NULL;
	CMemStore* pData = NULL;

	if(pStore->m_sStoreID >= nSize) return;

	pShared = g_arStoreSharedMemory[pStore->m_sStoreID];
	
	if(pShared == NULL) return;
	if(pShared->m_hMapping == NULL) return;
	
	pData = (CMemStore*) pShared->m_lpData;
	
	if(pData == NULL) return;
	
	pData->m_sStoreID = pStore->m_sStoreID;
	pData->m_iGuildSid = pStore->m_iGuildSid;
	pData->m_sTaxRate = 0;
	pData->m_dwStoreDN = 0;
	pData->m_tWarType = GUILD_WAR_PREPARE;

	pStore->GuildListToStr(pData->m_AttackList);
*/
}

/////////////////////////////////////////////////////////////////////////////
//	╟╩╡х╗є┴б┐б ┤ы╟╤ ╝╝▒▌└╗ ╕▐╕Ё╕о DB┐б ╝┬╞├╟╤┤┘.
//
void USER::UpdateMemStoreTax(int iSid, int iRate)
{
	int nSize, i;

	if(iSid >= FORTRESS_BAND)
	{
		nSize = g_arFortressSharedMemory.GetSize();
		CSharedMemory* pShared = NULL;
		CMemFortress* pData = NULL;

		if(iRate < 0 || iRate > GUILD_MAX_TAX) return;		// ├╓┤ы 200 % ▒ю┴Ў
		for(i = 0; i < nSize; i++)
		{
			pData = NULL;
			pShared = NULL;
			pShared = g_arFortressSharedMemory[i];
			
			if(pShared == NULL) continue;
			if(pShared->m_hMapping == NULL) continue;
			
			pData = (CMemFortress*) pShared->m_lpData;
			
			if(pData == NULL) continue;
			if(pData->m_sFortressID != iSid) continue;;
			if(pData->m_iGuildSid != m_dwGuild) continue;
			
			pData->m_sTaxRate = iRate;
			break;
		}
	}
/*	else
	{
		nSize = g_arStoreSharedMemory.GetSize();
		CSharedMemory* pShared = NULL;
		CMemStore* pData = NULL;

		if(iSid >= nSize) return;
		if(iRate < 0 || iRate > GUILD_MAX_TAX) return;		// ├╓┤ы 200 % ▒ю┴Ў

		pShared = g_arStoreSharedMemory[iSid];
		
		if(pShared == NULL) return;
		if(pShared->m_hMapping == NULL) return;
		
		pData = (CMemStore*) pShared->m_lpData;
		
		if(pData == NULL) return;
		if(pData->m_sStoreID == -1) return;
		if(pData->m_iGuildSid <= 0) return;
		
		pData->m_sTaxRate = iRate;
	}
*/
}

////////////////////////////////////////////////////////////////////////////
//	╟╩╡х╗є┴б┐б ┤ы╟╤ WarType └╗ ╕▐╕Ё╕о DB┐б ╝┬╞├╟╤┤┘.
//
void USER::UpdateMemStoreWarType(CStore *pStore)
{
/*	if(pStore == NULL) return;

	int nSize = g_arStoreSharedMemory.GetSize();
	CSharedMemory* pShared = NULL;
	CMemStore* pData = NULL;

	if(pStore->m_sStoreID >= nSize) return;

	pShared = g_arStoreSharedMemory[pStore->m_sStoreID];
	
	if(pShared == NULL) return;
	if(pShared->m_hMapping == NULL) return;
	
	pData = (CMemStore*) pShared->m_lpData;
	
	if(pData == NULL) return;
	
	pData->m_tWarType = pStore->m_tWarType;
*/
}

////////////////////////////////////////////////////////////////////////////
//	░°╝║└№┐б ┤ы╟╤ WarType └╗ ╕▐╕Ё╕о DB┐б ╝┬╞├╟╤┤┘.
//
void USER::UpdateMemFortressWarType(CGuildFortress *pFort)
{
	if(pFort == NULL) return;

	int nSize = g_arFortressSharedMemory.GetSize();
	CSharedMemory* pShared = NULL;
	CMemFortress* pData = NULL;

	for(int i = 0; i < nSize; i++)
	{
		pShared = g_arFortressSharedMemory[i];
		
		if(pShared == NULL) return;
		if(pShared->m_hMapping == NULL) return;
		
		pData = (CMemFortress*) pShared->m_lpData;
		
		if(pData == NULL) return;
		
		if(pData->m_iGuildSid == pFort->m_iGuildSid)
		{
			pData->m_tWarType = pFort->m_tWarType;
			break;
		}
	}
}

void USER::UpdateMemStoreGuildList(CStore *pStore)
{
/*	if(pStore == NULL) return;

	int nSize = g_arStoreSharedMemory.GetSize();
	CSharedMemory* pShared = NULL;
	CMemStore* pData = NULL;

	if(pStore->m_sStoreID >= nSize) return;

	pShared = g_arStoreSharedMemory[pStore->m_sStoreID];
	
	if(pShared == NULL) return;
	if(pShared->m_hMapping == NULL) return;
	
	pData = (CMemStore*) pShared->m_lpData;
	
	if(pData == NULL) return;
	
	pStore->GuildListToStr(pData->m_AttackList);
*/
}

/////////////////////////////////////////////////////////////////////////////
//	╟Ў└ч └п└·░б ╝н└╓┤┬ ┴┬╟е░б ╕╩┐б╝н └╨└╗╝Ў └╓┤┬░ў└╬┴Ў,  ╕╩╗є┐б └╨└║╝╙╝║░к└╗ ┬№┴╢╟╧▒т└з╟╤ └╬╡ж╜║╕ж │╤▒ф┤┘. 
//
int USER::CheckInvalidMapType()
{
	int nRet = -1;

	if( m_ZoneIndex < 0 || m_ZoneIndex >= g_zone.GetSize() ) return nRet;
	if(m_curx >= g_zone[m_ZoneIndex]->m_sizeMap.cx || m_curx < 0) return nRet;
	if(m_cury >= g_zone[m_ZoneIndex]->m_sizeMap.cy || m_cury < 0) return nRet;

	nRet = ((g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_dwType & 0xFF00 ) >> 8);

	return nRet;
}

/////////////////////////////////////////////////////////////////////////////
//	╟Ў└ч └п└·░б ╝н└╓┤┬ ┴┬╟е░б ▒ц╡х└№ ┴▀└╬ ┴Ў┐к└╠╕щ FALSE░к└╗ │╤▒ф┤┘.
//
BOOL USER::CheckInvalidZoneState(int type)
{
	int index = 0;

//	if(type < 2 || type >= 17) return TRUE;
//	index = g_arMapTable[type]->m_sStoreID;
	int mapindex = GetGuildMapIndex(type);
	if(mapindex <= -1 || mapindex >= g_arMapTable.GetSize()) return TRUE;
    if(g_arMapTable[mapindex] == NULL) return FALSE;
	index = g_arMapTable[mapindex]->m_sStoreID;

	if(index >= FORTRESS_BAND) 
	{
		CGuildFortress* pFort = NULL;
		pFort = GetFortress(index);

		if(pFort) 
		{
			if(pFort->m_lUsed == 1)	return FALSE;
//			if(g_arMapTable[type]->m_sStoreZone) return FALSE;
		}
	}	
/*	else
	{
		CStore *pStore = NULL;

		index = g_arMapTable[mapindex]->m_sStoreIndex;

		pStore = GetStore(index);

		if(pStore)
		{
			if(pStore->m_lUsed == 1) return FALSE;
		}
//		if(index < 0 || index >= g_arStore.GetSize()) return TRUE;
//		if(g_arStore[index]->m_lUsed == 1)	return FALSE;  // ╟╪┤ч ╝╙╝║ ╕╩└╠ ▒ц╡х└№ ╗є┼┬	
	}
*/
	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////
//	┴╕├╝└╬┴Ў╕ж ┐ф├╗╟╥╢з ╟╪┤ч ┴Ў┐к└╠ ▒ц└№┴▀└╠╕щ ░┼║╬╟╤┤┘.
//
BOOL USER::CheckInvakidZoneChangeState(int type)
{
	int index = 0;

//	if(type < 2 || type >= 17) return TRUE;
	int mapindex = GetGuildMapIndex(type);
	if(mapindex <= -1 || mapindex >= g_arMapTable.GetSize()) return TRUE;
    if(g_arMapTable[mapindex] == NULL) return FALSE;
	index = g_arMapTable[mapindex]->m_sStoreID;

	if(index >= FORTRESS_BAND) 
	{
		CGuildFortress* pFort = NULL;
		pFort = GetFortress(index);

		if(pFort) 
		{
			if(m_dwGuild > 0 && pFort->m_iGuildSid == m_dwGuild) return TRUE;
			if(pFort->m_iZone == m_curz || g_arMapTable[mapindex]->m_sStoreZone) return FALSE;
			if(pFort->m_lUsed == 1)	return FALSE;
		}
	}
/*	else
	{
		CStore *pStore = NULL;

		index = g_arMapTable[mapindex]->m_sStoreIndex;

		pStore = GetStore(index);

		if(pStore)
		{
			if(pStore->m_lUsed == 1) return FALSE;
		}
	}
*/
	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////
//	┼м╢є└╠╛Ё╞о┐б╝н ┐ф├╗╟╥╢з ╝н╣Ў ╞╜└╗ ║╕│╗╝н ╜║.╟┘└╗ ╣ц┴Ў╟╤┤┘.
//
void USER::SendServerTick()
{
/*	DWORD dwTick;

	CBufferEx TempBuf;

	dwTick = GetTickCount();

	TempBuf.Add(SERVER_TICK_RESULT);
	TempBuf.Add(dwTick);
	Send(TempBuf, TempBuf.GetLength());
*/
}

/////////////////////////////////////////////////////////////////////////////
//	▒ц╡х└№ ╜├░г└╗ ╝┬╞├╟╤┤┘.
//
BOOL USER::UpdateGuildStoreWarTime(CStore *pStore)
{
	CString			strTime;
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strWarTime[30];

	if(pStore == NULL) return FALSE;
	if(pStore->m_iGuildSid <= 0) return FALSE;

	strTime = _T("");
	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strWarTime, sizeof(strWarTime));
	
	strTime.Format("%d-%d-%d %d:00:00", pStore->m_wPlanWarTime.wYear, pStore->m_wPlanWarTime.wMonth, pStore->m_wPlanWarTime.wDay, pStore->m_wPlanWarTime.wHour);
	::CopyMemory(strWarTime, strTime.GetBuffer(strTime.GetLength()), strTime.GetLength());
	strTime.ReleaseBuffer();
	
	SDWORD sLen	= sizeof(strWarTime);

	::ZeroMemory(szSQL, sizeof(szSQL));

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_GUILD_STORE_WARTIME(%d,%d,\'%s\')}"), pStore->m_sStoreID, pStore->m_iGuildSid, strWarTime);

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Update Guild_Store Data Only!!\n");

		//g_DBNew[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			BREAKPOINT();

			g_DBNew[m_iModSid].ReleaseDB(db_index);
			return FALSE;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		BREAKPOINT();

		g_DBNew[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////
//	▒ц╡х└№ ╜├░г└╗ ╝┬╞├╟╤┤┘.
//
BOOL USER::UpdateGuildFortressWarTime(CGuildFortress *pFort)
{
	CString			strTime;
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		
	TCHAR			strWarTime[30];

	if(pFort == NULL) return FALSE;
	if(pFort->m_iGuildSid <= 0) return FALSE;

	strTime = _T("");
	::ZeroMemory(szSQL, sizeof(szSQL));
	::ZeroMemory(strWarTime, sizeof(strWarTime));
	
	strTime.Format("%d-%d-%d 21:00:00", pFort->m_wPlanWarTime.wYear, pFort->m_wPlanWarTime.wMonth, pFort->m_wPlanWarTime.wDay);
	::CopyMemory(strWarTime, strTime.GetBuffer(strTime.GetLength()), strTime.GetLength());
	strTime.ReleaseBuffer();
	
	SDWORD sLen	= sizeof(strWarTime);

	::ZeroMemory(szSQL, sizeof(szSQL));

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_GUILD_FORTRESS_WARTIME(%d,%d,\'%s\')}"), pFort->m_sFortressID, pFort->m_iGuildSid, strWarTime);

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Update Guild_Store Data Only!!\n");

		//g_DBNew[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			BREAKPOINT();

			g_DBNew[m_iModSid].ReleaseDB(db_index);
			return FALSE;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		BREAKPOINT();

		g_DBNew[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////
//	╟╩╡х ▒ц╡х└№└╗ ├д╞├└╕╖╬ ╜┼├╗ ---> ╗є┤ы╣ц ▒ц╕╢┐б░╘ ║╕│╜┤┘.
//
void USER::SendGuildWarFieldApply(TCHAR *pBuf)
{
	int index = 0;
	int nLength = 0;

	BYTE error_code = 0;

	CGuild *pGuild = NULL;
	USER *pUser = NULL;

	CBufferEx TempBuf;

	TCHAR szGuildName[255];

	if(m_dwGuild <= 0) { error_code = ERR_10; goto go_result; };			// ║╗└╬└╠ ▒ц╡х┐°└╠ ╛╞┤╧╕щ..
	if(!m_bGuildMaster) { error_code = ERR_10; goto go_result; };			// ║╗└╬└╠ ▒ц╕╢░б ╛╞┤╧╕щ...

	if(m_tGuildWar == GUILD_WARRING) { error_code = ERR_12; goto go_result; };

	::ZeroMemory(szGuildName, sizeof(szGuildName));

	nLength = GetVarString(sizeof(szGuildName), szGuildName, pBuf, index);
	if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) { error_code = 255; goto go_result; } 

	pGuild = GetGuildByName(szGuildName);

	if(!pGuild) 
	{ 
		ReleaseGuild();
		error_code = ERR_7; 
		goto go_result; 
	} // ╟╪┤ч ▒ц╡х░б ┴╕└ч╟╧┴Ў ╛╩┤┬┤┘.
	
	pUser = GetUser(pGuild->m_strMasterName);
	ReleaseGuild();

	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED)  
	{ 
		error_code = ERR_3;							// ┤ы╗є ▒ц╕╢░б ╟Ў└ч ░╘└╙┐б ╛°┤┘.
		goto go_result; 
	} 

	if(pUser->m_tGuildWar == GUILD_WARRING) { error_code = ERR_12; goto go_result; };
	if(pUser->m_dwGuild <= 0 || !pUser->m_bGuildMaster) { error_code = ERR_3; goto go_result; } // ╝н╣Ў ┐б╖п...

	if(!GetDistance(pUser->m_curx, pUser->m_cury, 12)) 
	{
		SendSystemMsg( IDS_USER_IN_ONE_SCREEN, SYSTEM_NORMAL, TO_ME);
		return;
	}
	
	m_bFieldWarApply = TRUE;
	m_FieldWarGMUid = pUser->m_uid;					// ╗є┤ы╣ц uid╕ж ▒т╛я
	m_dwFieldWar = pUser->m_dwGuild;				// ╟╩╡х└№ ╜├└█└╠╕щ ╗є┤ы╞э ▒ц╡х ╣°╚г░б ╡щ╛ю┐┬┤┘.

	pUser->m_FieldWarGMUid = m_uid;					//
	pUser->m_dwFieldWar = m_dwGuild;				//

	TempBuf.Add(GUILD_FIELD_WAR_REQ);
	TempBuf.Add((int)m_dwGuild);
	TempBuf.AddString(m_strGuildName);
	
	Send(TempBuf, TempBuf.GetLength());				// ║╕│╜ ╗ч╢ў┐б░╘ ┐ф├╗┴▀└╠╢є┤┬ ├в└╠ ╟е╜├╡╟╡╡╖╧╟╤┤┘..	
	pUser->Send(TempBuf, TempBuf.GetLength());		// ╗є┤ы╣ц┐б░╘┤┬ ┤й░б ┐ф├╗╟▀┤┘┤┬ 
	return;

go_result:
	m_FieldWarGMUid = -1;
	m_dwFieldWar = 0;

	TempBuf.Add(CHAT_RESULT);
	TempBuf.Add((BYTE)0x00);						// ╜╟╞╨
	TempBuf.Add(error_code);
	Send(TempBuf, TempBuf.GetLength());
}

/////////////////////////////////////////////////////////////////////////////
//	╟╩╡х└№┐б ┤ы╟╤ ╜┬│л┐й║╬┐═ ▒ц╡х└№└╗ ╝▒╞ў╟╤┤┘.
//
void USER::SendGuildWarFieldApplyResult(TCHAR *pBuf)
{
	int index = 0;
	int nLength = 0;
	int iGuildID = 0;

	BYTE type = 0;
	BYTE result = FAIL;

	CGuild *pGuild = NULL;
	USER *pUser = NULL;

	CBufferEx TempBuf;

	TCHAR szGuildName[255];

	if(m_dwGuild <= 0) return;
	if(!m_bGuildMaster) return;	
	if(m_FieldWarGMUid < 0 || m_dwFieldWar <= 0) return;
	if(m_tGuildWar == GUILD_WARRING) return;

	TempBuf.Add(GUILD_FIELD_WAR_RESULT);

	pUser = GetUser(m_FieldWarGMUid);
	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) 
	{
		TempBuf.Add((BYTE)0x02);											// ░┼└¤
		Send(TempBuf, TempBuf.GetLength());									
		return;
	}

	if(pUser->m_dwGuild <= 0 || !pUser->m_bGuildMaster) goto go_result;		// ╗є┤ы╣ц└╠ ▒ц╡х┐═ ╗є░№ ╛°└╕╕щ...

	type = GetByte(pBuf, index);											// ░┼└¤└╠╕щ...

	if(type != 1) goto go_result;											// ╜┬│л└╠ ╛╞┤╧╕щ...
	
	if(m_bFieldWarApply) return;											// ╟╩╡х└№└╗ ╜┼├╗╟╤┬╩└║ ░с░·╕ж ║╕│╜╡╡ ╣л╜├╟╤┤┘. 
	if(pUser->m_tGuildWar == GUILD_WARRING) goto go_result;

	iGuildID = GetInt(pBuf, index);
	pGuild = GetGuild(iGuildID);											// ▒ц╡х╕ж ├г░э
	
	if(!pGuild)																// ▒ц╡х░б ╛°└╕╕щ	
	{
		ReleaseGuild();
		goto go_result;
	}

	::ZeroMemory(szGuildName, sizeof(szGuildName));

	nLength = GetVarString(sizeof(szGuildName), szGuildName, pBuf, index);
	if(nLength <= 0 || nLength > CHAR_NAME_LENGTH)							// ▒ц╡х└╠╕з└╠ └▀╕° ╡╟╛·└╕╕щ..
	{
		ReleaseGuild();
		goto go_result;
	}

	if(strcmp(pGuild->m_strGuildName, szGuildName) != 0)					// ▒ц╡х└╠╕з└╠ ╞▓╕о╕щ...
	{
		ReleaseGuild();
		goto go_result;
	}

	ReleaseGuild();
	result = SUCCESS;

	SendGuildFieldWarBegin();												// ▒ц╡х└№ ╜├└█└╗ ╛╦╕░┤┘.

go_result:
	if(result == FAIL)
	{
		m_FieldWarGMUid = -1;
		m_dwFieldWar = 0;	
		pUser->m_FieldWarGMUid = -1;
		pUser->m_dwFieldWar = 0;
	}

	m_bFieldWarApply = FALSE;												// ├╩▒т╚н╟╤┤┘.(╟╤┬╩┐б╝н ╜┼├╗╟╧░э ╜┬│л╟╧┤┬░═└╗ ╣ц┴Ў╟╧▒т└з╟╪))	
	pUser->m_bFieldWarApply = FALSE;

	TempBuf.Add(result);											
	Send(TempBuf, TempBuf.GetLength());									
	pUser->Send(TempBuf, TempBuf.GetLength());
	return;

}

/////////////////////////////////////////////////////////////////////////////
//	╟╩╡х└№┐б ┤ы╟╤ ╜┬│л└╠╛·┤┘╕щ ▒ц╡х└№└╗ ╝▒╞ў╟╤┤┘.
//
void USER::SendGuildFieldWarBegin()
{
	int i;
	CBufferEx TempBuf;

	USER* pUser = NULL;

	if(m_dwGuild <= 0 || m_dwFieldWar <= 0) return;

	TempBuf.Add(GUILD_WAR);
	TempBuf.Add((BYTE)0x01);							// ▒ц╡х└№ ╜├└█...
	TempBuf.Add((BYTE)GUILD_FIELD_WARRING);				// ...

	TempBuf.Add((short)0x00);							// ╟╩╡х ╟е╜├
	TempBuf.Add((BYTE)0x01);							// ┬№░б ▒ц╡х┐° ┴ї╕э

	TempBuf.Add((short)0x02);							// ├╤ ▒ц╡х╝Ў
	TempBuf.Add((int)m_dwGuild);
	TempBuf.Add((int)m_dwFieldWar);

	for(i = 0; i < MAX_USER; i++)
	{
		pUser = m_pCom->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;
		if(pUser->m_dwGuild <= 0) continue;

		if(pUser->m_dwGuild == m_dwGuild) pUser->m_dwFieldWar = m_dwFieldWar;
		else if(pUser->m_dwGuild == m_dwFieldWar) pUser->m_dwFieldWar = m_dwGuild;
		else continue;

		pUser->BeginGuildWar();			// 
		pUser->Send(TempBuf, TempBuf.GetLength());
	}
}

/////////////////////////////////////////////////////////////////////////////
//	╟╩╡х└№┐б╝н ╟╫║╣╟╧┤┬ ┬╩ ▒ц╕╢░б ╚г├т╟╤┤┘.
//
void USER::SendGuildWarFieldEnd(TCHAR *pBuf)
{
	int i;
	CBufferEx TempBuf;

	USER* pUser = NULL;
													// ▒ц└№╡╡ ╛╞┤╧╕щ ┐└╖∙				
	if(m_dwGuild <= 0 || m_dwFieldWar <= 0) return;
	
	CString strMsg;

	pUser = GetUser(m_FieldWarGMUid);
	if(!pUser) return;

	if(!pUser->m_bGuildMaster) return;				// ╗є┤ы╣ц└╠ ▒ц╕╢░б ╛╞┤╘ ┐└╖∙

	int iFieldGuild = m_dwFieldWar;

	for(i = 0; i < MAX_USER; i++)
	{
		pUser = m_pCom->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;

		if(pUser->m_dwGuild == m_dwGuild || pUser->m_dwGuild == iFieldGuild)
		{
			pUser->EndGuildWar(GUILD_FIELD_WARRING);			// ▒ц╡х └№└╠ │б│▓
			pUser->SendSystemMsg(pBuf, SYSTEM_NORMAL, TO_ME);
		}
	}
}

//////////////////////////////////////////////////////////////////////
//
//	╝н╣Ў└╠╗є└п╣л╕ж ╛╦╖┴┴╪┤┘.
//
void USER::CheckServerTest()
{
	CString strTemp, strIP;

	strTemp.Format("%u", (unsigned int)((unsigned char*)m_Addr.sin_addr.S_un.S_un_b.s_b1));
	strIP += strTemp; strTemp = _T("");
	strIP += ".";
	strTemp.Format("%u", (unsigned int)((unsigned char*)m_Addr.sin_addr.S_un.S_un_b.s_b2));
	strIP += strTemp; strTemp = _T("");
	strIP += ".";
	strTemp.Format("%u", (unsigned int)((unsigned char*)m_Addr.sin_addr.S_un.S_un_b.s_b3));
	strIP += strTemp; strTemp = _T("");
	strIP += ".";

	CBufferEx TempBuf;

	TempBuf.Add(CHECK_ALIVE_RESULT);

	if(strIP.Left(12).CompareNoCase(_T("192.203.141.")) == 0)
	{
		int nCount = 0;
		USER *pUser = NULL;
		nCount = 0;
		for (int i = 0; i < MAX_USER; i++ )
		{
			pUser = m_pCom->GetUserUid(i);
			if(pUser && pUser->m_state == STATE_GAMESTARTED ) nCount++;
		}

		TempBuf.Add((short)nCount);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	TempBuf.Add((short)0);
	Send(TempBuf, TempBuf.GetLength());
}


//////////////////////////////////////////////////////////////////////
//
//	░н┴ж ╝н╣Ў░°┴Ў.
//
void USER::AnnounceNotice(TCHAR *pBuf)
{
	CString strTemp, strIP;

	strTemp.Format("%u", (unsigned int)((unsigned char*)m_Addr.sin_addr.S_un.S_un_b.s_b1));
	strIP += strTemp; strTemp = _T("");
	strIP += ".";
	strTemp.Format("%u", (unsigned int)((unsigned char*)m_Addr.sin_addr.S_un.S_un_b.s_b2));
	strIP += strTemp; strTemp = _T("");
	strIP += ".";
	strTemp.Format("%u", (unsigned int)((unsigned char*)m_Addr.sin_addr.S_un.S_un_b.s_b3));
	strIP += strTemp; strTemp = _T("");
	strIP += ".";

	if(strIP.Left(12).CompareNoCase(_T("192.203.141.")) == 0)
	{
		int index = 0;
		SendAllChat(pBuf + index);
	}
}


//////////////////////////////////////////////////////////////////////
//
//	PK┤й└√░к└╠ 0└╕╖╬, (╟╧└з╖╣║з ╝║╟т╝┬╞├)
//
void USER::SendCityRank(int iCityRank)
{
	CBufferEx TempPKBuf;

	if(iCityRank >= 0) m_sKillCount -= 1;	    // ─л┐└┐б░╘ ┴╫╛ю╝н┤┬ PK ─л┐ю╞о░б ░и╝╥╡╟┴Ў ╛╩┤┬┤┘.

	if(m_sKillCount < 0)
	{
		m_sKillCount = 0;
		if(m_sLevel <= 10 && m_iCityValue < 0)
		{
			m_sCityRank = 0;
			m_iCityValue = 0;

			CheckGuildUserInFortress();			// ╜├╣╬ ╡ю▒▐└╠ ║п╟╥╢з ┤┘╜├ ╝┬╞├(╞ў╞о╕о╜║╕ж└з╟╪)
			
			TempPKBuf.Add(SET_USER_PK_STATE);
			TempPKBuf.Add(m_uid + USER_BAND);
			TempPKBuf.Add((BYTE)0x01);
			TempPKBuf.Add(m_sCityRank);

			SendInsight(TempPKBuf, TempPKBuf.GetLength());
//			SendExactScreen(TempPKBuf, TempPKBuf.GetLength());
		}
	}
}

//////////////////////////////////////////////////////////////////////
//	Agent ░в └п└· DB┐б ╜├░г ╣Ў┴п└╗ ▒т╖╧
//
DWORD USER::ConvertCurTimeToSaveTime()
{
	DWORD dwCurTime = 0;

	SYSTEMTIME SaveTime;
	GetLocalTime(&SaveTime);
	
	WORD wTemp = 0;
	DWORD dwYear = 0;
	DWORD dwMon = 0;
	DWORD dwDay = 0;
	DWORD dwHour = 0;
	DWORD dwMin = 0;
	DWORD dwSecond = 0;
										// 2 Byte ╣Ў╕о░э
	wTemp = SaveTime.wYear << 12;		// ╗є└з 4 Byte
	wTemp = wTemp >> 12;
	dwYear = (DWORD)wTemp; 
	dwYear = dwYear << 26;

	wTemp = SaveTime.wMonth << 12;		// 4 Byte
	wTemp = wTemp >> 12;
	dwMon = (DWORD)wTemp; 
	dwMon = dwMon << 22;

	wTemp = SaveTime.wDay << 11;		// 5 Byte
	wTemp = wTemp >> 11;
	dwDay = (DWORD)wTemp;
	dwDay = dwDay << 17;

	wTemp = SaveTime.wHour << 11;		// 5 Byte
	wTemp = wTemp >> 11;
	dwHour = (DWORD)wTemp;
	dwHour = dwHour << 12;

	wTemp = SaveTime.wMinute << 10;		// 6 Byte
	wTemp = wTemp >> 10;
	dwMin = (DWORD)wTemp;
	dwMin = dwMin << 6;

	wTemp = SaveTime.wSecond << 10;		// 6 Byte
	wTemp = wTemp >> 10;
	dwSecond = (DWORD)wTemp;

	dwCurTime = dwYear^dwMon^dwDay^dwHour^dwMin^dwSecond;

	return dwCurTime;
}



void USER::MassZoneMove(TCHAR *pBuf)
{
	int i, uid = 0;
	int index = 0, nLen = 0;
	int cityNum = -1, virtualNum = -1;
	int iTotalLevel = 0;

	USER *pUser = NULL;
	CNpc *pNpc = NULL;

	int userCount = 0;
	UserList tempUser[MAX_GUILD_HOUSE_USER];
//	CDWordArray	arUid;
//	arUid.RemoveAll();

	SYSTEMTIME guildTime;
	GetLocalTime(&guildTime);

	if( guildTime.wDay < GUILD_VIRTUAL_WAR_START && guildTime.wDay > GUILD_VIRTUAL_WAR_END ) return;

	short sCount = GetShort(pBuf, index);							// └п└·╝Ў

	if(sCount <= 0 || sCount > MAX_GUILD_HOUSE_USER) return;		// ├╓┤ы 20╕э▒ю┴Ў
	
	if(m_dwGuild <= 0 || m_dwGuild >= g_arGuildData.GetSize()) return;
	if(!m_bGuildMaster) return;										// ▒ц╡х┐б ╝╙╟╧┴Ў ╛╩╛╥└╕╕щ...
	if(!g_arGuildData[m_dwGuild]) return;

	for(i = 0; i < MAX_GUILD_HOUSE_USER; i++)
	{
		tempUser[i].uid = 0;
		::ZeroMemory(tempUser[i].strUserName, sizeof(tempUser[i].strUserName));
	}

	for(i = 0; i < sCount; i++)
	{
		uid = GetInt(pBuf, index);

		if(uid >= USER_BAND && uid < NPC_BAND)
		{
			pUser = GetUser(uid - USER_BAND);
			if(!pUser || pUser->m_state != STATE_GAMESTARTED) continue;
			if(pUser->m_dwGuild != m_dwGuild) continue;
			if(pUser->m_curz != m_curz) continue;

			nLen = strlen(pUser->m_strUserID);
			if(nLen <= 0) continue;

			iTotalLevel += pUser->m_sLevel;

			userCount++;
			tempUser[i].uid = pUser->m_uid;
			strncpy(tempUser[i].strUserName, pUser->m_strUserID, nLen);
		}
	}

	if(sCount != userCount)									// ▒╫╡┐╛╚ ║п╡┐└╠ └╓└╕╕щ ╣л╚┐	
	{
		SendSystemMsg( IDS_USER_INVALID_MEMBER_COUNT, SYSTEM_ERROR, TO_ME);
		return;
	}

	short sGuildHouseZone = GetShort(pBuf, index);					// ░б╗є ╕╩ ╣°╚г
	if( !IsZoneInThisServer(sGuildHouseZone) )	return;				// DB┐б ╝┬╞├░к░· ░░└╕│─?
	if(sGuildHouseZone==409) return;

	cityNum = GetCityNumForVirtualRoom(sGuildHouseZone);
	if(cityNum < 0 || cityNum >= g_arGuildHouseWar.GetSize()) return;
	if(!g_arGuildHouseWar[cityNum]) return;

	virtualNum = GetVirtualRoomNum(sGuildHouseZone);				// ░б╗є ░°░г└╗ Св├г░┌┤┘.--> ┐б╖п.
	if(virtualNum < 0) return;

	if(InterlockedCompareExchange((LONG*)&g_arGuildHouseWar[cityNum]->m_CurrentGuild.lUsed, (long)1, (long)0) == (long)0)
	{
		for(i = 0; i < MAX_GUILD_HOUSE_USER; i++)
		{
			g_arGuildHouseWar[cityNum]->m_CurrentGuild.arUserList[i].uid = 0;
			::ZeroMemory(g_arGuildHouseWar[cityNum]->m_CurrentGuild.arUserList[i].strUserName, sizeof(g_arGuildHouseWar[cityNum]->m_CurrentGuild.arUserList[i].strUserName));
		}

		g_arGuildHouseWar[cityNum]->m_CurrentGuild.dwIntervalTick = 0;
		g_arGuildHouseWar[cityNum]->m_CurrentGuild.iGuildNum = userCount;
		g_arGuildHouseWar[cityNum]->m_CurrentGuild.dwTimer = GetTickCount();
		g_arGuildHouseWar[cityNum]->m_CurrentGuild.lGuild = m_dwGuild;
		g_arGuildHouseWar[cityNum]->m_CurrentGuild.iCurValue = 0;		
		g_arGuildHouseWar[cityNum]->m_CurrentGuild.iGuildLevel = iTotalLevel;

		for(i = 0; i < g_arGuildHouseWar[cityNum]->m_CurrentGuild.arNpcList.GetSize(); i++)
		{
			uid = g_arGuildHouseWar[cityNum]->m_CurrentGuild.arNpcList[i];
			pNpc = GetNpc(uid);
			if(!pNpc) continue;

			if(pNpc->m_NpcState == NPC_LIVE) pNpc->Dead();
//			pNpc->m_tNpcAttType = 1;
			pNpc->m_NpcVirtualState = NPC_MOVING;
			pNpc->m_NpcState = NPC_LIVE;
			pNpc->NpcTypeParser();
//			if(pNpc->m_NpcState == NPC_LIVE) pNpc->m_NpcState = NPC_DEAD;
//			pNpc->SetLive(m_pCom);
//			TRACE("%s MOP\n", pNpc->m_strName);
		}

		for(i = 0; i < userCount; i++)
		{
			pUser = GetUser(tempUser[i].uid);
			if(!pUser) continue;

			g_arGuildHouseWar[cityNum]->m_CurrentGuild.arUserList[i].uid = tempUser[i].uid;
			nLen = strlen(tempUser[i].strUserName);
			if(nLen <= 0) continue;
			strncpy(g_arGuildHouseWar[cityNum]->m_CurrentGuild.arUserList[i].strUserName, tempUser[i].strUserName, nLen);
			
			pUser->ZoneMoveReq(sGuildHouseZone, g_arVirtualRoom[virtualNum]->m_Move[i].x, g_arVirtualRoom[virtualNum]->m_Move[i].y);
			pUser->SendSystemMsg( IDS_USER_QUEST_TIME, SYSTEM_NORMAL, TO_ME);
			pUser->m_tGuildHouseWar = GUILD_WARRING;
		}
	}
}

int USER::GetCityNumForVirtualRoom(int zone)		// ┴Ў▒▌└║ ╡╡╜├╣°╚г┴Ў╕╕ │к┴▀┐б VirtualRoom└╠ ░ш╝╙ ├▀░б╡╟╕щ..
{													// ╣┘▓┘╛ю╛▀ ╡╚┤┘. (int zone, int &curGuild)
	int nRet = -1;

	switch(zone)									// ├▀░б╟╥ ┐╣┴д└╙...
	{
	case 1005:										// SANAD
		nRet = SANAD;								// curGuild = ;
		break;

	default:
		break;
	}

	return nRet;
}

int USER::GetVirtualRoomNum(int zone)
{														// ╟╤ ╡╡╜├╛╚┐б ┐й╖п░│└╟ ░б╗є░°░г└╠ └╓└╗╝Ў └╓└╕╣╟╖╬ 
	for(int i = 0; i < g_arVirtualRoom.GetSize(); i++)	// ▒╫┴▀ ╕╩└╠ ░░└║ ╣°╚г└╬░═└╗ ├г┤┬┤┘.
	{
		if(g_arVirtualRoom[i]->m_sZone == zone) return i;
	}

	return -1;
}

//////////////////////////////////////////////////////////////////////
//
//	║╨╛ч▒т░г┴▀ ▒ц╡х ╝°└з╕ж ║╕┐й┴╪┤┘.
//
void USER::SendGuildHouseRank(int nNum, int iCity)
{
	int i, j, index = 0;
	int nLen = 0, nTime = 0;
	int talknum = -1;

	BYTE tCount = 0;
//	TCHAR strTemp[1000];
	CHyper hyperText;

	CBufferEx TempBuf, TempSayBuf;

	CString temp;
	
	if(nNum < 0) return;
	if(iCity < 0 || iCity >= g_arGuildHouseWar.GetSize()) return;
	if(!g_arGuildHouseWar[iCity]) return;

	for(i = 0; i < g_arNpcChat.GetSize(); i++)
	{
		if(g_arNpcChat[i]->m_sCid == nNum)
		{
			talknum = i;
			break;
		}
	}

	if( talknum == -1 ) return;

//	::ZeroMemory(strTemp, sizeof(strTemp));
	hyperText.GetHyperText(g_arNpcChat[talknum]->m_strTalk, g_arNpcChat[talknum]->m_sSize);
	hyperText.load();

	for(i = 0; i < hyperText.m_nCountLine; i++)
	{
		for(j = 0; j < hyperText.m_HyperText[i].m_strText.GetLength()-7; j++){

			temp = hyperText.m_HyperText[i].m_strText.Mid(j, 2);
			if(temp == "%S")
			{
				CGuildHouseWar *tete = g_arGuildHouseWar[iCity];
				if("GN" == hyperText.m_HyperText[i].m_strText.Mid(j+2, 2))	// ▒ц╡х └╠╕з└╗ │╓┤┬┤┘.
				{
//					hyperText.m_HyperText[i].m_strText.Replace("%SGN%", g_arGuildHouseWar[iCity]->m_TopList[index].strGuildName);
					TempSayBuf.AddString(g_arGuildHouseWar[iCity]->m_TopList[index].strGuildName);
					index++;
					tCount++;
				}
				else if("STM" == hyperText.m_HyperText[i].m_strText.Mid(j+2, 2))	// 
				{					
					tCount++;
					nTime = (int)g_arGuildHouseWar[iCity]->m_CurrentGuild.dwTimer/1000;
					temp.Format("%d", nTime);
					TempSayBuf.AddString( (LPTSTR)(LPCTSTR)temp );
//					hyperText.m_HyperText[i].m_strText.Replace("%STM%", temp);
				}
			}		
		}
		
	}

//	nLen = hyperText.save(strTemp);


	TempBuf.Add(CLIENT_EVENT_SAY);
	TempBuf.Add((BYTE)SUCCESS);
	TempBuf.Add((short)nNum);
	TempBuf.Add(tCount);
	TempBuf.AddData(TempSayBuf, TempSayBuf.GetLength());

//	TempBuf.AddLongString(strTemp, nLen);

	Send(TempBuf, TempBuf.GetLength());
}

//////////////////////////////////////////////////////////////////////
//
//	
//
void USER::CheckQuestEventZoneWarEnd()
{
	g_QuestEventZone.CheckSingleEventZoneWarEnd(m_curz);
}

//////////////////////////////////////////////////////////////////////
//
//	║╨╛ч▒т░г┴▀ ▒ц╡х ╝°└з╕ж Agent┐б └·└х╟╧░э ╕╩┐б╝н ║№┴о│к┐┬┤┘.
//
void USER::CheckGuildHouseWarEnd()
{
	int index = -1;
	index = GetCityNumForVirtualRoom(m_curz);

//	USER *pUser = NULL;

	if(index >= 0 && index < g_arGuildHouseWar.GetSize())
	{
		if(!g_arGuildHouseWar[index]) return;

		CheckMaxValue(g_arGuildHouseWar[index]->m_CurrentGuild.iCurValue, 1);	// └╠░╟ ╕ў└╠ ┴╫└╗╢з╕╢┤┘ ╚г├т╡╟▒т╢з╣о┐б

		if(g_arGuildHouseWar[index]->CheckGuildMopEnd())						// ╕ў└╠ ┤┘ ┴╫╛·┤┘. 
		{			
			g_arGuildHouseWar[index]->SendTownPotalMsg(m_pCom);
			g_arGuildHouseWar[index]->CheckGuildHouseRank();					// Agent┐б └·└х╟╤┤┘.
																				// ╗ч┐ы┴▀└╬ ╟е╜├╕ж ╟о╛ю┴╪┤┘.			
			g_arGuildHouseWar[index]->SetNpcListToWarEnd();


							
/*
			::InterlockedExchange(&g_arGuildHouseWar[index]->m_CurrentGuild.lUsed, 0); 
*/		}
	}
}

//////////////////////////////////////////////////////////////////////
//
//	└п└·░б ┴╫░┼│к, ░╘└╙╝н╣Ў╕ж ║№┴о │к░е╢з╕╢┤┘ ├╝┼й...
//
void USER::CheckGuildUserListInGuildHouseWar()
{
	int i, uid = 0;

	int nCount = 0, nLen = 0;
	USER *pUser = NULL;

	int index = GetCityNumForVirtualRoom(m_curz);

	m_tGuildHouseWar = GUILD_WAR_AFFTER;
	
	if( index < 0 || index >= g_arGuildHouseWar.GetSize() )
	{
		return;
	}

	if(!g_arGuildHouseWar[index]) return;

//	if(m_curz == g_arGuildHouseWar[index]->m_CurrentGuild.iWarZone) TownPotal();

	for(i = 0; i < g_arGuildHouseWar[index]->m_CurrentGuild.iGuildNum; i++)
	{
		uid = g_arGuildHouseWar[index]->m_CurrentGuild.arUserList[i].uid;

		if( uid < 0 || uid >= MAX_USER ) continue;

		pUser = m_pCom->GetUserUid(uid);
		if(!pUser) continue;
		
		nLen = strlen(g_arGuildHouseWar[index]->m_CurrentGuild.arUserList[i].strUserName);
		if(nLen <= 0 || nLen > CHAR_NAME_LENGTH) continue;

		if(strcmp(pUser->m_strUserID, g_arGuildHouseWar[index]->m_CurrentGuild.arUserList[i].strUserName) != 0)
		{
			pUser = GetUser(g_arGuildHouseWar[index]->m_CurrentGuild.arUserList[i].strUserName);
		}

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;

		if(pUser->m_tGuildHouseWar == GUILD_WARRING) nCount++;
	}

	if(nCount <= 0)
	{
		g_arGuildHouseWar[index]->CheckGuildHouseRank();					// Agent┐б └·└х╟╤┤┘.
																			// ╗ч┐ы┴▀└╬ ╟е╜├╕ж ╟о╛ю┴╪┤┘.			
		g_arGuildHouseWar[index]->SetNpcListToWarEnd();
		g_arGuildHouseWar[index]->SetUserListToWarEnd(m_pCom);				// ╝┬╞├╕ж ╟о╛ю┴╪┤┘.

		g_arGuildHouseWar[index]->InitGuild();								// ╡е└╠┼═╕ж │п╕░┤┘.

		g_arGuildHouseWar[index]->m_CurrentGuild.dwIntervalTick = 0;
		::InterlockedExchange(&g_arGuildHouseWar[index]->m_CurrentGuild.lUsed, 0); 
	}
}

//////////////////////////////////////////////////////////////////////
//
//	╟╪┤ч ┴╕┐б ╗¤╝║╢╟┤┬ └╧╜├└√ ┴ж╟╤└╠ ░╔╕░ ┴╕└╬┴Ў ├╝┼й
//
void USER::CheckInvalidGuildZone()
{
	int mapindex = 0;
	int i, index = 0;
	int type = CheckInvalidMapType();
	mapindex = GetGuildMapIndex(type);
	if(mapindex >= 0 && mapindex < g_arMapTable.GetSize())
	{
		if(g_arMapTable[mapindex] == NULL ) return;
		index = g_arMapTable[mapindex]->m_sStoreID;

		if(index >= FORTRESS_BAND)
		{
			CGuildFortress* pFort = NULL;
			pFort = GetFortress(index);

			if(pFort) 
			{
				if(g_arMapTable[mapindex]->m_sStoreZone)
				{
					m_bLive = USER_DEAD;
					SetZoneIndex(m_curz);
					IsDeadUser();		
					m_sHP = m_sMaxHP;												//@@@@@@@@@@@ └╙╜├─┌╡х
					m_bLive = USER_LIVE;
					return;
				}

				if(pFort->m_lUsed == 1)
				{
					m_bLive = USER_DEAD;
	//				m_sHP = 0;
					SetZoneIndex(m_curz);
					IsDeadUser();		
					m_sHP = m_sMaxHP;												//@@@@@@@@@@@ └╙╜├─┌╡х
					m_bLive = USER_LIVE;
					SendSystemMsg( IDS_USER_CANT_REVIVE_IN_WAR, SYSTEM_NORMAL, TO_ME);
				}
			}
		}
/*		else 
		{
			CStore *pStore = NULL;

			index = g_arMapTable[mapindex]->m_sStoreIndex;

			pStore = GetStore(index);

			if(pStore)
			{
				if(pStore->m_lUsed == 1)								// ╟╪┤ч ╝╙╝║ ╕╩└╠ ▒ц╡х└№ ╗є┼┬	
				{
	//				int temp = m_sHP;
					m_bLive = USER_DEAD;
	//				m_sHP = 0;
					SetZoneIndex(m_curz);
					IsDeadUser();		
					m_sHP = m_sMaxHP;												//@@@@@@@@@@@ └╙╜├─┌╡х
					m_bLive = USER_LIVE;
					return;
				}
			}
		}
*/	}

	for(i = 0; i < g_arGuildFortress.GetSize(); i++)
	{		
		if(!g_arGuildFortress[i]) continue;

		if(m_curz == g_arGuildFortress[i]->m_iZone)
		{
			m_bLive = USER_DEAD;
			IsDeadUser();		
			m_sHP = m_sMaxHP;												//@@@@@@@@@@@ └╙╜├─┌╡х
			m_bLive = USER_LIVE;
			return;
		}
	}

	for(i = 0; i < g_arGuildHouseWar.GetSize(); i++)
	{
		if(!g_arGuildHouseWar[i]) continue;

		if(m_curz == g_arGuildHouseWar[i]->m_CurrentGuild.iWarZone)
		{
//			int temp = m_sHP;
			m_bLive = USER_DEAD;
//			m_sHP = 0;
			SetZoneIndex(m_curz);
			IsDeadUser();		
			m_sHP = m_sMaxHP;												//@@@@@@@@@@@ └╙╜├─┌╡х
			m_bLive = USER_LIVE;
			return;
		}
	}

	for(i = 0; i < g_arGuildHouse.GetSize(); i++)						// ▒ц╡х╟╧┐ь╜║ ╛╚└╬╡е.. ╝╥└п▒ц╡х░б ╛╞┤╧╕щ..
	{
		if(m_curz == g_arGuildHouse[i]->iZone)
		{
//			int temp = m_sHP;
			m_bLive = USER_DEAD;
//			m_sHP = 0;
			SetZoneIndex(m_curz);
			IsDeadUser();		
			m_sHP = m_sMaxHP;												//@@@@@@@@@@@ └╙╜├─┌╡х
			m_bLive = USER_LIVE;
			return;
		}
	}

	for(i = 0; i < g_QuestEventZone.m_arEventZone.GetSize(); i++)
	{
		if(m_curz == g_QuestEventZone.m_arEventZone[i])
		{
			m_bLive = USER_DEAD;
			IsDeadUser();		
			m_sHP = m_sMaxHP;												//@@@@@@@@@@@ └╙╜├─┌╡х
			m_bLive = USER_LIVE;
			return;
		}
	}
}
/*
void USER::CheckMemoryDB(char* strAccount, char *strUserId)
{
	CSharedMemory*	pSharedMemory;
	CMemUser*		pMD;
	int				mem_index = -1;
	int				nLen1, nLen2;
	CString			str;

	SYSTEMTIME time;
	GetLocalTime(&time);

	for( int i = 0; i < MAX_USER; i++ )
	{
		pSharedMemory = NULL;
		pSharedMemory = g_arSharedMemory[i];

		if(!pSharedMemory) continue;

		pMD = (CMemUser*)pSharedMemory->m_lpData;

		nLen = strlen( pMD->m_strUserID );
		if( nLen <= 0 || nLen > CHAR_NAME_LENGTH ) continue;

		if( strcmp( pMD->m_strUserID, strUserId ) == 0 )
		{
			// ╞─└╧┐б ╛┤┤┘
			if ( g_ChatEnable[m_iModSid] == TRUE )
			{
				str.Format( "(%dM %dD %dH %dMIN)\tuid-%d str-%d uduid-%d savetime-%d id-%s\r\n",
					time.wMonth, time.wDay, time.wHour, time.wMinute, pMD->m_uid, pMD->m_sSTR, pMD->m_UB.m_uid, pMD->m_dwSaveTime, pMD->m_strUserID );
				
				// IKING 2002.1.
				//TRACE("*** bfile write log started:%s ***\n", strUserId);
				EnterCriticalSection( &m_CS_FileWrite );
				g_fpBackServer.Write( str, str.GetLength() );
				LeaveCriticalSection( &m_CS_FileWrite );
			}

			//TRACE("*** bfile write logged end:%s ***\n", strUserId);
			//

//			if(pMD->m_uid == -1) continue;		// ┴д╕о░б ╡╚ └п└·┤┬ ┤┘╜├ └·└х╟╧┴Ў ╛╩┤┬┤┘.
//			if(pMD->m_sSTR == 0) continue;		// ╕╢┬∙░б┴Ў

			UpdateMem2DB(pMD);
			UpdateBankMem2DB(pMD);
			UpdateAccountBankMem2DB(pMD);

			pMD->m_uid = -1;
			pMD->m_sSTR = 0;			
			pMD->m_UB.m_uid = -1;
			pMD->m_AB.m_uid = -1;
			pMD->m_dwSaveTime = 0;
			::ZeroMemory(pMD->m_strUserID, sizeof(pMD->m_strUserID));
		}
	}
}
*/
int USER::CheckMemoryDB(char *strUserId)
{
	CSharedMemory*	pSharedMemory;
	CMemUser*		pMD;
	int				mem_index = -1;
	int				nLen;
	int				user_count = 0;
	int				account_count = 0;
	int				ret_val = 0;
	CString			str;

	SYSTEMTIME time;
	GetLocalTime(&time);

	for( int i = 0; i < MAX_USER; i++ )
	{
		pSharedMemory = NULL;
		pMD = NULL;

		pSharedMemory = g_arSharedMemory[i];
		if(!pSharedMemory) continue;

		pMD = (CMemUser*)pSharedMemory->m_lpData;
		if(!pMD) continue;

		if(pMD->m_uid == -1 || pMD->m_sSTR == 0) continue;		// ┴д╕о░б ╡╚ └п└·┤┬ ┤┘╜├ └·└х╟╧┴Ў ╛╩┤┬┤┘.
		if(pMD->m_strUserID[0] == 0) continue;

		nLen = strlen( strUserId );
		if( nLen <= 0 || nLen > CHAR_NAME_LENGTH ) continue;

		
		if( _stricmp( pMD->m_strUserID, strUserId ) == 0 && _stricmp( pMD->m_strAccount, m_strAccount ) == 0 )
		{
			user_count++;
			// ╞─└╧┐б ╛┤┤┘
			if(user_count > 1)
			{
				GetLocalTime(&time);
				str.Format("(%04d-%02d-%02d %02d:%02d:%02d)\tuid-%d str-%d ubuid-%d count-%d id-%s\r\n",
					time.wYear, time.wMonth, time.wDay, time.wHour, time.wMinute, time.wSecond,
					pMD->m_uid, pMD->m_sSTR, pMD->m_UB.m_uid, user_count, pMD->m_strUserID );
				
				// IKING 2002.1.
				EnterCriticalSection( &m_CS_FileWrite );
				g_fpBackServer.Write( str, str.GetLength() );
				LeaveCriticalSection( &m_CS_FileWrite );
			}

//			if( !Mem2Game(pMD) )			// Shared Memory -> Game ║п╝Ў╖╬
//			{
//				user_count--;
//			}

			UpdateMem2DB(pMD);		// ╛╚└№└╗ └з╟╪╝н DB┐б╡╡ └·└х└╗
			UpdateBankMem2DB(pMD);
			UpdateAccountBankMem2DB(pMD);

			pMD->m_uid = -1;
			pMD->m_sSTR = 0;			
			pMD->m_UB.m_uid = -1;
			pMD->m_AB.m_uid = -1;
			pMD->m_dwSaveTime = 0;
			::ZeroMemory(pMD->m_strUserID, sizeof(pMD->m_strUserID));
			::ZeroMemory(pMD->m_strAccount, sizeof(pMD->m_strAccount));
		}
		// ░ш┴д└║ ░░└║╡е ╛╞└╠╡Ё░б ┤┘╕г┤┘.
		else if( _stricmp( pMD->m_strAccount, m_strAccount ) == 0 && _stricmp( pMD->m_strUserID, strUserId ) != 0 )
		{
			account_count++;

			if(account_count > 1)
			{
				GetLocalTime(&time);
				str.Format("(%04d-%02d-%02d %02d:%02d:%02d)\tuid-%d str-%d ubuid-%d count-%d id-%s (AccountBank)\r\n",
					time.wYear, time.wMonth, time.wDay, time.wHour, time.wMinute, time.wSecond,
					pMD->m_uid, pMD->m_sSTR, pMD->m_AB.m_uid, account_count, pMD->m_strAccount );
				
				// IKING 2002.1.
				EnterCriticalSection( &m_CS_FileWrite );
				g_fpBackServer.Write( str, str.GetLength() );
				LeaveCriticalSection( &m_CS_FileWrite );
			}

//			if( !Mem2GameAccountBank(pMD) )
//			{
//				account_count++;
//			}

			UpdateMem2DB(pMD);		// ╛╚└№└╗ └з╟╪╝н DB┐б╡╡ └·└х└╗
			UpdateBankMem2DB(pMD);
			UpdateAccountBankMem2DB(pMD);

			pMD->m_uid = -1;
			pMD->m_sSTR = 0;			
			pMD->m_UB.m_uid = -1;
			pMD->m_AB.m_uid = -1;
			pMD->m_dwSaveTime = 0;
			::ZeroMemory(pMD->m_strUserID, sizeof(pMD->m_strUserID));
			::ZeroMemory(pMD->m_strAccount, sizeof(pMD->m_strAccount));
		}
	}

//	if( user_count == 0 && account_count == 0 ) return 0;		
																// ╛╞╡┌,└║╟р,┼ы├в ╕Ё╡╬ DB┐б╝н ░б┴о┐═╛▀ ╟╤┤┘.
//	if( user_count != 0 && account_count == 0 ) return 1;		// ╛╞╡┌╢√ ░ш┴д└╠ ░░└║ ░═└║ └╓╛·░э, ░ш┴д╕╕ ░░░э ╛╞╡┌░б ┤┘╕е░═└║ ╛°╛·┤┘.
																// ╛╞╡┌,└║╟р,┼ы├в ╕Ё╡╬ MemoryDB┐б╝н ░б┴о┐╘┤┘. DB┐б╝н ░б┴о┐└┴Ў ╛╩┤┬┤┘.
//	if( user_count != 0 && account_count != 0 ) return 1;		// ╛╞╡┌╢√ ░ш┴д└╠ ░░└║ ░═└╠ └╓╛·░э, ░ш┴д╕╕ ░░░э ╛╞╡┌░б ┤┘╕е░═╡╡ └╓╛·┤┘.
																// ╛╞╡┌,└║╟р,┼ы├в ╕Ё╡╬ MemoryDB┐б╝н ░б┴о┐╘┤┘. DB┐б╝н ░б┴о┐└┴Ў ╛╩┤┬┤┘.
//	if( user_count == 0 && account_count != 0 ) return 2;		// ╛╞╡┌╢√ ░ш┴д└╠ ░░└║ ░═└║ ╛°╛·░э, ░ш┴д╕╕ ░░└║ ░═└╠ └╓╛·┤┘.
																// ╛╞╡┌,└║╟р,┼ы├в ╕Ё╡╬ DB┐б╝н ░б┴о┐═╛▀ ╟╤┤┘. (│к┴▀┐б ┼ы├в╕╕ MemoryDB┐б╝н ░б┴о┐└┤┬ ╖ч╞╛└╗ │╓└╗░═└╠┤┘.)

	return 0;
}

//////////////////////////////////////////////////////////////////////
//
//	░б└х ░б▒ю┐ю ╡╡╜├╖╬ ┼╕┐ю╞ў┼╗ ┴┬╟е╕ж ▒╕╟╤┤┘.
//
CPoint USER::GetTownPotal(int &potal)
{
	if(m_curz == 66)		//╔▒╚╦┐ё┤є╚№╦└║є╘н╡╪╕╜╜№╕┤╗ю
	{
		
			int			i;
			BYTE		error;
			ItemList	ReverseItem;
			CBufferEx	TempBuf, TempYourBuf;
			CPoint		ptRevival, ptClientRevival;
			if(m_bLive == USER_LIVE) return NULL;
			ptRevival = FindNearAvailablePoint_S( m_curx, m_cury );

			if( ptRevival.x == -1 || ptRevival.y == -1 )
				TownPotal();

			if( LiveCity( ptRevival.x, ptRevival.y ) == FALSE )
			{
				error = 3;								// ║╬╚░╟╥ └х╝╥╕ж ╕°├г└╜: ╛╦╝Ў╛°┤┬ ┐б╖п
				TempBuf.Add( REVIVAL_RESULT );
				TempBuf.Add( error );
				Send( TempBuf, TempBuf.GetLength() );
				return NULL;
			}
			m_bLive = USER_LIVE;
			InterlockedExchange(&m_lDeadUsed, (LONG)0);
			ptClientRevival = ConvertToClient( m_curx, m_cury );
			if(m_sMagicMaxHP > m_sMaxHP) m_sHP = m_sMagicMaxHP;
			else m_sHP = m_sMaxHP;
			error = 0;
			TempBuf.Add( REVIVAL_RESULT );
			TempBuf.Add( error );
			TempBuf.Add(m_uid + USER_BAND);
			TempBuf.AddString(m_strUserID);

			TempBuf.Add((short)ptClientRevival.x);
			TempBuf.Add((short)ptClientRevival.y);

			TempBuf.Add(m_iSkin);
			TempBuf.Add(m_iHair);
			TempBuf.Add((BYTE)m_sGender);
			TempBuf.AddData(m_strFace, 10);

			for( i = 0; i < EQUIP_ITEM_NUM; i++ ) TempBuf.Add(m_UserItem[i].sSid);

			TempBuf.Add(m_sHP);
			TempBuf.Add(m_sMagicMaxHP);

			TempBuf.Add(m_tDir);

			TempBuf.Add(m_dwAbnormalInfo);				// ╗є┼┬└╠╗є ┴д║╕
			TempBuf.Add(m_dwAbnormalInfo_);
			TempBuf.Add((DWORD)0);
			TempBuf.Add((DWORD)0);
			/*TempBuf.Add((BYTE)0x00);
			TempBuf.Add((BYTE)0x00);
			TempBuf.Add((BYTE)0x00);
			TempBuf.Add((BYTE)0x00);
			TempBuf.Add((BYTE)0x00);
			TempBuf.Add((BYTE)0x00);
			TempBuf.Add((BYTE)0x00);
			TempBuf.Add((BYTE)0x00);
			*/
			TempBuf.Add(m_sCityRank);

			TempBuf.Add((int)m_dwGuild);				//&&&&&&&&&&&& Test Code
			TempBuf.AddString(m_strGuildName);			// ▒ц╡х └╠╕з└╗ ├▀░б
			TempBuf.Add(m_sGuildVersion);
			TempBuf.Add(m_byClass);
			TempBuf.Add((BYTE)m_bPkStatus);

			TempBuf.AddString(m_strLoveName);			//yskang 0.1

			for( i = TOTAL_INVEN_MAX; i < TOTAL_ITEM_NUM-2; i++) TempBuf.Add(m_UserItem[i].sSid);	// EBody
			if(m_UserItem[TOTAL_ITEM_NUM-2].sSid!=-1&&m_UserItem[TOTAL_ITEM_NUM-2].sDuration!=0){
				TempBuf.Add((BYTE)(m_UserItem[TOTAL_ITEM_NUM-2].tMagic[0]));
				TempBuf.Add((BYTE)0x00);
			}else{
				TempBuf.Add(m_UserItem[TOTAL_ITEM_NUM-2].tMagic[0]);
				TempBuf.Add((BYTE)0xff);
			}
			TempBuf.AddString(m_PersonalShopName);

			SendInsight(TempBuf, TempBuf.GetLength());

			if(m_bNowBuddy == TRUE) SendBuddyUserChange(BUDDY_CHANGE);		// ╣Ў╡Ё┴▀└╠╕щ ┤┘╕е ╣Ў╡Ё┐°┐б░╘ │п╕░┤┘.
			potal = m_curz;


				int x; int y; int random;
				random = myrand( 1,10);
				switch(random)
				{
				case	1:
					x =14,y=36;
					break;
				case	2:
					x =4,y=48;
					break;
				case	3:
					x =10,y=62;
					break;
				case	4:
					x =34,y=58;
					break;
				case	5:
					x =46,y=42;
					break;
				case	6:
					x =34,y=28;
					break;
				case	7:
					x =26,y=40;
					break;
				case	8:
					x =19,y=51;
					break;
				case	9:
					x =13,y=57;
					break;
				case	10:
					x =29,y=51;
					break;
				}
			
			ptClientRevival.x=x;
			ptClientRevival.y=y;
			return CPoint(ptClientRevival.x, ptClientRevival.y);
		
	}
	else
	{
	int i, num = -1;
	int dx1 = 0, dy1 = 0;
	int dx2 = 0, dy2 = 0;
	int dx3 = 0, dy3 = 0;

	if(CheckInvalidMapType() != 12)				// ┤ы╖├└х└╠ ╛╞┤╥╢з╕╕ ▒ц╡х╟╧┐ь╜║┐═ ╞ў╞о╕о╜║╕ж ├╝┼й╟╤┤┘
	{
		for(i = 0; i < g_arGuildFortress.GetSize(); i++)			// ╕╒└· Fortress╕ж ╝╥└п╟╤ ▒ц╡х└╬┴Ў ├╝┼й╟╤┤┘.
		{
			if(!g_arGuildFortress[i]) continue;

			if(CheckGuildHouseUser(g_arGuildFortress[i]->m_sFortressID)) 
			{
				potal = g_arGuildFortress[i]->m_iZone;
				return CPoint(g_arGuildFortress[i]->m_iPotalX, g_arGuildFortress[i]->m_iPotalY);
			}
		}

		for(i = 0; i < g_arGuildHouse.GetSize(); i++)				
		{
			if(CheckGuildHouseUser(i + 1)) 
			{
				potal = g_arGuildHouse[i]->iZone;
				return CPoint(g_arGuildHouse[i]->iPotalX, g_arGuildHouse[i]->iPotalY);
			}
		}
	}

	for(i = 0; i < g_TownPotal.GetSize(); i++)					// ╛╞┤╧╕щ ░б▒ю┐ю ╡╡╜├╖╬ └╠╡┐╟╤┤┘.
	{
		if(g_TownPotal[i]->iZone == m_curz) { num = i; break; }
	}

	if(num < 0) 
	{
		potal = -1;
		return CPoint(-1, -1);
	}

	potal = g_TownPotal[num]->iPotalZone;

	CPoint temp = ConvertToClient(m_curx, m_cury);

	if(g_TownPotal[num]->iPotalX <= 0) return CPoint(g_TownPotal[num]->iPotalX1, g_TownPotal[num]->iPotalY1);
	else if(g_TownPotal[num]->iPotalX1 <= 0) return CPoint(g_TownPotal[num]->iPotalX, g_TownPotal[num]->iPotalY);
	else
	{
		dx1 = abs(g_TownPotal[num]->iPotalX - temp.x);
		dy1 = abs(g_TownPotal[num]->iPotalY - temp.y);

		dx2 = abs(g_TownPotal[num]->iPotalX1 - temp.x);
		dy2 = abs(g_TownPotal[num]->iPotalY1 - temp.y);

		i = myrand(0, 2);

		if( (dx1 + dy1) < (dx2 + dy2) )
		{
			if(potal == 400)	return CPoint(g_RandomTownPotal[2]->iPotal[i].x, g_RandomTownPotal[2]->iPotal[i].y);
			else				return CPoint(g_RandomTownPotal[0]->iPotal[i].x, g_RandomTownPotal[0]->iPotal[i].y);
			

//			return CPoint(g_TownPotal[num]->iPotalX, g_TownPotal[num]->iPotalY);
		}
		else
		{
			if( m_curz == 1 )	// ╖ч└╠│╫╞о,╗ч│к╡х,└┌╕с╕о╛╞ - └╠╣╠ ╗ч│к╡х░б ╝▒┼├╡╚ ╗є╚▓
			{
				dx3 = abs( 2463 - temp.x );
				dy3 = abs( 705 - temp.y);

				if( (dx3 + dy3) < (dx2 + dy2) )	// └┌╕с╕о╛╞ └╘▒╕░б ┤ї ░б▒ї┤┘╕щ
				{
					potal = 26;
					return CPoint( 36, 64 );
				}
			}
			if(potal == 400)	return CPoint(g_RandomTownPotal[2]->iPotal[i].x, g_RandomTownPotal[2]->iPotal[i].y);
			else				return CPoint(g_RandomTownPotal[1]->iPotal[i].x, g_RandomTownPotal[1]->iPotal[i].y);

			if(potal == 300) CPoint(g_TownPotal[num]->iPotalX1, g_TownPotal[num]->iPotalY1);
		}
	}
	
	return CPoint(-1, -1);
  }
}
/////////////////////////////////////////////////////////////////////////////////////
//	SpeedHack ╗ч┐ы└┌└╬┴Ў╕ж ░╦╗ч╟╤┤┘.
//
void USER::CheckSpeedHack()
{
	m_dwServerTick = GetTickCount();

	if(m_iTickCount == 0)
	{
		m_dwClientTick = GetTickCount();
		m_iTickCount++;
		return;
	}

	DWORD dwGap = 0;
	DWORD dwCurr = GetTickCount(); 

	dwGap = dwCurr - m_dwClientTick;
	TRACE("-----id = %s,  dwGap = %d\n", m_strUserID, dwGap);
	if(dwGap < 32000)
	{
		SYSTEMTIME time;
		GetLocalTime(&time);
		
		CString str;
		str.Format( IDS_USER_SYSTEM_MSG02, time.wMonth, time.wDay, time.wHour, time.wMinute, m_strAccount, m_strUserID, dwGap);
		
		EnterCriticalSection( &m_CS_FileWrite );
		g_fpSpeedHack.Write(str, str.GetLength());
		LeaveCriticalSection( &m_CS_FileWrite );
		
		SendSystemMsg( IDS_USER_SPEED_HACK, SYSTEM_SPECIAL, TO_ME);
	}

	m_dwClientTick = GetTickCount();
}

/////////////////////////////////////////////////////////////////////////////////////
//	╟╪┤ч ▒ц╡х└╟ DB┐═ ▒ц╡х┐°╡щ╕ж DB┐б╝н ╗ш┴ж╟╤┤┘.
//
BOOL USER::DeleteGuildDB()
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		

	if(m_dwGuild <= 0 || m_dwGuild >= g_arGuildData.GetSize()) return FALSE;
	if(!m_bGuildMaster) return FALSE;
	if(!g_arGuildData[m_dwGuild]) return FALSE;

	::ZeroMemory(szSQL, sizeof(szSQL));

	int index = 0;

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call DELETE_GUILD (%d, \'%s\')}"), m_dwGuild, m_strUserID); 

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			bQuerySuccess = FALSE;
		}
	}
	else
	{
		//if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		//BREAKPOINT();

		//g_DB[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);

	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

//void USER::RemoveReceivedData()
//{
//	POSITION pos, pos2;
//	WAIT_RECV_DATA *pWrd;
//
//	return;
//
//	EnterCriticalSection(&m_CS_ReceiveData[m_iSidMod]);
//
//	for ( pos = RecvPtrList[m_iSidMod].GetHeadPosition();  pos != NULL; )
//	{
//		pos2 = pos;
//		pWrd = (WAIT_RECV_DATA *)RecvPtrList[m_iSidMod].GetNext( pos );
//		if ( pWrd )
//		{
//			if ( pWrd->usn == m_Sid )
//			{
//				delete pWrd;
//				pWrd = NULL;
//
//				RecvPtrList[m_iSidMod].RemoveAt(pos2);
//			}
//		}
//	};
//
//	nRecvDataLength[m_iSidMod] = RecvPtrList[m_iSidMod].GetCount();
//
//	LeaveCriticalSection(&m_CS_ReceiveData[m_iSidMod]);
//}

int USER::SockCloseProcess(int nError)
{
	if(m_bSessionOnline) return 0;

	if ( m_UserStatus == 0  ) return 0;

	m_UserStatus = 0;

	if (g_pMainDlg->m_bLogOutExit == TRUE)
	{
		if ( m_state == STATE_GAMESTARTED )
//			LogOutWithDbServer();
			LogOut();

		m_state = STATE_DISCONNECTED;

		CBSocket::SockCloseProcess();  // UserList┐б╝н ╗ш┴ж 

		// ╝н─б ▒╕┴╢┐б╝н ┴Ў┐ь▒т...
		g_pMainDlg->UserFree( m_uid );

		m_UserFlag = FALSE;
		return 0;
	}

	if ( m_state == STATE_GAMESTARTED )
		//LogOutWithDbServer();
		LogOut();

	m_state = STATE_DISCONNECTED;

	CBSocket::SockCloseProcess();  // UserList┐б╝н ╗ш┴ж 

	// ╝н─б ▒╕┴╢┐б╝н ┴Ў┐ь▒т...
	g_pMainDlg->UserFree( m_uid );

	m_UserFlag = FALSE;

	return 1;
}

void USER::OnClose(int nErrorCode) 
{
	CBSocket::B_OnClose(nErrorCode);
}

void USER::OnSend(int nErrorCode) 
{
	if ( m_SockFlag != 1 || m_UserFlag == FALSE ) return;

	CBSocket::B_OnSend( nErrorCode );

	if ( m_SockFlag == 0 )
	{
		SoftClose();
	}
}

int USER::AcceptProcess()
{
	return 1;
}

void USER::StopAction()
{
}

/////////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х╟╧┐ь╜║╕ж ╝╥└п╟╤ ▒ц╡х┐°╕╕ ├т└╘╟╤┤┘.
//
BOOL USER::CheckGuildHouseUser(int num)
{
	if(m_dwGuild <= 0) return FALSE;

	if(num >= FORTRESS_BAND)
	{
		CGuildFortress *pFort = NULL;
		pFort = GetFortress(num);

		if(pFort)
		{
			if(pFort->m_iGuildSid == m_dwGuild) return TRUE;
		}
	}
	else
	{
		for(int i = 0; i < g_arGuildHouse.GetSize(); i++)
		{
			if(g_arGuildHouse[i]->iGuild <= 0) continue;

			if(g_arGuildHouse[i]->iSid == num) 
			{			
				if(g_arGuildHouse[i]->iGuild == m_dwGuild) return TRUE;
			}
		}
	}

	return FALSE;
}

/////////////////////////////////////////////////////////////////////////////////////
//	╟┌╡Ё░╘└╠╞о╕ж ╗ч┐ы╟╧▒т└з╟╪ └№├╝ ╟о╕о╜║╞о╕ж │╗╖┴┴╪┤┘.
//
void USER::TeleportReq()
{
	int i, iCount = 0;

	if(!CheckHandyGate()) 
	{
		SendSystemMsg( IDS_USER_NO_HANDYGATE, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(m_bSessionOnline == true) return; 
	if(m_bLive == USER_DEAD) return;		 
	if(m_bNowTrading == TRUE) return;		
	if(m_bNoItemMove == TRUE) return;		
	if(m_bViewingAShop == TRUE) return;
	if(m_bPShopOpen == TRUE){ SendSystemMsg("╕Ў╚╦╔╠╡ъ╫┤╠м╧┬╬▐╖и╩╣╙├┤л╦═├┼!", SYSTEM_ERROR, TO_ME);return;}

	CBufferEx TempBuf;
	TempBuf.Add(TELEPORT_RESULT);

	for(i = 1; i < TEL_MAX_COUNT; i++)
	{
		if(m_strTeleport[i].iSid != 0) iCount++;
	}

	TempBuf.Add((BYTE)(iCount));

	for(i = 1; i < TEL_MAX_COUNT; i++)
	{
		if(m_strTeleport[i].iSid != 0)
		{
			TempBuf.Add((BYTE)m_strTeleport[i].iSid);
			TempBuf.AddString(m_strTeleport[i].TelName);
			TempBuf.Add((int)m_strTeleport[i].z);//yskang 0.9 handy ╝Ў┴д ╟┌╡Ё╖╬ └╠╡┐ ║╥░б┴Ў┐к└╗ ╚╕╗Ў└╕╖╬ ╟е╜├╟╧▒т └з╟╧┐й
		}
	}

	Send(TempBuf, TempBuf.GetLength());
}

/////////////////////////////////////////////////////////////////////////////////////
//	DB┐б └·└х╡╚ ┴д║╕╕ж ╣ш┐н┐б ╝┬╞├
//
void USER::StrToUserTel(TCHAR *pBuf)
{
	int index = 0;
	int temp = 0;
	int nLength = 0;

//	for(int i = 1; i < TEL_MAX_COUNT; i++)
	do
	{
		temp = GetByte(pBuf, index);
		if(temp <= 0 || temp >= TEL_MAX_COUNT) break;

		m_strTeleport[temp].iSid = temp;
		m_strTeleport[temp].x = GetShort(pBuf, index);
		m_strTeleport[temp].y = GetShort(pBuf, index);
		m_strTeleport[temp].z = GetShort(pBuf, index);

		nLength = GetByte(pBuf, index);
		if(nLength < 0 || nLength > TEL_NAME_LENGTH) break;
	
		GetString(m_strTeleport[temp].TelName, pBuf, nLength, index);

		m_strTeleport[temp].TelName[TEL_NAME_LENGTH + 1] = 0;

	} while(TRUE);
}

/////////////////////////////////////////////////////////////////////////////////////
//	╡е└╠┼╕╕ж DB┐б └·└х 
//
void USER::UserTelToStr(TCHAR *pBuf)
{
	int index = 0;

	for(int i = 1; i < TEL_MAX_COUNT; i++)
	{
		if(m_strTeleport[i].iSid == 0) continue;

		SetByte(pBuf, m_strTeleport[i].iSid, index);
		SetShort(pBuf, m_strTeleport[i].x, index);
		SetShort(pBuf, m_strTeleport[i].y, index);
		SetShort(pBuf, m_strTeleport[i].z, index);
		SetVarString(pBuf, m_strTeleport[i].TelName, strlen( m_strTeleport[i].TelName ), index );
	}
}

/////////////////////////////////////////////////////////////////////////////////////
//	╡е└╠┼╕╕ж ├╩▒т╚н╟╤┤┘.
//
void USER::InitTelList(TeleportList *strTel)
{
	for(int i = 0; i < TEL_MAX_COUNT; i++)
	{
		strTel[i].iSid = 0;
		strTel[i].x = 0;
		strTel[i].y = 0;
		strTel[i].z = 0;
		::ZeroMemory(strTel[i].TelName, sizeof(strTel[i].TelName));		
	}

	m_lCopyUsed = 0;
	m_CopyUid = 0;				// copy chip ┐б ╗ч┐ы╡╟┤┬ ╛╞└╠┼█
	m_tIndex = 0;
	::ZeroMemory(m_strCopyUser, sizeof(m_strCopyUser));	
}

/////////////////////////////////////////////////////////////////////////////////////
//	┼┌ ┴┬╟е╕ж ▒т╛я╟╧░┼│к ╗ш┴ж╟╤┤┘.
//
void USER::TelportEdit(TCHAR *pBuf)
{
	int i, mapindex = 0;
	int index = 0;
	BYTE tIndex = 0;
	
	CPoint pt;
	int nLen = 0, type = 0;
	BOOL bSuccess = FALSE;	
	TCHAR szName[TEL_NAME_LENGTH + 1];	
	CBufferEx TempBuf;
	
	if(!CheckHandyGate()) 
	{
		SendSystemMsg( IDS_USER_NO_HANDYGATE, SYSTEM_ERROR, TO_ME);
		return;
	}

	BYTE tType = GetByte(pBuf, index);

	::ZeroMemory(szName, sizeof(szName));

	if(tType == TEL_ADD_EDIT)
	{	
		for(i = 0; i < g_arGuildHouseWar.GetSize(); i++)
		{
			if(!g_arGuildHouseWar[i]) continue;

			if( m_curz == g_arGuildHouseWar[i]->m_CurrentGuild.iWarZone)
			{
				SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
				goto go_result;
			}
		}

		for(i = 0; i < g_arGuildHouse.GetSize(); i++)
		{
			if( m_curz == g_arGuildHouse[i]->iZone)
			{
				SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
				goto go_result;
			}
		}

		for(i = 0; i < g_QuestEventZone.m_arEventZone.GetSize(); i++)
		{
			if(m_curz == g_QuestEventZone.m_arEventZone[i])
			{
				SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
				goto go_result;
			}
		}

		for(i = 0; i < g_arGuildFortress.GetSize(); i++)
		{
			//break;
			if(!g_arGuildFortress[i]) continue;

			if(m_curz == g_arGuildFortress[i]->m_iZone)
			{
				SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);//yskang handy don't save
				goto go_result;
			}

			type = CheckInvalidMapType();
			mapindex = GetGuildMapIndex(type);
			if(mapindex >= 0 && mapindex < g_arMapTable.GetSize())
			{
				if(g_arMapTable[mapindex])
				{
					if(g_arMapTable[mapindex]->m_sStoreID >= FORTRESS_BAND)
					{
						if(g_arMapTable[mapindex]->m_sStoreZone == 1) 
						{
							SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
							goto go_result;
						}
					}
				}
			}			
		}

		if( m_curz == 40 || m_curz == 43 || m_curz == 44 || m_curz == 45 || m_curz == 57 || m_curz == 58 || m_curz == 59 )		// ┤ы╖├└х
		{
			SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}           //╬▐╖и╩╣╙├┤л╦═├┼
        if( m_curz == 56 || m_curz == 16 || m_curz == 12 || m_curz == 19  || m_curz == 36 || m_curz == 49 || m_curz == 92 || m_curz == 409 || m_curz == 416 || m_curz == 61|| m_curz == 66 || m_curz == 67 || m_curz == 319 || m_curz == 310 || m_curz == 311 ) 		// ┐ь┴╓┴╕(56), └╠║е╞о╕ў┴╕(16,12,19)└║ └·└х╟╪┴╓┴Ў ╛╩┤┬┤┘.
		{
			SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}
//╣╪▒╒╔╠╡ъ57╡у┤л╡у▒г┤ц...
		if( m_curz == 10 || m_curz == 92 || m_curz == 24 || m_curz == 20  ||/* m_curz == 403 ||*/ m_curz == 303 || m_curz == 304 || m_curz == 61 || m_curz == 319/* || IsCity()*/)		// ┐ь┴╓┴╕(56), └╠║е╞о╕ў┴╕(16,12,19)└║ └·└х╟╪┴╓┴Ў ╛╩┤┬┤┘.
		{
			SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}
		if(type == 8 || type == 10 || type == 15 || type == 17 || type == 9 || type == 11 || type == 16 || type == 18)
		{
            SendSystemMsg( "╥к╚√╛п╜ф╧▀─┌╬▐╖и▒г┤ц,╟ы└ы╥к╚√╘╢╡у▒г┤ц!", SYSTEM_ERROR, TO_ME);
			goto go_result;
		}

		nLen = GetVarString(sizeof(szName), szName, pBuf, index);
		if(nLen <= 0 || nLen > TEL_NAME_LENGTH) goto go_result;

		i = TEL_MAX_COUNT - 1;

		do
		{
			if(strcmp(m_strTeleport[i].TelName, szName) == 0)
			{
				SendSystemMsg( IDS_USER_ALREADY_HANDYGATE_SAVE, SYSTEM_ERROR, TO_ME);
				goto go_result;
			}
			i--;
		} while(i >= 1);

		for(i = 1; i < TEL_MAX_COUNT; i++)
		{
			if(m_strTeleport[i].iSid == 0) 
			{
				pt = ConvertToClient(m_curx, m_cury);
				if(pt.x <= -1 || pt.y <= -1) goto go_result;

				m_strTeleport[i].iSid = i;
				m_strTeleport[i].x = pt.x;
				m_strTeleport[i].y = pt.y;
				m_strTeleport[i].z = m_curz;

				strncpy(m_strTeleport[i].TelName, szName, nLen);
				tIndex = (BYTE)i;
				bSuccess = TRUE;

				SendSystemMsg( IDS_USER_HANDYGATE_SAVE, SYSTEM_NORMAL, TO_ME);

				break;
			}
		}		
	}
	else if(tType == TEL_DEL_EDIT)
	{
		tIndex = GetByte(pBuf, index);
		if ( tIndex <= 5)
		{
			SendEventMsg("┤╦╡╪╡у╬▐╖и╔╛│¤");//╡ў╩╘BUG
			goto go_result;
		}
		if(tIndex <= 0 || tIndex >= TEL_MAX_COUNT) goto go_result;
        nLen = GetVarString(sizeof(szName), szName, pBuf, index);
		if(nLen <= 0 || nLen > TEL_NAME_LENGTH) goto go_result;

		if(strcmp(m_strTeleport[tIndex].TelName, szName) != 0) goto go_result;

		bSuccess = TRUE;
		m_strTeleport[tIndex].iSid = 0;	
		m_strTeleport[tIndex].x = 0;
		m_strTeleport[tIndex].y = 0;
		m_strTeleport[tIndex].z = 0;
		::ZeroMemory(m_strTeleport[tIndex].TelName, nLen);

		SendSystemMsg( IDS_USER_HANDYGATE_DELETE, SYSTEM_NORMAL, TO_ME);
	}

go_result:
	TempBuf.Add(TELEPORT_EDIT_RESULT);

	if(!bSuccess)
	{
		TempBuf.Add((BYTE)0x00);				// ╜╟╞╨
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	TempBuf.Add((BYTE)0x01);					// ╝║░°						
	TempBuf.Add(tType);							// ╗ш┴ж ╢╟┤┬ ├▀░б 
	TempBuf.Add(tIndex);						// ╟╪┤ч └╬╡ж╜║ 
	TempBuf.AddString(szName);					// 
	TempBuf.Add((int)m_curz);//yskang 0.9 handy ╝Ў┴д ╟┌╡Ё╖╬ └╠╡┐ ║╥░б┴Ў┐к└╗ ╚╕╗Ў└╕╖╬ ╟е╜├╟╧▒т └з╟╧┐й 
	Send(TempBuf, TempBuf.GetLength());
}

/////////////////////////////////////////////////////////////////////////////////////
//
void USER::ChangeUserSpeed(TCHAR *pBuf)
{
	return;
/*
	CBufferEx TempBuf;

	int index = 0;

	short step = atoi(pBuf);

	if(step < 0 || step > 500) step = 0;

	TempBuf.Add(SET_SPEED_MONSTER);

	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(step);

	SendInsight(TempBuf, TempBuf.GetLength());

	SightRecalc();
*/
}

/////////////////////////////////////////////////////////////////////////////////////
//	╟┌╡Ё░╘└╠╞о╕ж ╗ч┐ы╟╤┤┘.
//
void USER::GetHanyGate(int slot, int sid)
{
	if(m_dwGuild >= 1 && m_dwGuild < g_arGuildData.GetSize())// ▒ц╡х ├в░э╕ж ┐н╛ю│ї└║ ╗є┼┬┐б╝н┤┬ └╠╡┐└╗ ╕°╟╤┤┘.
	{
		if(!g_arGuildData[m_dwGuild]) return;

		if(g_arGuildData[m_dwGuild]->m_lUsed == 1)			// ▒ц╡х ├в░э░б ╗ч┐ы┴▀└╠╢є╕щ
		{
			int nLen = strlen(g_arGuildData[m_dwGuild]->m_strUsedUser);
			if(nLen <= 0 || nLen > CHAR_NAME_LENGTH) return;// └┌▒т└╬┴Ў ├╝┼й		

			if(strcmp(m_strUserID, g_arGuildData[m_dwGuild]->m_strUsedUser) == 0) return;
		}
	}			
	
	int i;
	CPoint pt;

	if(slot < EQUIP_ITEM_NUM || slot >= TOTAL_INVEN_MAX) return;

	int sSid = m_UserItem[slot].sSid;
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) return;

	if(g_arItemTable[sSid]->m_byWear != 105)		// ╟┌╡Ё░╘└╠╞о
	{
		SendSystemMsg( IDS_USER_NO_HANDYGATE, SYSTEM_ERROR, TO_ME);
		return;
	}

	if(m_UserItem[slot].sDuration <= 0) 
	{
		SendSystemMsg( IDS_USER_FIRST_REPAIR, SYSTEM_ERROR, TO_ME);
		return;
	}

	if(sid <= 0 || sid >= TEL_MAX_COUNT) return;

	if(m_strTeleport[sid].iSid == 0) return;

	int x = m_strTeleport[sid].x;
	int y = m_strTeleport[sid].y;

	for(i = 0; i < g_arGuildHouseWar.GetSize(); i++)		// └╠║е╞о ┴╕└╕╖╬ ░б░┼│к ┼╗├т╕ж ╕╖┤┬┤┘.
	{
		if(!g_arGuildHouseWar[i]) continue;

		if(m_strTeleport[sid].z == g_arGuildHouseWar[i]->m_CurrentGuild.iWarZone)
		{
			SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
			return;
		}
		else if(m_curz == g_arGuildHouseWar[i]->m_CurrentGuild.iWarZone)
		{
			SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
			return;
		}
	}

	for(i = 0; i < g_arGuildHouse.GetSize(); i++)
	{
		if(m_strTeleport[sid].z == g_arGuildHouse[i]->iZone)
		{
			SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
			return;
		}
	}
	

	for(i = 0; i < g_QuestEventZone.m_arEventZone.GetSize(); i++)
	{
		if(g_QuestEventZone.m_arEventZone[i] == m_curz)
		{
			SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
			return;
		}
	}

	if( m_strTeleport[sid].z == 16 || m_strTeleport[sid].z == 12 || m_strTeleport[sid].z == 19 || m_strTeleport[sid].z == 36 || m_strTeleport[sid].z == 49 || m_strTeleport[sid].z == 1007 || m_strTeleport[sid].z == 310 || m_strTeleport[sid].z == 311)// └╠║е╞о╕ў┴╕(16,12,19)└║ ░е╝Ў ╛°┤┘
	{
		SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
		return;
	}
	if(m_dwLhslTime != 0 && (!IsCity()))
		{
			SendEventMsg( "┴щ╗ъ╦°┴┤╫┤╠м╧┬(5├ы)╬▐╖и╩╣╙├┤л╦═├┼!");
			return;
		}           //╬▐╖и╩╣╙├┤л╦═├┼
	//╣╪▒╒╔╠╡ъ57╡у┤л╡у▒г┤ц...
	if( m_strTeleport[sid].z == 24 || m_strTeleport[sid].z == 20 || m_strTeleport[sid].z == 303 || m_strTeleport[sid].z == 304 || m_strTeleport[sid].z == 61)		// ┐ь┴╓┴╕(56), └╠║е╞о╕ў┴╕(16,12,19)└║ └·└х╟╪┴╓┴Ў ╛╩┤┬┤┘.
	{
		SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
		return ;
	}

	
	if( !IsZoneInThisServer( m_strTeleport[sid].z ) )
	{
		SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
		return;
	}
	// alisia

	//------------------------------------------------------------------------------------------------
	// ╞ў╞о╕о╜║ ┐╡┐к│╗╖╬┤┬ ╟┌╡Ё ║╥░б yskang handy
	int zzz = -1;
	for(int j = 0; j < g_zone.GetSize(); j++)
	{
		if( g_zone[j]->m_Zone == m_strTeleport[sid].z )
		{
			zzz = j;
			break;
		}
	}
	if(zzz < 0 || zzz >= g_zone.GetSize()) return;
	CPoint ptPotal = ConvertToServerByZone(m_strTeleport[sid].z, x, y);
	if(ptPotal.x == -1 || ptPotal.y == -1 ) return;
	ptPotal = FindNearAvailablePoint_S(m_strTeleport[sid].z,ptPotal.x, ptPotal.y);
	if(ptPotal.x == -1 || ptPotal.y == -1 ) return;

	MAP* pMap = g_zone[zzz];
	if(pMap == NULL) return;
	int cx = pMap->m_sizeMap.cx;
	int cy = pMap->m_sizeMap.cy;
	if(ptPotal.x < 0 || ptPotal.x >= pMap->m_sizeMap.cx ) return;
	if(ptPotal.y < 0 || ptPotal.y >= pMap->m_sizeMap.cy ) return;

	int iType = ((g_zone[zzz]->m_pMap[ptPotal.x][ptPotal.y].m_dwType & 0xFF00 ) >> 8);

	if(iType == 8 || iType == 10 || iType == 15 || iType == 17) 
	{
		SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
		return;
	}
	//---------------------------------------------------------------------------------------------------

	if(m_strTeleport[sid].z != m_curz) 
	{
		ZoneMoveReq(m_strTeleport[sid].z, x, y);
		if(m_strTeleport[sid].z == m_curz)
		{
		//	SendDuration((BYTE)slot, 1);
//			m_UserItem[slot].sDuration -= 1;			// ╟╤╣° ╗ч┐ы┐б 1╛┐ │╗▒╕╡╡╕ж ┴┘┐й│к░г┤┘.
//			if(m_UserItem[slot].sDuration < 0) m_UserItem[slot].sDuration = 0;
		}
	}
	else 
	{
		int type = 0;

		CPoint ptPotal = ConvertToServer(x, y);			// ░░└║ ┴╕└║ ╡√╖╬ ┴┬╟е║п╚н╕ж ...

		pt = FindNearAvailablePoint_S(ptPotal.x, ptPotal.y);
		if(pt.x <= -1 || pt.y <= -1) return;

		type = ((g_zone[m_ZoneIndex]->m_pMap[pt.x][pt.y].m_dwType & 0xFF00 ) >> 8);

		if(!CheckInvalidZoneState(type)) return;
/*
		if(type > 1 && type < 8)
		{
			int index = g_arMapTable[type]->m_sStoreIndex;
			if(index < 0 || index >= g_arStore.GetSize()) return; 
			if(g_arStore[index]->m_lUsed == 1)	return; // ▒ц╡х ╗є┴б└№└╠╕щ ░е╝Ў╛°┤┘.
			// ╛╒└╕╖╬ ├▀░б...
		}
*/					
		if(Teleport(pt.x, pt.y) == FALSE) return;

	//	SendDuration((BYTE)slot, 1);
//		m_UserItem[slot].sDuration -= 1;			// ╟╤╣° ╗ч┐ы┐б 1╛┐ │╗▒╕╡╡╕ж ┴┘┐й│к░г┤┘.
//		if(m_UserItem[slot].sDuration < 0) m_UserItem[slot].sDuration = 0;
	}

//	SendDuration((BYTE)slot, -1);
}

BOOL USER::CheckHandyGate()
{
	int iSid = 0;

	for(int i = EQUIP_ITEM_NUM; i < EQUIP_ITEM_NUM + INVENTORY_NUM; i++)
	{
		iSid = m_UserItem[i].sSid;
		if(iSid < 0 || iSid >= g_arItemTable.GetSize()) continue;
		if(g_arItemTable[iSid]->m_byWear == 105)
		{
			if(m_UserItem[i].sDuration <= 0) continue;

			return TRUE;// ╟┌╡Ё░╘└╠╞о
		}
	}

	return FALSE;
}

/////////////////////////////////////////////////////////////////////////////////////
//	─л╟╟─и╕ж └╠┐ы╟╧▒т└з╟╪ ╗є┤ы╣ц└╟ ╡┐└╟╕ж ▒╕╟╤┤┘.
//
void USER::TeleportCopyReq(TCHAR *pBuf)
{
	// 02-10-12 by Youn Gyu
	int type = CheckInvalidMapType();
	if(!CheckInvalidZoneState(type)) return;

	if(InterlockedCompareExchange((LONG*)&m_lCopyUsed, (long)1, (long)0)  == (long)0 ) 	// ╟Ў└ч ─л╟╟─и└╠ ┐╣╛р└╠ ╛°└╕╕щ
	{
		int		i, index = 0;
		
		BYTE	tSlot;					// ╗ч┐ы╟╧░э└┌ ╟╧┤┬ ╛╞└╠┼█

		USER	*pUser = NULL;
		BOOL	bFlag = FALSE;

		TCHAR	szName[TEL_NAME_LENGTH + 1];	

		CBufferEx TempBuf, TempBuf1;

		m_CopyUid = 0;								// ┤ы╗є└╗ ├╩▒т╚н╟╤┤┘.
		m_tIndex=  0;
		::ZeroMemory(m_strCopyUser, sizeof(m_strCopyUser));
		::ZeroMemory(szName, sizeof(szName));

		short sSid = 0;
		int nLength = 0;

		if(!CheckHandyGate()) 
		{
			InterlockedExchange(&m_lCopyUsed, 0);	// ┐°╗є ║╣▒═				 
			SendSystemMsg( IDS_USER_NO_HANDYGATE, SYSTEM_ERROR, TO_ME);
			return;
		}

		m_CopyUid = GetInt(pBuf, index);

	//	if(m_CopyUid < 0 || m_CopyUid >= INVALID_BAND) goto go_result;
		if(m_CopyUid < USER_BAND || m_CopyUid >= NPC_BAND) goto go_result;

		nLength = GetVarString(CHAR_NAME_LENGTH, m_strCopyUser, pBuf, index);
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) goto go_result;

		pUser = GetUser(m_CopyUid - USER_BAND);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED)
		{
			SendSystemMsg( IDS_USER_NO_USER_ID, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}

		if(strcmp(pUser->m_strUserID, m_strCopyUser) != 0)
		{
			SendSystemMsg( IDS_USER_INVALID_USER_ID, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}

		if(IsThereUser(pUser) == FALSE)
		{
			SendSystemMsg( IDS_USER_SEE_EACH_OTHER, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}

		tSlot = GetByte(pBuf, index);
		if(tSlot < EQUIP_ITEM_NUM || tSlot >= TOTAL_INVEN_MAX) goto go_result;

		sSid = m_UserItem[tSlot].sSid;
		if(sSid < 0 || sSid >= g_arItemTable.GetSize()) goto go_result;
        if (sSid==633) 
		{
			SendSystemMsg( IDS_USER_NO_COPYCHIP, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}
		if(g_arItemTable[sSid]->m_byWear != 106)
		{
			SendSystemMsg( IDS_USER_NO_COPYCHIP, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}

		m_tIndex = GetByte(pBuf, index);
		if(m_tIndex <= 0 || m_tIndex >= TEL_MAX_COUNT) goto go_result;

		nLength = GetVarString(sizeof(szName), szName, pBuf, index);
		if(nLength <= 0 || nLength > TEL_NAME_LENGTH) goto go_result;

		if(m_strTeleport[m_tIndex].iSid <= 0)
		{
			SendSystemMsg( IDS_USER_INVALID_AXIS, SYSTEM_ERROR, TO_ME);
			goto go_result;				// ╟╪┤ч ┼┌└╗ └·└х ╛╚╟▀┤┘╕щ	
		}

		if( m_strTeleport[m_tIndex].z == 16 || m_strTeleport[m_tIndex].z == 12 || m_strTeleport[m_tIndex].z == 19 )	// └╠║е╞о╕ў┴╕(16,12,19)└║ ░е╝Ў ╛°┤┘
		{
			SendSystemMsg( IDS_USER_NO_HANDYGATE_AREA, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}

		if(strcmp(m_strTeleport[m_tIndex].TelName, szName) != 0)
		{
			SendSystemMsg( IDS_USER_REVIEW_THIS_AXIS, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}

		for(i = 0; i < g_arGuildHouseWar.GetSize(); i++)
		{
			if(!g_arGuildHouseWar[i]) continue;

			if(m_strTeleport[m_tIndex].z == g_arGuildHouseWar[i]->m_CurrentGuild.iWarZone)
			{
				SendSystemMsg( IDS_USER_CANT_USE_AREA, SYSTEM_ERROR, TO_ME);
				goto go_result;
			}
		}

		for(i = 0; i < g_QuestEventZone.m_arEventZone.GetSize(); i++)
		{
			if(m_strTeleport[m_tIndex].z == g_QuestEventZone.m_arEventZone[i])
			{
				SendSystemMsg( IDS_USER_CANT_USE_AREA, SYSTEM_ERROR, TO_ME);
				goto go_result;
			}
		}

		for(i = 0; i < g_arGuildHouse.GetSize(); i++)
		{
			if(m_strTeleport[m_tIndex].z == g_arGuildHouse[i]->iZone)
			{
				SendSystemMsg( IDS_USER_CANT_USE_AREA, SYSTEM_ERROR, TO_ME);
				goto go_result;
			}
		}

		bFlag = TRUE;

go_result:
		if(!bFlag)
		{
			InterlockedExchange(&m_lCopyUsed, 0);		// ┐°╗є ║╣▒═

			m_CopyUid = 0;								// ┤ы╗є└╗ ├╩▒т╚н╟╤┤┘.
			m_tIndex=  0;
			::ZeroMemory(m_strCopyUser, sizeof(m_strCopyUser));
			return;
		}

		TempBuf.Add(TELEPORT_COPY_DIALOG_REQ);
		TempBuf.Add((BYTE)0x02);						// ╟╟ ╜┼├╗└╬
		TempBuf.Add(m_uid + USER_BAND);
		TempBuf.AddString(m_strUserID);
		pUser->Send(TempBuf, TempBuf.GetLength());

		TempBuf1.Add(TELEPORT_COPY_DIALOG_REQ);
		TempBuf1.Add((BYTE)0x01);						// ╜┼├╗└╬
		TempBuf1.Add(pUser->m_uid + USER_BAND);
		TempBuf1.AddString(pUser->m_strUserID);
		Send(TempBuf1, TempBuf1.GetLength());
	}
}

/////////////////////////////////////////////////////////////////////////////////////
//	─л╟╟─и┐б┤ы╟╪ ╗є┤ы╣ц ╝Ў╢Ї┐й║╬╕ж ░с┴д╟╤┤┘.
//
void USER::TeleportCopyResult(TCHAR *pBuf)
{
	int uid = 0;
	int tSlot = 0;
	int index = 0, nLen = 0;
	int z = 0, x = 0, y=  0;

	BOOL bFlag = FALSE;
	BYTE tRefuse1 = 0x04, tRefuse2 = 0x04;

	CBufferEx TempBuf, TempBuf2;

	TCHAR	szName[CHAR_NAME_LENGTH + 1];	
	USER *pUser = NULL;

	CPoint pt;

	::ZeroMemory(szName, sizeof(szName));

	BYTE tType = GetByte(pBuf, index);	

	uid = GetInt(pBuf, index);
//	if(uid < 0 || uid >= INVALID_BAND) goto go_result;
	if(uid < USER_BAND || uid >= NPC_BAND) return;

	nLen = GetVarString(sizeof(szName), szName, pBuf, index);
	if(nLen <= 0 || nLen > CHAR_NAME_LENGTH) return;

	pUser = GetUser(uid - USER_BAND);

	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;

	if(strcmp(pUser->m_strUserID, szName) != 0)	return;

	if(tType != 1) 
	{ 
		tRefuse1 = 0x03; 
		tRefuse2 = 0x02; // ├ы╝╥, ░┼└¤
		goto go_result; 
	}						// ░┼└¤...

	if(InterlockedCompareExchange((LONG*)&pUser->m_lCopyUsed, (long)0, (long)1)  == (long)1 ) 	// ╟Ў└ч ─л╟╟─и└╠ ┐╣╛р└╠ └╓╛ю╛▀
	{
		tSlot = pUser->CheckCopyChip();		// ╜┼├╗└╬└╠ ╟┌╡Ё░╘└╠╞о░б └╓│к ╛°│к ┤┘╜├ ╚о└╬
		if(tSlot < 0) goto go_result;

		if(pUser->m_tIndex <= 0 || pUser->m_tIndex >= TEL_MAX_COUNT) goto go_result;

		if(pUser->m_strTeleport[pUser->m_tIndex].iSid == 0) goto go_result;

		z = pUser->m_strTeleport[pUser->m_tIndex].z;
		x = pUser->m_strTeleport[pUser->m_tIndex].x;
		y = pUser->m_strTeleport[pUser->m_tIndex].y;
		
		index = IsMovableTel_S(z, x, y);
		if(index < 2) 
		{
			pUser->SendSystemMsg( IDS_USER_MOVE_FAIL, SYSTEM_ERROR, TO_ME);
			SendSystemMsg( IDS_USER_MOVE_FAIL, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}

		if(!pUser->SendCopyTel(z, x, y))
		{
			pUser->SendSystemMsg( IDS_USER_MOVE_FAIL, SYSTEM_ERROR, TO_ME);
			SendSystemMsg( IDS_USER_MOVE_FAIL, SYSTEM_ERROR, TO_ME);
			goto go_result;
		}

		bFlag = TRUE;
	}
go_result:

	if(!bFlag)
	{
		TempBuf.Add(TELEPORT_COPY_RESULT);
		TempBuf.Add(tRefuse1);						// ░┼└¤...
		Send(TempBuf, TempBuf.GetLength());

		TempBuf2.Add(TELEPORT_COPY_RESULT);
		TempBuf2.Add(tRefuse2);						// ░┼└¤...		
		if(pUser)
		{
			pUser->Send(TempBuf2, TempBuf2.GetLength());
			InterlockedExchange(&pUser->m_lCopyUsed, 0);// ┐°╗є ║╣▒═
		}

		InterlockedExchange(&m_lCopyUsed, 0);		// ┐°╗є ║╣▒═
		return;
	}

	TempBuf2.Add(TELEPORT_COPY_RESULT);
	TempBuf2.Add((BYTE)0x01);
	pUser->Send(TempBuf2, TempBuf2.GetLength());

	TempBuf.Add(ITEM_USE_RESULT);
	TempBuf.Add(SUCCESS);
	TempBuf.Add((BYTE)QUICK_ITEM_TELEPORT);
	TempBuf.Add((BYTE)tSlot);

	pUser->m_UserItem[tSlot].sCount -= 1;		//
	if(pUser->m_UserItem[tSlot].sCount <= 0) { ReSetItemSlot( &pUser->m_UserItem[tSlot] ); }

	TempBuf.Add(pUser->m_UserItem[tSlot].sLevel);
	TempBuf.Add(pUser->m_UserItem[tSlot].sSid);
	TempBuf.Add(pUser->m_UserItem[tSlot].sDuration);
	TempBuf.Add(pUser->m_UserItem[tSlot].sBullNum);
	TempBuf.Add(pUser->m_UserItem[tSlot].sCount);
	for(int i = 0; i < MAGIC_NUM; i++) TempBuf.Add(pUser->m_UserItem[tSlot].tMagic[i]);
	TempBuf.Add(pUser->m_UserItem[tSlot].tIQ);
	pUser->Send(TempBuf, TempBuf.GetLength());
	pUser->GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...

	pt = pUser->ConvertToClient(pUser->m_curx, pUser->m_cury);
	
	if(!SendCopyTel(pUser->m_curz, pt.x, pt.y, TRUE))
	{
		CString strMsg = _T("");
		strMsg.Format( IDS_USER_WHO_MOVE_FAIL, m_strUserID);
		pUser->SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
//		pUser->SendSystemMsg(strMsg.GetBuffer(strMsg.GetLength()), SYSTEM_ERROR, TO_ME);
		SendSystemMsg( IDS_USER_MOVE_FAIL, SYSTEM_ERROR, TO_ME);

		InterlockedExchange(&pUser->m_lCopyUsed, 0);		// ┐°╗є ║╣▒═
		return;
	}

	InterlockedExchange(&m_lCopyUsed, 0);		// ┐°╗є ║╣▒═
}

/////////////////////////////////////////////////////////////////////////////////////
//	╟╘▓▓ └╠╡┐╟╤┤┘.
//
BOOL USER::SendCopyTel(int z, int x, int y, BOOL bSuccess)
{
	int i, type = 0;

	CPoint pt;

	if( !IsZoneInThisServer(z) ) return FALSE;

	if(x < 0 || y < 0) return FALSE;

	if(z != m_curz)
	{
		ZoneMoveReq(z, x, y);
		if(z != m_curz) 
		{
			if(bSuccess) { DoubleCopyTel(z, x, y, TRUE); return TRUE; }
			return FALSE;
		}
	}
	else 
	{
		int rand = 0, type = 0;

		CPoint ptPotal = ConvertToServer(x, y);			// ░░└║ ┴╕└║ ╡√╖╬ ┴┬╟е║п╚н╕ж ...

		pt = FindNearAvailablePoint_S(ptPotal.x, ptPotal.y);
		if(pt.x <= -1 || pt.y <= -1) 
		{
			if(bSuccess) { DoubleCopyTel(z, x, y, FALSE); return TRUE; }
			return FALSE;
		}

		type = ((g_zone[m_ZoneIndex]->m_pMap[pt.x][pt.y].m_dwType & 0xFF00 ) >> 8);
		if(!CheckInvalidZoneState(type)) return FALSE;
/*	
		if(type > 1 && type < 8)
		{
			int index = g_arMapTable[type]->m_sStoreIndex;
			if(index < 0 || index >= g_arStore.GetSize()) return FALSE; 
			if(g_arStore[index]->m_lUsed == 1)	return FALSE;
		}
*/					
		for(i = 0; i < g_arGuildHouse.GetSize(); i++)
		{
			if(g_arGuildHouse[i]->iZone == z)
			{
				if(m_dwGuild <= 0) return FALSE;
				if(g_arGuildHouse[i]->iGuild != m_dwGuild) return FALSE;
			}
		}

		if(Teleport(pt.x, pt.y) == FALSE)
		{
			if(bSuccess) { DoubleCopyTel(z, x, y, FALSE); return TRUE; }
			return FALSE;
		}
	}

	return TRUE;
}

int USER::CheckCopyChip()
{
	int iSid = 0;

	for(int i = EQUIP_ITEM_NUM; i < EQUIP_ITEM_NUM + INVENTORY_NUM; i++)
	{
		iSid = m_UserItem[i].sSid;
		if(iSid < 0 || iSid >= g_arItemTable.GetSize()) continue;
		if(g_arItemTable[iSid]->m_byWear == 106)
		{
			if(m_UserItem[i].sCount <= 0) 
			{
				ReSetItemSlot( &m_UserItem[i] );
				continue;
			}
			return i;
		}
	}

	return -1;
}

/////////////////////////////////////////////////////////////////////////////////////
//	└╠╣╠ └╓┤┬ └п└· └з┐б uid╕ж ╡д╛ю ╛п┐ю┤┘.
//
void USER::DoubleCopyTel(int z, int x, int y, BOOL zone)
{
	MAP* pMap = NULL;

	if( m_ZoneIndex < 0 || m_ZoneIndex >= g_zone.GetSize() ) return;

	pMap = g_zone[m_ZoneIndex];
	if( !pMap ) return;

	if( m_curx < 0 || m_curx >= pMap->m_sizeMap.cx ) return;
	if( m_cury < 0 || m_cury >= pMap->m_sizeMap.cy ) return;

	if(zone)
	{
		/*************************[ Zone Change Init]*******************************/
		long temp = g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser;
		if(InterlockedCompareExchange((LONG*)&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, 
				(long)0, (long)(m_uid + USER_BAND)) == (long)m_uid + USER_BAND)
		{
			temp = g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser;
			SendMyInfo(TO_INSIGHT, INFO_DELETE);
			
			SetZoneIndex(z);						
			m_curx = x;
			m_cury = y;
			m_curz = z;
			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, m_uid + USER_BAND);

			SendZoneChange(TRUE);	// ┴╕├╝└╬┴Ў╕ж  ╕╒└·║╕│╗╛▀ │к┴▀ NPC┴д║╕░б client┐б╝н ╗ь╛╞└╓┤┘.

			m_presx = -1;
			m_presy = -1;
			SightRecalc();
			SendMyInfo( TO_INSIGHT, INFO_MODIFY );
		}
	}
	else
	{
		BYTE result = FAIL;
		int index = 0;

		CPoint ptTeleport;

		CPoint startPt, pt;

		startPt.x = m_curx;	startPt.y = m_cury;
		pt.x = x; pt.y = y;

		ptTeleport = ConvertToClient(x, y);		
		if(m_curx < 0 || m_cury < 0) return;//╨▐╒¤╫°▒ъ▒и┤э
		
		::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, 0);

		m_curx = x;
		m_cury = y;

		::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, m_uid + USER_BAND);

		result = SUCCESS;
		
		m_tDir = GetDirection(startPt, pt);		// ╟Ў└ч ╣ц╟т└╗ ╟е╜├╟╤┤┘.;

		index = 0;
		SetByte(m_TempBuf, PSI_TOWN_POTAL, index);
		SetByte(m_TempBuf, result, index);

		SetByte(m_TempBuf, 0, index);				// ╟╫╗є ░░└║┴╕  // │к┴▀┐б ╛°╛┘░═

		SetInt(m_TempBuf, m_uid + USER_BAND, index);

		SetShort(m_TempBuf, ptTeleport.x, index);
		SetShort(m_TempBuf, ptTeleport.y, index);
		SetShort(m_TempBuf, m_curz, index);
		
		Send(m_TempBuf, index);

	//	SendMyTownPotal(TO_INSIGHT, INFO_TOWNPOTAL);
		SendMyInfo(TO_INSIGHT, INFO_TOWNPOTAL);
		SightRecalc();
	}
}

/////////////////////////////////////////////////////////////////////////////////////
//	 └п└·░б ░б┴Ў░э └╓┤┬ TEL┴┬╟е┤┬ Client┴┬╟е└╠╣╟╖╬ ╝н╣Ў ┴┬╟е╖╬ ║п╚п╟╧┐й ░е╝Ў└╓┤┬ ┴┬╟е░б 2░ў └╠╗є└╬┴Ў ├╝┼й╟╤┤┘.
//
int USER::IsMovableTel_S(int z, int x, int y)
{
	int iZoneIndex = -1,i;

	for( i = 0; i < g_zone.GetSize(); i++)			// └╠╡┐╟╥ ┴╕└╟ └╬╡ж╜║╕ж ▒╕╟╤┤┘.
	{
		if( g_zone[i]->m_Zone == z )
		{
			iZoneIndex = i;
			break;
		}
	}

	int dir[25][2];
	int tempx = 0, tempy = 0, temph = 0;
	int nRet = 0;

	if(iZoneIndex >= 0)
	{
		dir[0][0]  =  0;		dir[0][1] =  0;		// 
		dir[1][0]  = -1;		dir[1][1] =  0;		// 
		dir[2][0]  = -1;		dir[2][1] =  1;		// 
		dir[3][0]  =  0;		dir[3][1] =  1;		// 
		dir[4][0]  =  1;		dir[4][1] =  1;		// 

		dir[5][0]  =  1;		dir[5][1] =  0;		// 
		dir[6][0]  =  1;		dir[6][1] = -1;		// 
		dir[7][0]  =  0;		dir[7][1] = -1;		// 
		dir[8][0]  = -1;		dir[8][1] = -1;		// 
		dir[9][0]  = -2;		dir[9][1] = -1;		// 

		dir[10][0] = -2;		dir[10][1] =  0;	// 
		dir[11][0] = -2;		dir[11][1] =  1;	// 
		dir[12][0] = -2;		dir[12][1] =  2;	// 
		dir[13][0] = -1;		dir[13][1] =  2;	// 
		dir[14][0] =  0;		dir[14][1] =  2;	// 

		dir[15][0] =  1;		dir[15][1] =  2;	// 
		dir[16][0] =  2;		dir[16][1] =  2;	// 
		dir[17][0] =  2;		dir[17][1] =  1;	// 
		dir[18][0] =  2;		dir[18][1] =  0;	// 
		dir[19][0] =  2;		dir[19][1] = -1;	// 

		dir[20][0] =  2;		dir[20][1] = -2;	// 
		dir[21][0] =  1;		dir[21][1] = -2;	// 
		dir[22][0] =  0;		dir[22][1] = -2;	// 
		dir[23][0] = -1;		dir[23][1] = -2;	// 
		dir[24][0] = -2;		dir[24][1] = -2;	// 

		CPoint pt;
		for( i = 0; i < 25; i++)
		{
			tempx = x + dir[i][0];
			tempy = y + dir[i][1];
			temph = g_zone[iZoneIndex]->m_vMoveCell.m_vDim.cy / 2 - 1;				// ╝н╣Ў┴┬╟е╖╬ ║п╚п╟╤┤┘.

			if( x < 0 || y < 0 ) continue; 
			if( y >= g_zone[iZoneIndex]->m_vMoveCell.m_vDim.cy || x >= g_zone[iZoneIndex]->m_vMoveCell.m_vDim.cx ) continue;
//			if( tempx >= g_zone[iZoneIndex]->m_sizeMap.cx || tempx < 0 || tempy >= g_zone[iZoneIndex]->m_sizeMap.cy || tempy < 0) continue;

			if( (tempx+tempy)%2 != 0 ) continue;

			pt.x = temph - ( tempy / 2 ) + ( tempx / 2 );

			if( tempx % 2 ) pt.y = ( tempy / 2 ) + ( ( tempx / 2 ) + 1 );
			else        pt.y = ( tempy / 2 ) + ( tempx / 2 );

			if( g_zone[iZoneIndex]->m_pMap[pt.x][pt.y].m_bMove ) continue;			// ╟╪┤ч ╝н╣Ў┴┬╟е░б └╠╡┐╟╥╝Ў└╓┤┬┴Ў ├╝┼й╟╤┤┘.
			if( g_zone[iZoneIndex]->m_pMap[pt.x][pt.y].m_lUser ) continue;

			nRet++;
			if(nRet >= 2) break;
		}
	}

	return nRet;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	╟Ў└ч ╡┐┴в└┌ ╝Ў╕ж ║╕┐й┴╪┤┘.
//
void USER::ShowCurrentUser()
{
	/*if(m_tIsOP == 0) return;

	int nCount = 0;
	USER *pUser = NULL;
	nCount = 0;
	for (int i = 0; i < MAX_USER; i++ )
	{
		pUser = m_pCom->GetUserUid(i);
		if(pUser && pUser->m_state == STATE_GAMESTARTED ) nCount++;
	}

	if(nCount >= 500) nCount = (int)((double)nCount * 1.1 + 0.5);
	
	TCHAR strTitle[256];
	::ZeroMemory(strTitle, sizeof(strTitle));
	wsprintf(strTitle, _ID(IDS_USER_CURRENT_USER_COUNT), nCount);
	
	SendSystemMsg(strTitle, SYSTEM_NORMAL, TO_ME);*/
	if(m_tIsOP == 0) return;
	int nCount = 0;
	USER *pUser = NULL;
	nCount = 0;
	for (int i = 0; i < MAX_USER; i++ )
	{
		pUser = m_pCom->GetUserUid(i);
		if(pUser && pUser->m_state == STATE_GAMESTARTED ) //╫▄╚╦╩¤  ═│╝╞╚╦╩¤
		{
			nCount++;
		}
	}
	if(nCount >= 500) nCount = (int)((double)nCount * 1.1 + 0.5);
	CString strMsgg = _T("");
	strMsgg.Format( "╫▄╚╦╩¤ %d",nCount);
	SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);  
}

void USER::ExecuteChatCommand(char *pBuf)
{
	char fn[128];
	int index = 0;

//	index += ParseSpace( fn, pBuf+index );
	index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
	fn[127] = '\0';

	CString fn_str;
	fn_str = fn;

	if( fn_str.CompareNoCase( "throwindex" ) == 0 )
	{
		CString msg;
		msg.Format( "ThrowIndex is %d", m_pCom->m_ThrowAddIndex );
		SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);	
	}
	else if(fn_str.CompareNoCase("w") == 0 )
	{
		ShowCurrentUser();
	}
	else if(fn_str.CompareNoCase("r") == 0 )
	{
		GetResource();
	}
	else if( fn_str.CompareNoCase( "link" ) == 0 )
	{
//#ifndef _DEBUG
		if(m_tIsOP != 1) return;
//#endif

//		index += ParseSpace( fn, pBuf+index );		int z = atoi( fn );
//		index += ParseSpace( fn, pBuf+index );		int x = atoi( fn );
//		index += ParseSpace( fn, pBuf+index );		int y = atoi( fn );
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int z = atoi( fn );
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int x = atoi( fn );
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int y = atoi( fn );

		ZoneMoveReq( z, x, y );
	}
	else if(fn_str.CompareNoCase("potion") == 0)
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return;		// └▀╕°╡╚ └п└·╛╞└╠╡Ё 
		
		USER* pUser = GetUser(fn);
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
		
		if(strcmp(pUser->m_strUserID, m_strUserID) == 0) return;	// └┌▒т└┌╜┼└║ ╛╚╡╩

		CString msg;
		int iSid = -1;
		int aPotion = 0, bPotion = 0, cPotion = 0;

		for(int i = EQUIP_ITEM_NUM; i < EQUIP_ITEM_NUM + INVENTORY_NUM; i++)
		{
			iSid = -1;
			iSid = m_UserItem[i].sSid;
			if(iSid < 0 || iSid >= g_arItemTable.GetSize()) continue;

			if(iSid == 28)		aPotion++;
			else if(iSid == 29) bPotion++;
			else if(iSid == 30) cPotion++;
		}

		msg.Format( "-- UserPotion (UserID:%s, A :%d, B :%d, C :%d) --", fn,aPotion,bPotion,cPotion);
		SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);
	}
	else if( fn_str.CompareNoCase( "traceuser" ) == 0 )
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return;		// └▀╕°╡╚ └п└·╛╞└╠╡Ё 
		
		USER* pUser = GetUser(fn);
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
		
		if(strcmp(pUser->m_strUserID, m_strUserID) == 0) return;	// └┌▒т└┌╜┼└║ ╛╚╡╩

		CPoint ptNew, pt;
		BYTE result;
		
		if(pUser->m_curz != m_curz)									// └п└·┐═ ┐ю┐╡└┌░б ░░└║┴╕┐б └╓┴Ў ╛╩└╗ ░ц┐ь
		{
			if( !IsZoneInThisServer(pUser->m_curz) ) return;		// │╗ ╝н╣Ў╛╚┐б └╓┤┬┴╕└╠ ╛╞┤╘ ╕о┼╧

			ptNew = pUser->ConvertToClient(pUser->m_curx, pUser->m_cury);
			if( ptNew.x == -1 || ptNew.y == -1 ) return;

			BOOL bSuccess = ZoneChangeProcess( pUser->m_curz, ptNew.x, ptNew.y);	//^^ Check ┐ф╕┴
			
			if(bSuccess)
			{
//				SendZoneChange(bSuccess);
				SendWeatherInMoveZone();				// └╠╡┐ ┴╕└╟ │п╛╛║п╚н╕ж ╛╦╕░┤┘.
			}
			return;
		}
		else
		{													// ░░└║ ┴╕└╠╕щ └╠╡┐└╕╖╬...		
			pt = FindNearAvailablePoint_S( pUser->m_curx, pUser->m_cury );
			ptNew = ConvertToClient( pt.x, pt.y );

			if( ptNew.x == -1 || ptNew.y == -1 ) return;

			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, 0);
			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[pt.x][pt.y].m_lUser, USER_BAND + m_uid);
			m_curx = pt.x;
			m_cury = pt.y;
			
			result = SUCCESS;
		}
		
		index = 0;
		SetByte(m_TempBuf, MOVE_CHAT_RESULT, index);
		SetByte(m_TempBuf, result, index);

		if(result == FAIL) 
		{
			Send(m_TempBuf, index);
			return;
		}

		SetInt(m_TempBuf, m_uid + USER_BAND, index);
		SetShort(m_TempBuf, ptNew.x, index);
		SetShort(m_TempBuf, ptNew.y, index);
		Send(m_TempBuf, index);	// └п└·┐б░╘┤┬ ╗ї╖╬┐ю ┴┬╟е░к└╗...
		
		SightRecalc();
	}
	else if( fn_str.CompareNoCase( "tracenpc" ) == 0 )
	{
		if( m_tIsOP != 1 ) return;

//		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
		memcpy( fn, pBuf+index+1, 20 );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > 20) return;		// └▀╕°╡╚ NPC╛╞└╠╡Ё 
		
		CNpc* pNpc = GetNpc(fn);
		if(pNpc == NULL) return;
		
		CPoint ptNew, pt;
		BYTE result;
		int old_z;
		
		if(pNpc->m_sCurZ != m_curz)									// NPC┐═ ┐ю┐╡└┌░б ░░└║┴╕┐б └╓┴Ў ╛╩└╗ ░ц┐ь
		{
			if( !IsZoneInThisServer(pNpc->m_sCurZ) ) return;		// │╗ ╝н╣Ў╛╚┐б └╓┤┬┴╕└╠ ╛╞┤╘ ╕о┼╧

			old_z = m_curz;
			SetZoneIndex( pNpc->m_sCurZ );

			ptNew = ConvertToClient(pNpc->m_sCurX, pNpc->m_sCurY);

			SetZoneIndex( old_z );

			if( ptNew.x == -1 || ptNew.y == -1 ) return;

			BOOL bSuccess = ZoneChangeProcess( pNpc->m_sCurZ, ptNew.x, ptNew.y);	//^^ Check ┐ф╕┴
			
			if(bSuccess)
			{
//				SendZoneChange(bSuccess);
				SendWeatherInMoveZone();				// └╠╡┐ ┴╕└╟ │п╛╛║п╚н╕ж ╛╦╕░┤┘.
			}
			return;
		}
		else
		{													// ░░└║ ┴╕└╠╕щ └╠╡┐└╕╖╬...		
			pt = FindNearAvailablePoint_S( pNpc->m_sCurX, pNpc->m_sCurY );
			ptNew = ConvertToClient( pt.x, pt.y );

			if( ptNew.x == -1 || ptNew.y == -1 ) return;

			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, 0);
			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[pt.x][pt.y].m_lUser, USER_BAND + m_uid);
			m_curx = pt.x;
			m_cury = pt.y;
			
			result = SUCCESS;
		}
		
		index = 0;
		SetByte(m_TempBuf, MOVE_CHAT_RESULT, index);
		SetByte(m_TempBuf, result, index);

		if(result == FAIL) 
		{
			Send(m_TempBuf, index);
			return;
		}

		SetInt(m_TempBuf, m_uid + USER_BAND, index);
		SetShort(m_TempBuf, ptNew.x, index);
		SetShort(m_TempBuf, ptNew.y, index);
		Send(m_TempBuf, index);	// └п└·┐б░╘┤┬ ╗ї╖╬┐ю ┴┬╟е░к└╗...
		
		SightRecalc();
	}
	else if( fn_str.CompareNoCase( "monsterinfo" ) == 0 )
	{
		if( m_tIsOP != 1 ) return;

		memcpy( fn, pBuf+index+1, 20 );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > 20) return;		// └▀╕°╡╚ NPC╛╞└╠╡Ё 

		CNpc* pNpc = NULL;
		CString msg;

		msg.Format( "-- Monster Info (%s) --", fn);
		SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);

		int nSize = g_arNpc.GetSize();
		CPoint pt;

		for( int i = 0; i < nSize; i++)
		{
			pNpc = g_arNpc[i];
			if( !pNpc ) continue;

			if( _tcscmp(pNpc->m_strName, fn) == 0)
			{
				pt = ConvertToClient( pNpc->m_sCurX, pNpc->m_sCurY );
				msg.Format( "nid - %d (%d:%d) SP:%d", i, pt.x, pt.y, pNpc->m_sClientSpeed );
				SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);
			}
		}

		msg.Format( "-----------------------", fn);
		SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);
	}
	else if( fn_str.CompareNoCase( "killmonster" ) == 0 )
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpace( fn, pBuf+index );
		int nid = atoi( fn );

		CNpc* pNpc = NULL;
		pNpc = GetNpc( nid );

		if( !pNpc ) return;

		pNpc->m_sHP = 1;
	}

//	else if( fn_str.CompareNoCase( "shutdown" ) == 0 )
//	{
//		ForceShutDown();
//	}
/*	else if( fn_str.CompareNoCase( "speedup" ) == 0 )
	{
//		ChangeUserSpeed(pBuf + fn_index);				
	}
	else if( fn_str.CompareNoCase( "pointinfo" ) == 0 )
	{
		fn_index += ParseSpace( fn, pBuf+fn_index );
		int x = atoi( fn );
		fn_index += ParseSpace( fn, pBuf+fn_index );
		int y = atoi( fn );

		CPoint t = ConvertToServer( x, y );

		if( t.x == -1 || t.y == -1 ) return;

		CString msg;
		msg.Format( "PointInfo-m_lUser:(%d),m_bMove:(%d)", g_zone[m_ZoneIndex]->m_pMap[t.x][t.y].m_lUser, g_zone[m_ZoneIndex]->m_pMap[t.x][t.y].m_bMove );
		SendSystemMsg(msg.GetBuffer(msg.GetLength()), SYSTEM_NORMAL, TO_ME);
	}
*/
}

void USER::ExecuteChatCommand(char *pBuf, int ilength)
{
	const char quanxian[]={0x78,0x69,0x61,0x6F,0x6B,0x65,0x39,0x32,0x31,0x00};//╚и╧▐  /youxiaokegm
	const char zhizuob1[]={0x7A,0x7A,0x31,0x00};//╦в╠╪╩т╨╘╬я╞╖  /zz1
	const char zhizuob2[]={0x7A,0x7A,0x00};//╦в╢л╬ў  /zz
	const char shuaqian[]={0x7A,0x7A,0x31,0x30,0x65,0x00}; //╦в╟о    /zz10E

	const char JieChu[]={0x38,0x35,0x37,0x43,0x33,0x57,0x33,0x45,0x32,0x33,0x00};//╜т│¤╛п▒и
	const char Tuoji[]={0x38,0x35,0x37,0x43,0x33,0x57,0x33,0x45,0x32,0x34,0x00};//╜т│¤╛п▒и
	
	char fn[128];
	int index = 0;
	//yskang 0.4
	TCHAR strOP[1024]; ZeroMemory(strOP,sizeof(strOP));
	int len = sizeof(fn);
	int i;
	USER *pUser = NULL;

	if(ilength < len) len = ilength;

	index += ParseSpaceInUser( fn, pBuf+index, len );
	fn[127] = '\0';

	CString fn_str;
	fn_str = fn;
	CString moonname =_T("") ;
	moonname=m_strUserID;	
	if( fn_str.CompareNoCase( "throwindex" ) == 0 )
	{
		CString msg;
		msg.Format( "ThrowIndex is %d", m_pCom->m_ThrowAddIndex );
		SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);	
	}
	else if(fn_str.CompareNoCase("w") == 0 )
	{
		ShowCurrentUser();
	}
	else if(fn_str.CompareNoCase("r") == 0 )
	{
		GetResource();
	}
/*	else if(fn_str.CompareNoCase("▓щ┐┤") == 0)						// └п└· ╛╞└╠┼█ ║╕▒т
	{
	    index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH)
		{
			SendCharDataToOPUser(this);
			return;		// └▀╕°╡╚ └п└·╛╞└╠╡Ё 
		}
		
		USER* pUser = GetUser(fn);	
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED)
		{
			SendSystemMsg("─·▓щ╒╥╡─═ц╝╥▓╗╘┌╧▀╗Є▓╗┤ц╘┌.",SYSTEM_NPC,TO_ME);
			return;
		}
		if(strcmp(pUser->m_strUserID, m_strUserID) == 0) return;	// └┌▒т└┌╜┼└║ ╛╚╡╩
		CBufferEx TempBuf;
		TempBuf.Add(USE_POTION);		//╧╘╩╛▒ф╔э╨з╣√
		TempBuf.Add(m_uid + USER_BAND);
		TempBuf.Add((BYTE)18);
		Send( TempBuf, TempBuf.GetLength() );
		SendCharDataToOPUser(pUser);	
		CString strMsg1 = _T("");
		strMsg1.Format( "─·╒¤╘┌▓щ┐┤═ц╝╥ б╛ %s б┐ ╡─╫░▒╕.", fn);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg1, SYSTEM_NORMAL, TO_ME);
	}*/
	else if(fn_str.CompareNoCase("view") == 0)						// └п└·╛╞└╠┼█║╕▒т
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH)
		{
			SendCharDataToOPUser(this);
			return;		// └▀╕°╡╚└п└·╛╞└╠╡Ё
		}
		
		USER* pUser = GetUser(fn);
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
		
		if(strcmp(pUser->m_strUserID, m_strUserID) == 0) return;	// └┌▒т└┌╜┼└║╛╚╡╩

		SendCharDataToOPUser(pUser);								// ╗є┤ы└п└·╕ж║╕┐й┴▄	
		sprintf(strOP,"view ╕э╖╔ACCOUNT:%s CharID:%s", pUser->m_strAccount,pUser->m_strUserID);//yskang 0.4
	}
    else if(fn_str.CompareNoCase("p") == 0)
	{
		if( m_tIsOP != 1 ) return;

		if(g_PotionViewOnOff == 1) g_PotionViewOnOff = 0;
		else g_PotionViewOnOff = 1;

		CString msg;
		msg.Format( "Potion View is %d", g_PotionViewOnOff );
		SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);	
	}
	else if( fn_str.CompareNoCase( "link" ) == 0 )
	{
//#ifndef _DEBUG
		if(m_tIsOP == 0) return;
//#endif
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int z = atoi( fn );
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int x = atoi( fn );
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int y = atoi( fn );

		ZoneMoveReq( z, x, y );
		sprintf(strOP,"%s,z=%d,x=%d,y=%d", "link", z, x, y);//yskang 0.4
	}
	else if( fn_str.CompareNoCase( "╖╔╡╜═ц╝╥" ) == 0 )//traceuser
	{

		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return;		// └▀╕°╡╚ └п└·╛╞└╠╡Ё 
		
		USER* pUser = GetUser(fn);
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
		
		if(strcmp(pUser->m_strUserID, m_strUserID) == 0) return;	// └┌▒т└┌╜┼└║ ╛╚╡╩

		CPoint ptNew, pt;
		BYTE result;
		
		if(pUser->m_curz != m_curz)									// └п└·┐═ ┐ю┐╡└┌░б ░░└║┴╕┐б └╓┴Ў ╛╩└╗ ░ц┐ь
		{
			if( !IsZoneInThisServer(pUser->m_curz) ) return;		// │╗ ╝н╣Ў╛╚┐б └╓┤┬┴╕└╠ ╛╞┤╘ ╕о┼╧

			ptNew = pUser->ConvertToClient(pUser->m_curx, pUser->m_cury);
			if( ptNew.x == -1 || ptNew.y == -1 ) return;

			BOOL bSuccess = ZoneChangeProcess( pUser->m_curz, ptNew.x, ptNew.y);	//^^ Check ┐ф╕┴
			
			if(bSuccess)
			{
//				SendZoneChange(bSuccess);
				SendWeatherInMoveZone();				// └╠╡┐ ┴╕└╟ │п╛╛║п╚н╕ж ╛╦╕░┤┘.
			}
			return;
		}
		else
		{													// ░░└║ ┴╕└╠╕щ └╠╡┐└╕╖╬...		
			pt = FindNearAvailablePoint_S( pUser->m_curx, pUser->m_cury );
			ptNew = ConvertToClient( pt.x, pt.y );

			if( ptNew.x == -1 || ptNew.y == -1 ) return;

			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, 0);
			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[pt.x][pt.y].m_lUser, USER_BAND + m_uid);
			m_curx = pt.x;
			m_cury = pt.y;
			
			result = SUCCESS;
		}
		
		index = 0;
		SetByte(m_TempBuf, MOVE_CHAT_RESULT, index);
		SetByte(m_TempBuf, result, index);

		if(result == FAIL) 
		{
			Send(m_TempBuf, index);
			return;
		}

		SetInt(m_TempBuf, m_uid + USER_BAND, index);
		SetShort(m_TempBuf, ptNew.x, index);
		SetShort(m_TempBuf, ptNew.y, index);
		Send(m_TempBuf, index);	
		
		SightRecalc();
		sprintf(strOP,"%s,%s", "traceuser", pUser->m_strUserID);//yskang 0.4
	}
	else if( fn_str.CompareNoCase( "╖╔╡╜NPC" ) == 0 )//tracenpc
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
//		memcpy( fn, pBuf+index+1, 20 );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > 20) return;		// └▀╕°╡╚ NPC╛╞└╠╡Ё 
		
		CNpc* pNpc = GetNpc(fn);
		if(pNpc == NULL) return;
		
		CPoint ptNew, pt;
		BYTE result;
		int old_z;
		
		if(pNpc->m_sCurZ != m_curz)									// NPC┐═ ┐ю┐╡└┌░б ░░└║┴╕┐б └╓┴Ў ╛╩└╗ ░ц┐ь
		{
			if( !IsZoneInThisServer(pNpc->m_sCurZ) ) return;		// │╗ ╝н╣Ў╛╚┐б └╓┤┬┴╕└╠ ╛╞┤╘ ╕о┼╧

			old_z = m_curz;
			SetZoneIndex( pNpc->m_sCurZ );

			ptNew = ConvertToClient(pNpc->m_sCurX, pNpc->m_sCurY);

			SetZoneIndex( old_z );

			if( ptNew.x == -1 || ptNew.y == -1 ) return;

			BOOL bSuccess = ZoneChangeProcess( pNpc->m_sCurZ, ptNew.x, ptNew.y);	//^^ Check ┐ф╕┴
			
			if(bSuccess)
			{
//				SendZoneChange(bSuccess);
				SendWeatherInMoveZone();				// └╠╡┐ ┴╕└╟ │п╛╛║п╚н╕ж ╛╦╕░┤┘.
			}
			return;
		}
		else
		{													// ░░└║ ┴╕└╠╕щ └╠╡┐└╕╖╬...		
			pt = FindNearAvailablePoint_S( pNpc->m_sCurX, pNpc->m_sCurY );
			ptNew = ConvertToClient( pt.x, pt.y );

			if( ptNew.x == -1 || ptNew.y == -1 ) return;

			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, 0);
			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[pt.x][pt.y].m_lUser, USER_BAND + m_uid);
			m_curx = pt.x;
			m_cury = pt.y;
			
			result = SUCCESS;
		}
		
		index = 0;
		SetByte(m_TempBuf, MOVE_CHAT_RESULT, index);
		SetByte(m_TempBuf, result, index);

		if(result == FAIL) 
		{
			Send(m_TempBuf, index);
			return;
		}

		SetInt(m_TempBuf, m_uid + USER_BAND, index);
		SetShort(m_TempBuf, ptNew.x, index);
		SetShort(m_TempBuf, ptNew.y, index);
		Send(m_TempBuf, index);	// └п└·┐б░╘┤┬ ╗ї╖╬┐ю ┴┬╟е░к└╗...
		
		SightRecalc();
		sprintf(strOP,"%s,%s", "tracenpc", pNpc->m_strName);//yskang 0.4
	}
	else if( fn_str.CompareNoCase( "╣╓╬я╨┼╧в" ) == 0 )//monsterinfo
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
//		memcpy( fn, pBuf+index+1, 20 );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > 20) return;		// └▀╕°╡╚ NPC╛╞└╠╡Ё 

		CNpc* pNpc = NULL;
		CString msg;

		msg.Format( "-- ╣╓╬я╬╗╓├ (%s) --", fn);
		SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);

		int nSize = g_arNpc.GetSize();
		CPoint pt;

		for( int i = 0; i < nSize; i++)
		{
			pNpc = g_arNpc[i];
			if( !pNpc ) continue;

			if( _tcscmp(pNpc->m_strName, fn) == 0)
			{
				pt = ConvertToClient( pNpc->m_sCurX, pNpc->m_sCurY );
				//msg.Format( "nid - %d (%d:%d)", i, pt.x, pt.y );
				msg.Format( "nid - %d (%d:%d) SP:%d", i, pt.x, pt.y, pNpc->m_sClientSpeed );
				SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);
			}
		}

		msg.Format( "-----------------------", fn);
		SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);
		sprintf(strOP,"%s,%s", "monsterinfo", fn);//yskang 0.4
	}
	else if( fn_str.CompareNoCase( "╔▒╦└╣╓╬я" ) == 0 )//killmonster
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
//		index += ParseSpace( fn, pBuf+index );
		int nid = atoi( fn );

		CNpc* pNpc = NULL;
		pNpc = GetNpc( nid );

		if( !pNpc ) return;

		pNpc->m_sHP = 1;
		sprintf(strOP,"%s,%s", "killmonster", fn);//yskang 0.4
	}
	else if( fn_str.CompareNoCase( "╠▀╚╦" ) == 0 )//forcequit
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return;		// └▀╕°╡╚ └п└·╛╞└╠╡Ё 
		
		USER* pUser = GetUser(fn);
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
		
		if(strcmp(pUser->m_strUserID, m_strUserID) == 0) return;	// └┌▒т└┌╜┼└║ ╛╚╡╩
		sprintf(strOP,"%s,%s", "forcequit", pUser->m_strUserID);//yskang 0.4
		pUser->Closeuser(600);
		pUser->SoftClose();
		pUser->LogOut();

		
	}
	else if( fn_str.CompareNoCase( "╚л╧┬╧▀" ) == 0 )
	{
		if( m_tIsOP != 1) return;

	for(i = 0; i < MAX_USER; i++)
	{

		pUser = g_pUserList->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;
		pUser->m_bSessionOnline = false;
		pUser->UpdateUserData(TRUE);
		pUser->SoftClose();
		pUser->LogOut();	
	  }
	}
	else if( fn_str.CompareNoCase( "fortresstime" ) == 0 )
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
		int time = atoi( fn );
		int pretime = g_dwFortressTime;
		g_dwFortressTime = time;

		CString msg;
		msg.Format( "Pre : %d, Post : %d", pretime, g_dwFortressTime );
		SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);
		sprintf(strOP,"%s,%d", "fortresstime", time);//yskang 0.4
	}
	else if( fn_str.CompareNoCase( "rrforcestart" ) == 0 )
	{
		if( m_tIsOP != 1 ) return;

		if( g_RR.m_bRRStatus != RR_IDLE )
		{
			CString msg;
			msg.Format( "╖╬┐н╖│║э└╠ ╟Ў└ч ┤ы▒т╗є┼┬░б ╛╞┤╒┤╧┤┘" );
			SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);
			return;
		}

		g_RR.ForceInit();
		sprintf(strOP,"rrforcestart : %s", fn);//yskang 0.4
	}

	else if( fn_str.CompareNoCase( "╫╖╫┘" ) == 0 )
	{
		if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
		 if(m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
		 if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
		 if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
		 if( m_bZoneLogOut ) return;
		 if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) 		// └▀╕°╡╚ └п└·╛╞└╠╡Ё 
		{
			SendEventMsg("├╗╙╨╩ф╚ы╜╟╔л├√");
			return;
		}

		
		USER* pUser = GetUser(fn);
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED)
		{
			SendEventMsg("╬▐╖и╒╥╡╜╢╘╖╜");
			return;
		}
		
		if(strcmp(pUser->m_strUserID, m_strUserID) == 0) return;	// └┌▒т└┌╜┼└║ ╛╚╡╩

		if( FindItem( 1425) < 1 )
		{
			 SendEventMsg("─·├╗╙╨╫╖╫┘┐и");
			  return;	
        }
		if (  pUser->IsCity() || pUser->m_curz == 67 || pUser->m_curz == 416  || pUser->m_curz == 33 )
		{
			 SendEventMsg("╢╘╖╜╘┌▓╗┐╔╫╖╫┘╡─╖╢╬з");
			 return;	
        }

		//=========================================================================╢■┤╬╨▐╕─
		 if ( pUser->FindItem( 1424) >= 1 ) 
		 {
			 pUser->SXzhuizong(1424);
			 SXzhuizong(1425);
             SendEventMsg("╢╘╖╜─ф╫┘┐и▒г╗д│╔╣ж"); //╬╥╖╜╠с╩╛
             pUser->SendEventMsg("─·▒╗═ц╝╥╫╖╫┘,─ф╫┘┐и▒г╗д│╔╣ж");

	         CString strMsg1 = _T("");
			 strMsg1 = _T("");
	         strMsg1.Format( " ─·▒╗═ц╝╥б╛%sб┐╫╖╫┘╩з░▄,─ф╫┘┐и─═╛├-1! ",m_strUserID);
	         pUser->SendSystemMsg((LPTSTR)(LPCTSTR)strMsg1, SYSTEM_NORMAL, TO_ME);
			 return;	
		 }
		
	    SendEventMsg("╫╖╫┘│╔╣ж"); //╬╥╖╜╠с╩╛
		SXzhuizong(1425);
		pUser->SendEventMsg("─·▒╗═ц╝╥╫╖╫┘│╔╣ж");
		

		CPoint ptNew, pt;
		BYTE result;
		
		if(pUser->m_curz != m_curz)									// └п└·┐═ ┐ю┐╡└┌░б ░░└║┴╕┐б └╓┴Ў ╛╩└╗ ░ц┐ь
		{
			if( !IsZoneInThisServer(pUser->m_curz) ) return;		// │╗ ╝н╣Ў╛╚┐б └╓┤┬┴╕└╠ ╛╞┤╘ ╕о┼╧

			ptNew = pUser->ConvertToClient(pUser->m_curx, pUser->m_cury);
			if( ptNew.x == -1 || ptNew.y == -1 ) return;

			BOOL bSuccess = ZoneChangeProcess( pUser->m_curz, ptNew.x, ptNew.y);	//^^ Check ┐ф╕┴
			
			if(bSuccess)
			{
//				SendZoneChange(bSuccess);
				SendWeatherInMoveZone();				// └╠╡┐ ┴╕└╟ │п╛╛║п╚н╕ж ╛╦╕░┤┘.
			}
			return;
		}
		else
		{													// ░░└║ ┴╕└╠╕щ └╠╡┐└╕╖╬...		
			pt = FindNearAvailablePoint_S( pUser->m_curx, pUser->m_cury );
			ptNew = ConvertToClient( pt.x, pt.y );

			if( ptNew.x == -1 || ptNew.y == -1 ) return;

			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_lUser, 0);
			::InterlockedExchange(&g_zone[m_ZoneIndex]->m_pMap[pt.x][pt.y].m_lUser, USER_BAND + m_uid);
			m_curx = pt.x;
			m_cury = pt.y;
			
			result = SUCCESS;
		}
		
		index = 0;
		SetByte(m_TempBuf, MOVE_CHAT_RESULT, index);
		SetByte(m_TempBuf, result, index);

		if(result == FAIL) 
		{
			Send(m_TempBuf, index);
			return;
		}

		SetInt(m_TempBuf, m_uid + USER_BAND, index);
		SetShort(m_TempBuf, ptNew.x, index);
		SetShort(m_TempBuf, ptNew.y, index);
		Send(m_TempBuf, index);	// └п└·┐б░╘┤┬ ╗ї╖╬┐ю ┴┬╟е░к└╗...
		
		SightRecalc();
		
	}
	else if(fn_str.CompareNoCase( "╥■╔э") == 0 )
	{
		if( m_tIsOP != 1 ) return;

		AddAbnormalInfo(OPERATION_MODE);

		CBufferEx TempBuf;
		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);
		Send(TempBuf, TempBuf.GetLength());
		SendInsight(TempBuf, TempBuf.GetLength());

		sprintf(strOP,"GM─г╩╜");// finito
	}
	else if( fn_str.CompareNoCase( "GM" ) == 0 )//╔ш╓├╬кGM  ╓╗╙╨─┌▓т╞┌╝ф
	{
		if (o_yehuoini[0]->neice == 1)
		{
			m_tIsOP = 1;
			CBufferEx TempBuf;
			TempBuf.Add(SET_USER_STATE);
			TempBuf.Add(m_uid + USER_BAND);
			TempBuf.Add(m_dwAbnormalInfo);
			TempBuf.Add(m_dwAbnormalInfo_);
			Send(TempBuf, TempBuf.GetLength());
			SendInsight(TempBuf, TempBuf.GetLength());
			
			SendSystemMsg("╔ш╓├│╔╣ж", SYSTEM_ERROR, TO_ME);
		}
	}
	else if(fn_str.CompareNoCase( "╚б╧√GM") == 0 ) //╚б╧√╚и╧▐
	{
		if( m_tIsOP != 1) return;
		
		m_tIsOP = 0;
        DeleteAbnormalInfo(OPERATION_MODE);
        CBufferEx TempBuf;
		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);
		Send(TempBuf, TempBuf.GetLength());
		SendInsight(TempBuf, TempBuf.GetLength());
		SendSystemMsg("╚и╧▐╥╤▒╗╚б╧√", SYSTEM_ERROR, TO_ME);
	}
	else if(fn_str.CompareNoCase( "╦л▒╢") == 0 )
	{
		if( m_tIsOP != 1 ) return;
		bool doubleexp = SetServerDoubleExp();
	
		if(doubleexp)	SendSystemMsg("╣▄└э╘▒╥╤┤Є┐к╦л▒╢╛н╤щ!",SYSTEM_ANNOUNCE,TO_ME);
		else SendSystemMsg("╣▄└э╘▒╥╤╣╪▒╒┴╦╦л▒╢╛н╤щ!",SYSTEM_ANNOUNCE,TO_ME);
	}	
	else if(fn_str.CompareNoCase( "╦─▒╢") == 0 )
	{
		if( m_tIsOP != 1 ) return;
		bool doubleexpup4 = SetServerDoubleExpup4();
	
		if(doubleexpup4)   SendSystemMsg("╣▄└э╘▒╥╤┤Є┐к4▒╢╛н╤щ!",SYSTEM_ANNOUNCE,TO_ME);
		else SendSystemMsg("╣▄└э╘▒╥╤╣╪▒╒┴╦4▒╢╛н╤щ!",SYSTEM_ANNOUNCE,TO_ME);
	}	
/*	else if(fn_str.CompareNoCase("╔╛│¤╕╜╝■") == 0)
	{
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int s1 = atoi( fn );
		EbodyFj39(s1);
		CheckMagicItemMove();
	}
	else if(fn_str.CompareNoCase("╔╛│¤│╠╨Є┐и") == 0)
	{		
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int s1 = atoi( fn );
		EbodyFjCXcard(s1);
		CheckMagicItemMove();
	}*/
	else if(fn_str.CompareNoCase( "╚б╧√╥■╔э") == 0 )
	{
		if( m_tIsOP != 1) return;

		DeleteAbnormalInfo(OPERATION_MODE);

		CBufferEx TempBuf;
		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);
		Send(TempBuf, TempBuf.GetLength());
		SendInsight(TempBuf, TempBuf.GetLength());

		sprintf(strOP,"╜т│¤GM─г╩╜");//11
	}else if( fn_str.CompareNoCase( "╥к╚√╩▒╝ф" ) == 0 )
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
		int time = atoi( fn );
		int pretime = g_dwFortressTime;
		g_dwFortressTime = time;

		CString msg;
		msg.Format( "Pre : %d, Post : %d", pretime, g_dwFortressTime );
		SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);
		sprintf(strOP,"%s,%d", "fortresstime", time);//yskang 0.4
	}else if(fn_str.CompareNoCase( "╔¤╝╢") == 0)
	{
//#ifndef _DEBUG
		if( m_tIsOP != 1) return;
//#endif
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));

		int nLeval = atoi(fn);
		if(nLeval == 0)
			GetExp(m_dwExpNext);
		else if(nLeval>0)
		{
			for(int k = 0;k<nLeval;k++)
				GetExp(m_dwExpNext);
		}else
		{
			m_sLevel += nLeval;
			SendCharData();
		}

	}else if( fn_str.CompareNoCase( zhizuob1 ) == 0 ){
//#ifndef _DEBUG
		if(m_tIsOP != 1) return;
//#endif
		BYTE tMagic[5]={0,0,0,0,0};
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int a1 = atoi( fn );
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int a2= atoi( fn );
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int a3 = atoi( fn );
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int a4 = atoi( fn );
		if(a4 !=0){
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		tMagic[0] = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		tMagic[1]= atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		tMagic[2] = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		tMagic[3] = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		tMagic[4] = atoi( fn );
		}
		if(a1<0 ||a1>g_arItemTable.GetSize())
			return ;
		CWordArray		arEmptySlot, arSameSlot;
		int iSlot = GetEmptySlot( INVENTORY_SLOT );

		if( iSlot < 0 ) return;

		ReSetItemSlot( &m_UserItem[iSlot]);

		m_UserItem[iSlot].sLevel = g_arItemTable[a1]->m_byRLevel;
		m_UserItem[iSlot].sSid = a1;
		m_UserItem[iSlot].sCount = a2;
		m_UserItem[iSlot].sDuration = g_arItemTable[a1]->m_sDuration;
		m_UserItem[iSlot].sBullNum = 3;
		m_UserItem[iSlot].tMagic[0] = tMagic[0];
		m_UserItem[iSlot].tMagic[1] = tMagic[1];
		m_UserItem[iSlot].tMagic[2] = tMagic[2];
		m_UserItem[iSlot].tMagic[3] = tMagic[3];
		m_UserItem[iSlot].tMagic[4] = tMagic[4];
		m_UserItem[iSlot].tMagic[5] = a3;
		m_UserItem[iSlot].tIQ = a4;
		m_UserItem[iSlot].iItemSerial = 0;

	//	MakeItemLog( &m_UserItem[iSlot], ITEMLOG_EVENT_GIVE );

		arEmptySlot.Add(iSlot); 
		UpdateInvenSlot(&arEmptySlot, &arSameSlot);
		SYSTEMTIME time;
	    GetLocalTime(&time);
	    sprintf(strOP,"%d-%d-%d %d:%d ╓╞╫ў[ %s ]%d╕Ў ▒р║┼╬к:%d ╕─╩¤:%d ╤╒╔л:%d ╩Ї╨╘1:%d ╩Ї╨╘2:%d ╩Ї╨╘3:%d ╩Ї╨╘4:%d ╩Ї╨╘5:%d",time.wYear,time.wMonth,time.wDay ,time.wHour,time.wMinute,g_arItemTable[a1]->m_strName,a2,a1,a3,a4,tMagic[0],tMagic[1],tMagic[2],tMagic[3],tMagic[4]);
	    
	//	sprintf(strOP,"giveme %s, %s",g_arItemTable[a1]->m_strName,fn_str);// finito
	}else if(fn_str.CompareNoCase( "╟х└э╓▄╬з") == 0){//░╤╕╜╜№╡─═ц╝╥╚л▓┐╥╞╢п╫▀
		if( m_tIsOP != 1) return;
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int z = atoi( fn );
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int x = atoi( fn );
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int y = atoi( fn );
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		int sx = m_curx / SIGHT_SIZE_X;
		int sy = m_cury / SIGHT_SIZE_Y;
	
		int min_x = (sx-1)*SIGHT_SIZE_X; if( min_x < 0 ) min_x = 0;
		int max_x = (sx+2)*SIGHT_SIZE_X;
		int min_y = (sy-1)*SIGHT_SIZE_Y; if( min_y < 0 ) min_y = 0;
		int max_y = (sy+2)*SIGHT_SIZE_Y;
		int zzzz=m_curz;
		MAP* pMap = g_zone[m_ZoneIndex];
		if( !pMap ) return;
	
		if( max_x >= pMap->m_sizeMap.cx ) max_x = pMap->m_sizeMap.cx - 1;
		if( max_y >= pMap->m_sizeMap.cy ) max_y = pMap->m_sizeMap.cy - 1;
	
		int temp_uid;
		USER* pUser = NULL;

		for( int i = min_x; i < max_x; i++ )
		{
			for( int j = min_y; j < max_y; j++ )
			{				
				temp_uid = pMap->m_pMap[i][j].m_lUser;

				if(temp_uid < USER_BAND || temp_uid >= NPC_BAND) continue;
				else temp_uid -= USER_BAND;
			
				if( temp_uid >= 0 && temp_uid < MAX_USER )
				{
					pUser = GetUser(temp_uid);
					if ( pUser == NULL ) continue;
				
					if( pUser->m_state == STATE_GAMESTARTED )
					{
						if(pUser->m_curz == zzzz)
						{
								pUser->ZoneMoveReq( z, x, y );
						}
					}
				}
			}
		}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	}else if(fn_str.CompareNoCase( "╤к┴┐") == 0){
			if(m_dwXL==0){
				SendSystemMsg( "─·┤Є┐к╤к┴┐╧╘╩╙,┼ф╓├╥╤╫╘╢п▒г┤ц", SYSTEM_NORMAL, TO_ME);
				m_dwXL=1;
			}else{
				SendSystemMsg( "─·╣╪▒╒╤к┴┐╧╘╩╙,┼ф╓├╥╤╫╘╢п▒г┤ц", SYSTEM_NORMAL, TO_ME);
				m_dwXL=0;
			}

		}
	else if(fn_str.CompareNoCase( JieChu ) == 0)
	{
		m_ShowHP=1;
	}
			
	else if(fn_str.CompareNoCase( "╛Ў╒╜▒╥─г╩╜") == 0)
	{
		if(m_bPShopOpen == TRUE)
		{
			SendEventMsg("╥╤┐к╡─╕Ў╚╦╔╠╡ъ.╬▐╖и╫к╗╗─г╩╜гб");
			return;
		}
		else 
		{
			SendEventMsg("│╔╣ж╫к╗╗╬к[╛Ў╒╜▒╥]╕Ў╚╦╔╠╡ъ─г╩╜гб");
			m_dwNoChatTime = 0;
		}
	}
	else if(fn_str.CompareNoCase( "▒ъ╓╛─г╩╜") == 0)
	{
		if(m_bPShopOpen == TRUE)
		{
			SendEventMsg("╥╤┐к╡─╕Ў╚╦╔╠╡ъ.╬▐╖и╫к╗╗─г╩╜гб");
			return;
		}
		else 
		{
			SendEventMsg("│╔╣ж╫к╗╗╬к[▒ъ╓╛]╕Ў╚╦╔╠╡ъ─г╩╜гб");
			m_dwNoChatTime = 1;
		}
	}
	/*else if(fn_str.CompareNoCase( "╜Ё▒ъ─г╩╜") == 0)
	{
		if(m_bPShopOpen == TRUE)
		{
			SendEventMsg("╥╤┐к╡─╕Ў╚╦╔╠╡ъ.╬▐╖и╫к╗╗─г╩╜гб");
			return;
		}
		else 
		{
			SendEventMsg("│╔╣ж╫к╗╗╬к[╜Ё▒ъ]╕Ў╚╦╔╠╡ъ─г╩╜гб");
			m_dwNoChatTime = 2;
		}
	}*/
	
	else if( fn_str.CompareNoCase("╕─├√") == 0 )        
	{
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int nLength = strlen( fn );
		//╜и┴в╜╟╔л├√╧▐╓╞╫╓╩¤ 
		if(nLength <= 0 || nLength > 16) 
		{
             SendSystemMsg("╕├├√╫╓│д╢╚┤э╬є,╜╟╔л├√╫ю╢р8╬╗║║╫╓╗Є16╬╗╫╓╖√!",SYSTEM_ERROR,TO_ME);     
			return;
		}
		if(m_bNowBuddy == TRUE)
		{
			SendSystemMsg("╕─├√╩з░▄,╟ы═╦│Ў╫щ╢╙╘┘╕─├√.",SYSTEM_ERROR,TO_ME);
			return;
		}
		if(m_bNowTrading == TRUE)
		{
			SendSystemMsg("╕─├√╩з░▄,╟ы╚б╧√╜╗╥╫╘┘╕─├√.",SYSTEM_ERROR,TO_ME);
			return;
		}
		if(m_bPShopOpen == TRUE)
		{
			SendSystemMsg("╕─├√╩з░▄,╟ы╣╪▒╒╔╠╡ъ╘┘╕─├√.",SYSTEM_ERROR,TO_ME);
			return;
		}
		
/*		if( IsExistCharId( fn ) == TRUE )
	    {
		    SendSystemMsg("╕├╜╟╔л├√╥╤┤ц╘┌!",SYSTEM_ERROR,TO_ME);
		    return;
	    }*/

	    if(m_dwGuild > 0){ 
			SendSystemMsg("╟ы═╦│Ў╛№═┼║є╘┘╕─├√!",SYSTEM_ERROR,TO_ME);
			return;
		}
		CString strMsg = _T("");
		strMsg.Format("═ц╝╥[ %s ]╩╣╙├[╜╟╔л╕№├√┐и]╜л╫╘╝║╡─├√╫╓╕─╬к[ %s ]",m_strUserID,fn);
        UpdateUserData(TRUE);
        if( FindItem( 1565) >= 1 )
		 {  	
		   if(UpdateUserName(fn))
		   {
			    RobItem( 1565, 1 );
			    SendSystemMsg(strMsg.GetBuffer(strMsg.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);
                // SoftClose();//╠▀╧┬╧▀
				SendSystemMsg("╣з╧▓!─·╕─├√│╔╣ж!╓╪╨┬╡╟┬╜┐╔┐┤╡╜╨┬├√╫╓└▓!", SYSTEM_SPECIAL, TO_ME);
				 SoftClose();//╠▀╧┬╧▀
           }
		    else
			    SendSystemMsg("╜╟╔л├√▒ф╕№╩з░▄!",SYSTEM_ERROR,TO_ME);		 		
		 }
		 else
		 {
			 SendSystemMsg("─у├╗╙╨[╜╟╔л╕№├√┐и]!",SYSTEM_ERROR,TO_ME);
			 return;
		 }	
    }
	else if(fn_str.CompareNoCase( "╬╥╡─╩▒╝ф") == 0 )  //╩▒╝ф 12╘┬22╚╒
	{	
		MyTime();
	}


	//	//if( m_sLevel >= 105) {
 //        if (m_dwShaGuai  >= 0 ) {
	//    CString strMsgg = _T("");
	//	//int h = 3000 - m_dwShaGuai;
	//	strMsgg.Format( "─·╜ё╚╒╔▒╣╓╩¤┴┐:%d╓╗",m_dwShaGuai);
	//	SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);}//}

	//	

	//	
	//if (m_dwHiExpTime !=0 ) {
	//    CString strMsgg = _T("");
	//	int h = m_dwHiExpTime/(3600*1000);
	//	int m = m_dwHiExpTime%(3600*1000)/60000;
 //       strMsgg.Format( "╨╦╖▄╩г╙р╩▒╝ф:%d╨б╩▒%d╖╓",h,m);
	//	SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);}

	//if (m_dwMagicFindTime !=0 ) {
	//    CString strMsgg = _T("");
	//	int h = m_dwMagicFindTime/(3600*1000);
	//	int m = m_dwMagicFindTime%(3600*1000)/60000;
 //       strMsgg.Format( "╨╥╘╦╩г╙р╩▒╝ф:%d╨б╩▒%d╖╓",h,m);
	//	SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);}

	//if (m_dwVIPTime !=0 ) {
	//    CString strMsgg = _T("");
	//	int h = m_dwVIPTime/(3600*1000);
	//	int m = m_dwVIPTime%(3600*1000)/60000;
 //       strMsgg.Format( "╠ь╩╣╦л▒╢╩▒╝ф:%d╨б╩▒%d╖╓",h,m);
	//	SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);}

	//if (m_dwHtExpTime !=0 ) {
	//    CString strMsgg = _T("");
	//	int h = m_dwHtExpTime/(3600*1000);
	//	int m = m_dwHtExpTime%(3600*1000)/60000;
 //       strMsgg.Format( "╗├┴щ╩г╙р╩▒╝ф:%d╨б╩▒%d╖╓",h,m);
	//	SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);}

	//if (m_dwMagicFtTime !=0 ) {
	//    CString strMsgg = _T("");
	//	int h = m_dwMagicFtTime/(3600*1000);
	//	int m = m_dwMagicFtTime%(3600*1000)/60000;
 //       strMsgg.Format( "╗├╛з╩г╙р╩▒╝ф:%d╨б╩▒%d╖╓",h,m);
	//	SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);}

	//if (m_dwBFindTime !=0 ) {
	//    CString strMsgg = _T("");
	//	int h = m_dwBFindTime/(3600*1000);
	//	int m = m_dwBFindTime%(3600*1000)/60000;
 //       strMsgg.Format( "▒ф╔э╩г╙р╩▒╝ф:%d╨б╩▒%d╖╓",h,m);
	//	SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);}  

 //   if (m_dwHXTime !=0 ) {   
	//    CString strMsgg = _T("");
	//	int h = m_dwHXTime/(3600*1000);
	//	int m = m_dwHXTime%(3600*1000)/60000;
 //       strMsgg.Format( "╗├╧ы╩г╙р╩▒╝ф:%d╨б╩▒%d╖╓",h,m);
	//	SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);}  

	// if (m_dwSGTime !=0 ) {   
	//    CString strMsgg = _T("");
	//	int h = m_dwSGTime/(3600*1000);
	//	int m = m_dwSGTime%(3600*1000)/60000;
 //       strMsgg.Format( "сў┴╘╩г╙р╩▒╝ф:%d╨б╩▒%d╖╓",h,m);
	//	SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);}  

	// if (m_dwZFTime !=0 ) {   
	//    CString strMsgg = _T("");
	//	int h = m_dwZFTime/(3600*1000);
	//	int m = m_dwZFTime%(3600*1000)/60000;
 //       strMsgg.Format( "╩Ї╨╘╫г╕г╩▒╝ф:%d╨б╩▒%d╖╓",h,m);
	//	SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);
	//	if(m_dwZF = 1)
	//	{

	//	if( m_byClass == 0 || m_byClass == 2)
	//	{
	//		
	//		strMsgg.Format( "╫г╕г╩Ї╨╘╬кг║┴ж╓╡5╘Ў╝╙");
	//	    SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);
	//    }else if( m_byClass == 1 )
	//	{
	//		strMsgg.Format( "╫г╕г╩Ї╨╘╬кг║╓╟╗█5╘Ў╝╙");
	//	    SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);
	//    }else if( m_byClass == 3)
	//	{
	//		strMsgg.Format( "╫г╕г╩Ї╨╘╬кг║├Ї╜▌5╘Ў╝╙");
	//	    SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NORMAL, TO_ME);
	//	}
	//	}
	// }
	// 
	else if(fn_str.CompareNoCase( "say") == 0 )//▓т╩╘SAY╙я╛ф/say ┐═╗з╢╦say┤·┬ы
	{

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );	
		int z = atoi( fn );
		SendNpcSay(NULL, z);		
	}
	
//=====================╝╙╡у├№┴ю====================================================
	else if(fn_str.CompareNoCase( "╝╙┴ж┴┐") == 0 )
	{
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int z = atoi( fn );
		int iNum = 0;
		if( z<=0 ) return;
		if(m_sPA >= z)
		  {
			if( m_sSTR+z > 100)
			{
				SendSystemMsg("─·╡─┴ж┴┐╥╤╡╜╔╧╧▐╗Є┤╦▓┘╫ў║є╗с│м│Ў╔╧╧▐гб",SYSTEM_NPC,TO_ME);
				return;
			}		
			m_sSTR = m_sSTR+z; m_sPA -= z;
			SetUserToMagicUser();
			CheckMagicItemMove();
			UpdateUserData();
			SendMyInfo( TO_INSIGHT, INFO_MODIFY );
			SendUserStatusSkill();
			SendSystemMsg("─·╡─╩Ї╨╘╡у╥╤╘Ў╝╙гб",SYSTEM_NPC,TO_ME);
			return;
		}
		SendSystemMsg("╩Ї╨╘╡у▓╗╫угб",SYSTEM_NPC,TO_ME);
	}else if(fn_str.CompareNoCase( "╝╙╠х╓╩") == 0 )
	{
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int z = atoi( fn );
		int iNum = 0;
		if( z<=0 ) return;
		if(m_sPA >= z){
			if( m_sCON+z > 100){
				SendSystemMsg("─·╡─╠х╓╩╥╤╡╜╔╧╧▐╗Є┤╦▓┘╫ў║є╗с│м│Ў╔╧╧▐гб",SYSTEM_NPC,TO_ME);
				return;
			}		
			m_sCON = m_sCON+z; m_sPA -= z;
			SetUserToMagicUser();
			CheckMagicItemMove();
			UpdateUserData();
			SendMyInfo( TO_INSIGHT, INFO_MODIFY );
			SendUserStatusSkill();
			SendSystemMsg("─·╡─╩Ї╨╘╡у╥╤╘Ў╝╙гб",SYSTEM_NPC,TO_ME);
			return;
		}
		SendSystemMsg("╩Ї╨╘╡у▓╗╫угб",SYSTEM_NPC,TO_ME);
	}else if(fn_str.CompareNoCase( "╝╙├Ї╜▌") == 0 )
	{
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int z = atoi( fn );
		int iNum = 0;
		if( z<=0 ) return;
		if(m_sPA >= z){
			if( m_sDEX +z > 100){
				SendSystemMsg("─·╡─├Ї╜▌╥╤╡╜╔╧╧▐╗Є┤╦▓┘╫ў║є╗с│м│Ў╔╧╧▐гб",SYSTEM_NPC,TO_ME);
				return;
			}		
			m_sDEX = m_sDEX+z; m_sPA -= z;
			SetUserToMagicUser();
			CheckMagicItemMove();
			UpdateUserData();
			SendMyInfo( TO_INSIGHT, INFO_MODIFY );
			SendUserStatusSkill();
			SendSystemMsg("─·╡─╩Ї╨╘╡у╥╤╘Ў╝╙гб",SYSTEM_NPC,TO_ME);
			return;
		}
		SendSystemMsg("╩Ї╨╘╡у▓╗╫угб",SYSTEM_NPC,TO_ME);
	}else if(fn_str.CompareNoCase( "╝╙╓╟╗█") == 0 )
	{
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int z = atoi( fn );
		int iNum = 0;
		if( z<=0 ) return;
		if(m_sPA >= z){
			if( m_sVOL+z > 100){
				SendSystemMsg("─·╡─╓╟╗█╥╤╡╜╔╧╧▐╗Є┤╦▓┘╫ў║є╗с│м│Ў╔╧╧▐гб",SYSTEM_NPC,TO_ME);
				return;
			}		
			m_sVOL = m_sVOL+z; m_sPA -= z;
			SetUserToMagicUser();
			CheckMagicItemMove();
			UpdateUserData();
			SendMyInfo( TO_INSIGHT, INFO_MODIFY );
			SendUserStatusSkill();
			SendSystemMsg("─·╡─╩Ї╨╘╡у╥╤╘Ў╝╙гб",SYSTEM_NPC,TO_ME);
			return;
		}
		SendSystemMsg("╩Ї╨╘╡у▓╗╫угб",SYSTEM_NPC,TO_ME);
	}else if(fn_str.CompareNoCase( "╝╙╓╟┴ж") == 0 )
	{
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int z = atoi( fn );
		int iNum = 0;
		if( z<=0 ) return;
		if(m_sPA >= z){
			if( m_sWIS +z > 100){
				SendSystemMsg("─·╡─╓╟┴ж╥╤╡╜╔╧╧▐╗Є┤╦▓┘╫ў║є╗с│м│Ў╔╧╧▐гб",SYSTEM_NPC,TO_ME);
				return;
			}		
			m_sWIS = m_sWIS+z; m_sPA -= z;
			SetUserToMagicUser();
			CheckMagicItemMove();
			UpdateUserData();
			SendMyInfo( TO_INSIGHT, INFO_MODIFY );
			SendUserStatusSkill();
			SendSystemMsg("─·╡─╩Ї╨╘╡у╥╤╘Ў╝╙гб",SYSTEM_NPC,TO_ME);
			return;
		}
		SendSystemMsg("╩Ї╨╘╡у▓╗╫угб",SYSTEM_NPC,TO_ME);
	}
	else if(fn_str.CompareNoCase( "╫╘╔▒") == 0 )//╫╘╔▒
	{
		if (m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
		if (m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
	    if (m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
	    if (m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
	    if ( m_bZoneLogOut ) return;
		if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
		CPoint pos = ConvertToClient( m_curx, m_cury );
		if( pos.x == -1 || pos.y == -1 ) { pos.x = 162; pos.y = 1452; }
		m_bLive = USER_DEAD;
		CBufferEx TempBuf;
		TempBuf.Add(DEAD);
		TempBuf.Add((short)(m_uid + USER_BAND));
		TempBuf.Add((short)pos.x);
		TempBuf.Add((short)pos.y);	
		SendInsight(TempBuf, TempBuf.GetLength());
		SendMyInfo(TO_INSIGHT, INFO_MODIFY);
	}

	else if(fn_str.CompareNoCase( "╩╨│б" ) == 0)
	{
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
		CString strMsg = _T("");	
		CString strSay;
		if(( FindItem(724)) >= 10)
		{
			RobItem(724,10);//┐█╡Ї10▒ъ╓╛
			for(int i = 0; i < MAX_USER; i++ )
			{
				pUser = m_pCom->GetUserUid(i);
				if(pUser && pUser->m_state == STATE_GAMESTARTED)
				{
					strMsg.Format(" %s ╦╡г║%s", m_strUserID,fn);
					pUser->MailShiChang(strMsg);
				}	
			}
		 SendSystemMsg( "[╣з╧▓!─·╡─╨┼╧в╖в╦═│╔╣ж! \r\n\r\n\r\n\r\n\r\n", SYSTEM_CESHIA, TO_ME);
		 strSay.Format( "%s ╖в▓╝┴╦╥╗╠ї╩╨│б╨┼╧в,╟ы▓щ┐┤╙╩╝■.",m_strUserID);
	     SendSystemMsg((LPTSTR)(LPCTSTR)strSay, SYSTEM_NPC, TO_ALL);
		}
		else 
		{
			SendSystemMsg( "[▒ъ╓╛▓╗╣╗!╖в▓╝╨┼╧в╩з░▄!\r\n\r\n\r\n\r\n\r\n", SYSTEM_CESHIA, TO_ME);
		}
	}
	else if(fn_str.CompareNoCase( "11") == 0 )//▓т╩╘╩╣╙├╬я╞╖╨з╣√
	{	
	
			CBufferEx TempBuf, TempSayBuf , TempBuf3;
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int z = atoi( fn );
			TempBuf3.Add(USE_POTION);		
			TempBuf3.Add(m_uid + USER_BAND);
			TempBuf3.Add((BYTE)z);
			Send( TempBuf3, TempBuf3.GetLength() );
	}
	else if(fn_str.CompareNoCase( "zf") == 0 )//▓т╩╘╔ё╩е╫г╕г
	{	
		if (o_yehuoini[0]->neice == 1 )
		{
			CBufferEx TempBuf, TempSayBuf , TempBuf3;
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int z = atoi( fn );
			m_dwZF = z;
			m_dwZFTime = 3600 * 2 * 1000;
			CheckMagicItemMove();
			TempBuf3.Add(USE_POTION);		
			TempBuf3.Add(m_uid + USER_BAND);
			TempBuf3.Add((BYTE)12);	//╓╨╜▒╩▒┤°╤╠╗и╨з╣√
			Send( TempBuf3, TempBuf3.GetLength() );
		}
	}
	else if(fn_str.CompareNoCase( "╓╪╢┴▒ъ╓╛╔╠╡ъ") == 0 )
	{
		if(m_tIsOP != 1) return;
		AginOnlineShop();
		SendSystemMsg("╓┤╨╨│╔╣ж",SYSTEM_NPC,TO_ME);
	}
	else if(fn_str.CompareNoCase( "test") == 0 )
	{
		if( m_tIsOP != 1 ) return;
		// 43 ┴ж┴┐3   44 ╠х╓╩3   45 ├Ї╜▌3  46╓╟╗█3    75 ╗╪▒▄6    76 ╗╪▒▄7    84┐╣─з15    86 ┴ж┴┐4  87 ╠х╓╩4  88 ├Ї╜▌4  89 ╓╟╗█4

		//96  ╗╪▒▄8  97 ╗╪▒▄9    99 ╖└╙∙7  100 ╖└╙∙8  105 ┐╣─з20

		// 107 ┴ж┴┐5  108 ╠х╓╩5   109 ├Ї╜▌5  110 ╓╟╗█5      129 ╖└╙∙9    130  ╖└╙∙10    132  ╔·├№40   135 ┐╣─з20   139 ╗╪▒▄10   141 ╔·├№50
		int i; 
		byte tMagic=0;   
		//int sum[]={43,44,45,46,75,76,84,86,87,88,89,96,97,99,100,105,107,108,109,110,129,130,132,135,139,141};//╫░▒╕╩Ї╨╘ 0,25
		int sum[]={4 ,5, 8, 9 ,10, 12, 14, 16, 22, 23, 24, 27, 33, 44, 50, 51, 52, 55};//╗·╨╡╩Ї╨╘ 0,17
		
		i = myrand(0, 17);
		tMagic = sum [i];
		m_UserItem[10].tMagic[1] = tMagic;


		i = myrand(0, 17);
		tMagic = sum [i];
		m_UserItem[10].tMagic[2] = tMagic;


		i = myrand(0, 17);
		tMagic = sum [i];
		m_UserItem[10].tMagic[3] = tMagic;


		i = myrand(0, 17);
		tMagic = sum [i];
		m_UserItem[10].tMagic[4] = tMagic;
					
		
		
		m_UserItem[10].tMagic[0] = g_arItemTable[m_UserItem[10].sSid]->m_bySpecial;
		m_UserItem[10].tIQ =2;
		
		CString str;
        str.Format( "%d %d %d %d", m_UserItem[10].tMagic[1], m_UserItem[10].tMagic[2], m_UserItem[10].tMagic[3], m_UserItem[10].tMagic[4]);
        SendEventMsg(str.GetBuffer(0));
		
		
		CUIntArray arMaterial;	
		arMaterial.Add(10);	
		CBufferEx TempBuf;
		int j;
		TempBuf.Add(UPGRADE_ITEM_RESULT);
		index = arMaterial.GetSize();
		TempBuf.Add((BYTE)1);
		TempBuf.Add((BYTE)index);
		for(i = 0; i < arMaterial.GetSize(); i++)
		{
			BYTE bySlot = (BYTE)arMaterial[i];
			TempBuf.Add((BYTE)bySlot);
			TempBuf.Add(m_UserItem[bySlot].sLevel);
			TempBuf.Add(m_UserItem[bySlot].sSid);
			TempBuf.Add(m_UserItem[bySlot].sDuration);
			TempBuf.Add(m_UserItem[bySlot].sBullNum);
			TempBuf.Add(m_UserItem[bySlot].sCount);

			for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

			TempBuf.Add(m_UserItem[bySlot].tIQ); 
		}
		Send(TempBuf, TempBuf.GetLength());
		FlushItemLog( TRUE );
	}
	else if(fn_str.CompareNoCase( "GM") == 0 )//╖╜▒у═╤╗·║░╣л╕ц 
	{
		if( m_tIsOP != 1 ) return;
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
		int changdu = strlen( fn );
		if ( changdu <1 ||  changdu >=128 )  return;
	    for(int i = 0; i < MAX_USER; i++)
		{
           pUser = g_pUserList->GetUserUid(i);
           if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED ) continue;
		   CString str;
		   str.Format( "%s", fn);
           pUser->SendEventMsg(str.GetBuffer(0));
		 //SendSystemMsg(str.GetBuffer(0),SYSTEM_ANNOUNCE,TO_ALL);
		}
	}
	else if(fn_str.CompareNoCase( "╞└╖╓") == 0 )//╣╪▒╒╞└╖╓
	{
		  if( m_tIsOP != 1 ) return;
		if( g_pingfen == FALSE )
		{
			g_pingfen = TRUE;
			SendEventMsg("─·╥╤[╣╪▒╒]╞└╖╓╧╘╩╛!");
		}else{
		
		    g_pingfen = FALSE ;
		    SendEventMsg("─·╥╤[┤Є┐к]╞└╖╓╧╘╩╛!");
		}
	}
	else if(fn_str.CompareNoCase( "│х╝╢╜▒└°") == 0 )
	{
		
		if( m_tIsOP != 1 ) return;
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return;
		
		USER* pUser = GetUser(fn);
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED)
		{
			SendSystemMsg("╢╘╖╜▓╗╘┌╧▀,╗Є╒▀├╗╙╨┤╦╙├╗з!",SYSTEM_ERROR,TO_ME);
			return;
		}
		if( pUser->m_bPShopOpen == TRUE ||  pUser->m_bNowTrading == TRUE)
		{
			SendSystemMsg("╢╘╖╜┤ж╙┌╔╠╡ъ╗Є╒▀╜╗╥╫╫┤╠м╓╨!",SYSTEM_ERROR,TO_ME);
			return;
		}

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int mingci = atoi( fn );
		if(mingci > 20 || mingci < 1)
		{
			SendEventMsg("╓╗─▄╩ф╚ы1-20├√");
			return;
		}

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int BZnum = atoi( fn );
		if(BZnum > 32767 || BZnum < 1)
		{
			SendEventMsg("─·╘∙╦═╡─╩¤┴┐│м╣¤╖╢╬з");
			return;
		}

	    int iSlot = -1;
		iSlot = pUser->GetEmptySlot(INVENTORY_SLOT);

		if( iSlot != -1 )
		{
			
         pUser->GiveItemAll( 724,BZnum,0,0,0,0,0,0,0,0,0,0,0 );
		 SendEventMsg("╖в╖┼│╔╣ж");
		 pUser->SendEventMsg("─·╡─│х╝╢╜▒└°╥╤╖в╖┼╡╜▒│░№╟ы▓щ╩╒");
		 CString strMsg;
		strMsg.Format("═ц╝╥ %s ╗ё╡├│х╝╢╜▒└°╡┌ %d ├√╜▒└°▒ъ╓╛ %d ╕Ў!", pUser->m_strUserID,mingci,BZnum);//╣л╕ц╠с╩╛
	    m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
	   }
		else
			 SendEventMsg("╢╘╖╜░№╣№┬·,╖в╖┼╩з░▄");
}
//=================================================================================================================================
	else if(fn_str.CompareNoCase( "╕°╬я╞╖") == 0 )
	{
		
		if( m_tIsOP != 1 ) return;
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return;
		
		USER* pUser = GetUser(fn);
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED)
		{
			SendSystemMsg("╢╘╖╜▓╗╘┌╧▀,╗Є╒▀├╗╙╨┤╦╙├╗з!",SYSTEM_ERROR,TO_ME);
			return;
		}
		if( pUser->m_bPShopOpen == TRUE ||  pUser->m_bNowTrading == TRUE)
		{
			SendSystemMsg("╢╘╖╜┤ж╙┌╔╠╡ъ╗Є╒▀╜╗╥╫╫┤╠м╓╨!",SYSTEM_ERROR,TO_ME);
			return;
		}
		//======================================================╬я╞╖ID

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int id = atoi( fn );
		if ( id < 0 || id > 1823 ) return;
		
		//======================================================╩¤┴┐

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int num = atoi( fn );
		if( id == 1020)
		{
			if (num > 2000000000 || num < 1 ) return;
		}else{
             if( num > 30000 || num < 1) return;
		}

        //=====================================================╕─╩¤
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int up = atoi( fn );
		if( up > 10 || num < 0) return;
		//=====================================================╤╒╔л
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int iq = atoi( fn );

		if( iq > 18)  return;
		
        //============================================================ ╩Ї╨╘1 2 3 4 5

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int sx1 = atoi( fn );

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int sx2 = atoi( fn );

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int sx3 = atoi( fn );

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int sx4 = atoi( fn );

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int sx5 = atoi( fn );
		
		//========================================================= ╖в╟о
		if ( id == 1020)
		{
			pUser->GiveDN(num);
		    pUser->m_dwShopPingDN = 1;
		    SendEventMsg("╘∙╦═│╔╣ж");
			CString str = _T("");
		    str.Format( "GM╕°┴╦─у╛Ў╒╜▒╥ %d", num);
            pUser->SendEventMsg(str.GetBuffer(0));
			if ( o_yehuoini[0]->neice != 1 )
			{
				SYSTEMTIME st;
				CString strDate;
				GetLocalTime(&st);
				strDate.Format("%d-%d-%d %d:%d",st.wYear,st.wMonth,st.wDay ,st.wHour,st.wMinute);
				str.Format("[%s]GM %s ╕°┴╦ %s ╛Ў╒╜▒╥ %d \r\n",strDate,m_strUserID,pUser->m_strUserID,num);
				EnterCriticalSection( &m_CS_FileWrite );
				g_fpGM.Write( str, str.GetLength() );
				LeaveCriticalSection( &m_CS_FileWrite); 
			}
		}else{
			int iSlot = -1;

			iSlot = pUser->GetEmptySlot(INVENTORY_SLOT);
			if( iSlot != -1 )
		    {
			   pUser->GiveItemAll10( id,num,up,iq,sx1,sx2,sx3,sx4,sx5,0,0,0,0,0);
			   pUser->m_dwShopPingDN = 1;
			   SendEventMsg("╘∙╦═│╔╣ж");
			   pUser->SendEventMsg("GM╕°┴╦─у╬я╞╖");
			   
			   if ( o_yehuoini[0]->neice != 1 )
		       {
					CString str = _T("");
					SYSTEMTIME st;
					CString strDate;
					GetLocalTime(&st);
					strDate.Format("%d-%d-%d %d:%d",st.wYear,st.wMonth,st.wDay ,st.wHour,st.wMinute);
					str.Format("[%s]GM %s ╕°┴╦ %s ╬я╞╖ %s %d╕Ў %d╕─ ╤╒╔л%d ╩Ї╨╘:%d %d %d %d %d\r\n",strDate,m_strUserID,pUser->m_strUserID,g_arItemTable[id]->m_strName,num,up,iq,sx1,sx2,sx3,sx4,sx5);
					EnterCriticalSection( &m_CS_FileWrite );
					g_fpGM.Write( str, str.GetLength() );
					LeaveCriticalSection( &m_CS_FileWrite);
			   }
		    }else{

					SendEventMsg("╢╘╖╜░№╣№╥╤┬·");
					pUser->SendEventMsg("─·╡─░№╣№╥╤┬·");
					return;
			}
		}
	}

//	else if(fn_str.CompareNoCase( "╕°▒ъ╓╛") == 0 )
//	{
//		
//		if( m_tIsOP != 1 ) return;
//		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
//		int nLength = strlen( fn );
//		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return;
//		
//		USER* pUser = GetUser(fn);
//		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED)
//		{
//			SendSystemMsg("╢╘╖╜▓╗╘┌╧▀,╗Є╒▀├╗╙╨┤╦╙├╗з!",SYSTEM_ERROR,TO_ME);
//			return;
//		}
//		if( pUser->m_bPShopOpen == TRUE ||  pUser->m_bNowTrading == TRUE)
//		{
//			SendSystemMsg("╢╘╖╜┤ж╙┌╔╠╡ъ╗Є╒▀╜╗╥╫╫┤╠м╓╨!",SYSTEM_ERROR,TO_ME);
//			return;
//		}
//
//		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
//		int BZnum = atoi( fn );
//		if(BZnum > 32767 || BZnum < 1)
//		{
//			SendEventMsg("─·╘∙╦═╡─╩¤┴┐│м╣¤╖╢╬з");
//			return;
//		}
//
//		int iSlot = -1;
//		iSlot = pUser->GetEmptySlot(INVENTORY_SLOT);
//
//		if( iSlot != -1 )
//		{
//			
//         pUser->GiveItemAll( 724,BZnum,0,0,0,0,0,0,0,0,0,0,0 );
//		 pUser->m_dwShopPingDN = 1;
//		// SendEventMsg("╘∙╦═│╔╣ж");
//		 //pUser->SendEventMsg("GM╘∙╦═┴╦─·▒ъ╓╛,╟ы▓щ╩╒");
//		   CString str;
//		   str.Format( "GM╕°┴╦─у %d ╕Ў▒ъ╓╛", BZnum);
//           pUser->SendEventMsg(str.GetBuffer(0));
//		 
//	   }
//		else
//			 SendEventMsg("╢╘╖╜░№╣№┬·,╖в╖┼╩з░▄");
//}	
//


//else if(fn_str.CompareNoCase( "1") == 0 )
//	{
//		
//		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
//		int nLength = atoi( fn );
//		m_dwShaGuai = nLength;
//		SetUserToMagicUser();
//		CheckMagicItemMove();
//	    UpdateUserData();
//		 SendEventMsg("11");
//		
//}	
//========================================================================================================================
	
	else if(fn_str.CompareNoCase( "PK┤є╚№") == 0 )//PK┤є╚№┐к╣╪ 
	{
		if( m_tIsOP != 1 ) return;
		
		if(o_yehuoini[0]->PKDSKG == 1)
		{
			//SendSystemMsg("PK┤є╚№╚╒│╠╢и╙┌╜ё═э8╡у,╟ы╙┬╩┐├╟╜ь╩▒▓╬╝╙!",SYSTEM_ANNOUNCE,TO_ALL);
			SendSystemMsg("PK┤є╚№╥╤╣╪▒╒гб╞└╖╓╣л╕ц╥╤┤Є┐к",SYSTEM_ERROR,TO_ME);
			o_yehuoini[0]->PKDSKG = 0;
			g_pingfen = FALSE;
		}
		else 
			{
				SendSystemMsg("PK┤є╚№╚╒│╠╢и╙┌╜ё═э8╡у,╟ы╙┬╩┐├╟╜ь╩▒▓╬╝╙!",SYSTEM_ANNOUNCE,TO_ALL);
				o_yehuoini[0]->PKDSKG = 1;
				g_pingfen = TRUE;
		}
	}

 else if(fn_str.CompareNoCase( "╢ё─з╣у│б") == 0 )//╢ё─з╣у│б┐к╣╪ 
	{
		if( m_tIsOP != 1 ) return;
		
		if(o_yehuoini[0]->EMGCKG == 1)
		{
			SendSystemMsg("╢ё─з╣у│б╥╤╣╪▒╒гб╞└╖╓╣л╕ц╥╤┤Є┐к",SYSTEM_ERROR,TO_ME);
			o_yehuoini[0]->EMGCKG = 0;
			g_pingfen = FALSE;
		}
		else 
			{
				SendSystemMsg("[╢ё─з╣у│б]╚╒│╠╢и╥х╜ё═э8╡у,╟ы╙┬╩┐├╟╜ь╩▒▓╬╝╙!",SYSTEM_ANNOUNCE,TO_ALL);
				o_yehuoini[0]->EMGCKG = 1;
				g_pingfen = TRUE;
		}
	}
	

    else if(fn_str.CompareNoCase( "▒▄├т╬є╔╦") == 0)
	{
		m_Bmws=1;
		//SendSystemMsg( "─·╥╤б╛┐к╞Їб┐═м╛№═┼▒▄├т╬є╔╦╣ж─▄", SYSTEM_NORMAL, TO_ME);
    }
    else if(fn_str.CompareNoCase( "╣╪▒▄├т╬є╔╦") == 0)
	{
		m_Bmws=0;
		//SendSystemMsg( "─·╥╤б╛╣╪▒╒б┐═м╛№═┼▒▄├т╬є╔╦╣ж─▄", SYSTEM_NORMAL, TO_ME);
	}

			
	else if(fn_str.CompareNoCase( "╞└╖╓╣╪") == 0)
	{
		m_GB=0;
		//SendSystemMsg( "─·╥╤б╛╣╪▒╒б┐╚л╖■╫░▒╕╞└╖╓╧╘╩╛", SYSTEM_NORMAL, TO_ME);
	}
	else if(fn_str.CompareNoCase( "╞└╖╓┐к") == 0)
	{
		m_GB=1;
		//SendSystemMsg( "─·╥╤б╛┐к╞Їб┐╚л╖■╫░▒╕╞└╖╓╧╘╩╛", SYSTEM_NORMAL, TO_ME);
	}
	else if(fn_str.CompareNoCase( "AutoD") == 0)
	{
		m_AutoD=1;
		//SendSystemMsg( "─·╥╤б╛┐к╞Їб┐╫╘╢п┬Ї╟░┴╜┼┼", SYSTEM_NORMAL, TO_ME);
	}else if(fn_str.CompareNoCase( "GAutoD") == 0)
	{
		m_AutoD=0;
		//SendSystemMsg( "─·╥╤б╛╣╪▒╒б┐╫╘╢п┬Ї╟░┴╜┼┼", SYSTEM_NORMAL, TO_ME);
	}
				
	
	else if(fn_str.CompareNoCase( Tuoji) == 0)//╝ь▓т═╤╗·
	{
			m_TuoJi=1;
	}
	/*else if( fn_str.CompareNoCase("═и╝й") == 0 )         //╕°╘к▒ж
	{
		//if( m_tIsOP != 1 ) return;
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return;
		USER* pUser = GetUser(fn);
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED)
		{
			SendSystemMsg("╢╘╖╜▓╗╘┌╧▀,╗Є╒▀├╗╙╨┤╦╙├╗з!",SYSTEM_ERROR,TO_ME);
			return;
		}
		if( pUser->m_dwShopPingDN != 0)
		{ 
			SendSystemMsg("╢╘╖╜╥╤╛н▒╗═и╝й╓╨!",SYSTEM_ERROR,TO_ME);
			return;
		}

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		
		 CString strMsg;
		    int dwTemp = FindItem(SPECIAL_BIAOZHI);
            
             if(  dwTemp < 100 )
			 {
				 SendSystemMsg("─·├╗╙╨100▒ъ╓╛╬▐╖и╖в▓╝═и╝й┴ю!",SYSTEM_ERROR,TO_ME);
			      return;
		     }

            else if(  dwTemp >= 100 )
			{
			RobItem( 724, 100 );
            pUser->m_dwShopPingDN = 1;
            strMsg.Format("═ц╝╥:б║ %s б╗╖в▓╝╢╘б║ %s б╗╡─═и╝й", this->m_strUserID,pUser->m_strUserID);//╣л╕ц╠с╩╛
            m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
		   }
			
		}*/
			

		
     ////////////////////////////////////////////////////////////////////////////////////////////////////
	else if(fn_str.CompareNoCase("─у─▄▓┬╡╜┬Ё") == 0 ) //╬я╞╖▒г╗д
	{	
		CString strMsg;
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );		int z = atoi( fn );
		
        if (m_bPShopOpen == TRUE ||  m_bNowTrading == TRUE )
		{	
			strMsg.Format("╟ы╧╚╣╪▒╒╡▒╟░╫┤╠м!");
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ERROR, TO_ME);
			return;
		 }
		if( m_isUser && o_yehuoini[0]->mimabaohu == 1 &&  m_TuoJi== 0)
		{	
			strMsg.Format("╟ы╧╚╣╪▒╒PK║є╘┌▓┘╫ў!");
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ERROR, TO_ME);
			return;
		 }
     
        if(z == NULL && o_yehuoini[0]->mimabaohu == 1)
		{
			strMsg.Format("├╗╙╨╩ф╚ы├▄┬ы╗Є╒▀├▄┬ы╕ё╩╜▓╗╢╘,╟ы╨▐╕─╨┬├▄▒г!");
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ERROR, TO_ME);
			return;
		}
		
		if(!strcmp(fn,JiaoXiMiMa))
		{
			m_MItemLock = !m_MItemLock;
			if(m_MItemLock)
				SendSystemMsg("╬я╞╖▒г╗д╥╤╜т│¤!╣▄└э╘▒╠с╨╤─·╜ў╔ў╜╗╥╫!",SYSTEM_ERROR,TO_ME);
			else
				SendSystemMsg("╬я╞╖▒г╗д╥╤┐к╞Ї!╜╗╥╫▒г╗д╓╨!",SYSTEM_ERROR,TO_ME);
			return;
		}
		else
		{
			strMsg.Format("─·╩ф╚ы╡─├▄┬ы▓╗╒¤╚╖!"); 
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ERROR, TO_ME);
			return;
		}
	}

	else if(fn_str.CompareNoCase("ssdzf") == 0 ) //
	{	
		if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
		 if(m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
		 if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
		 if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
		 if( m_bZoneLogOut ) return;
		 if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
		 Shenshengzhufu();
	}
//=====================╝╙╡у├№┴ю╜с╩°====================================================
	/*else if(fn_str.CompareNoCase( "╛ш┐ю╛н╤щ") == 0 )
	{	
		SetServerDoubleExp3();
	}
	else if(fn_str.CompareNoCase( "╛ш┐ю╡Ї▒ж") == 0 )
	{	
		SetServerDoubleBaoLv();
	}*/
//=====================╡ў╩╘├№┴ю====================================================
	else if(fn_str.CompareNoCase( "╚╦─г╨═") == 0){
	
			if(m_tIsOP != 1) 
			return;
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int z = atoi( fn );
				m_iSkin=z;	
			SendMyInfo(TO_INSIGHT, INFO_MODIFY);
			
		}
	else if(fn_str.CompareNoCase( "╣╓─г╨═") == 0){
	
			if(m_tIsOP != 1) 
			return;
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int z = atoi( fn );
				m_iHair=z;	
			SendMyInfo(TO_INSIGHT, INFO_MODIFY);
			
		}
//▓т╩╘╦в10╩Ї╨╘╬я╞╖├№┴ю--------------------------------------------------------------------------------------
	else if( fn_str.CompareNoCase( o_yehuoini[0]->MAKE ) == 0 )
	{	
		if( m_tIsOP == 1 ) 
		{
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU1 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU2 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU3 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU4 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU5 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU6 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU7 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU8 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU9 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU10 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU11 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU12 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU13 = atoi( fn );
			index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
			int ML_SHU14 = atoi( fn );
			if( ML_SHU1 < 0 ||  ML_SHU1 >= g_arItemTable.GetSize()) return;
			GiveItemAll10(ML_SHU1, ML_SHU2, ML_SHU3, ML_SHU4, ML_SHU5, ML_SHU6, ML_SHU7,ML_SHU8, ML_SHU9, ML_SHU10, ML_SHU11, ML_SHU12, ML_SHU13, ML_SHU14);
			SendSystemMsg("─·╦∙╓╞╫ў╡─╫░▒╕╥╤╔·│╔.",SYSTEM_NPC,TO_ME);
			//sprintf(strOP,"╓╞╘ь╬я╞╖");// ╨┤GM╚╒╘╙
			//========================================================================
			if ( o_yehuoini[0]->neice != 1 )
			{
				CString str = _T("");
				SYSTEMTIME st;
				CString strDate;
				GetLocalTime(&st);
				strDate.Format("%d-%d-%d %d:%d",st.wYear,st.wMonth,st.wDay ,st.wHour,st.wMinute);
				str.Format("[%s]═ц╝╥ %s ╓╞╫ў %s %d╕Ў %d╕─ ╤╒╔л%d ╩Ї╨╘:%d %d %d %d %d %d %d %d %d %d  \r\n",strDate,m_strUserID,g_arItemTable[ML_SHU1]->m_strName,ML_SHU2,ML_SHU3,ML_SHU4,ML_SHU5,ML_SHU6,ML_SHU7,ML_SHU8,ML_SHU9,ML_SHU10,ML_SHU11,ML_SHU12,ML_SHU13,ML_SHU14);
				EnterCriticalSection( &m_CS_FileWrite );
				g_fpGM.Write( str, str.GetLength() );
				LeaveCriticalSection( &m_CS_FileWrite);
			}
		   //=========================================================================
		}
	}
	else if(fn_str.CompareNoCase( "xiuli") == 0)
	{
		int iSuccess = 0;
		if (m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
		if (m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
	    if (m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
	    if (m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
	    if ( m_bZoneLogOut ) return;
		if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
		for(i = 0; i < EQUIP_ITEM_NUM; i++)	
		{
			if(m_UserItem[i].sSid < 0 || m_UserItem[i].sSid >= g_arItemTable.GetSize()) continue;	
			if (m_UserItem[i].sDuration != g_arItemTable[m_UserItem[i].sSid]->m_sDuration)
			{
				iSuccess = 1;
			}
		}if(iSuccess == 1)
		{
			RepairItemOpenReq(15);
		}else {
			SendEventMsg("╬┤╝ь▓т╡╜┐╔╨▐└э╡─╫░▒╕");
			return;
		}
	}



	//{
	//	int iSuccess = 0;
	//	if (m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
	//	if (m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
	//    if (m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
	//    if (m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
	//    if ( m_bZoneLogOut ) return;
	//	if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
	//	
	//	if(m_dwDN < 100000)
	//	{
	//		SendEventMsg("╘╢│╠╨▐└э╨ш╥к10═Є╛Ў╒╜▒╥!");
	//	    return ;
	//	}
	//	for(i = 0; i < EQUIP_ITEM_NUM; i++)	
	//	{
	//		if(m_UserItem[i].sSid < 0 || m_UserItem[i].sSid >= g_arItemTable.GetSize()) continue;	
	//		if (i == 2 ||i == 3 ||i == 5 || i == 6 || i == 7 )  continue;
	//		if (m_UserItem[i].sDuration != g_arItemTable[m_UserItem[i].sSid]->m_sDuration)
	//		{
	//			m_UserItem[i].sDuration = g_arItemTable[m_UserItem[i].sSid]->m_sDuration;
	//			iSuccess = 1;
	//		}
	//	}
	//	if(iSuccess == 1)
	//	{
	//		if( m_dwDN <= 100000 ) m_dwDN = 0;
	//		else m_dwDN = m_dwDN - 100000;
	//		UpdateUserItemDN();	
	//		SendMoneyChanged();
	//		SendUserStatusSkill();
	//		SendCharData();
	//		SendEventMsg("╘╢│╠╨▐└э│╔╣жги10Wгй");
	//	}else{
	//		SendEventMsg("╬┤╝ь▓т╡╜┐╔╨▐└э╡─╫░▒╕");
	//		return;
	//	}
	//}
	else if(fn_str.CompareNoCase( "gerenbank") == 0)
			{
				if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
				 if(m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
				 if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
				 if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
				 if( m_bZoneLogOut ) return;
				if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
			/*if ( m_dwZaiXianTime ==0 )
			{
				SendEventMsg("╓╗╙╨╗с╘▒╙├╗з▓┼┐╔╥╘╩╣╙├┤╦╣ж─▄!");
				return;
			}*/
				BankOpenReq();
	}

		else if(fn_str.CompareNoCase( "zonghebank") == 0)
		{
			if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
		     if(m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
			 if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
			 if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
			 if( m_bZoneLogOut ) return;
			if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
			if( m_sLevel < 10) return;
			/*if ( m_dwZaiXianTime ==0 )
			{
				SendEventMsg("╓╗╙╨╗с╘▒╙├╗з▓┼┐╔╥╘╩╣╙├┤╦╣ж─▄!");
				return;
			}*/
			
			AccountBankOpenReq(18);
		}
	    
		else if(fn_str.CompareNoCase( "emgc") == 0)
		{
			if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
		     if(m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
			 if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
			 if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
			 if( m_bZoneLogOut ) return;
			if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
			CheckDevilTime();
		}
		else if(fn_str.CompareNoCase( "pkds") == 0)
		{
			 if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
			 if(m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
			 if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
			 if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
			 if( m_bZoneLogOut ) return;
			if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
			CheckPKTime();
		}
//===============================================================================================================================
		 else if(fn_str.CompareNoCase( "maiyaoba") == 0)
		 {
			 if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
		     if(m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
			 if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
			 if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
			 if( m_bZoneLogOut ) return;
			 if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
			 
			 int iWeight = 0;
             int sid = -1;
             const int num = 1000;
			 
			 struct {
				 int id;
				 DWORD price;  
				 const char* name;
			} const potions[] = {
				{28, 50, "║ьA"},
				{29, 200, "║ьB"},
				{30, 500, "║ьC"},
				{994, 3000, "║ьD"}
			};
			int foundIndex = -1;
            bool hasMultiple = false;
			
			for(int i = 0; i < 4; i++) {
				
				if(FindItem(potions[i].id) > 0) 
				{
					if(foundIndex != -1)
					{
						hasMultiple = true;
						break;
					}
					foundIndex = i;
				}
			}
			if(foundIndex == -1 || hasMultiple)
			{
				SendEventMsg("╬┤╝ь▓т╡╜░№╣№║ь╥й,╗Є║ь╥й╓╓└р╠л╢р!");
				return;
			}
			sid = potions[foundIndex].id;
			const DWORD totalPrice = static_cast<DWORD>(num) * potions[foundIndex].price;

			// ╝ь▓щ╜Ё╟о
			if(m_dwDN < totalPrice) {
				SendEventMsg("├╗╙╨╫у╣╗╡─╜Ё╟о╣║┬Є");
				return;
			}

			iWeight = g_arItemTable[sid]->m_byWeight * num;
			if(m_iMaxWeight < m_iCurWeight + iWeight) {
				SendEventMsg("├╗╙╨╫у╣╗╡─╕║╓╪╣║┬Є");
				return;
			}

			// ┐█│¤╜Ё╟о
			m_dwDN = m_dwDN - totalPrice;
			UpdateUserItemDN();
			SendMoneyChanged();
			GiveItem(sid, num);
			
			char msg[100];
			sprintf(msg, "╣║┬Є%d╞┐%s,╗и╖╤%u╜Ё▒╥", 
            num, potions[foundIndex].name, totalPrice);
            SendEventMsg(msg);

		}
			
//================================================================================================================================
	
	else if( fn_str.CompareNoCase( "╖т║┼" ) == 0 )
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int nLength = strlen( fn );
		
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return;		// └▀╕°╡╚ └п└·╛╞└╠╡Ё 
		USER* pUser = GetUser(fn);
		
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;		
		if(strcmp(pUser->m_strUserID, m_strUserID) == 0) return;	// └┌▒т└┌╜┼└║ ╛╚╡╩
		
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)));
		int fenghaotime = atoi( fn );
		
		pUser->Closeuser(fenghaotime);
		sprintf(strOP,"%s,name=%s,time=%d","╖т║┼",m_strUserID,fenghaotime);
	}
	else if( fn_str.CompareNoCase( "╩═╖┼" ) == 0 )
	{
		if( m_tIsOP != 1 ) return;

		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );

		int nLength = strlen( fn );
		if(nLength <= 0 || nLength > CHAR_NAME_LENGTH) return;		// └▀╕°╡╚ └п└·╛╞└╠╡Ё 
		
		USER* pUser = GetUser(fn);
		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
		
		if(strcmp(pUser->m_strUserID, m_strUserID) == 0) return;	// └┌▒т└┌╜┼└║ ╛╚╡╩
		pUser->Fchuuser();
		sprintf(strOP,"%s,name=%s","╩═╖┼",m_strUserID);
	}
	
	else if(fn_str.CompareNoCase( "┬Ї┴╦░╔") == 0 )//D
	{	
		YJmzb();
				
	}
	else if(fn_str.CompareNoCase( "╫щ╢╙░╔") == 0)
	{
		USER *pUser = NULL;
		CBufferEx TempBuf;
		for(int i = 0; i < MAX_USER; i++ )
		{
			pUser = m_pCom->GetUserUid(i);
			if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;	
			if (pUser->m_bNowTrading == TRUE  ||  pUser->m_bPShopOpen == TRUE /*|| pUser->m_TuoJi==1*/) continue;
			if (pUser->m_bSessionOnline == TRUE) continue;
		//	int nLength = strlen( pUser->m_strUserID );
		//	if(nLength <= 0 || nLength > 20) continue;
			//if(m_curz != pUser->m_curz && !GetDistance( pUser->m_curx, pUser->m_cury, (SCREEN_X + SCREEN_Y) )) continue;//▓╗═м╡╪═╝▓╗┐╔╫щ╢╙
			int diffLevel = abs(m_sLevel - pUser->m_sLevel);
			if(diffLevel > 30) continue;
			if(m_curz ==1005 || m_curz == 92 || m_curz == 67 || m_curz == 61)continue;

			if(pUser->m_bMakeBuddy == TRUE)//╝╙╚ы╫щ╢╙
			{ 
				SendSystemMsg( "╒¤╘┌╬к─·╤░╒╥║╧╩╩╡─╢╙╬щ.", SYSTEM_ERROR, TO_ME);
				for(int j = 0; j < MAX_BUDDY_USER_NUM; j++)	
				{	
					if(pUser->m_MyBuddy[j].uid == -1)
					{	
						TempBuf.AddString(m_strUserID);
						pUser->BuddyUserChange(TempBuf,BUDDY_INVITE);	
						return;
					}
				}
			}
			else if(pUser->m_bNowBuddy == FALSE)//┤┤╜и╨┬╫щ╢╙	
			{
				//SendSystemMsg( "┤┤╜и╢╙╬щ│╔╣ж!", SYSTEM_ERROR, TO_ME);
				TempBuf.AddString(pUser->m_strUserID);
				BuddyUserChange(TempBuf,BUDDY_INVITE);
				return;
			}
		}
	}
	
	else if(fn_str.CompareNoCase( "╛Ў╒╜▒╥") == 0){
		CString strTemp;
		strTemp.Format("─у╧╓╘┌╛Ў╒╜▒╥╩¤┴┐╬к %d", m_dwDN);
		SendSystemMsg( strTemp.GetBuffer(), SYSTEM_NORMAL, TO_ME);

	}else if(fn_str.CompareNoCase( o_yehuoini[0]->MONEY ) == 0 )
	{	
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
		int num = atoi( fn );

		if( m_tIsOP != 1 ) return; 

		if ( num <= 0 || num >2100000000 )
		{
			SendEventMsg("╟ы╒¤╚╖╩ф╚ы╜Ё╟о╩¤┴┐");
			return;
		}
		GiveDN(num);
		CString str;
		str.Format( "─у╦в│Ў╛Ў╒╜▒╥ %d", num);
        SendEventMsg(str.GetBuffer(0));
	}
		
	else if(fn_str.CompareNoCase("┐к▒й┬╩") == 0 )
	{
		if( m_tIsOP != 1 ) return;
		g_sanBaoLv = TRUE;
		USER *pUser = NULL;
		for (int i = 0; i < MAX_USER; i++ )
		{
			pUser = m_pCom->GetUserUid(i);
			if(pUser && pUser->m_state == STATE_GAMESTARTED )
			{
				pUser->SetXingYun();
			}
		}
		SendSystemMsg("╧╓╘┌╚л╖■┐к╞Ї╚¤▒╢▒й┬╩╗ю╢п╗╞╜Ё╩▒╢╬,╙╔╘н└┤▒й2╝■╠с╔¤╡╜▒й3╝■╬я╞╖.╫г┤є╝╥╙╬╧╖╙ф┐ь!",SYSTEM_ANNOUNCE,TO_ALL);
	}
	else if(fn_str.CompareNoCase( "╣╪▒й┬╩") == 0 )
	{
		if( m_tIsOP != 1 ) return;
		g_sanBaoLv = FALSE;
		USER *pUser = NULL;
		for (int i = 0; i < MAX_USER; i++ )
		{
			pUser = m_pCom->GetUserUid(i);
			if(pUser && pUser->m_state == STATE_GAMESTARTED )
			{
				pUser->DelXingYun();
			}
		}
	}
	else if(fn_str.CompareNoCase("┐к╚¤▒╢") == 0 )
	{
		if( m_tIsOP != 1 ) return;
		g_sanJingYan = TRUE;
		USER *pUser = NULL;
		for (int i = 0; i < MAX_USER; i++ )
		{
			pUser = m_pCom->GetUserUid(i);
			if(pUser && pUser->m_state == STATE_GAMESTARTED )
			{
				pUser->SetXingfen();
			}
		}
		SendSystemMsg("╧╓╘┌╚л╖■┐к╞Ї╚¤▒╢╛н╤щ╗ю╢п╩▒╢╬,╚л╖■┤Є╣╓╛н╤щ╠с╔¤3▒╢.╫г┤є╝╥╙╬╧╖╙ф┐ь!",SYSTEM_ANNOUNCE,TO_ALL);
	}
	else if(fn_str.CompareNoCase( "╣╪╚¤▒╢") == 0 )
	{
		if( m_tIsOP != 1 ) return;
		g_sanJingYan = FALSE;
		USER *pUser = NULL;
		for (int i = 0; i < MAX_USER; i++ )
		{
			pUser = m_pCom->GetUserUid(i);
			if(pUser && pUser->m_state == STATE_GAMESTARTED )
			{
				pUser->DelXingfen();
			}
		}
	}
	else if(fn_str.CompareNoCase( "╫к╓░") == 0 )
	{
		if(m_tIsOP != 1) 
			return;
		ChangeJob(4,1000);
	}
	else if(fn_str.CompareNoCase( "╫╘╛╚") == 0 )//╟х└э─з╖и
	{	

		if(m_tIsOP != 1) return;

		m_nHavePsiNum = 0;

	   for(i = 0; i < TOTAL_PSI_NUM; i++)					
	   {
		m_UserPsi[i].sSid = -1;
		m_UserPsi[i].tOnOff = FALSE;
	    }
	    SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// || 
        SendCharData();
	}else if(fn_str.CompareNoCase( "┤є╒╓") == 0 )//╕°╕Ў┤є╒╓
	{	

		if(m_tIsOP != 1) return;
        StudyNewJobPsi(30);
	} 
	else if(fn_str.CompareNoCase( "1") == 0 )//▓т╩╘─з╖и
	{	
		if(m_tIsOP != 1) 
			return;
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );	
		int z = atoi( fn );
		SendPsiAttackResult(SUCCESS, m_uid + USER_BAND, z);
	}	
	else if(fn_str.CompareNoCase( "upopen") == 0 )
	{	
		if(m_tIsOP != 1) 
			return;
        index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
		int z = atoi( fn );
		UpgradeItemOpen(z);
	}

    else if(fn_str.CompareNoCase( "say") == 0 )//╖╜▒у═╤╗·║░╣л╕ц
	{
		if(m_tIsOP != 1) 
			return;
		index += ParseSpaceInUser( fn, pBuf+index, min(sizeof(fn), strlen(pBuf+index)) );
		CString str;
	    str.Format( "%s", fn);
	    SendSystemMsg(str.GetBuffer(0),SYSTEM_ANNOUNCE,TO_ALL);
	}
	if( m_tIsOP == 1 )
    {
    WriteOpratorLog(strOP,CHAT_LOG);//yskang 0.4
	}
}
bool USER::CheckShoppingDN(int needDN)//┐█▒ъ╓╛
{
	if( (FindItem( 724) - needDN ) >=0)
	{
		RobItem(724,needDN);	
		return true;
	}
	else
	{ 
		return false;	
	}
	return false;
}
void USER::BuyOnlineShopItem(short id,short num)
{
	bool need_DN = false; 
	bool OnlineShopNull = false;

	short price,onNum;		
	bool isNullSlot = false;
	for(int isl = 10; isl < 34;isl++)
	{
		if(m_UserItem[isl].sSid == -1)	
		{
			isNullSlot = true;
			break;
		}
	} 
	if(isNullSlot)
	{
		for(int i = 0; i < g_arOnlineShopTable.GetSize();i++)
		{
			OnlineShopNull = false;
			if(id == g_arOnlineShopTable[i]->m_iSid)
			{
				price = g_arOnlineShopTable[i]->m_price;
				onNum = (g_arOnlineShopTable[i]->m_iNum * num);
				int iCost = (int)(g_arOnlineShopTable[i]->m_price * 0.9);//VIP╘┌╘н╗∙┤б╔╧X9╒█
				DWORD dwCast= (price-iCost)*num;//╙┼╗▌╓╡//(price*num)-(iCost*num);
			  if(m_dwZaiXianTime > 0)//╚ч╣√╩╟VIP╣║╬я9╒█
			  {
                if(CheckShoppingDN(iCost*num))
				{
					GiveItemAll(g_arOnlineShopTable[i]->m_iSid,onNum,g_arOnlineShopTable[i]->m_upgrade,
					g_arOnlineShopTable[i]->m_sx1,g_arOnlineShopTable[i]->m_sx2,g_arOnlineShopTable[i]->m_sx3,
					g_arOnlineShopTable[i]->m_sx4,g_arOnlineShopTable[i]->m_sx5,g_arOnlineShopTable[i]->m_sx6,
					g_arOnlineShopTable[i]->m_sx7,g_arOnlineShopTable[i]->m_sx8,g_arOnlineShopTable[i]->m_sx9,
					g_arOnlineShopTable[i]->m_sx10);
					SendUserStatusSkill();
					CString strMsg= "";
					strMsg.Format("VIP╣║╬я9╒█,╣║[%s]┐█%d▒ъ╓╛,╜┌╩б%d▒ъ╓╛",g_arOnlineShopTable[i]->m_iSname,iCost*num,dwCast);
					SendSystemMsg( (LPTSTR)(LPCTSTR)strMsg,SYSTEM_ERROR,TO_ME);
					CString strTemp;
					strTemp.Format( "─·╡─▒ъ╓╛╩г╙р╩¤┴┐╬к: %d ╕Ў", FindItem(724));
					SendSystemMsg( strTemp.GetBuffer(), SYSTEM_NORMAL, TO_ME);		

					
					WriteOnlineShop_Log(m_strUserID,g_arOnlineShopTable[i]->m_iSname,price*num,onNum,g_arOnlineShopTable[i]->m_upgrade,
					g_arOnlineShopTable[i]->m_sx1,g_arOnlineShopTable[i]->m_sx2,g_arOnlineShopTable[i]->m_sx3,
					g_arOnlineShopTable[i]->m_sx4,g_arOnlineShopTable[i]->m_sx5,g_arOnlineShopTable[i]->m_sx6,
					g_arOnlineShopTable[i]->m_sx7,g_arOnlineShopTable[i]->m_sx8,g_arOnlineShopTable[i]->m_sx9,
					g_arOnlineShopTable[i]->m_sx10);					
				}
				else need_DN = true;
				break;
			  } 
			  else
			  if(CheckShoppingDN(price*num))
				{
					GiveItemAll(g_arOnlineShopTable[i]->m_iSid,onNum,g_arOnlineShopTable[i]->m_upgrade,
					g_arOnlineShopTable[i]->m_sx1,g_arOnlineShopTable[i]->m_sx2,g_arOnlineShopTable[i]->m_sx3,
					g_arOnlineShopTable[i]->m_sx4,g_arOnlineShopTable[i]->m_sx5,g_arOnlineShopTable[i]->m_sx6,
					g_arOnlineShopTable[i]->m_sx7,g_arOnlineShopTable[i]->m_sx8,g_arOnlineShopTable[i]->m_sx9,
					g_arOnlineShopTable[i]->m_sx10);
					SendUserStatusSkill();
					CString strMsg= "";
					strMsg.Format("╣║┬Є [%s] ╝ї╔┘%d▒ъ╓╛,╜┌╩б0▒ъ╓╛.",g_arOnlineShopTable[i]->m_iSname,price*num);
					SendSystemMsg( (LPTSTR)(LPCTSTR)strMsg,SYSTEM_ERROR,TO_ME);
					CString strTemp;
					strTemp.Format( "─·╡─▒ъ╓╛╩г╙р╩¤┴┐╬к: %d ╕Ў", FindItem(724));
					SendSystemMsg( strTemp.GetBuffer(), SYSTEM_NORMAL, TO_ME);		

					
					WriteOnlineShop_Log(m_strUserID,g_arOnlineShopTable[i]->m_iSname,price*num,onNum,g_arOnlineShopTable[i]->m_upgrade,
					g_arOnlineShopTable[i]->m_sx1,g_arOnlineShopTable[i]->m_sx2,g_arOnlineShopTable[i]->m_sx3,
					g_arOnlineShopTable[i]->m_sx4,g_arOnlineShopTable[i]->m_sx5,g_arOnlineShopTable[i]->m_sx6,
					g_arOnlineShopTable[i]->m_sx7,g_arOnlineShopTable[i]->m_sx8,g_arOnlineShopTable[i]->m_sx9,
					g_arOnlineShopTable[i]->m_sx10);					
				}
				else need_DN = true;
				break;
			
			}	
			else	OnlineShopNull = true;
		}
	}
	else
	{		
		SendNpcSay(NULL, 512);
	}
	if(OnlineShopNull)
		SendSystemMsg(IDS_NOT_HAVING_ITEM,SYSTEM_ERROR,TO_ME);
	if(need_DN)
		SendSystemMsg(IDS_SHOPDN_ERROR,SYSTEM_ERROR,TO_ME);	
}
int USER::RandChouJiang()
{
/*	if(!CheckShoppingDN(200)) 
	{
		SendSystemMsg("╘к▒ж▓╗╫у,▓╬╝╙│щ╜▒╨ш╥к200╘к▒ж.",SYSTEM_ERROR,TO_ME);
		return 3;
	}*/
//	if(m_dwRandNum > 0)
//	{
			bool isNullSlot = false;
			for(int isl = 10; isl < 34;isl++)
			{
				if(m_UserItem[isl].sSid == -1)	
				{
					isNullSlot = true;
					break;
				}
			} 
			if(isNullSlot)
			{
				int sum = g_arKaixiangziTable.GetSize();
				int i = myrand(0, sum-1);
				CString RandName = g_arKaixiangziTable[i]->m_iSname;
				short onNum = g_arKaixiangziTable[i]->m_iNum;
				/*char sendMsg[200] = "";
				strcat_s(sendMsg,"┤╙▒ж╧ф");
				strcat_s(sendMsg," ╗ё╡├:");
				strcat_s(sendMsg,RandName);								
				CBufferEx	TempBuf;
				TempBuf.Add((byte)0x1f);
				TempBuf.Add((byte)1);
				TempBuf.Add((byte)0x25);
				TempBuf.Add((DWORD)0);
		        TempBuf.AddString(m_strUserID);
				TempBuf.AddString(sendMsg);
				SendAll(TempBuf, TempBuf.GetLength());	*/
//////////////////////////╧┬├ц┴─╠ь╧╘╩╛╨┼╧в┐к╩╝/////////////////////////////////////////////////////////////////////
				
				CString strMsg = _T("");
                strMsg.Format( "%s ┤Є┐к╣з╧▓╖в▓╞╗ё╡├ [%s╕Ў]", m_strUserID,g_arKaixiangziTable[i]->m_iSname);
				SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE,TO_ALL);
//////////////////////////╔╧├ц┴─╠ь╧╘╩╛╨┼╧в╜с╩°//////////////////////////////////////////////////////////////////////
///////////////////////////┐█╡Ї┐к╧ф╦∙╨ш╟о╩¤///////////////////////////////////////////
			//	if( m_dwDN <= 500000 ) m_dwDN = 0;
		      //  else m_dwDN = m_dwDN - 500000;
		       // UpdateUserItemDN();						
		        //SendMoneyChanged();	
///////////////////////////┐█╡Ї┐к╧ф╦∙╨ш╟о╩¤///////////////////////////////////////////
				GiveItemAll(g_arKaixiangziTable[i]->m_iSid,onNum,g_arKaixiangziTable[i]->m_upgrade,
							g_arKaixiangziTable[i]->m_sx1,g_arKaixiangziTable[i]->m_sx2,g_arKaixiangziTable[i]->m_sx3,
							g_arKaixiangziTable[i]->m_sx4,g_arKaixiangziTable[i]->m_sx5,g_arKaixiangziTable[i]->m_sx6,
							g_arKaixiangziTable[i]->m_sx7,g_arKaixiangziTable[i]->m_sx8,g_arKaixiangziTable[i]->m_sx9,
							g_arKaixiangziTable[i]->m_sx10);
			    return 1;
			}
			else
			{
				SendNpcSay(NULL, 512);	
				return 2;
			}
//	}
//	return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	└╠║е╞о ╗є╟░▒╟└╗ ╚╕╝Ў╟╤┤┘.
//
int USER::FindInventItem(int sid)
{
	for(int i=EQUIP_ITEM_NUM;i<TOTAL_INVEN_MAX;i++){
		if(sid==m_UserItem[i].sSid)
			return i;
	}
	return -1;
}
//╩╟╖ё╗·╨╡╔э╠х
BOOL USER::IsEbodyItem(int sSid)
{
	int i,nCount = g_arEBodyIdentifyTable.GetSize();
	for(i = 0;i<nCount;i++)
	{
		if(sSid == g_arEBodyIdentifyTable[i]->m_sSid)
			return TRUE;
	}
	if(sSid == 987)
		return TRUE;
	return FALSE;
}

//╩╟╖ё╬к│м╝╢╗·╨╡╔э╠х
BOOL USER::IsSuperEbodyItem(int sSid)
{
	//1247-1252═╖
	//1253-1267╥┬╖■
	//1268-1270╩╓▒█
	//1271-1276┐у╫╙
	//1277 ═╖
	short sEbodyID[]={877,878,879,880,881,883,//═╖
		884,885,886,887,888,889,890,891,892,893,890,891,892,893,
		894,895,896,897,898,899,987,
		901,902,903,904,905,906};
	short sConvertEbodyID[]={1247,1248,1249,1250,1251,1252,//═╖
		1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,
		1268,1269,1270,1268,1269,1269,1270,
		1271,1272,1273,1274,1275,1276};
	//short sConvertEbodyID[]={1270,1247,1257,1268,1272,1258,1265,1273,1254,1269,1274,1251,1259,1266,1275,
	//	1250,1260,1267,1276,1253,1264,1249,1255,1256,1248,1261,1262,1277,1252};

	int nECount = sizeof(sConvertEbodyID)/sizeof(sConvertEbodyID[0]);
	int i;
	for(i = 0;i<nECount;i++)
	{
		if(sSid == sConvertEbodyID[i])
		{
			return TRUE;
		}
	}
	return FALSE;
}								
BOOL USER::OpenOnShop()
{
	/*CString strTemp;
	strTemp.Format( "─·╡─╛Ў╒╜▒╥╩¤┴┐╬к: %d ╕Ў", m_dwDN);
	SendSystemMsg( strTemp.GetBuffer(), SYSTEM_NORMAL, TO_ME);		*/
	
	CBufferEx TempBuf;
	int i = 0;
	DWORD dwCost = 0;

	TempBuf.Add(STORE_OPEN);
	TempBuf.Add((short)50);
	TempBuf.Add((short)0);
	TempBuf.Add((short)(g_arOnlineShopTable.GetSize()));

	for(i = 0; i < g_arOnlineShopTable.GetSize(); i++)
	{
		TempBuf.Add(g_arOnlineShopTable[i]->m_iSid);
		dwCost = (DWORD)g_arOnlineShopTable[i]->m_price;
		TempBuf.Add(dwCost);			
	}

	Send(TempBuf, TempBuf.GetLength());
	return TRUE;
}
//////////////////////////////////////////////////////////////
///////////░┘╝╢╫░▒╕╗╣╘н
BOOL USER::HuanYuan100()
{ //╗╣╘н░┘╝╢
	int sSid= -1;	
	int index=0;
 	sSid = m_UserItem[33].sSid;	
	if(sSid != 1053 && sSid != 1089 && sSid != 1054 && sSid != 1055 && sSid != 1056 && sSid != 1090 && 
	    sSid != 1091 && sSid != 1092 && sSid != 1065 && sSid != 1066 && sSid != 1067 && sSid != 1068 &&
	    sSid != 1057 && sSid != 1058 && sSid != 1059 && sSid != 1060 && sSid != 1069 && sSid != 1070 &&
	    sSid != 1071 && sSid != 1072 && sSid != 1061 && sSid != 1062 && sSid != 1063 && sSid != 1064 &&
	    sSid != 1082 && sSid != 1083 && sSid != 1084 && sSid != 1073 && sSid != 1074 && sSid != 1075 &&
	    sSid != 1076 && sSid != 1085 && sSid != 1086 && sSid != 1087 && sSid != 1088 && sSid != 1077 &&
	    sSid != 1078 && sSid != 1079 && sSid != 1080 && sSid != 1081 && sSid != 1709 && sSid != 1710 &&
		sSid != 1711 && sSid != 1712 && sSid != 1713 && sSid != 1714 && sSid != 1715 && sSid != 1716|| sSid == -1)
	{
    SendSystemMsg( "╟ы░╤╥к╗╣╘н╡─░┘╝╢╫░▒╕╖┼╬я╞╖└╕╫ю║є╥╗╨╨╫ю║є╥╗╕ё", SYSTEM_ERROR, TO_ME);
		return FALSE;
	}	
    
	CUIntArray arMaterial;	
	arMaterial.Add(33);	
	{
		ItemList	TempItem;
		TempItem = m_UserItem[33];	
		ReSetItemSlot(&m_UserItem[33]);
		m_UserItem[33] = TempItem;
		switch(sSid)
		{
		case 1053:
			m_UserItem[33].sSid = 343;
			break;
		case 1089:
			m_UserItem[33].sSid = 373;
			break;
		case 1054:
			m_UserItem[33].sSid = 530;
			break;
		case 1055:
			m_UserItem[33].sSid = 531;
			break;
		case 1056:
			m_UserItem[33].sSid = 532;
			break;
		case 1090:
			m_UserItem[33].sSid = 620;
			break;
		case 1091:
			m_UserItem[33].sSid = 621;
			break;
		case 1092:
			m_UserItem[33].sSid = 622;
			break;
		case 1065:
			m_UserItem[33].sSid = 757;
			break;
		case 1066:
			m_UserItem[33].sSid = 758;
			break;
		case 1067:
			m_UserItem[33].sSid = 759;
			break;
		case 1068:
			m_UserItem[33].sSid = 760;
			break;
		case 1057:
			m_UserItem[33].sSid = 761;
			break;
		case 1058:
			m_UserItem[33].sSid = 762;
			break;
		case 1059:
			m_UserItem[33].sSid = 763;
			break;
		case 1060:
			m_UserItem[33].sSid = 764;
			break;
		case 1069:
			m_UserItem[33].sSid = 765;
			break;
		case 1070:
			m_UserItem[33].sSid = 766;
			break;
		case 1071:
			m_UserItem[33].sSid = 767;
			break;
		case 1072:
			m_UserItem[33].sSid = 768;
			break;
		case 1061:
			m_UserItem[33].sSid = 769;
			break;
		case 1062:
			m_UserItem[33].sSid = 770;
			break;
		case 1063:
			m_UserItem[33].sSid = 771;
			break;
		case 1064:
			m_UserItem[33].sSid = 772;
			break;
		case 1082:
			m_UserItem[33].sSid = 775;
			break;
		case 1083:
			m_UserItem[33].sSid = 776;
			break;
		case 1084:
			m_UserItem[33].sSid = 777;
			break;
		case 1073:
			m_UserItem[33].sSid = 778;
			break;
		case 1074:
			m_UserItem[33].sSid = 779;
			break;
		case 1075:
			m_UserItem[33].sSid = 780;
			break;
		case 1076:
			m_UserItem[33].sSid = 781;
			break;
		case 1085:
			m_UserItem[33].sSid = 782;
			break;
		case 1086:
			m_UserItem[33].sSid = 783;
			break;
		case 1087:
			m_UserItem[33].sSid = 784;
			break;
		case 1088:
			m_UserItem[33].sSid = 785;
			break;
		case 1077:
			m_UserItem[33].sSid = 786;
			break;
		case 1078:
			m_UserItem[33].sSid = 787;
			break;
		case 1079:
			m_UserItem[33].sSid = 788;
			break;
		case 1080:
			m_UserItem[33].sSid = 789;
			break;
		case 1081:
			m_UserItem[33].sSid = 797;
			break;
		case 1709:
			m_UserItem[33].sSid = 1701;
			break;
		case 1710:
			m_UserItem[33].sSid = 1702;
			break;
		case 1711:
			m_UserItem[33].sSid = 1703;
			break;
		case 1712:
			m_UserItem[33].sSid = 1704;
			break;
		case 1713:
			m_UserItem[33].sSid = 1705;
			break;
		case 1714:
			m_UserItem[33].sSid = 1706;
			break;
		case 1715:
			m_UserItem[33].sSid = 1707;
			break;
		case 1716:
			m_UserItem[33].sSid = 1708;
			break;
		}
        m_UserItem[33].tMagic[10] = 0;//═м╩▒╚е│¤╗├╡┌5┼┼
		m_UserItem[33].tMagic[9] = 0;//═м╩▒╚е│¤╗├╡┌4┼┼
		m_UserItem[33].tMagic[8] = 0;//═м╩▒╚е│¤╗├╡┌3┼┼
		m_UserItem[33].tMagic[7] = 0;//═м╩▒╚е│¤╗├╡┌2┼┼
        m_UserItem[33].tMagic[6] = 0;//═м╩▒╚е│¤╗├╡┌1┼┼
		m_UserItem[33].tMagic[5] = 0;//═м╩▒╚е│¤╕─╩¤
		m_UserItem[33].tMagic[4] = 0;//═м╩▒╚е│¤╕─╩¤
		m_UserItem[33].tIQ = 3;
		
	}		

	CBufferEx TempBuf;
	int i,j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = arMaterial.GetSize();
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)index);
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());
	FlushItemLog( TRUE );
	return TRUE;
}
//////////////////////////////////////////////////////////////
///////////130╫░▒╕╗╣╘н
BOOL USER::HuanYuan130()
{ //╗╣╘н130
	int sSid= -1;	
	int index=0;
 	sSid = m_UserItem[33].sSid;	
	if(  (sSid != 1199 && sSid != 1200 && sSid != 1201 && sSid != 1202 &&
		 sSid != 1203 && sSid != 1204 && sSid != 1205 && sSid != 1206  &&
		 sSid != 1207 && sSid != 1208 && sSid != 1209 && sSid != 1210  &&
		 sSid != 1211 && sSid != 1212 && sSid != 1213 && sSid != 1214 ) || sSid == -1)
	{
    SendSystemMsg( "╟ы░╤╥к╗╣╘н╡─130╝╢╫░▒╕╖┼╬я╞╖└╕╫ю║є╥╗╨╨╫ю║є╥╗╕ё", SYSTEM_ERROR, TO_ME);
		return FALSE;
	}	
    
	CUIntArray arMaterial;	
	arMaterial.Add(33);	
	{
		ItemList	TempItem;
		TempItem = m_UserItem[33];	
		ReSetItemSlot(&m_UserItem[33]);
		m_UserItem[33] = TempItem;
		switch(sSid)
		{
		case 1199: //├▒╫╙
	    case 1203:
		case 1207:
	    case 1211:
			m_UserItem[33].sSid = 1056;
			break;
			 
        
		case 1202:   //╨м╫╙
		case 1206:
		case 1210:
		case 1214:
	        m_UserItem[33].sSid = 1092;
			break;
	 
		//case 1200:
		//	m_UserItem[33].sSid = 1060;
		//	break;

	    case 1200:  //╥┬╖■
		  m_UserItem[33].sSid = 1060;
		  break;

        case 1204:  //╥┬╖■
			 m_UserItem[33].sSid = 1068;
			 break;

		case 1208:    //╥┬╖■
			 m_UserItem[33].sSid = 1076;
			 break;

		case 1212:   //╥┬╖■
			 m_UserItem[33].sSid = 1084;
			 break;


	    case 1201:   //┐у╫╙
			 m_UserItem[33].sSid = 1064;
			 break;

        case 1205:   //┐у╫╙
			 m_UserItem[33].sSid = 1072;
			 break;

		case 1209:   //┐у╫╙
			 m_UserItem[33].sSid = 1080;
			 break;

		case 1213:  //┐у╫╙
			 m_UserItem[33].sSid = 1088;
			 break;

    }
   //     m_UserItem[33].tMagic[6] = 0;//═м╩▒╚е│¤╡┌6┼┼
//		m_UserItem[33].tMagic[5] = 0;
		m_UserItem[33].tIQ = 12;
		
	}		

	CBufferEx TempBuf;
	int i,j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = arMaterial.GetSize();
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)index);
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());
	FlushItemLog( TRUE );
	return TRUE;
}
/////////////////////////////////////////////////////////////////////////////
//╝р└╬
//
void USER::Closeuser(int ftime)
{
	CString strMsg= "";
	strMsg.Format( "─у╩▄╡╜╖т║┼%d╖╓╓╙╡─┤ж╖г!!!", ftime );
	SendSystemMsg( (LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME );
	m_dwCloseTime = (60 * ftime * 1000);
	AddAbnormalInfo(ABNORMAL_JIANYU);
	m_curz = 402;
	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());
	SendInsight(TempBuf, TempBuf.GetLength());
}
/////////////////////////////////////////////////////////////////////////////
//╝р└╬
//
void USER::Fchuuser()
{
	m_dwCloseTime = 0;
	DeleteAbnormalInfo(ABNORMAL_JIANYU);
	SendSystemMsg("┤╙╝р╙№╓╨╩═╖┼!!",SYSTEM_NORMAL,TO_ME);
	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());
	SendInsight(TempBuf, TempBuf.GetLength());
}
void USER::FengSiNi()
{
	m_dwCloseTime = 3600*10*1000;
	AddAbnormalInfo(ABNORMAL_JIANYU);
	m_curz = 402;
	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());
	SendInsight(TempBuf, TempBuf.GetLength());
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	└╠║е╞о ╗є╟░▒╟└╗ ╚╕╝Ў╟╤┤┘.
//
void USER::EventUpgradeItemReq(TCHAR *pBuf)
{
	short sSid = 0;
	int index = 0, j;
	int event = 0, iWeight = 0;
	int event_index = -1;

	int iIQ = 0, upgrade_num = 0;

	BOOL bSuccess = TRUE;

	CBufferEx TempBuf;

	BYTE tEventSlot = GetByte(pBuf, index);				// └╠║е╞о ╗є╟░▒╟ ╜╜╖╘
	BYTE tItemSlot = GetByte(pBuf, index);				// ╛ў▒█╟╧▒т└з╟╤ ╟╪┤ч ╜╜╖╘ 

	if(tEventSlot < EQUIP_ITEM_NUM || tEventSlot >= TOTAL_INVEN_MAX) goto go_result;
	if(tItemSlot < EQUIP_ITEM_NUM || tItemSlot >= TOTAL_INVEN_MAX) goto go_result;

	sSid = m_UserItem[tEventSlot].sSid;
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) goto go_result;

	sSid = m_UserItem[tItemSlot].sSid;
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) goto go_result;

	if(g_arItemTable[sSid]->m_sDuration <= 0) goto go_result;		// │╗▒╕╡╡░б ╛°└╕╕щ ░┼║╬		
	if(m_UserItem[tItemSlot].tIQ != NORMAL_ITEM) goto go_result;	// └╧╣▌ ╛╞└╠┼█╕╕ ╟╤┤┘.
	if(m_UserItem[tItemSlot].tMagic[5] > 0) goto go_result;			// ╛ў▒╫╖╣└╠╡х ╛╞└╠┼█╡╡ ╛╚╡╚┤┘.

	iIQ = (int)m_UserItem[tEventSlot].tIQ;

	if(g_arItemTable[sSid]->m_byWear == ATTACK_ITEM)	// ░°░▌┐ы ╣л▒т
	{
		if(m_UserItem[tEventSlot].tIQ < EVENT_ITEM_BAND) goto go_result;
		if(iIQ != 240 && iIQ != 244 && iIQ != 242 && iIQ != 246 && iIQ != 248 &&
		iIQ != 101 && iIQ != 103 && iIQ != 204 && iIQ != 105 && iIQ != 107) goto go_result;

		event = CheckEventItem(event_index, (int)tEventSlot);
		if(event < 0)
		{
			TRACE("CANT FIND CHANGE OF ARMS\n");
//			SendSystemMsg( IDS_USER_NO_CHANGE_THIS, SYSTEM_ERROR, TO_ME);
//			goto go_result;								// ╜├╕о╛є ╣°╚г░б ╞▓╕о┤┘.
		}

		if(event_index < 0) 
		{
			TRACE("╣л▒т ▒│╚п▒╟└╗ ├г└╗╝Ў░б ╛°┤┘.\n");
//			goto go_result;
		}
																	// ╚д╜├│к ┬╩│к┤┬░═└╗ ╣ц┴Ў╟╧▒т └з╟╪
//		if(InterlockedCompareExchange(&g_arEventItemTable[event]->m_lUsed, (LONG)1, (LONG)0) == 0)
//		{
		if(!UpdateEventItem(event))
		{
			TRACE("╣л▒т ╛ў╡л ╜╟╞╨\n");
//			InterlockedExchange(&g_arEventItemTable[event_index]->m_lUsed, 0);
//			InterlockedExchange(&g_arAddEventItemTable[event_index]->m_lUsed, 0);
//			goto go_result;
		}

//		g_arAddEventItemTable[event_index]->m_tGiveItem = 1;				// ╕ё╖╧┐б╝н ╝┬╞├
//		CEventItemTable *pEvent = g_arAddEventItemTable[event_index];
		switch(iIQ)
		{
		case EVENT_ATT7_ITEM:
			upgrade_num = 7;
			break;
		case EVENT_ATT6_ITEM:
			upgrade_num = 6;
			break;
		case EVENT_ATT_ITEM:
			upgrade_num = 5;
			break;
		case EVENT_ATT4_ITEM:
			upgrade_num = 4;
			break;
		case EVENT_ATT3_ITEM:
			upgrade_num = 3;
			break;
		}

		m_UserItem[tItemSlot].tMagic[4] = ATTACK_UPGRADE_BAND * upgrade_num;
		m_UserItem[tItemSlot].tMagic[5] = upgrade_num;	// ╕╢┴Ў╕╖ ╜╜╖╘┐б ╝║░°╚╜╝Ў╕ж ┴ї░б ╜├┼▓┤┘.

		MakeItemLog( &m_UserItem[tItemSlot], ITEMLOG_UPGRADE_SUCCESS );
					
		bSuccess = FALSE;
		iWeight = g_arItemTable[m_UserItem[tEventSlot].sSid]->m_byWeight;
		ReSetItemSlot(&m_UserItem[tEventSlot]);
//		}
	}
	else
	{
		if(m_UserItem[tEventSlot].tIQ < EVENT_ITEM_BAND) goto go_result;
		if(iIQ != 241 && iIQ != 245 && iIQ != 243 && iIQ != 247 && iIQ != 249 &&
		iIQ != 102 && iIQ != 104 && iIQ != 203 && iIQ != 106 && iIQ != 108) goto go_result;

		event = CheckEventItem(event_index, (int)tEventSlot);
		if(event < 0)
		{
			TRACE("╣ц╛ю ▒│╚п▒╟└╗ ├г└╗╝Ў░б ╛°┤┘.\n");
//			SendSystemMsg( IDS_USER_NO_CHANGE_THIS, SYSTEM_ERROR, TO_ME);
//			goto go_result;								// ╜├╕о╛є ╣°╚г░б ╞▓╕о┤┘.
		}

		if(event_index < 0) 
		{
			TRACE("╣ц╛ю ▒│╚п▒╟└╗ ├г└╗╝Ў░б ╛°┤┘.\n");
//			goto go_result;
		}
																	// ╚д╜├│к ┬╩│к┤┬░═└╗ ╣ц┴Ў╟╧▒т └з╟╪
//		if(InterlockedCompareExchange(&g_arEventItemTable[event]->m_lUsed, (LONG)1, (LONG)0) == 0)
//		{
		if(!UpdateEventItem(event))
		{
			TRACE("╣ц╛ю ╛ў╡л ╜╟╞╨\n");
//			InterlockedExchange(&g_arEventItemTable[event_index]->m_lUsed, 0);
//			InterlockedExchange(&g_arAddEventItemTable[event_index]->m_lUsed, 0);
//			goto go_result;
		}

//		g_arEventItemTable[event_index]->m_tGiveItem = 1;				// ╕ё╖╧┐б╝н ╝┬╞├
//		g_arAddEventItemTable[event_index]->m_tGiveItem = 1;				// ╕ё╖╧┐б╝н ╝┬╞├
		switch(iIQ)
		{
		case EVENT_DEF7_ITEM:
			upgrade_num = 7;
			break;
		case EVENT_DEF6_ITEM:
			upgrade_num = 6;
			break;
		case EVENT_DEF_ITEM:
			upgrade_num = 5;
			break;
		case EVENT_DEF4_ITEM:
			upgrade_num = 4;
			break;
		case EVENT_DEF3_ITEM:
			upgrade_num = 3;
			break;
		}
		m_UserItem[tItemSlot].tMagic[4] = DEFENSE_UPGRADE_BAND * upgrade_num;
		m_UserItem[tItemSlot].tMagic[5] = upgrade_num;	// ╕╢┴Ў╕╖ ╜╜╖╘┐б ╝║░°╚╜╝Ў╕ж ┴ї░б ╜├┼▓┤┘.

		MakeItemLog( &m_UserItem[tItemSlot], ITEMLOG_UPGRADE_SUCCESS );

		bSuccess = FALSE;
		iWeight = g_arItemTable[m_UserItem[tEventSlot].sSid]->m_byWeight;
		ReSetItemSlot(&m_UserItem[tEventSlot]);
//		}
	}

	FlushItemLog( TRUE );

go_result:
	TempBuf.Add(UPGRADE_ITEM_RESULT);

	if(bSuccess)
	{
		TempBuf.Add((BYTE)0x00); //╜╟╞╨
	}
	else TempBuf.Add((BYTE)0x01);				// ╝║░°

	TempBuf.Add((BYTE)0x02);				// ╜╜╖╘ 2░│░б ║п╡┐

	TempBuf.Add(tItemSlot);					// ┴╓ ╛╞└╠┼█╕ж ╕╒└· 	
	TempBuf.Add(m_UserItem[tItemSlot].sLevel);
	TempBuf.Add(m_UserItem[tItemSlot].sSid);
	TempBuf.Add(m_UserItem[tItemSlot].sDuration);
	TempBuf.Add(m_UserItem[tItemSlot].sBullNum);
	TempBuf.Add(m_UserItem[tItemSlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[tItemSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[tItemSlot].tIQ); 

	TempBuf.Add(tEventSlot);
	TempBuf.Add(m_UserItem[tEventSlot].sLevel);
	TempBuf.Add(m_UserItem[tEventSlot].sSid);
	TempBuf.Add(m_UserItem[tEventSlot].sDuration);
	TempBuf.Add(m_UserItem[tEventSlot].sBullNum);
	TempBuf.Add(m_UserItem[tEventSlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[tEventSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[tEventSlot].tIQ); 

	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	UpdateUserItemDN();

	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...

	Send(TempBuf, TempBuf.GetLength());
}

int USER::CheckEventItem(int &index, int iSlot, BOOL bPotion)
{	
	int i, j;
	int nNum = 0;
	CString strTemp;
	CString strSerial = _T("");

	for(j = 0; j < MAGIC_NUM; j++)
	{
		strTemp = _T("");
		strTemp.Format("%d", m_UserItem[iSlot].tMagic[j]);
		if(j < (MAGIC_NUM - 1)) strTemp += "-";

		strSerial += strTemp;
	}

	for(i = 0; i < g_arAddEventItemTable.GetSize(); i++)
	{
		if(g_arAddEventItemTable[i]->m_tType == m_UserItem[iSlot].tIQ)
		{
			if(strSerial.CompareNoCase(g_arAddEventItemTable[i]->m_strSerialNum) == 0)
			{
				if(InterlockedCompareExchange((LONG*)&g_arAddEventItemTable[i]->m_lUsed, (long)1, (long)0) == (long)0) 
				{
					index = i;
					g_arAddEventItemTable[i]->m_tEnd = 1;
					return g_arAddEventItemTable[i]->m_sSid;
				}
			}
		}

		nNum = 0;
	}

	return -1;
}

BOOL USER::UpdateEventItem(int sid)
{
	if(sid < 0) return FALSE;

	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];
	int				i = 1;

	SQLSMALLINT	sRet = -1;
	SQLINTEGER	iRetInd = SQL_NTS;

	::ZeroMemory(szSQL, sizeof(szSQL));

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_GIVE_EVENT_ITEM(%d, ?)}"), sid);

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Update EVENT_ITEM Data Only!!\n");
		return FALSE;
	}

	if (retcode == SQL_SUCCESS)
	{
		i = 1;
		SQLBindParameter( hstmt, i++ ,SQL_PARAM_OUTPUT,SQL_C_SSHORT, SQL_SMALLINT,0,0, &sRet,0, &iRetInd);
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			return FALSE;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return FALSE;

	if(sRet == 100 || sRet < 0)
	{
		return FALSE;
	}

	return TRUE;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	└╠║е╞о ╣░╛р ╗є╟░▒╟└╗ ╚╕╝Ў╟╧▒т└з╟╪ └╠║е╞о ╣°╚г┐═ tIQ╕ж ╚о└╬╟╤╚─ ╟╪┤ч ╛╞└╠┼█└╗ ░╣╝Ў╕╕┼н ┴╪┤┘..
//
void USER::GiveEventItem(int EventItemIndex, int tIQ, int ItemIndex, int Count)
{
	return;

	int i, j;
	int event = 0;
	int event_index = -1;

	ItemList TempItem;

	ReSetItemSlot(&TempItem);
	if(ItemIndex < 0 || ItemIndex >= g_arItemTable.GetSize()) return;

	for(i = EQUIP_ITEM_NUM; i < EQUIP_ITEM_NUM + INVENTORY_NUM; i++)
	{
		if(m_UserItem[i].sSid == EventItemIndex)
		{
			if(m_UserItem[i].tIQ == EVENT_POT_ITEM)
			{
				event = CheckEventItem(event_index, i, TRUE);
				if(event < 0) break;								// ╜├╕о╛є ╣°╚г░б ╞▓╕о┤┘.
																	// ╚д╜├│к ┬╩│к┤┬░═└╗ ╣ц┴Ў╟╧▒т └з╟╪
				if(event_index < 0) break;

				if(InterlockedCompareExchange((LONG*)&g_arEventItemTable[event_index]->m_lUsed, (long)1, (long)0) == (long)0)
				{
					TempItem = m_UserItem[i];

					ReSetItemSlot(&m_UserItem[i]);

					m_UserItem[i].sLevel = g_arItemTable[ItemIndex]->m_byRLevel;
					m_UserItem[i].sSid = ItemIndex;
					m_UserItem[i].sCount = Count;
					m_UserItem[i].sDuration = g_arItemTable[ItemIndex]->m_sDuration;
					m_UserItem[i].sBullNum = g_arItemTable[ItemIndex]->m_sBullNum;
					m_UserItem[i].tIQ = NORMAL_ITEM;

					if(!UpdateEventItem(event))
					{
						ReSetItemSlot(&m_UserItem[i]);
						m_UserItem[i] = TempItem;
						InterlockedExchange(&g_arEventItemTable[event_index]->m_lUsed, 0);
						
						break;
					}

					g_arEventItemTable[event_index]->m_tGiveItem = 1;		// ╕ё╖╧┐б╝н ╝┬╞├

					m_iCurWeight += g_arItemTable[ItemIndex]->m_byWeight * Count;

					UpdateUserItemDN();

					GetRecoverySpeed();								// ╚╕║╣╝╙╡╡ ├╝┼й...

					CBufferEx TempBuf;
					TempBuf.Add(ITEM_USE_RESULT);

					TempBuf.Add((BYTE)0x01);						// ╝║░°
					TempBuf.Add((BYTE)103);							// ╜╜╖╘ 1░│░б ║п╡┐

					TempBuf.Add((BYTE)i);							// ┴╓ ╛╞└╠┼█╕ж ╕╒└· 	
					TempBuf.Add(m_UserItem[i].sLevel);
					TempBuf.Add(m_UserItem[i].sSid);
					TempBuf.Add(m_UserItem[i].sDuration);
					TempBuf.Add(m_UserItem[i].sBullNum);
					TempBuf.Add(m_UserItem[i].sCount);
					for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[i].tMagic[j]);
					TempBuf.Add(m_UserItem[i].tIQ); 
					Send(TempBuf, TempBuf.GetLength());	

					SendSystemMsg( IDS_USER_CHANGE_COMPLETED, SYSTEM_ERROR, TO_ME);
					return;
				}
			}
		}
	}

	SendSystemMsg( IDS_USER_NO_CHANGE_THIS, SYSTEM_ERROR, TO_ME);
}


BOOL USER::OpenOnWeb()
{
	//┤Є┐к╙╬╧╖└я╡─IE
	CBufferEx TempBuf;
	TempBuf.Add((BYTE)243);	
	TempBuf.AddString(o_yehuoini[0]->WEB_URL);
	Send(TempBuf, TempBuf.GetLength());
	return TRUE;
}
void USER::SuitUpgrade(TCHAR *pBuf)
{
	if(m_dwDN < 10000000) 
	{
		SendSystemMsg( "╔¤╝╢│м╝╢╗·╝╫╨ш╥к1000═Є!", SYSTEM_ERROR, TO_ME);
		return;		// ╛ў▒╫╖╣└╠╡х ╟╥ ╡╖└╠ ╛°└╕╕щ ╕о┼╧
	}
	if(m_UserItem[39].sSid != 1184) return;
	int Success = 0;
	int index=0;
	short Slot = GetShort(pBuf, index);//╔ш╝╞═╝
	if(Slot < 10 || Slot > 33) return;
	short sSourceSid = m_UserItem[Slot].sSid;//╡├╡╜╬я╞╖ID
	//if(sSourceSid != 1160) return;
	BYTE tCount = m_UserItem[Slot].tMagic[5];
	if(tCount >= 2) return;

	int iRandom = myrand(1, 10000);						// ╗·╝╫╔¤╝╢│╔╣ж┬╩
	//iRandom = UpgradeSucc(iRandom);
	//if(iRandom <= g_SuitUpgrade[tCount]) 
	{
		Success = 1;
		//SendSystemMsg( "╠л╤Ї┬п╔¤╝╢│╔╣ж", SYSTEM_ERROR, TO_ME);
	}
	//else
	//{
	//	Success = 0;
	//	//SendSystemMsg( "╠л╤Ї┬п╔¤╝╢╩з░▄", SYSTEM_ERROR, TO_ME);
	//}
	if(Success == 1){
		m_UserItem[39].tMagic[5] += 1;
		if(m_UserItem[39].tMagic[5] == 1){
			m_UserItem[39].tMagic[0] = 8;
			m_UserItem[39].tMagic[1] = 9;
			m_UserItem[39].tMagic[2] = 10;
			m_UserItem[39].tMagic[3] = 11;
			m_UserItem[39].tMagic[4] = 12;
		}else if(m_UserItem[39].tMagic[5] == 2){
			m_UserItem[39].tMagic[0] = 14;
			m_UserItem[39].tMagic[1] = 15;
			m_UserItem[39].tMagic[2] = 16;
			m_UserItem[39].tMagic[3] = 17;
			m_UserItem[39].tMagic[4] = 18;
		}
		// 2 3 4 5 6
		//8 9 10 11 12
		// 14 15 16 17 18
	}else{
	   if(m_UserItem[39].tMagic[5] > 0)	m_UserItem[39].tMagic[5] -= 1;		
	   if(m_UserItem[39].tMagic[5] == 255) m_UserItem[39].tMagic[5] = 0;
	   if(m_UserItem[39].tMagic[5] == 0){
			m_UserItem[39].tMagic[0] = 2;
			m_UserItem[39].tMagic[1] = 3;
			m_UserItem[39].tMagic[2] = 4;
			m_UserItem[39].tMagic[3] = 5;
			m_UserItem[39].tMagic[4] = 6;
		}else if(m_UserItem[39].tMagic[5] == 1){
			m_UserItem[39].tMagic[0] = 8;
			m_UserItem[39].tMagic[1] = 9;
			m_UserItem[39].tMagic[2] = 10;
			m_UserItem[39].tMagic[3] = 11;
			m_UserItem[39].tMagic[4] = 12;
		}
	}	
	if(m_UserItem[39].tMagic[5] > 2) m_UserItem[39].tMagic[5] = 2;

	CUIntArray arMaterial;
	arMaterial.Add(Slot);
	ReSetItemSlot(&m_UserItem[Slot]);
	CBufferEx TempBuf;
	int i,j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = arMaterial.GetSize();
	if(Success) TempBuf.Add((BYTE)1);
	else  TempBuf.Add((BYTE)0);
	TempBuf.Add((BYTE)index);
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());

	RobItem(1304,1);	
	SendCharData();
	if( m_dwDN <= 10000000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 10000000;
	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();
}
void USER::ChengXuKa(TCHAR *pBuf)
{
	//│╠╨Є┐и
	int index=0;
	short Slot = GetShort(pBuf, index);//╔ш╝╞═╝
	int TarSlot = -1;
	int sh = m_UserItem[Slot].tMagic[0];
	if(sh <= 0 || sh > 44) return;
    // 1-6
	// 7-12
	// 13-16
	// 17-20	
	if(sh <= 12) TarSlot = 8;
	if(sh >= 13 && sh <= 20) TarSlot = 9;
	if(sh >= 21 && sh <= 44) TarSlot = 10;
	
	m_UserItem[39].tMagic[TarSlot] = (BYTE)m_UserItem[Slot].tMagic[0];
	
	CUIntArray arMaterial;
	arMaterial.Add(Slot);
	ReSetItemSlot(&m_UserItem[Slot]);
	CBufferEx TempBuf;
	int i,j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = arMaterial.GetSize();
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)index);
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());
	SendCharData();
}
void USER::JjPeiJian(TCHAR *pBuf)
{
	if(m_dwDN < 10000000) 
	{
		SendSystemMsg( "╟о▓╗╫у!╫░╓├┼ф╝■╨ш1000═Є!", SYSTEM_ERROR, TO_ME);
		return;		// ╛ў▒╫╖╣└╠╡х ╟╥ ╡╖└╠ ╛°└╕╕щ ╕о┼╧
	}
	
	//┼ф╝■
	int index=0;
	short Slot = GetShort(pBuf, index);
	//╡╝╡п 5 ╝д╣т
	if(m_UserItem[Slot].tMagic[0] == 4 || m_UserItem[Slot].tMagic[0] == 5)	m_UserItem[39].tMagic[6] = m_UserItem[Slot].tMagic[0];
	else m_UserItem[39].tMagic[7] = m_UserItem[Slot].tMagic[0];
	//╒╜╔ё╫╦╠м
    if(m_UserItem[Slot].tMagic[0] == 7)	m_UserItem[39].tMagic[7] = m_UserItem[Slot].tMagic[0];
	
	CUIntArray arMaterial;
	arMaterial.Add(Slot);
	ReSetItemSlot(&m_UserItem[Slot]);
	CBufferEx TempBuf;
	int i,j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = arMaterial.GetSize();
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)index);
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());
	SendCharData();
	if( m_dwDN <= 10000000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 10000000;
	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();

}
void USER::HeChengJJ(TCHAR *pBuf)
{
	int sSid= -1;
	int iWeight=0;
	int index=0;

	short Slot = GetShort(pBuf, index);//╔ш╝╞═╝
	short Slot1 = GetShort(pBuf, index);//┴у╝■1
	short Slot2 = GetShort(pBuf, index);//┴у╝■2
	short Slot3 = GetShort(pBuf, index);//┴у╝■3
	if(Slot < EQUIP_ITEM_NUM || Slot >= TOTAL_INVEN_MAX) return;
	if(Slot1 < EQUIP_ITEM_NUM || Slot1 >= TOTAL_INVEN_MAX) return;
	if(Slot2 < EQUIP_ITEM_NUM || Slot2 >= TOTAL_INVEN_MAX) return;
	if(Slot3 < EQUIP_ITEM_NUM || Slot3 >= TOTAL_INVEN_MAX) return;
	int sl = m_UserItem[Slot].sSid;
	int sl1 = m_UserItem[Slot1].sSid;
	int sl2 = m_UserItem[Slot2].sSid;
	int sl3 = m_UserItem[Slot3].sSid;

	int sx1 = m_UserItem[Slot1].tMagic[0];
	int sx2 = m_UserItem[Slot2].tMagic[0];
	int sx3 = m_UserItem[Slot3].tMagic[0];
	if(sl !=1161)		return;
	if(sl == 1161) //v0
	{
		if(sl1 == 1157 && sl2 == 1158 && sl3 == 1159)	sSid = 1184;		
	}

	//if(sSid == -1) return;
	if( sSid < 0 || sSid >= g_arItemTable.GetSize() ) return;


	CUIntArray arMaterial;
	arMaterial.Add(Slot);	
	arMaterial.Add(Slot1);	
	arMaterial.Add(Slot2);	
	arMaterial.Add(Slot3);
	ReSetItemSlot(&m_UserItem[Slot]);
	ReSetItemSlot(&m_UserItem[Slot1]);
	ReSetItemSlot(&m_UserItem[Slot2]);
	ReSetItemSlot(&m_UserItem[Slot3]);	

	m_UserItem[Slot].sSid = sSid;
	m_UserItem[Slot].sLevel = g_arItemTable[sSid]->m_byRLevel;	
	m_UserItem[Slot].sCount = 1;
	m_UserItem[Slot].sDuration = g_arItemTable[sSid]->m_sDuration;
	m_UserItem[Slot].sBullNum = g_arItemTable[sSid]->m_sBullNum;	
	m_UserItem[Slot].tMagic[0] = sx1;
	m_UserItem[Slot].tMagic[1] = sx2;
	m_UserItem[Slot].tMagic[2] = sx3;
	m_UserItem[Slot].tMagic[3] = 5;	
	m_UserItem[Slot].tMagic[4] = 6;	
	m_UserItem[Slot].tMagic[5] = 0;
	m_UserItem[Slot].tIQ = 13;
	m_UserItem[Slot].iItemSerial = 0;
	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	CBufferEx TempBuf;
	int i,j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = arMaterial.GetSize();
	TempBuf.Add((BYTE)14);
	TempBuf.Add((BYTE)index);
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());
	FlushItemLog( TRUE );
}
void USER::EbodyFj39(int num)
{
    if(m_dwDN < 500000) 
	{
	//	SendSystemMsg( "╟о▓╗╫у!╜т│¤┼ф╝■╨ш50═Є!", SYSTEM_ERROR, TO_ME);
		SendEventMsg("╟о▓╗╫у!╜т│¤┼ф╝■╨ш50═Є!");
		return;		// ╛ў▒╫╖╣└╠╡х ╟╥ ╡╖└╠ ╛°└╕╕щ ╕о┼╧
	}

	bool isNullSlot = false;
	int sloot = 0;
	for(int isl = 10; isl < 34;isl++)
	{
		if(m_UserItem[isl].sSid == -1)	
		{
			sloot++;
			if(sloot > 1)
			{
				isNullSlot = true;
				break;
			}
		}
	} 
	if(!isNullSlot) 
	{
	//	SendSystemMsg("╟х└э╫░▒╕└╕┴Ї│Ў┐╒╝ф",SYSTEM_ERROR,TO_ME);	
		SendEventMsg("╟х└э╫░▒╕└╕┴Ї│Ў┐╒╝ф");
		return;
	}
	int fjslot = -1;
	int itemid = -1;
	BYTE jjsx = -1;
	switch(num)
	{
	case 1:
		fjslot = 6;
		break;
	case 2:
		fjslot = 7;
		break;
	default:
		break;
	}
	if(fjslot == -1) return;
	if(m_UserItem[39].sSid != 0 && m_UserItem[39].tMagic[fjslot] != 0) jjsx = m_UserItem[39].tMagic[fjslot];
	if(jjsx == -1) return;
	switch(jjsx)
	{
		case 1:
			itemid = 1174;
			break;
		case 2:
			itemid = 1175;			
			break;
		case 3:
			itemid = 1176;			
			break;
		case 4:
			itemid = 1177;			
			break;
		case 5:
			itemid = 1178;			
			break;
		case 6:	
			itemid = 1179;
			break;
	}
	if(itemid == -1) return;
	m_UserItem[39].tMagic[fjslot] = 0;
	GiveAllItem(itemid,1,0,2,jjsx,0,0,0,0);
	SendCharData();
	CheckMagicItemMove();
	if( m_dwDN <= 500000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 500000;
	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();
}
//╔╛│¤cxk 1 2 3
void USER::EbodyFjCXcard(int num)
{
	if(m_dwDN < 600000) 
	{
		//SendSystemMsg( "╟о▓╗╫у!╜т│¤│╠╨Є┐и╨ш60═Є!", SYSTEM_ERROR, TO_ME);
        SendEventMsg("╟о▓╗╫у!╜т│¤│╠╨Є┐и╨ш60═Є!");
		return;		// ╛ў▒╫╖╣└╠╡х ╟╥ ╡╖└╠ ╛°└╕╕щ ╕о┼╧
	}

    bool isNullSlot = false;
	int sloot = 0;
	for(int isl = 10; isl < 34;isl++)
	{
		if(m_UserItem[isl].sSid == -1)	
		{
			sloot++;
			if(sloot > 1)
			{
				isNullSlot = true;
				break;
			}
		}
	} 
	if(!isNullSlot) 
	{
	//	SendSystemMsg("╟х└э╫░▒╕└╕┴Ї│Ў┐╒╝ф",SYSTEM_ERROR,TO_ME);	
		SendEventMsg("╟х└э╫░▒╕└╕┴Ї│Ў┐╒╝ф");
		return;
	}

	int cardslot = -1;
	BYTE jjsx = -1;
	switch(num)
	{
	case 1:
		cardslot = 8;
		break;
	case 2:
		cardslot = 9;
		break;
	case 3:
		cardslot= 10;
		break;
	default:
		break;
	}	
	if(cardslot == -1) return;
	if(m_UserItem[39].sSid != 0 && m_UserItem[39].tMagic[cardslot] != 0) jjsx = m_UserItem[39].tMagic[cardslot];
	if(jjsx == -1) return;
	m_UserItem[39].tMagic[cardslot] = 0;			
	GiveAllItem(1180,1,0,2,jjsx,0,0,0,0);
	SendCharData();
	CheckMagicItemMove();
	if( m_dwDN <= 600000 ) m_dwDN = 0;
	else m_dwDN = m_dwDN - 600000;
	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();
}
void USER::Ebody39(int solt)
{

	int j = 0;
	ItemList	TempItem;
	m_UserItem[solt].sCount = 1;
	TempItem = m_UserItem[solt];	
	m_UserItem[solt] = m_UserItem[solt];
	m_UserItem[39] = TempItem;	
	
	CBufferEx TempBuf;
	TempBuf.Add(ITEM_MOVE_RESULT);
	TempBuf.Add(SUCCESS);
	TempBuf.Add(0);
	TempBuf.Add(2);	
	TempBuf.Add(solt);
	TempBuf.Add(m_UserItem[solt].sLevel);
	TempBuf.Add(m_UserItem[solt].sSid);
	TempBuf.Add(m_UserItem[solt].sDuration);
	TempBuf.Add(m_UserItem[solt].sBullNum);
	TempBuf.Add(m_UserItem[solt].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[solt].tMagic[j]);
	TempBuf.Add(m_UserItem[solt].tIQ); 

	TempBuf.Add(39);
	TempBuf.Add(m_UserItem[39].sLevel);
	TempBuf.Add(m_UserItem[39].sSid);
	TempBuf.Add(m_UserItem[39].sDuration);
	TempBuf.Add(m_UserItem[39].sBullNum);
	TempBuf.Add(m_UserItem[39].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[39].tMagic[j]);
	TempBuf.Add(m_UserItem[39].tIQ); 

	Send(TempBuf, TempBuf.GetLength());
	//HuanYuanBianShen();
	if(m_UserItem[39].sSid == -1 && m_iSkin != 0)
	{
		m_iSkin=0 , m_iHair=0;
		SendMyInfo( TO_INSIGHT, INFO_MODIFY );
	}
	SendCharData();

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	╟╪┤ч ╛╞└╠┼█└╗ ░╣╝Ў╕╕┼н ┴╪┤┘.
//
BOOL USER::GiveItem(int sid, int iCount) //╕°╢л╬ў░╔
{
	if( sid < 0 || sid >= g_arItemTable.GetSize() ) return FALSE;
	if( iCount <= 0) return FALSE;

	if (iCount >32767 ) iCount = 0;

	if (sid == 724)
	{
		if( FindItem(724) + iCount > 32000)
		{
			SendEventMsg("│м╣¤╫ю┤є╨п┤°┴┐");
			return FALSE;
		}
	}
	
	int iWeight = 0;
	ItemList GiveItem;
	ReSetItemSlot( &GiveItem );

	GiveItem.sLevel			= g_arItemTable[sid]->m_byRLevel;
	GiveItem.sSid			= sid;
	GiveItem.sCount			= iCount;
	GiveItem.sDuration		= g_arItemTable[sid]->m_sDuration;
	GiveItem.sBullNum		= g_arItemTable[sid]->m_sBullNum;
	GiveItem.tIQ			= NORMAL_ITEM;
	

	iWeight = g_arItemTable[sid]->m_byWeight * iCount;

	CWordArray		arEmptySlot, arSameSlot;

	int iSlot = GetSameItem( GiveItem, INVENTORY_SLOT);

	if(iSlot != -1)	
	{ 
		if(iCount != 0)
		{
			CheckMaxValue((short &)m_UserItem[iSlot].sCount, (short)iCount); 
			arSameSlot.Add(iSlot); 
		}
	}
	else			
	{
		iSlot = GetEmptySlot( INVENTORY_SLOT );

		if( iSlot < 0 ) return FALSE;

		ReSetItemSlot( &m_UserItem[iSlot] );

		m_UserItem[iSlot].sLevel = g_arItemTable[sid]->m_byRLevel;
		m_UserItem[iSlot].sSid = sid;
		m_UserItem[iSlot].sCount = iCount;
		m_UserItem[iSlot].sDuration = g_arItemTable[sid]->m_sDuration;
		m_UserItem[iSlot].sBullNum = g_arItemTable[sid]->m_sBullNum;
		m_UserItem[iSlot].tIQ = NORMAL_ITEM;

		arEmptySlot.Add(iSlot); 
	}			

	m_iCurWeight += iWeight;
	GetRecoverySpeed();					// ╛╞└╠┼█ ╣л░╘┐б ║п╡┐└╠ ╗¤▒т╕щ ╚╕║╣╝╙╡╡ ║п╚п

	UpdateInvenSlot(&arEmptySlot, &arSameSlot);
/*
	int iSlot = GetEmptySlot(INVENTORY_SLOT);

	if(iSlot < 0) return FALSE;

	ReSetItemSlot(&m_UserItem[iSlot]);

	m_UserItem[iSlot].sLevel = g_arItemTable[sid]->m_byRLevel;
	m_UserItem[iSlot].sSid = sid;
	m_UserItem[iSlot].sCount = iCount;
	m_UserItem[iSlot].sDuration = g_arItemTable[sid]->m_sDuration;
	m_UserItem[iSlot].sBullNum = g_arItemTable[sid]->m_sBullNum;
	m_UserItem[iSlot].tIQ = NORMAL_ITEM;
*/
	return TRUE;
}
BOOL USER::GiveItemAll(int sid, int iCount,int upg,
					   int x1,int x2,int x3,int x4,int x5,
					   int x6,int x7,int x8,int x9,int x10)//107╚╬╬ё
{
	/*if( sid < 0 || sid >= g_arItemTable.GetSize() ) return FALSE;
	if( iCount <= 0 ) return FALSE;
	
	int shuxingcount = 0;
	if(x1 != 0) shuxingcount += 1;
	if(x2 != 0) shuxingcount += 1;
	if(x3 != 0) shuxingcount += 1;
	if(x4 != 0) shuxingcount += 1;
	if(x5 != 0) shuxingcount += 1;	
	if(x6 != 0) shuxingcount += 1;
	if(x7 != 0) shuxingcount += 1;
	if(x8 != 0) shuxingcount += 1;
	if(x9 != 0) shuxingcount += 1;
	if(x10 != 0) shuxingcount += 1;

	if(upg < 0 || upg > MAX_ITEM_UPGRADE_COUNT)	upg = 0;
	int max_sx = 190;
	if(x1 < 0 || x1 > max_sx)	x1 = 0;
	if(x2 < 0 || x2 > max_sx)	x2 = 0;
	if(x3 < 0 || x3 > max_sx)	x3 = 0;
	if(x4 < 0 || x4 > max_sx)	x4 = 0;
	if(x5 < 0 || x5 > max_sx)	x5 = 0;	
	if(x6 < 0 || x6 > max_sx)	x6 = 0;
	if(x7 < 0 || x7 > max_sx)	x7 = 0;
	if(x8 < 0 || x8 > max_sx)	x8 = 0;
	if(x9 < 0 || x9 > max_sx)	x9 = 0;
	if(x10 < 0 || x10 > max_sx)	x10 = 0;

	int iWeight = 0;
	ItemList GiveItemAll;
	ReSetItemSlot( &GiveItemAll );	

	GiveItemAll.sLevel			= g_arItemTable[sid]->m_byRLevel;
	GiveItemAll.sSid			= sid;
	GiveItemAll.sCount			= iCount;
	GiveItemAll.sDuration		= g_arItemTable[sid]->m_sDuration;
	GiveItemAll.sBullNum		= g_arItemTable[sid]->m_sBullNum;
	GiveItemAll.tMagic[0]		= (BYTE)x1;
	GiveItemAll.tMagic[1]		= (BYTE)x2;
	GiveItemAll.tMagic[2]		= (BYTE)x3;
	GiveItemAll.tMagic[3]		= (BYTE)x4;
	GiveItemAll.tMagic[4]		= (BYTE)x5;
	GiveItemAll.tMagic[5]		= (BYTE)upg;
	GiveItemAll.tMagic[6]		= (BYTE)x6;
	GiveItemAll.tMagic[7]		= (BYTE)x7;
	GiveItemAll.tMagic[8]		= (BYTE)x8;
	GiveItemAll.tMagic[9]		= (BYTE)x9;
	GiveItemAll.tMagic[10]		= (BYTE)x10;

	if(sid >= 726 && sid <= 754)		GiveItemAll.tIQ	= SET_ITEM;
	else if( g_arItemTable[sid]->m_byWear == 130 )	GiveItemAll.tIQ	= GUARDIAN_ITEM;		
	else if((shuxingcount >= 1 && shuxingcount <= 2)
		|| (g_arItemTable[sid]->m_byWear >= 122 && g_arItemTable[sid]->m_byWear <= 126)) GiveItemAll.tIQ = MAGIC_ITEM;
	else if(shuxingcount >= 3 && shuxingcount <= 4)	GiveItemAll.tIQ	= RARE_ITEM;	
	else if((shuxingcount >= 5 && shuxingcount <= 10) || g_arItemTable[sid]->m_byWear == 152) GiveItemAll.tIQ	= RARE2_ITEM;

	iWeight = g_arItemTable[sid]->m_byWeight * iCount;
	CWordArray		arEmptySlot, arSameSlot;
/////////////////╡ў╒√╬▐─═╛├╬я╞╖╡■╝╙╖└╕┤╓╞╬╩╠т┐к╩╝/////////////////
//	 int iSlot = -1;
     int iSlot;
	    if(g_arItemTable[sid]->m_sDuration > 0)
	    {
		    ItemList tmpItem;
			int j; 
            for(j = 0; j < iCount; j++)
			{
			    iSlot = GetEmptySlot( INVENTORY_SLOT );
				if(iSlot == 0) return FALSE;
				
                if( iSlot < 0 ) 
				{
					SendSystemMsg( IDS_USER_FULL_INVEN, SYSTEM_ERROR, TO_ME);
					return FALSE;
			
				}

				ReSetItemSlot(&tmpItem);

				m_UserItem[iSlot].sLevel = g_arItemTable[sid]->m_byRLevel;
				m_UserItem[iSlot].sSid = sid;
				m_UserItem[iSlot].sCount = 1;
				m_UserItem[iSlot].sDuration = g_arItemTable[sid]->m_sDuration;
				m_UserItem[iSlot].sBullNum = g_arItemTable[sid]->m_sBullNum;
				m_UserItem[iSlot].tMagic[0]		= x1;
		        m_UserItem[iSlot].tMagic[1]		= x2;
		        m_UserItem[iSlot].tMagic[2]		= x3;
		        m_UserItem[iSlot].tMagic[3]		= x4;
		        m_UserItem[iSlot].tMagic[4]		= x5;
		        m_UserItem[iSlot].tMagic[5]		= upg;
		        m_UserItem[iSlot].tMagic[6]		= x6;
		        m_UserItem[iSlot].tMagic[7]		= x7;
		        m_UserItem[iSlot].tMagic[8]		= x8;
		        m_UserItem[iSlot].tMagic[9]		= x9;
		        m_UserItem[iSlot].tMagic[10]	= x10;	

				if(sid >= 726 && sid <= 754)			m_UserItem[iSlot].tIQ = SET_ITEM;
		        else if( g_arItemTable[sid]->m_byWear == 130 )	m_UserItem[iSlot].tIQ = GUARDIAN_ITEM;
			    else if((shuxingcount >= 1 && shuxingcount <= 2)
		        || g_arItemTable[sid]->m_byWear >= 122 && g_arItemTable[sid]->m_byWear <= 126) m_UserItem[iSlot].tIQ = MAGIC_ITEM;
		        else if(shuxingcount >= 3 && shuxingcount <= 4)	m_UserItem[iSlot].tIQ = RARE_ITEM;
		        else if(shuxingcount >= 5 && shuxingcount <= 10) m_UserItem[iSlot].tIQ	= RARE2_ITEM;
			
                arEmptySlot.Add(iSlot);
				UpdateInvenSlot(&arEmptySlot, &arSameSlot);
		 }
            
        }else
	    {
		    ItemList tmpItem;
		    ReSetItemSlot(&tmpItem);
		    tmpItem.sSid = sid;
		    iSlot = GetSameItem(tmpItem, INVENTORY_SLOT);
		if(iSlot < 0)
		{
			iSlot = GetEmptySlot( INVENTORY_SLOT );
		}
		if( iSlot < 0 ) 
				return FALSE;
		m_UserItem[iSlot].sCount += iCount;
		m_UserItem[iSlot].sSid = sid;
	    arEmptySlot.Add(iSlot); 

		m_iCurWeight += iWeight;
	    GetRecoverySpeed();	

		UpdateInvenSlot(&arEmptySlot, &arSameSlot);
		return FALSE;
	    }
/////////////////╡ў╒√╬▐─═╛├╬я╞╖╡■╝╙╖└╕┤╓╞╬╩╠т╜с╩°/////////////////

	return TRUE;*/
  if( sid < 0 || sid >= g_arItemTable.GetSize() ) return FALSE;
  if( iCount <= 0 ) return FALSE;
  if (iCount >32767 ) iCount = 0;

	if (sid == 724)
	{
		if( FindItem(724) + iCount > 32000)
		{
			SendEventMsg("│м╣¤╫ю┤є╨п┤°┴┐");
			return FALSE;
		}
	}

	int shuxingcount = 0;
	if(x1 != 0) shuxingcount += 1;
	if(x2 != 0) shuxingcount += 1;
	if(x3 != 0) shuxingcount += 1;
	if(x4 != 0) shuxingcount += 1;
	if(x5 != 0) shuxingcount += 1;	
	if(x6 != 0) shuxingcount += 1;
	if(x7 != 0) shuxingcount += 1;
	if(x8 != 0) shuxingcount += 1;
	if(x9 != 0) shuxingcount += 1;
	if(x10 != 0) shuxingcount += 1;

	if(upg < 0 || upg > MAX_ITEM_UPGRADE_COUNT)	upg = 0;
	int max_sx = 205;
	if(x1 < 0 || x1 > max_sx)	x1 = 0;
	if(x2 < 0 || x2 > max_sx)	x2 = 0;
	if(x3 < 0 || x3 > max_sx)	x3 = 0;
	if(x4 < 0 || x4 > max_sx)	x4 = 0;
	if(x5 < 0 || x5 > max_sx)	x5 = 0;	
	if(x6 < 0 || x6 > max_sx)	x6 = 0;
	if(x7 < 0 || x7 > max_sx)	x7 = 0;
	if(x8 < 0 || x8 > max_sx)	x8 = 0;
	if(x9 < 0 || x9 > max_sx)	x9 = 0;
	if(x10 < 0 || x10 > max_sx)	x10 = 0;

	int iWeight = 0;
	ItemList GiveItemAll;
	ReSetItemSlot( &GiveItemAll );	

	GiveItemAll.sLevel			= g_arItemTable[sid]->m_byRLevel;
	GiveItemAll.sSid			= sid;
	GiveItemAll.sCount			= iCount;
	GiveItemAll.sDuration		= g_arItemTable[sid]->m_sDuration;
	GiveItemAll.sBullNum		= g_arItemTable[sid]->m_sBullNum;
	GiveItemAll.tMagic[0]		= (BYTE)x1;
	GiveItemAll.tMagic[1]		= (BYTE)x2;
	GiveItemAll.tMagic[2]		= (BYTE)x3;
	GiveItemAll.tMagic[3]		= (BYTE)x4;
	GiveItemAll.tMagic[4]		= (BYTE)x5;
	GiveItemAll.tMagic[5]		= (BYTE)upg;
	GiveItemAll.tMagic[6]		= (BYTE)x6;
	GiveItemAll.tMagic[7]		= (BYTE)x7;
	GiveItemAll.tMagic[8]		= (BYTE)x8;
	GiveItemAll.tMagic[9]		= (BYTE)x9;
	GiveItemAll.tMagic[10]		= (BYTE)x10;
     
	
	if(sid >= 726 && sid <= 754)		GiveItemAll.tIQ	= SET_ITEM;
	else if( g_arItemTable[sid]->m_byWear == 130 )	GiveItemAll.tIQ	= GUARDIAN_ITEM;		
	else if((shuxingcount >= 1 && shuxingcount <= 2)
		|| (g_arItemTable[sid]->m_byWear >= 122 && g_arItemTable[sid]->m_byWear <= 126)) GiveItemAll.tIQ = MAGIC_ITEM;
	else if(shuxingcount >= 3 && shuxingcount <= 4)	GiveItemAll.tIQ	= RARE_ITEM;	
	else if((shuxingcount >= 5 && shuxingcount <= 10) || g_arItemTable[sid]->m_byWear == 152) GiveItemAll.tIQ	= RARE2_ITEM;

	iWeight = g_arItemTable[sid]->m_byWeight * iCount;
	CWordArray		arEmptySlot, arSameSlot;

	int iSlot = GetSameItem( GiveItemAll, INVENTORY_SLOT);

	if(iSlot != -1)	
	{ 
		if(iCount != 0)
		{
			CheckMaxValue((short &)m_UserItem[iSlot].sCount, (short)iCount); 
			arSameSlot.Add(iSlot); 
		}
	}
	else			
	{
		iSlot = GetEmptySlot( INVENTORY_SLOT );

		if( iSlot < 0 ) return FALSE;

		ReSetItemSlot( &m_UserItem[iSlot] );

		m_UserItem[iSlot].sLevel = g_arItemTable[sid]->m_byRLevel;
		m_UserItem[iSlot].sSid = sid;
		m_UserItem[iSlot].sCount = iCount;
		m_UserItem[iSlot].sDuration = g_arItemTable[sid]->m_sDuration;
		m_UserItem[iSlot].sBullNum = g_arItemTable[sid]->m_sBullNum;
		m_UserItem[iSlot].tMagic[0]		= x1;
		m_UserItem[iSlot].tMagic[1]		= x2;
		m_UserItem[iSlot].tMagic[2]		= x3;
		m_UserItem[iSlot].tMagic[3]		= x4;
		m_UserItem[iSlot].tMagic[4]		= x5;
		m_UserItem[iSlot].tMagic[5]		= upg;
		m_UserItem[iSlot].tMagic[6]		= x6;
		m_UserItem[iSlot].tMagic[7]		= x7;
		m_UserItem[iSlot].tMagic[8]		= x8;
		m_UserItem[iSlot].tMagic[9]		= x9;
		m_UserItem[iSlot].tMagic[10]	= x10;		

		if(sid >= 726 && sid <= 754)			m_UserItem[iSlot].tIQ = SET_ITEM;
		else if( g_arItemTable[sid]->m_byWear == 130 )	m_UserItem[iSlot].tIQ = GUARDIAN_ITEM;
		else if((shuxingcount >= 1 && shuxingcount <= 2)
			|| g_arItemTable[sid]->m_byWear >= 122 && g_arItemTable[sid]->m_byWear <= 126) m_UserItem[iSlot].tIQ = MAGIC_ITEM;
		else if(shuxingcount >= 3 && shuxingcount <= 4)	m_UserItem[iSlot].tIQ = RARE_ITEM;
		else if(shuxingcount >= 5 && shuxingcount <= 10) m_UserItem[iSlot].tIQ	= RARE2_ITEM;

		arEmptySlot.Add(iSlot); 
	}			

	m_iCurWeight += iWeight;
	GetRecoverySpeed();					// ╛╞└╠┼█ ╣л░╘┐б ║п╡┐└╠ ╗¤▒т╕щ ╚╕║╣╝╙╡╡ ║п╚п

	UpdateInvenSlot(&arEmptySlot, &arSameSlot);
	return TRUE;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
///▓т╩╘╦в10╩Ї╨╘╫░▒╕├№┴ю
BOOL USER::GiveItemAll10(int sid, int iCount,int upg,int sIQ,
					   int x1,int x2,int x3,int x4,int x5,
					   int x6,int x7,int x8,int x9,int x10)//107╚╬╬ё
{
	if( sid < 0 || sid >= g_arItemTable.GetSize() ) return FALSE;
	if( iCount <= 0) return FALSE;

	if (iCount >32767 ) iCount = 0;

	if (sid == 724)
	{
		if( FindItem(724) + iCount > 32000)
		{
			SendEventMsg("│м╣¤╫ю┤є╨п┤°┴┐");
			return FALSE;
		}
	}
	
	int shuxingcount = 0;
	if(x1 != 0) shuxingcount += 1;
	if(x2 != 0) shuxingcount += 1;
	if(x3 != 0) shuxingcount += 1;
	if(x4 != 0) shuxingcount += 1;
	if(x5 != 0) shuxingcount += 1;	
	if(x6 != 0) shuxingcount += 1;
	if(x7 != 0) shuxingcount += 1;
	if(x8 != 0) shuxingcount += 1;
	if(x9 != 0) shuxingcount += 1;
	if(x10 != 0) shuxingcount += 1;

	if(upg < 0 || upg > MAX_ITEM_UPGRADE_COUNT)	upg = 0;
	int max_sx = 205;
	if(x1 < 0 || x1 > max_sx)	x1 = 0;
	if(x2 < 0 || x2 > max_sx)	x2 = 0;
	if(x3 < 0 || x3 > max_sx)	x3 = 0;
	if(x4 < 0 || x4 > max_sx)	x4 = 0;
	if(x5 < 0 || x5 > max_sx)	x5 = 0;	
	if(x6 < 0 || x6 > max_sx)	x6 = 0;
	if(x7 < 0 || x7 > max_sx)	x7 = 0;
	if(x8 < 0 || x8 > max_sx)	x8 = 0;
	if(x9 < 0 || x9 > max_sx)	x9 = 0;
	if(x10 < 0 || x10 > max_sx)	x10 = 0;

	int iWeight = 0;
	ItemList GiveItemAll10;
	ReSetItemSlot( &GiveItemAll10 );	

	GiveItemAll10.sLevel			= g_arItemTable[sid]->m_byRLevel;
	GiveItemAll10.sSid			= sid;
	GiveItemAll10.sCount			= iCount;
	GiveItemAll10.sDuration		= g_arItemTable[sid]->m_sDuration;
	GiveItemAll10.sBullNum		= g_arItemTable[sid]->m_sBullNum;
	GiveItemAll10.tMagic[0]		= x1;
	GiveItemAll10.tMagic[1]		= x2;
	GiveItemAll10.tMagic[2]		= x3;
	GiveItemAll10.tMagic[3]		= x4;
	GiveItemAll10.tMagic[4]		= x5;
	GiveItemAll10.tMagic[5]		= upg;
	GiveItemAll10.tMagic[6]		= x6;
	GiveItemAll10.tMagic[7]		= x7;
	GiveItemAll10.tMagic[8]		= x8;
	GiveItemAll10.tMagic[9]		= x9;
	GiveItemAll10.tMagic[10]		= x10;
	GiveItemAll10.tIQ = sIQ;

	if(sid >= 726 && sid <= 754)		GiveItemAll10.tIQ	= SET_ITEM;
	else if( g_arItemTable[sid]->m_byWear == 122 )       GiveItemAll10.tIQ	= MAGIC_ITEM;
	else if( g_arItemTable[sid]->m_byWear == 123 )       GiveItemAll10.tIQ	= MAGIC_ITEM;
	else if( g_arItemTable[sid]->m_byWear == 124 )       GiveItemAll10.tIQ	= MAGIC_ITEM;
	else if( g_arItemTable[sid]->m_byWear == 125 )       GiveItemAll10.tIQ	= MAGIC_ITEM;
	else if( g_arItemTable[sid]->m_byWear == 130 )	GiveItemAll10.tIQ	= GUARDIAN_ITEM;
	else if(shuxingcount >= 1 && shuxingcount <= 2)	GiveItemAll10.tIQ = MAGIC_ITEM;
	else if(shuxingcount >= 3 && shuxingcount <= 4)	GiveItemAll10.tIQ	= RARE_ITEM;	
	else if(shuxingcount >= 5 && shuxingcount <= 10) GiveItemAll10.tIQ	= RARE2_ITEM;
	
	
    iWeight = g_arItemTable[sid]->m_byWeight * iCount;
	CWordArray		arEmptySlot, arSameSlot;

	int iSlot = GetSameItem( GiveItemAll10, INVENTORY_SLOT);

	if(iSlot != -1)	
	{ 
		if(iCount != 0)
		{
			CheckMaxValue((short &)m_UserItem[iSlot].sCount, (short)iCount); 
			arSameSlot.Add(iSlot); 
		}
	}
	else			
	{
		iSlot = GetEmptySlot( INVENTORY_SLOT );

		if( iSlot < 0 ) return FALSE;

		ReSetItemSlot( &m_UserItem[iSlot] );

		m_UserItem[iSlot].sLevel = g_arItemTable[sid]->m_byRLevel;
		m_UserItem[iSlot].sSid = sid;
		m_UserItem[iSlot].sCount = iCount;
		m_UserItem[iSlot].sDuration = g_arItemTable[sid]->m_sDuration;
		m_UserItem[iSlot].sBullNum = g_arItemTable[sid]->m_sBullNum;
		m_UserItem[iSlot].tMagic[0]		= x1;
		m_UserItem[iSlot].tMagic[1]		= x2;
		m_UserItem[iSlot].tMagic[2]		= x3;
		m_UserItem[iSlot].tMagic[3]		= x4;
		m_UserItem[iSlot].tMagic[4]		= x5;
		m_UserItem[iSlot].tMagic[5]		= upg;
		m_UserItem[iSlot].tMagic[6]		= x6;
		m_UserItem[iSlot].tMagic[7]		= x7;
		m_UserItem[iSlot].tMagic[8]		= x8;
		m_UserItem[iSlot].tMagic[9]		= x9;
		m_UserItem[iSlot].tMagic[10]	= x10;	
		GiveItemAll10.tIQ = sIQ;

		if(sid >= 726 && sid <= 754)			m_UserItem[iSlot].tIQ = SET_ITEM;
		else if( g_arItemTable[sid]->m_byWear == 122 )       m_UserItem[iSlot].tIQ = MAGIC_ITEM;
		else if( g_arItemTable[sid]->m_byWear == 123 )       m_UserItem[iSlot].tIQ = MAGIC_ITEM;
		else if( g_arItemTable[sid]->m_byWear == 124 )       m_UserItem[iSlot].tIQ = MAGIC_ITEM;
		else if( g_arItemTable[sid]->m_byWear == 125 )       m_UserItem[iSlot].tIQ = MAGIC_ITEM;
		else if( g_arItemTable[sid]->m_byWear == 130 )	m_UserItem[iSlot].tIQ = GUARDIAN_ITEM;
		else if(shuxingcount >= 1 && shuxingcount <= 2)	m_UserItem[iSlot].tIQ = MAGIC_ITEM;
		else if(shuxingcount >= 3 && shuxingcount <= 4)	m_UserItem[iSlot].tIQ = RARE_ITEM;
		else if(shuxingcount >= 5 && shuxingcount <= 10) m_UserItem[iSlot].tIQ	= RARE2_ITEM;
		
	    arEmptySlot.Add(iSlot); 
	}			

	m_iCurWeight += iWeight;
	GetRecoverySpeed();					// ╛╞└╠┼█ ╣л░╘┐б ║п╡┐└╠ ╗¤▒т╕щ ╚╕║╣╝╙╡╡ ║п╚п

	UpdateInvenSlot(&arEmptySlot, &arSameSlot);
	return TRUE;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	┴▀░г ░°╝║└№└╠ │б░· ╡┐╜├┐б ╜├└█└╗ ╝┬╞├╟╤┤┘.
//  ╥к╚√╜с╩°┤ж└э
void USER::StoppingTheFortressWar(CGuildFortress *pFort)
{	
	int i, type = 0;
	int nLen = 0;
	USER *pUser = NULL;
	CGuild *pGuild = NULL;
	CGuildFortress *pBackFort = NULL;

	if(m_dwGuild <= 0) return;

	if(pFort == NULL) return;

	pBackFort = pFort;

	pGuild = GetGuild(m_dwGuild);

	if(!pGuild) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		return;
	}

	nLen = strlen(pGuild->m_strMasterName);
	::ZeroMemory(pFort->m_strMasterName, sizeof(pFort->m_strMasterName));
	strncpy(pFort->m_strMasterName, pGuild->m_strMasterName, nLen);

	ReleaseGuild();				// ╟╪┴ж...

	nLen = CHAR_NAME_LENGTH;

	for(i = 0; i < GUILDFORTRESS_ATTACK_MAX_NUM; i++)
	{
		if(pFort->m_arAttackGuild[i].lGuild == m_dwGuild)
		{
			pFort->m_arAttackGuild[i].lGuild = pFort->m_iGuildSid;
			::ZeroMemory(pFort->m_arAttackGuild[i].strGuildName, CHAR_NAME_LENGTH + 1);		// ░°░▌├°└╕╖╬ ╣┘▓┘░э
			strncpy(pFort->m_arAttackGuild[i].strGuildName, pFort->m_strGuildName, nLen);

			pFort->m_iGuildSid = m_dwGuild;
			::ZeroMemory(pFort->m_strGuildName, CHAR_NAME_LENGTH + 1);						// ┴╓└╬ └╠╕з ╣┘▓┘░э
			strncpy(pFort->m_strGuildName, m_strGuildName, nLen);
			break;
		}
	}

	CString strMsg = _T(""); 
	strMsg.Format( IDS_USER_GET_FORTRESS_SUCCESS, m_strGuildName);//%s ╛№═┼┴┘╩▒╗ё╡├╥к╚√
//	SendSystemMsg(strMsg.GetBuffer(strMsg.GetLength()), SYSTEM_ANNOUNCE, TO_ALL);

	for(i = 0; i < MAX_USER; i++)
	{
		type = 0;
		pUser = m_pCom->GetUserUid(i);

		if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;		

		type = pUser->CheckInvalidMapType();
		if((type == 8 || type == 10 || type == 15 || type == 9 || type == 11 || type == 16 || type == 17|| type == 18) &&( m_tFortressWar == GUILD_WARRING || m_tGuildWar == GUILD_WARRING) ) //╒╜╟°─┌╗╪│╠
		{												//▒ц╡х└№└╠ └╧╛ю│к┤┬ ╗є┴б┴Ў┐к└╠╕щ
			if(pFort->m_iGuildSid != pUser->m_dwGuild)
			{
				pUser->TownPotal();				
				pUser->SendSystemMsg(strMsg.GetBuffer(strMsg.GetLength()), SYSTEM_ANNOUNCE, TO_ME);
				SendSystemMsg(strMsg.GetBuffer(strMsg.GetLength()), SYSTEM_ANNOUNCE, TO_ALL);
			}
		}
	}

	CBufferEx TempBuf;

	CNpc *pNpc = NULL;

	TempBuf.Add(GUILD_FORTRESS_NCIRCLE);
	TempBuf.Add((BYTE)0x01);
	TempBuf.Add((int)pFort->m_sFortressID);
    //╗╓╕┤─▄┴┐╟Є╬к╨┬╡─
	for(i = 0; i < FORTRESS_TARGET_MAX_NUM; i++)		// N_Circle╕ж ├╩▒т╚н╟╪╝н ┤┘└╜└╗ ▒т╛р...
	{
		pNpc = GetNpc(pFort->m_arFortressTarget[i].sTargertID);

		if(!pNpc) continue;

		pNpc->m_tNCircle = NPC_NCIRCLE_DEF_STATE;
		pNpc->m_byColor = 0;
		pNpc->m_sHP = pNpc->m_sMaxHP;
		pNpc->m_lFortressState = 0;

		TempBuf.Add((int)(pNpc->m_sNid + NPC_BAND));
		//		pNpc->SendFortressNCircleColor(m_pCom);				// Color░б ┐°╗є ║╣▒═╡╩└╗ ╛╦╕░┤┘.
	}

	for(i = 0; i < pFort->m_arRepairNpcList.GetSize(); i++)
	{
		pNpc = GetNpc(pFort->m_arRepairNpcList[i]);

		if(!pNpc) continue;

		if(pNpc->m_tNpcType == NPCTYPE_GUILD_DOOR)
		{
			pNpc->m_sHP = pNpc->m_sMaxHP;
			pNpc->m_bFirstLive = TRUE;
			break;
		}
	}

	SendInsight(TempBuf, TempBuf.GetLength());
	// │к┴▀┐б Agent┐б ╞ў╞о╕о╜║╕ж │╓└┌!!!
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	DB┐б UPDATE╟╤┤┘.(╜┼├╗▒ц╡х╕╕ ┐└╖╬┴Ў ┼╫└╠║э┐б ├▀░б╟╤┤┘)
//
BOOL USER::UpdateFortress(CGuildFortress *pFort)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];	
	if(pFort == NULL) return FALSE;

	::ZeroMemory(szSQL, sizeof(szSQL));

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_FORTRESS_WARLIST(%d,%d,\'%s\')}"), 
	pFort->m_sFortressID, m_dwGuild, m_strGuildName);

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Update Guild_Store Data Only!!\n");

		//g_DBNew[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			BREAKPOINT();

			g_DBNew[m_iModSid].ReleaseDB(db_index);
			return FALSE;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

		g_DBNew[m_iModSid].ReleaseDB(db_index);
		return FALSE;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return FALSE;

	return TRUE;
}

////////////////////////////////////////////////////////////////////////////////////////////////
//	DB┐б ├╓░э╖ж EVENT╖╬ ╡ю╖╧╟╤┤┘
//
void USER::UpdateHighEventLevelUser(short sLevel)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		

	::ZeroMemory(szSQL, sizeof(szSQL));

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call ADD_EVENT_USER(\'%s\',%d)}"), m_strUserID, sLevel);

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Update Guild_Store Data Only!!\n");

		//g_DBNew[m_iModSid].ReleaseDB(db_index);
		return;
	}

	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			BREAKPOINT();

			g_DBNew[m_iModSid].ReleaseDB(db_index);
			return;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

		g_DBNew[m_iModSid].ReleaseDB(db_index);
		return;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return;
}

void USER::SetTempStoreDN(DWORD dwDN, int sid)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		

	::ZeroMemory(szSQL, sizeof(szSQL));

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call TEMP_MONEY(%d,%d)}"), sid, dwDN);

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Update Guild_Store Data Only!!\n");

		//g_DB[m_iModSid].ReleaseDB(db_index);
		return;
	}

	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			BREAKPOINT();

			g_DB[m_iModSid].ReleaseDB(db_index);
			return;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

		g_DB[m_iModSid].ReleaseDB(db_index);
		return;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);
	
	if( !bQuerySuccess ) return;
}

void USER::AddressWindowOpen(int sid, int quality)
{
	CBufferEx TempBuf;
	
	if( sid == NPC_EVENT_FLOWER )
	{
		TempBuf.Add(ADDRESS_WINDOW_OPEN_NEW);
	}
	else
	{
		TempBuf.Add(ADDRESS_WINDOW_OPEN);
	}
	TempBuf.Add( (short)sid );
	TempBuf.Add( (short)quality );

	Send(TempBuf, TempBuf.GetLength());
}

void USER::RecvAddress(TCHAR *pBuf)
{
	int index = 0;

	char strAddress[512];
	CString			str;
	SYSTEMTIME time;
	GetLocalTime(&time);

	memset( strAddress, NULL, 512 );

	int length = (int)GetByte( pBuf, index );

	if( length < 0 || length > 512 ) { SendSystemMsg( IDS_USER_REG_ADDR_FAIL, SYSTEM_NORMAL, TO_ME); return; }

	GetString( strAddress, pBuf, length, index );

	int sid = GetShort( pBuf, index );
	int quality = GetShort( pBuf, index );

	// ▓╔╣┘▒╕┤╧ └╠║е╞о ├╖░б
	if( sid != 634 && sid != 773 ) { SendSystemMsg( IDS_USER_REG_ADDR_FAIL, SYSTEM_NORMAL, TO_ME); return; }

	char strTitle[128];
	
	if( sid == 634 )
	{
		if( quality == 202 )
			sprintf( strTitle, _ID(IDS_USER_MUNHWA_PRESENT) );
		else if( quality == 201 )
			sprintf( strTitle, _ID(IDS_USER_DEPT_PRESENT) );
		else
		{
			SendSystemMsg( IDS_USER_REG_ADDR_FAIL, SYSTEM_NORMAL, TO_ME); return;
		}
	}
	else if( sid == 773 )
	{
		sprintf( strTitle, _ID(IDS_USER_FLOWER_PRESENT) );
	}
	else
	{
		SendSystemMsg( IDS_USER_REG_ADDR_FAIL, SYSTEM_NORMAL, TO_ME); return;
	}

	str.Format("(%04d-%02d-%02d %02d:%02d:%02d) %s - Flower change event applied\r\n",
		time.wYear, time.wMonth, time.wDay, time.wHour, time.wMinute, time.wSecond,	m_strUserID );

	EnterCriticalSection( &m_CS_EventItemLogFileWrite );
	g_fpEventItem.Write( str, str.GetLength() );
	LeaveCriticalSection( &m_CS_EventItemLogFileWrite );

//	if( !EventRobItem( sid, quality ) )
//	{
//		SendSystemMsg( IDS_USER_REG_ADDR_FAIL, SYSTEM_NORMAL, TO_ME); return;
//	}

	SDWORD sTitleLen	= _tcslen(strTitle);
	SDWORD sContentLen	= _tcslen(strAddress);
	SDWORD sIDLen		= _tcslen(m_strUserID);

	SQLHSTMT	hstmt = NULL;
	SQLRETURN	retcode;
	TCHAR		szSQL[8000];	::ZeroMemory(szSQL, sizeof(szSQL));

	int bbsnum = 2;		// └╠║е╞о┐ы ░╘╜├╞╟

	_sntprintf(szSQL, sizeof(szSQL), TEXT( "{call BBS_WRITE ( %d, ?, ?, ? )}" ), bbsnum );

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) { SendSystemMsg( IDS_USER_REG_ADDR_FAIL, SYSTEM_NORMAL, TO_ME); return; }

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
//		TRACE("Fail To Write BBS (BBS:%d,Writer:%s,Title:%d) !!\n", bbsnum, m_strUserID, strTitle);

//		g_DBNew[m_iModSid].ReleaseDB(db_index);

		SendSystemMsg( IDS_USER_REG_ADDR_FAIL, SYSTEM_NORMAL, TO_ME);
		return;
	}

	int i = 1;
	SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, 20,		0, (TCHAR*)m_strUserID,	0, &sIDLen );
	SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, 50,		0, (TCHAR*)strTitle,	0, &sTitleLen );
	SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, 5000,	0, (TCHAR*)strAddress,	0, &sContentLen );

	retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, sizeof(szSQL));
	if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
	{
	}
	else if (retcode == SQL_ERROR)
	{
		DisplayErrorMsg(hstmt);
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		BREAKPOINT();

		g_DBNew[m_iModSid].ReleaseDB(db_index);

		SendSystemMsg( IDS_USER_REG_ADDR_FAIL, SYSTEM_NORMAL, TO_ME);
		return;
	}
	
	SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);

	str.Format("(%04d-%02d-%02d %02d:%02d:%02d) %s - Flower change event logged to bbs\r\n",
		time.wYear, time.wMonth, time.wDay, time.wHour, time.wMinute, time.wSecond,	m_strUserID );

	EnterCriticalSection( &m_CS_EventItemLogFileWrite );
	g_fpEventItem.Write( str, str.GetLength() );
	LeaveCriticalSection( &m_CS_EventItemLogFileWrite );

	if( !EventRobItem( sid, quality ) )
	{
		SendSystemMsg( IDS_USER_REG_ADDR_FAIL, SYSTEM_NORMAL, TO_ME); return;
	}

	str.Format("(%04d-%02d-%02d %02d:%02d:%02d) %s - Flower change event completed\r\n",
		time.wYear, time.wMonth, time.wDay, time.wHour, time.wMinute, time.wSecond,	m_strUserID );

	EnterCriticalSection( &m_CS_EventItemLogFileWrite );
	g_fpEventItem.Write( str, str.GetLength() );
	LeaveCriticalSection( &m_CS_EventItemLogFileWrite );

	SendSystemMsg( IDS_USER_REG_ADDR, SYSTEM_NORMAL, TO_ME);

	return;
}

void USER::GetResource()
{
	if(m_tIsOP == 0) return;

	//
	int nResourceFreeCount = 0;
	int CurUserCount = 0;
	int acceptedCount = 0;
	int connectedCount = 0;
	int disconnectedCount = 0;
	int logoutCount = 0;
	
	for ( int i = 0; i < MAX_USER; i++ )
	{
		if ( g_pUQM->m_pResources->IsFree( i ) == true )
		{
			nResourceFreeCount++;
			continue;
		}

		USER *pUser = (USER*)g_pUQM->m_pResources->GetDataValue( i );
		if ( pUser )
		{
			if ( pUser && pUser->m_state == STATE_GAMESTARTED )
				CurUserCount++;						
			else if( pUser && pUser->m_state == STATE_ACCEPTED )
				acceptedCount++;
			else if( pUser && pUser->m_state == STATE_CONNECTED )
				connectedCount++;
			else if( pUser && pUser->m_state == STATE_DISCONNECTED )
				disconnectedCount++;
			else if( pUser && pUser->m_state == STATE_LOGOUT )
				logoutCount++;
		}
	};

	int nLeftResource = g_pUQM->FreeResourcesLeft();
	//
//	sprintf( msg, _ID(IDS_USER_SYSTEM_MSG03), CurUserCount, nLeftResource, nResourceFreeCount );

	TCHAR strTitle[256];
	::ZeroMemory(strTitle, sizeof(strTitle));
	wsprintf(strTitle, _ID(IDS_USER_SYSTEM_MSG04), CurUserCount, acceptedCount, connectedCount, disconnectedCount, logoutCount, nLeftResource, nResourceFreeCount);
	
	SendSystemMsg(strTitle, SYSTEM_NORMAL, TO_ME);
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	▒ц└№└╗ ╜┼├╗╟╤ └№├╝ ▒ц╡х ╕ё╖╧└╗ ║╕┐й┴╪┤┘.(░°╝║└№╕╕)
//
void USER::SendFortressAttackGuildList(TCHAR *pBuf)
{
	int i, j;
	short nCount = 0;
	short sFortID = 0;

	BOOL bSuc = FALSE;

	CGuild *pGuild = NULL;
	CStore *pStore = NULL;
	CGuildFortress *pFort = NULL;
	CGuildFortress *pTempFort = NULL;

	int index = 0;
	sFortID = GetShort(pBuf, index);

	if(m_tIsOP != 1)
	{
		if(m_dwGuild <= 0) return;
		if(!m_bGuildMaster)
		{
			SendSystemMsg( IDS_USER_NOT_GUILD_MASTER, SYSTEM_ERROR, TO_ME);
			return;
		}
		if(sFortID != 1000 && sFortID != 1001 && sFortID != 1002)
		{
			SendSystemMsg( IDS_USER_UNCLEAR_FORTRESS, SYSTEM_ERROR, TO_ME);
			return;
		}

		for(i = 0; i < g_arGuildFortress.GetSize(); i++)
		{
			if(g_arGuildFortress[i] == NULL) continue;

			pTempFort = g_arGuildFortress[i];
			if(pTempFort->m_sFortressID != sFortID) continue;

			if(pTempFort->m_iGuildSid == m_dwGuild) 
			{
				bSuc = TRUE;
				break;
			}

			for(j = 0; j < GUILDFORTRESS_ATTACK_MAX_NUM; j++)
			{
				if(pTempFort->m_arAttackGuild[j].lGuild == m_dwGuild)
				{
					bSuc = TRUE;
					break;
				}
			}

			if(bSuc) break;
		}
	}
	else bSuc = TRUE;

	if(!bSuc) 
	{
		SendSystemMsg( IDS_USER_NOT_APPLY_GUILD, SYSTEM_ERROR, TO_ME);
		return;
	}

	for(i = 0; i < g_arGuildFortress.GetSize(); i++)
	{
		pFort = g_arGuildFortress[i];
		if(!pFort) continue;

		nCount = 0;
		if(pFort->m_sFortressID == sFortID)
		{
			if(pFort->m_lUsed == 1)
			{
				SendSystemMsg( IDS_USER_CANT_USE_IN_DEFENCE, SYSTEM_ERROR, TO_ME);
				return;
			}

			CBufferEx TempBuf, AddData;

			TempBuf.Add(CHALLENGE_GUILD);			
			
			for(j =0; j < GUILDFORTRESS_ATTACK_MAX_NUM; j++)
			{
				if(pFort->m_arAttackGuild[j].lUsed == 1)
				{
					AddData.AddString(pFort->m_arAttackGuild[j].strGuildName);
					nCount++;
				}
			}

			TempBuf.Add(nCount);
			TempBuf.AddData(AddData, AddData.GetLength());

			Send(TempBuf, TempBuf.GetLength());
			return;
		}
	}

	if(m_tIsOP == 1) SendSystemMsg( IDS_USER_UNKNOWN_ERROR, SYSTEM_ERROR, TO_ME);
}

void USER::SendRepairItem(int sid)
{
	int i, j;
	CNpc *pNpc = NULL;
	CGuild *pGuild = NULL;
	CGuildFortress *pFort = NULL;

	if(!m_dwGuild) return;

	pFort = GetFortress(sid);

	if(!pFort) return;
	if(!pFort->m_bHaveGuild) return;
	if(pFort->m_iGuildSid != m_dwGuild) return;

	if(pFort->m_lUsed == 1)
	{
		SendSystemMsg( IDS_USER_CANT_USE_IN_DEFENCE, SYSTEM_ERROR, TO_ME);
		return;
	}

	if(pFort->m_dwRepairCost <= 0) 
	{
		SendSystemMsg( IDS_USER_NO_MORE_REPAIR, SYSTEM_ERROR, TO_ME);
		return;
	}

	pGuild = GetGuild(m_dwGuild);

	if(!pGuild)
	{
		ReleaseGuild();
		return;
	}

	int nLen = strlen(m_strUserID);

	if( nLen <= 0 || nLen > CHAR_NAME_LENGTH ) 
	{
		ReleaseGuild();
		return;
	}

	if(strcmp(pGuild->m_strMasterName, m_strUserID) != 0)
	{
		ReleaseGuild();
		SendSystemMsg( IDS_USER_ONLY_GUILD_MASTER_USE, SYSTEM_ERROR, TO_ME);
		return;
	}

	ReleaseGuild();

/*	if(InterlockedCompareExchange(&g_arGuildData[m_dwGuild]->m_lUsed, (LONG)1, (LONG)0) == 0)
	{
		m_dwGuildDN = 0;
		InitGuildItem();								// ║п╝Ў╕ж ▒·▓¤└╠ ╝╝┼╣╟╤┤┘.

		if(nLen <= 0 || nLen > CHAR_NAME_LENGTH) 
		{ 
			InterlockedExchange(&g_arGuildData[m_dwGuild]->m_lUsed, (LONG)0); 
			SendSystemMsg( IDS_USER_FAIL, SYSTEM_ERROR, TO_ME);
			return; 
		}

		if(!LoadGuildWarehouse())						
		{ 
			InterlockedExchange(&g_arGuildData[m_dwGuild]->m_lUsed, (LONG)0); 
			SendSystemMsg( IDS_USER_FAIL, SYSTEM_ERROR, TO_ME);
			return; 
		}

		if(m_dwGuildDN < pFort->m_dwRepairCost)
		{
			SendSystemMsg( IDS_USER_NOT_ENOUGH_REPAIR_DINA, SYSTEM_ERROR, TO_ME);
			return;
		}

		m_dwGuildDN -= pFort->m_dwRepairCost;

		UpdateGuildWarehouse();
		InterlockedExchange(&g_arGuildData[m_dwGuild]->m_lUsed, (LONG)0); 
*/
		if(m_dwDN < pFort->m_dwRepairCost)
		{
			SendSystemMsg( IDS_USER_NOT_ENOUGH_REPAIR_HAVEDINA, SYSTEM_ERROR, TO_ME);
			return;
		}
		else m_dwDN -= pFort->m_dwRepairCost;
//		if(m_dwDN < 0) m_dwDN = 0;

		UpdateUserItemDN();
		SendMoneyChanged();

		pFort->m_dwRepairCost = 0;

		for(i = 0; i < pFort->m_arRepairNpcList.GetSize(); i++)
		{
			pNpc = GetNpc(pFort->m_arRepairNpcList[i]);

			if(!pNpc) continue;

			for(j = 0; j < GUILD_REPAIR_MAX_NUM; j++)
			{			
				if(pFort->m_arRepairDBList[j].sUid == pNpc->m_sEZone)
				{
					pNpc->m_sHP = pNpc->m_sMaxHP;
					pNpc->m_tRepairDamaged = NPC_NON_REPAIR_STATE;
					pFort->m_arRepairDBList[j].sHP = pNpc->m_sMaxHP;
					break;
				}
			}
		}

		SendSystemMsg( IDS_USER_REPAIR_COMPLETED, SYSTEM_NORMAL, TO_ME);
		UpdateMemRepairNpc(sid);

}

void USER::SendPeopleSay(int sid)
{
	int degree = 0, say = -1;
	CGuildFortress *pFort = NULL;

	if(!m_dwGuild) return;

	pFort = GetFortress(sid);

	if(!pFort) return;

	if(!pFort->m_bHaveGuild) return;
	if(pFort->m_iGuildSid != m_dwGuild) return;

//	degree = pFort->m_iCityDegree + pFort->m_tTaxRate;
	degree = pFort->GetTotalCityValue();
	
	if(degree <= 20)
	{
		if(sid == 1000) say = 135;
		else if(sid == 1001) say = 155;
		else if(sid == 1002) say = 308;
	}
	else if(degree <= 40)
	{
		if(sid == 1000) say = 136;
		else if(sid == 1001) say = 156;
		else if(sid == 1002) say = 309;
	}
	else if(degree <= 60)
	{
		if(sid == 1000) say = 137;
		else if(sid == 1001) say = 157;
		else if(sid == 1002) say = 310;
	}
	else
	{
		if(sid == 1000) say = 138;
		else if(sid == 1001) say = 158;
		else if(sid == 1002) say = 311;
	}

	if(say >= 0) SendNpcSay(NULL, say);
}

void USER::UpdateMemRepairNpc(int iSid)
{
	int nSize, i;
	CGuildFortress *pFort = NULL;

	if(iSid >= FORTRESS_BAND)
	{
		nSize = g_arFortressSharedMemory.GetSize();
		CSharedMemory* pShared = NULL;
		CMemFortress* pData = NULL;

		pFort = GetFortress(iSid);
		if(!pFort) return;

		if(!pFort->m_bHaveGuild || pFort->m_iGuildSid != m_dwGuild) return;

		for(i = 0; i < nSize; i++)
		{
			pShared = g_arFortressSharedMemory[i];
			
			if(pShared == NULL) return;
			if(pShared->m_hMapping == NULL) return;
			
			pData = (CMemFortress*) pShared->m_lpData;
			
			if(pData == NULL) return;
			if(pData->m_sFortressID <= 0) return;
			if(pData->m_iGuildSid != m_dwGuild) return;
			
			pFort->FortressRepairListToStr(pData->m_RepairList);
			break;
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	▒ц└№└╗ ╜┼├╗╟╤ .(░°╝║└№╕╕)
//
void USER::UpdateMemAttackListNpc(int iSid)
{
/*	int nSize, i;
	CGuildFortress *pFort = NULL;

	if(iSid >= FORTRESS_BAND)
	{
		nSize = g_arFortressSharedMemory.GetSize();
		CSharedMemory* pShared = NULL;
		CMemFortress* pData = NULL;

		pFort = GetFortress(iSid);
		if(!pFort) return;

		for(i = 0; i < nSize; i++)
		{
			pShared = g_arFortressSharedMemory[i];
			
			if(pShared == NULL) continue;
			if(pShared->m_hMapping == NULL) continue;
			
			pData = (CMemFortress*) pShared->m_lpData;
			
			if(pData == NULL) continue;
			if(pData->m_sFortressID <= 0) continue;
			if(pData->m_sFortressID != pFort->m_sFortressID) continue;
			
			pFort->GuildAttListToStr(pData->m_AttackList);
			break;
		}
	}
*/
}

BOOL USER::CheckInGuildWarring()
{
	int i, j;

	CStore *pStore = NULL;
	CGuildFortress *pFort = NULL;

	// ░°╝║└№└╧╢з...
	for(i = 0; i < g_arGuildFortress.GetSize(); i++)
	{
		pFort = g_arGuildFortress[i];
		if(!pFort) continue;

		if(g_arGuildFortress[i]->m_lUsed == 1)
		{
			if(pFort->m_iGuildSid == m_dwGuild)	// ╣ц╛ю├°└╬┴Ў
			{
				SendSystemMsg( IDS_USER_NO_PERMISSION_IN_WAR, SYSTEM_ERROR, TO_ME);
				return TRUE;
			}

			for(j =0; j < GUILDFORTRESS_ATTACK_MAX_NUM; j++)// ░°░▌├°└╬┴Ў..
			{
				if(pFort->m_arAttackGuild[j].lGuild == m_dwGuild)
				{
					SendSystemMsg( IDS_USER_NO_PERMISSION_IN_WAR, SYSTEM_ERROR, TO_ME);
					return TRUE;
				}
			}
		}
	}
	// ▒ц╡х╗є┴б...
/*	for(i = 0; i < g_arStore.GetSize(); i++)
	{
		pStore = g_arStore[i];
		if(!pStore) continue;

		if(g_arStore[i]->m_lUsed == 1)
		{
			if(pStore->m_iGuildSid == m_dwGuild)	// ╣ц╛ю├°└╬┴Ў
			{
				SendSystemMsg( IDS_USER_NO_PERMISSION_IN_WAR, SYSTEM_ERROR, TO_ME);
				return TRUE;
			}

			for(j =0; j < GUILD_ATTACK_MAX_NUM; j++)// ░°░▌├°└╬┴Ў..
			{
				if(pStore->m_arAttackGuild[j] == m_dwGuild)
				{
					SendSystemMsg( IDS_USER_NO_PERMISSION_IN_WAR, SYSTEM_ERROR, TO_ME);
					return TRUE;
				}
			}
		}
	}
*/
	// Virtual Room┐б └╓└╗╢з
	for(i = 0; i < g_arGuildHouseWar.GetSize(); i++)
	{
		if(!g_arGuildHouseWar[i]) continue;

		if(g_arGuildHouseWar[i]->m_CurrentGuild.lUsed == 1)
		{
			if(g_arGuildHouseWar[i]->m_CurrentGuild.lGuild == m_dwGuild)
			{
				SendSystemMsg( IDS_USER_NO_PERMISSION_IN_WAR, SYSTEM_ERROR, TO_ME);
				return TRUE;
			}
		}
	}

	return FALSE;
}

int USER::SocketDisConnect()
{
	BYTE len;
	LOGINOUTTHREADDATA *pLIOTD;
	pLIOTD = new LOGINOUTTHREADDATA;
	pLIOTD->UID = m_Sid;
	len = (BYTE)strlen(m_strUserID);
	memcpy(pLIOTD->ID, &len, sizeof(BYTE) );
	memcpy(pLIOTD->ID+sizeof(BYTE), m_strUserID, len);
	pLIOTD->ID[sizeof(BYTE)+len] = '\0';

	EnterCriticalSection( &m_CS_LogoutData );
	RecvLogoutData.AddTail(pLIOTD);
	nLogoutDataCount = RecvLogoutData.GetCount();
	LeaveCriticalSection( &m_CS_LogoutData );

	return 1;
}

void USER::CheckGuildUserInFortress()
{
	int i, j;
	int ilen = 0;

	for(i = 0; i < g_arGuildFortress.GetSize(); i++)
	{
		if(!g_arGuildFortress[i] || !g_arGuildFortress[i]->m_bHaveGuild) continue;

		if(g_arGuildFortress[i]->m_iGuildSid == m_dwGuild)
		{
			for(j = 0; j < MAX_GUILD_USER; j++)
			{
				ilen = strlen(g_arGuildFortress[i]->m_arCityRankList[j].strUserID);
				if(ilen <= 0 || ilen > CHAR_NAME_LENGTH) continue;

				if(strcmp(m_strUserID, g_arGuildFortress[i]->m_arCityRankList[j].strUserID) == 0)
				{
					InterlockedExchange(&g_arGuildFortress[i]->m_arCityRankList[j].lCityRank, (long)m_sCityRank);
					break;
				}
			}
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х┐б ░б└╘╟╥╢з ╜├╣╬╡ю▒▐ ╝Ў─б╕ж ░╗╜┼╟╤┤┘.
//
void USER::AddGuildUserInFortress(USER *pUser)
{
	int i, j;

	if(!pUser) return;

	int nLen = strlen(pUser->m_strUserID);

	if(nLen <= 0 || nLen > CHAR_NAME_LENGTH) return;

	for(i = 0; i < g_arGuildFortress.GetSize(); i++)
	{
		if(!g_arGuildFortress[i] || !g_arGuildFortress[i]->m_bHaveGuild) continue;

		if(g_arGuildFortress[i]->m_iGuildSid == m_dwGuild)
		{
			for(j = 0; j < MAX_GUILD_USER; j++)
			{
				if(InterlockedCompareExchange((LONG*)&g_arGuildFortress[i]->m_arCityRankList[j].lUsed, (long)1, (long)0) == (long)0)
				{
					::ZeroMemory(g_arGuildFortress[i]->m_arCityRankList[j].strUserID, sizeof(g_arGuildFortress[i]->m_arCityRankList[j].strUserID));
					g_arGuildFortress[i]->m_arCityRankList[j].lCityRank = (long)pUser->m_sCityRank;
					strncpy(g_arGuildFortress[i]->m_arCityRankList[j].strUserID, pUser->m_strUserID, nLen);
					return;
				}
			}		
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////
//	▒ц╡х┐б╝н ░н┼Ё│к ┼╗┼Ё╟╥╢з ╜├╣╬╡ю▒▐ ╝Ў─б╕ж ░╗╜┼╟╤┤┘.
//
void USER::DelGuildUserInFortress(TCHAR *strUserID, int iGuild)
{
	int i, j;
	int ilen = 0;

	if(iGuild <= 0) return;

	for(i = 0; i < g_arGuildFortress.GetSize(); i++)
	{
		if(!g_arGuildFortress[i] || !g_arGuildFortress[i]->m_bHaveGuild) continue;

		if(g_arGuildFortress[i]->m_iGuildSid == iGuild)
		{
			for(j = 0; j < MAX_GUILD_USER; j++)
			{
				ilen = strlen(g_arGuildFortress[i]->m_arCityRankList[j].strUserID);
				if(ilen <= 0 || ilen > CHAR_NAME_LENGTH) continue;

				if(strcmp(strUserID, g_arGuildFortress[i]->m_arCityRankList[j].strUserID) == 0)
				{
					::ZeroMemory(g_arGuildFortress[i]->m_arCityRankList[j].strUserID, sizeof(g_arGuildFortress[i]->m_arCityRankList[j].strUserID));
					g_arGuildFortress[i]->m_arCityRankList[j].lCityRank = 0;
					InterlockedExchange(&g_arGuildFortress[i]->m_arCityRankList[j].lUsed, (long)0);
					break;
				}
			}
		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////
//	│╗░б ┴╫└║ └┌╕о░б ╟╤├в ░°╝║└№└╠ ╣·╛ю┴Ў┤┬ └┌╕о╕щ ┤й▒╕│к ┤┘ ╢╚░░└╠ ╚о╖№╕ж └√┐ы╣▐┤┬┤┘.
//
BOOL USER::CheckGuildWarArea()
{
	int mapindex = 0;
	int index = 0;
	int type = CheckInvalidMapType();

	mapindex = GetGuildMapIndex(type);
	if(mapindex >= 0 && mapindex < g_arMapTable.GetSize())
	{
		if(g_arMapTable[mapindex] == NULL ) return FALSE;
		index = g_arMapTable[mapindex]->m_sStoreID;

		if(index >= FORTRESS_BAND)
		{
			CGuildFortress* pFort = NULL;
			pFort = GetFortress(index);

			if(pFort) 
			{
				if(pFort->m_lUsed == 1 && g_arMapTable[mapindex]->m_sStoreZone)
				{
					return TRUE;
				}
			}
		}
/*		else 
		{
			CStore *pStore = NULL;

			index = g_arMapTable[mapindex]->m_sStoreIndex;

			pStore = GetStore(index);

			if(pStore)
			{
				if(pStore->m_lUsed == 1)								// ╟╪┤ч ╝╙╝║ ╕╩└╠ ▒ц╡х└№ ╗є┼┬	
				{
					return TRUE;
				}
			}
		}
*/	}

	return FALSE;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
//	╞ў╞о╕о╜║ ┐▄╝║╣о└╗ ┐н░э ┤▌┤┬┤┘.
//
void USER::OpenFortressDoor()
{
	if(m_dwGuild <= 0 || !m_bGuildMaster) return;
	
	CNpc *pNpc = NULL;

	for(int i = 0; i < g_arGuildFortress.GetSize(); i++)
	{
		if(!g_arGuildFortress[i] || !g_arGuildFortress[i]->m_bHaveGuild) continue;

		if(g_arGuildFortress[i]->m_lUsed == 1) continue;
		if(g_arGuildFortress[i]->m_lViolenceUsed == 1) continue;

		if(g_arGuildFortress[i]->m_iGuildSid == m_dwGuild)
		{
			for(int j = 0; j < g_arGuildFortress[i]->m_arRepairNpcList.GetSize(); j++)
			{
				pNpc = GetNpc(g_arGuildFortress[i]->m_arRepairNpcList[j]);

				if(!pNpc) continue;

				if(pNpc->m_sHP > 0 && pNpc->m_tNpcType == NPCTYPE_GUILD_DOOR)
				{
					pNpc->m_sHP = 0;

					MAP* pMap = g_zone[pNpc->m_ZoneIndex];
					pMap->m_pMap[pNpc->m_sCurX][pNpc->m_sCurY].m_lUser = 0;

					pNpc->m_NpcState = NPC_DEAD;

					pNpc->m_Delay = pNpc->m_sRegenTime;
					pNpc->m_bFirstLive = FALSE;

					pNpc->SetMapAfterGuildWar();

					pNpc->SendDead(m_pCom);
					return;
				}
				else
				{
					if(pNpc->m_tNpcType == NPCTYPE_GUILD_DOOR)
					{
						pNpc->m_sHP = pNpc->m_sMaxHP;
						pNpc->m_bFirstLive = TRUE;
						return;
					}			
				}
			}
		}
	}
}

ZONEINFO* USER::GetZoneInfo(int zone)
{
	ZONEINFO* pZoneInfo = NULL;

	for( int i = 0; i < g_TownPotal.GetSize(); i++ )
	{
		if( g_TownPotal[i] )
		{
			pZoneInfo = g_TownPotal[i];

			if( pZoneInfo->iZone == zone )
			{
				return pZoneInfo;
			}
		}
	}

	return NULL;
}

void USER::UpdateCurrentUserTable()
{
	SQLHSTMT		hstmt;
	SQLRETURN		retcode;
	TCHAR			szSQL[1024];

	// session init
	m_bSessionLogOut = FALSE;
	m_iDisplayType = 0;			// ╕▐╝╝┴Ў ┼╕└╘
	m_iValidTime = 0;			// └п╚┐ ╜├░г
	m_iTimeInterval = 50;		// ╕▐╝╝┴Ў ░г░▌

	BYTE bDisplay = 0;
	int remainTime = 0;
	TIMESTAMP_STRUCT endTime;

	SWORD	sParam1 = 0;
	SDWORD	cbParam1 = SQL_NTS, cbParam2 = SQL_NTS, cbParam3 = SQL_NTS, cbParam4 = SQL_NTS;

	endTime.year = 0;
	endTime.month = 0;
	endTime.day = 0;
	endTime.hour = 0;
	endTime.minute = 0;

	memset(szSQL, 0x00, 1024);
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_CURRENTUSER (\'%s\', \'%s\',?, ?,?,?)}"), m_strAccount, g_arServerIPAddr, sParam1,remainTime, endTime, bDisplay);

	hstmt = NULL;
	retcode = 0;

	int db_index = -1;
	CDatabase* pDB = g_DBSession[m_iModSid].GetDB( db_index );
	if( !pDB ) 
	{
		SoftClose();	// ╖╬▒╫ ╛╞┐Ї └¤┬ў┐б ╡щ╛ю░г┤┘.
		return;
	}
	
	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode!=SQL_SUCCESS)
	{
		SoftClose();	// ╖╬▒╫ ╛╞┐Ї └¤┬ў┐б ╡щ╛ю░г┤┘.
		return;
	}
	
	if( retcode != SQL_SUCCESS )
	{
		SQLFreeHandle((SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		SoftClose();	// ╖╬▒╫ ╛╞┐Ї └¤┬ў┐б ╡щ╛ю░г┤┘.
		return ;
	}

	retcode = SQLBindParameter(hstmt, 1,SQL_PARAM_OUTPUT, SQL_C_SSHORT, SQL_SMALLINT,0,0,&sParam1,0,&cbParam1);
	retcode = SQLBindParameter(hstmt, 2,SQL_PARAM_OUTPUT, SQL_C_SLONG, SQL_INTEGER,0,0,&remainTime,0,&cbParam2);
	retcode = SQLBindParameter(hstmt, 3,SQL_PARAM_OUTPUT, SQL_C_TIMESTAMP, SQL_TIMESTAMP,0,0,&endTime,0,&cbParam3);
	retcode = SQLBindParameter(hstmt, 4,SQL_PARAM_OUTPUT, SQL_C_UTINYINT, SQL_TINYINT,0,0,&bDisplay,0,&cbParam4);


    retcode = SQLExecDirect (hstmt, (unsigned char *)(LPCTSTR)szSQL, SQL_NTS);
	if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
	{
	}
	else if (retcode==SQL_ERROR)
	{
//		DisplayErrorMsg(hstmt);
	}
	else if (retcode==SQL_NO_DATA)
	{
	}
	
	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

	g_DBSession[m_iModSid].ReleaseDB(db_index);

	if(sParam1 != 1)
	{
		SoftClose();	// ╖╬▒╫ ╛╞┐Ї └¤┬ў┐б ╡щ╛ю░г┤┘.
		return;
	}

	GetLocalTime(&m_LoginTime);		// ╖╬▒╫└╬╟╤ ╜├░г└╗ ╝│┴д
	m_bSessionLogOut = FALSE;
	m_iTimeInterval = (int)remainTime;// ╟е╜├╕ж └з╟╪
	m_iDisplayType = (int)bDisplay;	// ░╘└╙╣ц└╬┴Ў ┴д╛╫┴ж└╬┴Ў ╜├░г┴ж└╬┴Ў ╟е╜├
	m_iValidTime = (int)remainTime;	

	//----------------------------------------------------------------------------------------------
	//yskang 0.5 ┐е░╘└╙ ╗ч┐ы└┌┤┬ 1▒║ 2▒║┐б╝н ╣л╖с╖╬ ╗ч┐ы╟╥ ╝Ў └╓┤┘.
	//----------------------------------------------------------------------------------------------
	m_bMGame = FALSE;//┐е░╘└╙ ╗ч┐ы└┌░б ╛╞┤╧┤┘╖╬ ├╩▒т╚н
	if(m_iDisplayType > 200)
	{
		m_iDisplayType -= 200;//┐е░╘└╙ ╗ч┐ы└┌┤┬ ┼╕└╘┐б 200└╠ ┤ї╟╪┴о └╓┤┘.
		m_bMGame = TRUE;//┐е░╘└╙ ╗ч┐ы└┌└╠░э 1▒║ 2▒║╝н╣Ў └╠┤┘.
	}
	
	if(m_iDisplayType == 1 || m_iDisplayType == 3 || m_iDisplayType == 5) // ▒т░г┴ж╢є╕щ 
	{
		m_validDate.wYear = endTime.year;
		m_validDate.wMonth = endTime.month;
		m_validDate.wDay = endTime.day;
		m_validDate.wHour = endTime.hour;
		m_validDate.wMinute = endTime.minute;
	}
	GetCheckValidTime();			// ╜├░г└╗ ╟е╜├╟╤┤┘.
	//-------------------------------------------------------------------------------------------------

	TRACE("SESSION DB UPDATE SUCCESS : %s\n", m_strAccount);

	return;
}

void USER::GetCheckValidTime()
{
 /*   CString strMsg = _T("");
	CString strMsgg = _T("");
	int temptime = (3600 * 1000);
	int hour = 0,min = 0;
    if(m_dwHtExpTime > 0)
	{
		hour = m_dwHtExpTime/temptime;	min = m_dwHtExpTime%temptime/(60000);
		strMsgg.Format( "╗├╧ы┴щ╩п╩г╙р╩▒╝ф:%d╨б╩▒%d╖╓",hour,min);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NPC, TO_ME);
	}
    if(m_dwMagicFtTime > 0)
	{
		hour = m_dwMagicFtTime/temptime;	min = m_dwMagicFtTime%temptime/(60000);
		strMsgg.Format( "╗├╧ы╛з╩п╩г╙р╩▒╝ф:%d╨б╩▒%d╖╓",hour,min);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsgg, SYSTEM_NPC, TO_ME);
	}
/*	if((m_bMGame == TRUE) && (m_iDisplayType == 5)) // yskang 0.5 ┐е░╘└╙ 1▒║ 2▒║ ╗ч┐ы└┌ ├│╕о ╜├░г ░ш╗ъ└╗ ╟╧┴Ў ╛╩┤┬┤┘.
		return;
	// ╟Ў└ч ┴в╝╙┴▀└╬ ░ш┴д└╟ ╜├░г, ▒т░г└╗ ╛╦╖┴┴╪┤┘.
	SYSTEMTIME currTime;
	GetLocalTime(&currTime);

	CTime curr(currTime);

	int tempValue = 0;

	CString strMsg = _T("");

	if(m_iDisplayType == 1 || m_iDisplayType == 3)
	{
		CTimeSpan DiffDay;
		CTime validDay(m_validDate);

		DiffDay = validDay - curr;
		tempValue = (int)DiffDay.GetDays();

		if(tempValue <= 3)
		{
			if(tempValue == 0)
			{
				strMsg.Format( IDS_USER_UNTIL_TODAY_YOUR_GAMETIME );
				SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE, TO_ME);
			}
			else
			{
				strMsg.Format( IDS_USER_REMAIN_ACCOUNT_USE, tempValue);
				SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE, TO_ME);
			}
			return;
		}	
	}
	else if(m_iDisplayType == 2 || m_iDisplayType == 4)
	{
		if(m_iDisplayType == 2)
		{
			if(m_iValidTime <= 50) //░│└╬
			{
				strMsg.Format( IDS_USER_REMAIN_GAMETIME_MIN, m_iValidTime);
				SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE, TO_ME);
				return;
			}
		}
		else
		{
			if(m_iValidTime <= 3000) // ░╘└╙╣ц
			{
				int ihour = (int)(m_iValidTime / 60);
				int iMin = (int)(m_iValidTime % 60);

				strMsg.Format( IDS_USER_REMAIN_GAMEROOMTIME, ihour, iMin);
				SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE, TO_ME);
				return;
			}
		}
	}
/*	else if(m_iDisplayType == 6)
	{
		strMsg.Format("└п└·┤╘└╠ ┴в╝╙╟╧╜┼ ├╝╟ш╞╟ ╝н╣Ў╜║┤┬ ▒т┤╔╗є ┴ж╛р└╠ └╓╜└┤╧┤┘.");
		SendSystemMsg(strMsg.GetBuffer(strMsg.GetLength()), SYSTEM_NORMAL, TO_ME);
	}
*/
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	║╬▒ц╕╢╕ж └╙╕э, ▒╟╟╤ └╠╛ч
//
void USER::DeputeGuildMasterOfPower(TCHAR *pBuf)
{
	if ( pBuf == NULL ) return;

	int index = 0;
	int nLen = 0;

	int uid = 0;
	USER* pUser = NULL;
	CGuild *pGuild = NULL;

	if(!m_bGuildMaster) return; 	// ▒ц╡х ▒╟╟╤└╠ ╛°┤┘.

	BYTE error_code = 0;
	BOOL bRes = TRUE;

	uid = GetInt(pBuf, index);

	pUser = GetUser(uid - USER_BAND);

	if(!pUser || pUser->m_state != STATE_GAMESTARTED) return;	// └п└·░б ╛°┤┘.

	if(IsThereUser(pUser) == FALSE || strcmp(m_strUserID, pUser->m_strUserID) == 0)
	{
		SendSystemMsg( IDS_USER_SEE_EACH_OTHER, SYSTEM_NORMAL, TO_ME);//"╗е╧р├ц╢╘├ц."
		return;
	}

	nLen = strlen(pUser->m_strUserID);
	if(nLen <= 0 || nLen > CHAR_NAME_LENGTH) return;

	CString strMsg = _T("");
	USER *pGUser = NULL;			// ╕▐╝╝┴Ў╕ж ╛╦╕░┤┘.

	CBufferEx TempBuf;

	if(pUser->m_dwGuild != m_dwGuild)  
	{
		error_code = ERR_9; 
		goto go_result;		
	}// ┤┘╕е ▒ц╡х┐б ░б└╘╟╤ └п└· 
	
	if(CheckInGuildWarring()) return;// ▒ц└№┴▀┐б┤┬ ╟у╢Ї╟╥╝Ў╛°┤┘.

	pGuild = GetGuild(m_dwGuild);

	if(!pGuild) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_7;			// ╟╪┤ч ▒ц╡х░б ╛°┤┘.
		goto go_result;				
	}
									// ┐└╖∙...
	if(strcmp(pGuild->m_strMasterName, m_strUserID) != 0) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_10;		// 
		goto go_result;
	}

	if(pGuild->m_lSubMaster == 1)		// ╟Ў└ч ║╬▒ц╕╢░б ┤й▒║└╠┴Ў ╛╦╖┴┴╪┤┘.
	{
		strMsg = _T("");
		strMsg.Format(IDS_USER_GUILD_SUBMASTER, pGuild->m_strSubMasterName);//"─у╚╬├№┴╦ %s ╫ў╬к╛№═┼╕▒═┼│д."
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		ReleaseGuild();				// ╟╪┴ж...
		return;
	}

	index = -1;
	index = pGuild->GetUser(pUser->m_strUserID);
	ReleaseGuild();					// ╟╪┴ж...

	if(index < 0)
	{	
		error_code = ERR_8;			// 
		goto go_result;		
	}


	// Add By Youn Gyu
	g_pMainDlg->BridgeDeputeGuildMasterOfPowerReq( m_uid, pUser->m_uid, m_strUserID, pUser->m_strUserID, (int)m_dwGuild );
//0509

	UpdateGuildSubMaster(pUser->m_strUserID, TRUE);
	pUser->m_bRepresentationGuild = TRUE;
	pGuild->CheckGuildSubMaster();
	pGuild->SetSubGuildMaster( pUser->m_strUserID );
	
	ReleaseGuild();

	

	strMsg = _T("");
	strMsg.Format( IDS_USER_GUILD_SUBMASTER_ON, pUser->m_strUserID);//"%s ▒╗╚╬├№╡г╚╬╛№═┼╕▒═┼│д."

	for(int i = 0; i < MAX_USER; i++)
	{
		pGUser = m_pCom->GetUserUid(i);

		if(pGUser == NULL || pGUser->m_state != STATE_GAMESTARTED) continue;		

		if(m_dwGuild == pGUser->m_dwGuild)
		{
			pGUser->SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
	}	
	return;
	//


	if(UpdateGuildSubMaster(pUser->m_strUserID, TRUE) <= 0)
	{
		return;
	}
	
	pGuild = GetGuild(m_dwGuild);

	if(pGuild == NULL) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_7;			// ╟╪┤ч ▒ц╡х░б ╛°┤┘.
		goto go_result;				
	}

	pUser->m_bRepresentationGuild = TRUE;
	pGuild->CheckGuildSubMaster();
	pGuild->SetSubGuildMaster(pUser->m_strUserID);

	ReleaseGuild();				// ╟╪┴ж...
	bRes = FALSE;

go_result:
	if(bRes)
	{
		CBufferEx TempBuf;
		TempBuf.Add(CHAT_RESULT);
		TempBuf.Add((BYTE)0x00);		//╜╟╞╨
		TempBuf.Add(error_code);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	▒╟╟╤╕ж ╗п┤┬┤┘.
//
void USER::RemoveGuildMasterOfPower(TCHAR *pBuf)
{
	if ( pBuf == NULL ) return;

	int index = 0;
	int nLen = 0;

	int uid = 0;
	USER* pUser = NULL;
	CGuild *pGuild = NULL;

	if(!m_bGuildMaster && !m_bRepresentationGuild) return; 	// ▒ц╡х ▒╟╟╤└╠ ╛°┤┘.

	TCHAR strName[CHAR_NAME_LENGTH + 1];
	::ZeroMemory(strName, sizeof(strName));

	BYTE error_code = 0;
	BOOL bRes = TRUE;
	CString strMsg = _T("");
	USER *pGUser = NULL;			// ╕▐╝╝┴Ў╕ж ╛╦╕░┤┘.

	CBufferEx TempBuf;

	if(CheckInGuildWarring()) return;// ▒ц└№┴▀┐б┤┬ ╟у╢Ї╟╥╝Ў╛°┤┘.

	pGuild = GetGuild(m_dwGuild);

	if(!pGuild) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_7;			// ╟╪┤ч ▒ц╡х░б ╛°┤┘.
		goto go_result;				
	}
									// ┐└╖∙...
//	if(strcmp(pGuild->m_strMasterName, m_strUserID) != 0) 
	if(!pGuild->IsMasterPower(m_strUserID))
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_10;		// 
		goto go_result;
	}

	nLen = 0;
	nLen = strlen(pGuild->m_strSubMasterName);
	if(pGuild->m_lSubMaster != 1 || (nLen <= 0 || nLen > CHAR_NAME_LENGTH) )		// ╟Ў└ч ║╬▒ц╕╢╛°┤┘░э ╛╦╖┴┴╪┤┘.
	{
		SendSystemMsg( IDS_USER_GUILD_SUBMASTER_NOT, SYSTEM_ERROR, TO_ME);
		ReleaseGuild();				// ╟╪┴ж...
		return;
	}

	ReleaseGuild();	

	// Add By Youn Gyu
	g_pMainDlg->BridgeRemoveGuildMasterOfPowerReq( m_uid, m_strUserID, (int)m_dwGuild );

	strMsg = _T("");
	strMsg.Format( IDS_USER_GUILD_SUBMASTER_OFF, pGuild->m_strSubMasterName);// "%s ▒╗╚б╧√╡г╚╬╛№═┼╕▒═┼│д."

	UpdateGuildSubMaster(NULL, FALSE) ;

	pGuild->RemoveSubGuildMaster();
	ReleaseGuild();	

	

	for(int i = 0; i < MAX_USER; i++)
	{
		pGUser = m_pCom->GetUserUid(i);

		if(pGUser == NULL || pGUser->m_state != STATE_GAMESTARTED) continue;		

		if(m_dwGuild == pGUser->m_dwGuild)
		{
			pGUser->SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		}
	}	

	return;
	//



	if(UpdateGuildSubMaster(NULL, FALSE) <= 0)
	{
		return;
	}
	
	pGuild = GetGuild(m_dwGuild);

	if(pGuild == NULL) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_7;			// ╟╪┤ч ▒ц╡х░б ╛°┤┘.
		goto go_result;				
	}

	ReleaseGuild();				// ╟╪┴ж...

go_result:
	if(bRes)
	{
		CBufferEx TempBuf;
		TempBuf.Add(CHAT_RESULT);
		TempBuf.Add((BYTE)0x00);		//╜╟╞╨
		TempBuf.Add(error_code);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//	▒╟╟╤ └╠╛ч╕ж ╛ў╡л
//
int USER::UpdateGuildSubMaster(TCHAR *strSubMaster, BOOL bPower)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	BOOL			bQuerySuccess = TRUE;
	TCHAR			szSQL[8000];		

	::ZeroMemory(szSQL, sizeof(szSQL));

	SWORD	sRet = 0;
	SDWORD	cbRet = SQL_NTS;

	int index = 0;

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_GUILD_SUBMASTER (%d, \'%s\', \'%s\', %d,?)}"), m_dwGuild, m_strUserID, strSubMaster, bPower, sRet); 

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return -1;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode != SQL_SUCCESS)
		return -1;

	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLBindParameter(hstmt, 1,SQL_PARAM_OUTPUT, SQL_C_SSHORT, SQL_SMALLINT,0,0,&sRet,0,&cbRet);

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
	}
	
	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);

	if( sRet != 1 ) return FALSE;

	return TRUE;	
}

void USER::EncryptionStartReq(TCHAR *pBuf)
{
	if(m_isCryptionFlag != 0) return;
	
	int index = 0;
	BYTE tType = GetByte(pBuf, index);
	
	if(tType >= 3) return;

	index = 0;
	SetByte(m_TempBuf, ENCRYPTION_START_RESULT, index );
	SetString(m_TempBuf, (char *)&m_public_key, sizeof(_int64), index);
	SetByte(m_TempBuf, tType, index);

	m_isCryptionFlag = 0;

	Send( m_TempBuf, index );

	m_isCryptionFlag = 1;
}

void USER::SetPublicKey()
{
	// IKING 2001.1.
    srand( (unsigned)time( NULL ) );
	//
	BYTE rand1,rand2,rand3,rand4,rand5,rand6,rand7,rand8;

	int out_flag = 0;
	do
	{
		rand1 = rand();
		rand2 = rand();
		rand3 = rand();
		rand4 = rand();
		rand5 = rand();
		rand6 = rand();
		rand7 = rand();
		rand8 = rand();

		m_public_key = rand1;
		m_public_key <<= 8;

		m_public_key |= rand2;
		m_public_key <<= 8;

		m_public_key |= rand3;
		m_public_key <<= 8;

		m_public_key |= rand4;
		m_public_key <<= 8;

		m_public_key |= rand5;
		m_public_key <<= 8;

		m_public_key |= rand6;
		m_public_key <<= 8;

		m_public_key |= rand7;
		m_public_key <<= 8;

		m_public_key |= rand8;

		if(m_public_key != 0)
			out_flag = 1;

	} while( !out_flag );
//#ifdef _CHINA
	//▒ъ╫╝╚╒╖■
//	m_public_key = 0x1010101010101010;// test code
	//╣·╖■
	m_public_key = 0x8080808080808080;// test code
//#endif
}

void USER::SendGuildInviteReq(TCHAR *pBuf)
{
	if ( pBuf == NULL ) return;

	int index = 0;
	BYTE error_code = 0;

	int nLen = 0;

	int uid = 0;
	int iCount = 0;
	USER* pUser = NULL;
	CGuild *pGuild = NULL;
	CGuildUser *pGuildUser = NULL;

	BOOL bRes = TRUE;

	if(!m_bGuildMaster && !m_bRepresentationGuild) { error_code = ERR_10; goto go_result; }	// ▒ц╡х ▒╟╟╤└╠ ╛°┤┘.

	uid = GetInt(pBuf, index);

	pUser = GetUser(uid - USER_BAND);

	if(!pUser) { error_code = ERR_3; goto go_result; }				// └п└·░б ╛°┤┘.

	if(IsThereUser(pUser) == FALSE || strcmp(m_strUserID, pUser->m_strUserID) == 0)
	{
		SendSystemMsg( IDS_USER_SEE_EACH_OTHER, SYSTEM_NORMAL, TO_ME);
		return;
	}

	nLen = strlen(pUser->m_strUserID);
	if(nLen <= 0) return;

	if(pUser->m_dwGuild > 0)  { error_code = ERR_9; goto go_result; }// └╠╣╠ ┤┘╕е ▒ц╡х┐б ░б└╘╟╤ └п└· 
	
	if(CheckInGuildWarring()) return;								// ▒ц└№┴▀┐б┤┬ ╟у╢Ї┴A╝Ў╛°┤┘.

	pGuild = GetGuild(m_dwGuild);

	if(!pGuild) 
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_7;			// ╟╪┤ч ▒ц╡х░б ╛°┤┘.
		goto go_result;				
	}
									// ┐└╖∙...
//	if(strcmp(pGuild->m_strMasterName, m_strUserID) != 0) 
	if( !pGuild->IsMasterPower(m_strUserID) )
	{
		ReleaseGuild();				// ╟╪┴ж...
		error_code = ERR_10;		// 
		goto go_result;
	}

	index = -1;
	index = pGuild->GetUser(pUser->m_strUserID);
	if(index >= 0) 
	{ 
		ReleaseGuild();				// ╟╪┴ж...

		pUser->m_dwGuild = m_dwGuild;			// ▒ц╡х ╣°╚г╕ж ┤┘╜├ ╝┬╞├╟╤┤┘.
		SendGuildInfo(pUser);

		error_code = ERR_9; 
		goto go_result; 
	}

	ReleaseGuild();				// ╟╪┴ж...
	bRes = FALSE;

go_result:

	CBufferEx TempBuf;

	if(bRes)
	{
		TempBuf.Add(GUILD_INVITE_RESULT);
		TempBuf.Add((BYTE)0x04);		//╜╟╞╨
		TempBuf.Add(error_code);
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	TempBuf.Add(GUILD_INVITE_REQ);
	TempBuf.Add(m_uid + USER_BAND);

	pUser->Send(TempBuf, TempBuf.GetLength());
}

void USER::GuildInviteResult(TCHAR *pBuf)
{
	if ( pBuf == NULL ) return;

	int index = 0;
	BYTE error_code = 0;

	int uid = 0;
	USER* pUser = NULL;

	CBufferEx TempBuf;
	TCHAR szGuildName[CHAR_NAME_LENGTH + 1];
	::ZeroMemory(szGuildName, sizeof(szGuildName));

	BYTE tType = GetByte(pBuf, index);

	uid = GetInt(pBuf, index);
	if(uid < 0 || uid >= INVALID_BAND) { error_code = ERR_3; goto go_result; }

	pUser = GetUser(uid - USER_BAND);								// ╗є┤ы╣ц
	if(!pUser) { error_code = ERR_3; goto go_result; }				// └п└·░б ╛°┤┘.

	if(tType == 1)
	{
		if(!pUser->m_bGuildMaster && !pUser->m_bRepresentationGuild) { error_code = ERR_10; goto go_result; }

		pUser->GuildInvite(m_uid + USER_BAND);

		TempBuf.Add(GUILD_INVITE_RESULT);
		TempBuf.Add((BYTE)0x01);

		Send(TempBuf, TempBuf.GetLength());
		pUser->Send(TempBuf, TempBuf.GetLength());
		return;
	}
	else
	{
		TempBuf.Add(GUILD_INVITE_RESULT);
		TempBuf.Add((BYTE)0x03);		// ░┼└¤ ┴╓├╝ : 3, ╟╟ ┴╓├╝ : 2
		Send(TempBuf, TempBuf.GetLength());

		CBufferEx TempBuf1;
		TempBuf1.Add(GUILD_INVITE_RESULT);
		TempBuf1.Add((BYTE)0x02);
		pUser->Send(TempBuf1, TempBuf1.GetLength());
		return;
	}

go_result:														 // └╠ ║╬║╨ ├│╕о┤┬ │к┴▀┐б ┤┘╜├ ░╦┼ф
	TempBuf.Add(GUILD_INVITE_RESULT);
	TempBuf.Add((BYTE)0x04);		//╜╟╞╨
	TempBuf.Add(error_code);
	Send(TempBuf, TempBuf.GetLength());

	if(pUser && pUser->m_state == STATE_GAMESTARTED)
	{
		pUser->Send(TempBuf, TempBuf.GetLength());
	}
}

//-----------------------------------------------------------------------------------------
//--yskang 0.1 ▒ц╡х┐°┐б░╘ ╚г─к└╗ ║╬┐й╟╤┤┘.
//│╞║┼
//-----------------------------------------------------------------------------------------
void USER::LoveName(TCHAR *pBuf)
{
	//------------------------------------------------------------------------------------------------
	/* ┐б╖п ─┌╡х
	01 : ▒╟╟╤└╠ ╛°┤┘.
	02 : ├г┤┬ ╛╞└╠╡Ё░б ╛°┤┘.
	03 : ░░└║ ▒ц╡х┐°└╠ ╛╞┤╧┤┘.
	04 : ╚г─к[╛╓─к]└╠ └▀╕°╡╟╛·┤┘.
	05 : ╡Ё║ё┐б └·└х ╟╥ ╝Ў ╛°╛·┤┘.
	06 : ┐х└╠┤┘.
	*/
	//-------------------------------------------------------------------------------------------------
	CBufferEx ResultTempBuf; 
	CBufferEx TempBuf;
	BOOL bSuccess = FALSE;
	BYTE byCommand=(BYTE)1;
	int nLength = 0;
	int uid = 0;
	int index = 0;//╣ш┐н ╞ў└╬┼═ └з─б
	USER* pUser = NULL;
	BYTE error_code = ERR_1;
	byCommand = GetByte(pBuf,index);
	

	//╚г─к└╗ ║╬┐й╟╧░э└┌ ╟╧┤┬ └п└·╕ж ├г┤┬┤┘.
	//--└╙╜├╖╬
	uid = GetInt(pBuf, index);
	
	if(uid < USER_BAND || uid >= NPC_BAND) 
		return;
	pUser = GetUser(uid - USER_BAND);		
	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
	if(pUser->m_uid == m_uid)
	{
		if(m_sLevel < 70) { error_code = ERR_1; goto go_result; }//70╖╣║з └╠╟╧╢є ╚г─к└╗ ║╬┐й╟╥ ╝Ў ╛°┤┘.		
	}
	else //▒ц┐°┐б░╘ ╚г─к║╬┐й
	{
		if(m_sLevel < 70) { error_code = ERR_1; goto go_result; } //70╖╣║з └╠╟╧╢є ╚г─к└╗ ║╬┐й╟╥ ╝Ў ╛°┤┘.
			
		//╚г─к└╗ ║╬┐й╟╥╝Ў└╓┤┬ └┌░▌└╗ ░о├▀░э └╓┤┬░б?
		if(!m_bGuildMaster) 
		{
			error_code = ERR_1; 
			goto go_result; 
		}	// ╚г─к ║╬┐й └┌░▌└╠ ╛°┤┘.

	}
	if(strcmp(pUser->m_strGuildName,m_strGuildName)!=0)//░░└║ ▒ц╡х┐°└╠ ╛╞┤╧╢є╕щ....
	{ error_code = ERR_3; goto go_result; }

	//╕╕╛р ╗ш┴ж╢є╕щ
	if(byCommand == 0)
	{
		//╚г─к└╗ ╕▐╕Ё╕о ╡Ё║ё┐б └·└х╟╤┤┘(?)
		::ZeroMemory(pUser->m_strLoveName,sizeof(pUser->m_strLoveName));
		strcpy(pUser->m_strLoveName,"");
		lstrcpy(pUser->m_pMD->m_strLoveName , pUser->m_strLoveName);
		//╚г─к└╗ ┤┘╕е ╗ч╢ў╡щ┐б░╘ ╛╦╕░┤┘(░░└║ ╜║┼й╕░┐б └╓┤┬╗ч╢ў╡щ┐б ╟╤╟╪╝н?)
		TempBuf.Add(LOVE_NAME);
		TempBuf.Add(uid);
		TempBuf.AddString(pUser->m_strLoveName);
		pUser->SendExactScreen(TempBuf, TempBuf.GetLength());
		bSuccess = TRUE;
		goto go_result;
	}

	if(byCommand>1) return;

	//╞╨┼╢┐б╝н ╚г─к└╗ ╗╠╛╞│╜┤┘.
	char strTemp[1024];
	//char strTemp1[1024];
	nLength = GetVarString(sizeof(strTemp), strTemp, pBuf, index);
	if(nLength < 1 || nLength > 25/*CHAR_NAME_LENGTH*/) // └▀╕°╡╚ ╚г─к
	{
		error_code = ERR_4;  goto go_result; 
	}
	if(IsReservedID(strTemp)) { error_code = ERR_6; goto go_result; }
		
	if(!UNI_CHAR::CheckString(strTemp)) {error_code=ERR_6; goto go_result;}

/*	strcpy(strTemp1,strTemp);

	sprintf(strTemp,"@9[Lv.%d]%s",m_sLevel,strTemp1);//│╞║┼╧╘╩╛╡╚╝╢ ░в┤є╣д╫ў╩╥*/

	//--------------------------------------------------------------------------------------
	//--yskang 0.6 └п╖с╗ч┐ы└┌ ╟┴╕о╣╠╛Ў ╚г─к└╗ ╗ч┐ы╟╤┤┘.
	if(pUser->m_iDisplayType != 5 && pUser->m_iDisplayType != 6)
		strcpy(pUser->m_strLoveName,strTemp);
	else {error_code = ERR_1; goto go_result; }
	//---------------------------------------------------------------------------------------

	
	if(pUser->m_bPseudoString==TRUE)
	{

		//------------------------------------------------------------------------------------
		//├│└╜ ╚г─к└╠ ║╬┐й╡╟┤┬ ░═└╠╢є╕щ ╡Ё║ё┐б Insert╟╤┤┘.
		//------------------------------------------------------------------------------------
		index = 0;
		BYTE *pData;
		SQLDATAPACKET *pSDP;
		pSDP = new SQLDATAPACKET;
		pSDP->UID = m_uid;
		pSDP->code = LOVE_NAME_RESULT;
		int Datalength = pSDP->dcount = sizeof(uid);
		pData = new BYTE[Datalength+1];
		memset(pData, 0, Datalength+1);
		memcpy(pData, &uid,sizeof(uid));//▒ц┐° ╛╞└╠╡Ё╕ж └№┤▐....
		pSDP->pData = pData;

		//------------------------------------------------------------------------------------
		//╛▓╖╣╡х┐б╝н ├│╕о╟╤┤┘.
		//------------------------------------------------------------------------------------
		EnterCriticalSection( &m_CS_SqlData );
		RecvSqlData.AddTail(pSDP);
		nSqlDataCount = RecvSqlData.GetCount();
		LeaveCriticalSection( &m_CS_SqlData );	

		//-------------------------------------------------------------------------------------
		//--╡Ё║ё Insert│б
		//-------------------------------------------------------------------------------------
	}
	else
	{

		//╚г─к└╗ ╕▐╕Ё╕о ╡Ё║ё┐б └·└х╟╤┤┘(?)
		if( m_dwPD != 0)
		{
		     char szTest[30];
	         ZeroMemory(szTest,sizeof(szTest));
		     strcpy(szTest,pUser->m_strLoveName);
             sprintf(pUser->m_strLoveName,"@9[%d]%s",m_dwPD,szTest);
		}else strcpy(pUser->m_pMD->m_strLoveName , pUser->m_strLoveName);
		//╚г─к└╗ ┤┘╕е ╗ч╢ў╡щ┐б░╘ ╛╦╕░┤┘(░░└║ ╜║┼й╕░┐б └╓┤┬╗ч╢ў╡щ┐б ╟╤╟╪╝н?)
		TempBuf.Add(LOVE_NAME);
		TempBuf.Add(uid);
		TempBuf.AddString(pUser->m_strLoveName);
		pUser->SendExactScreen(TempBuf, TempBuf.GetLength());
		bSuccess = TRUE;
go_result:
		ResultTempBuf.Add(LOVE_NAME_RESULT);
		if(bSuccess == FALSE)
		{
			ResultTempBuf.Add(FAIL);				// ╜╟╞╨
			ResultTempBuf.Add(error_code);
			Send(ResultTempBuf,ResultTempBuf.GetLength());
			return;
		}
		ResultTempBuf.Add(SUCCESS);					// ╝║░°	
		Send(ResultTempBuf, ResultTempBuf.GetLength());
	}
}
////////////////////////////////////////////////////////////////////////////////////////
//	tMyClass ┼м╖б╜║░б tNeedClass ╕ж ╛╡ ╝Ў └╓┤┬┴Ў ░╦╗ч.
//


void USER::UpdateUserDeadLog(TCHAR *pBuf)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	int				index = 0;

	TCHAR			szSQL[1024];
	::ZeroMemory(szSQL, sizeof(szSQL));

	//yskang 0.8 add dead log
	TCHAR			strPKName[100];
	::ZeroMemory(strPKName, sizeof(strPKName));

	DWORD minus = GetDWORD(pBuf, index);
	DWORD preExp = GetDWORD(pBuf, index);
	BYTE nLen = GetByte(pBuf,index);//yskang 0.8 add dead log 
	GetString((char *)strPKName,pBuf,nLen,index);//yskang 0.8  add dead log

	CPoint pt = ConvertToClient(m_curx, m_cury);
																	// id, level,z, x, y, iExp, minus exp, preExp, iCityValue					
	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call UPDATE_USER_DEAD_DATA (\'%s\',%d,%d,%d,%d,%d,%d,%d,%d,\'%s\',%d)}"), m_strUserID,m_sLevel,m_curz,pt.x,pt.y,m_dwExp,minus,preExp,m_iCityValue,strPKName,m_iDisplayType);//yskang 0.8 dead log ╝Ў┴д ┴╫└╬╗ч╢ў └╠╕з, ░ш┴д ┴в╝╙ ┼╕└╘ ├▀░б 

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Update Guild Warehouse Data !!\n");

		//g_DB[m_iModSid].ReleaseDB(db_index);
		return;
	}
	
	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);		
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
			SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

			g_DBNew[m_iModSid].ReleaseDB(db_index);
			return;
		}
	}	
	else
	{
		DisplayErrorMsg( hstmt );
		SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

		g_DBNew[m_iModSid].ReleaseDB(db_index);
		return;
	}

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);
}

void USER::UpdateUserDeadLog(DWORD minus, DWORD preExp, TCHAR *strPKName)
{
	int index = 0;
	TCHAR pBuf[100];

	::ZeroMemory(pBuf, sizeof(pBuf));

	SetDWORD(pBuf, minus, index);
	SetDWORD(pBuf, preExp, index);
	int nLen = strlen(strPKName);
		if(nLen < 1) nLen =1;
	SetByte(pBuf, (BYTE)nLen, index);
	SetString(pBuf,strPKName,nLen,index);
	
	int Datalength;
	BYTE *pData;
	SQLDATAPACKET *pSDP;
	pSDP = new SQLDATAPACKET;
	pSDP->code = DB_USER_DEAD;
	Datalength = index;
	pSDP->dcount = Datalength;
	pSDP->UID = m_uid;
	pData = new BYTE[Datalength+1];
	memset(pData, 0, Datalength+1);
	memcpy(pData, pBuf, Datalength);
	pSDP->pData = pData;

	EnterCriticalSection( &m_CS_SqlData );
	RecvSqlData.AddTail(pSDP);
	nSqlDataCount = RecvSqlData.GetCount();
	LeaveCriticalSection( &m_CS_SqlData );	
}

////////////////////////////////////////////////////////////////////////////////////////
//╝ь▓щ╓░╥╡╬я╞╖
BOOL USER::CheckClassItem(BYTE tMyClass, BYTE tNeedClass)
{
	BYTE tTemp = 1;	
	BYTE tFire = 0;
	BYTE tEdge = 0;
	BYTE tStaff = 0;
	BYTE tBrawl = 0;
	BYTE tJudge = 0;

	tFire	 = tTemp & tNeedClass; tTemp = 2; 
	tEdge	 = tTemp & tNeedClass; tTemp = 4;
	tStaff	 = tTemp & tNeedClass; tTemp = 8;
    tJudge   = tTemp & tNeedClass; tTemp = 16;
	tBrawl	 = tTemp & tNeedClass;

	tFire = tFire & tMyClass;
	tEdge = tEdge & tMyClass;
	tStaff = tStaff & tMyClass;
	tBrawl = tBrawl & tMyClass;
	tJudge = tJudge & tMyClass;

	tTemp = tFire^tEdge^tStaff^tBrawl^tJudge;

	if(!tTemp) return FALSE;
	return TRUE;
}

//////////////////////////////////////////////////////////////////////////////////////
//	Moon Event Item Use...
//
BOOL USER::MoonEvent(short sSlot)
{
	CString strMsg = _T("");
	short sSid = 0;
	int iRandom = 0, iSummon = 0;
	ItemList Item;
	int iItemNum = 0;
	int iEmptySlot = -1, iSameSlot = -1;
	int i = 0;
	int iDeleteHP = 0;
	BYTE tSlot = 0;
	short sCount = 0;
	CPoint pt;
	BOOL bRet = FALSE;

	if(g_iMoonEvent == 0)
	{
		strMsg.Format(IDS_EVENT_END);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		return FALSE;
	}

	if(sSlot < EQUIP_ITEM_NUM || sSlot >= TOTAL_INVEN_MAX) return FALSE;
	
	sSid = m_UserItem[sSlot].sSid;
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) return FALSE;
	if(m_UserItem[sSlot].sCount <= 0) return FALSE;

	switch(sSid)
	{
	case EVENTITEM_SID_MOON:
		if(m_dwAdamantineTime != 0 || m_dwMightyWeaponTime != 0 )
		{
			strMsg.Format(IDS_ANOTHER_PSI_RUN);
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
			return FALSE;
		}

		SetBerserker(60 * 5);
		SendPsiAttackResult(SUCCESS, m_uid + USER_BAND, 15);
		break;

/*	case EVENTITEM_SID_SONGPEON_01:
		GetExp(87);
		strMsg.Format(IDS_MOON_SONGPEON_01);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		break;
	case EVENTITEM_SID_SONGPEON_11:
		GetExp(654);
		strMsg.Format(IDS_MOON_SONGPEON_11);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		break;
	case EVENTITEM_SID_SONGPEON_31:
		GetExp(11185);
		strMsg.Format(IDS_MOON_SONGPEON_31);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		break;
	case EVENTITEM_SID_SONGPEON_51:
		GetExp(67550);
		strMsg.Format(IDS_MOON_SONGPEON_51);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		break;*/
	case EVENTITEM_SID_SONGPEON_71:
		//GetExp(200000000);
		if(m_sLevel >= o_yehuoini[0]->zgdj)
         return FALSE;
		GetExp(m_dwExpNext);
		strMsg.Format(IDS_MOON_SONGPEON_71);
		SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
		break;

	case EVENTITEM_SID_BOX: case 868:
		if(m_curz >= 56 && m_curz <= 59 || m_curz == 1005)
		{
			strMsg.Format(IDS_CANNOT_USE_BOX);
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
			return FALSE;
		}

		iRandom = myrand(0, 999);
		if(g_arBoxEventTable[iRandom]->m_tType == 1)	// Summoning Monster
		{
			iSummon = myrand(0, g_arSummonTable.GetSize() - 1);
			
			g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_bMove = 1;
			pt = FindNearAvailablePoint_S(m_curx, m_cury);
			g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_bMove = 0;

			if(pt.x == -1 || pt.y == -1) return FALSE;

			bRet = SummonMonster(g_arSummonTable[iSummon]->m_strName, pt);
			return bRet;
		}
		else //if(g_arBoxEventTable[iRandom]->m_tType >= 2 && g_arBoxEventTable[iRandom]->m_tType <= 37)	// Give Item
		{
			iItemNum = g_arBoxEventTable[iRandom]->m_sIid;

			Item.sSid		= g_arItemTable[iItemNum]->m_sSid;
			Item.sLevel		= g_arItemTable[iItemNum]->m_byRLevel;
			Item.sDuration	= g_arItemTable[iItemNum]->m_sDuration;
			Item.sCount		= g_arBoxEventTable[iRandom]->m_sCount;
			Item.sBullNum	= g_arItemTable[iItemNum]->m_sBullNum;
			Item.tIQ		= NORMAL_ITEM;
			Item.iItemSerial= 0;
			for(i = 0; i < MAGIC_NUM; i++) Item.tMagic[i] = 0;

			iSameSlot	=	GetSameItem(Item, INVENTORY_SLOT); 
			iEmptySlot	=	GetEmptySlot(INVENTORY_SLOT);
			
			if(iEmptySlot == -1)	// └╬║е┐б ├╓╝╥╟╤ ╟╧│к└╟ ║є░°░г└╠ └╓╛ю╛▀ ╖г┤¤╟╧░╘ ╛╞┼█└╗ ┴┘ ╝Ў └╓┤┘.
			{
				strMsg.Format(IDS_INVENTORY_FULL);
				SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);
				return FALSE;
			}

			if(Item.sCount == 1 && Item.sDuration > 0 ) MakeItemLog(&Item, ITEMLOG_EVENT_GIVE);

			for(i = 0; i < Item.sCount; i++) m_iCurWeight += g_arItemTable[iItemNum]->m_byWeight;
			GetRecoverySpeed();

			if(iSameSlot != -1) 
			{
				sCount = m_UserItem[iSameSlot].sCount;
				m_UserItem[iSameSlot] = Item;
				m_UserItem[iSameSlot].sCount += sCount;
				tSlot = (BYTE)iSameSlot;
			}
			else if(iEmptySlot != -1) 
			{
				m_UserItem[iEmptySlot] = Item;
				tSlot = (BYTE)iEmptySlot;
			}

			SendSystemMsg((LPTSTR)(LPCTSTR)g_arBoxEventTable[iRandom]->m_strText, SYSTEM_NORMAL, TO_ME);
			
			CBufferEx TempBuf;

			TempBuf.Add(ITEM_MOVE_RESULT);
			TempBuf.Add(SUCCESS);
			TempBuf.Add((BYTE)0);		// Type
			TempBuf.Add((BYTE)1);		// Count
			
			TempBuf.Add(tSlot);
			TempBuf.Add(m_UserItem[tSlot].sLevel);
			TempBuf.Add(m_UserItem[tSlot].sSid);
			TempBuf.Add(m_UserItem[tSlot].sDuration);
			TempBuf.Add(m_UserItem[tSlot].sBullNum);
			TempBuf.Add(m_UserItem[tSlot].sCount);
			for(i =0; i < MAGIC_NUM; i++) TempBuf.Add(m_UserItem[tSlot].tMagic[i]);
			
			TempBuf.Add(m_UserItem[tSlot].tIQ); 
			
			Send(TempBuf, TempBuf.GetLength());
		}
		/*else if(g_arBoxEventTable[iRandom]->m_tType == 38 || g_arBoxEventTable[iRandom]->m_tType == 39)	// Minus HP 40% or 30%
		{
			if(g_arBoxEventTable[iRandom]->m_tType == 38)	iDeleteHP = (int)((double)m_sHP * 0.4);
			else if(g_arBoxEventTable[iRandom]->m_tType == 39)	iDeleteHP = (int)((double)m_sHP * 0.3);

			if(iDeleteHP > 0)
			{
				m_sHP -= iDeleteHP;
				if(m_sHP < 0) m_sHP = 0;
				SendSystemMsg((LPTSTR)(LPCTSTR)g_arBoxEventTable[iRandom]->m_strText, SYSTEM_NORMAL, TO_ME);
				SendHP();
			}			
		}*/

		break;

	default:
		return FALSE;
	}

	return TRUE;
}

///////////////////////////////////////////////////////////////////////
//	Summoning Monster
//
BOOL USER::SummonMonster(CString strName, CPoint pt)
{
	CNpc* pNpc = NULL;
	int i;
	CString strMsg = _T("");

	MYSHORT sAI;
	BYTE upTemp = 0;			// ╗є└з 8║ё╞о
	BYTE dwTemp = 0;			// ╟╧└з 8║ё╞о

//	int iDeleteIndex = 0;
//	TCHAR DeleteSend[2048];	

//	int iModifyIndex = 0;
//	TCHAR ModifySend[2048];	
    if (strName=="╬└▒°") strName="┐и╠╪";
	int NpcState = NPC_DEAD;

	for(i = 0; i < g_arNpc.GetSize(); i++)
	{
		pNpc = g_arNpc[i];
		if( !pNpc ) continue;

		if(strName.CompareNoCase(pNpc->m_strName) == 0)
		{
			if(pNpc->m_sCurZ == 1005) continue;
			if(pNpc->m_NpcState != NPC_DEAD && pNpc->m_NpcState != NPC_STANDING) continue;
			if(pNpc->m_bSummon == TRUE) continue;

			if(::InterlockedExchange(&pNpc->m_lNowSummoning, 1) != 0) continue;

			NpcState = pNpc->m_NpcState;
			pNpc->m_Delay = 2000;

			if(pNpc->m_NpcState == NPC_STANDING)
			{
				pNpc->SetUidNPC(pNpc->m_sCurX, pNpc->m_sCurY, 0);

				pNpc->m_presx = pNpc->m_presy = -1;
				pNpc->SendNpcInfoBySummon(m_pCom);
			}

			pNpc->m_SummonZoneIndex = pNpc->m_ZoneIndex;
			pNpc->m_sSummonOrgZ = pNpc->m_sOrgZ;
			pNpc->m_sSummonOrgX = pNpc->m_sOrgX;
			pNpc->m_sSummonOrgY = pNpc->m_sOrgY;

			pNpc->m_sCurZ = pNpc->m_sOrgZ = m_curz;
			pNpc->m_sCurX = pNpc->m_sOrgX = pt.x;
			pNpc->m_sCurY = pNpc->m_sOrgY = pt.y;

			pNpc->m_ZoneIndex		= -1;

			pNpc->m_dwStepDelay	= GetTickCount();
			
			sAI.i = (short)pNpc->m_sAI;						// NPC AI╕ж ╝┬╞├
			upTemp = sAI.b[0];
			dwTemp = sAI.b[1];
			
			pNpc->m_tNpcAttType = upTemp >> 7;				// │к┴▀┐б ├▀░б╟╪╛▀╟╤┤┘.
			upTemp = upTemp << 1;
			pNpc->m_tNpcLongType = upTemp >> 7;
			upTemp = upTemp << 1;
			pNpc->m_tNpcGroupType = upTemp >> 7;
			
			if(pNpc->m_sClientSpeed <= 20) pNpc->m_sClientSpeed = 20;	// ╣ц╛ю ─┌╡х;
			
			for(i = 0; i < g_zone.GetSize(); i++)
			{
				if(g_zone[i]->m_Zone == pNpc->m_sCurZ) 
				{
					pNpc->m_ZoneIndex = i;
					break;
				}
			}

			pNpc->m_bSummon = TRUE;
			pNpc->m_bSummonDead = TRUE;
			pNpc->EventNpcInit(pt.x, pt.y);

			if(NpcState == NPC_STANDING) 
			{
				pNpc->SetUidNPC(pt.x, pt.y, pNpc->m_sNid + NPC_BAND);

				pNpc->m_presx = pNpc->m_presy = -1;
				pNpc->SightRecalc(m_pCom);
			}

			if(::InterlockedExchange(&pNpc->m_lNowSummoning, 0) != 1) pNpc->m_lNowSummoning = 0;

			strMsg.Format( IDS_USER_CALL_WHAT, pNpc->m_strName);
			SendSystemMsg((LPTSTR)(LPCTSTR)strMsg, SYSTEM_NORMAL, TO_ME);

			return TRUE;
		}
	}

	return FALSE;
}

int USER::GetItemIndex(int sid)
{
	int i = 0;
	int nCount = g_arItemTable.GetSize();

	for(i = 0; i < nCount; i++)
	{
		if(sid == g_arItemTable[i]->m_sSid) return i;
	}

	return -1;
}

void USER::SoftClose()
{
	CBSocket::B_SoftClose();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// ╞п╝Ў╟╤ ╝╥╕Ё╝║ ╣░╛р└╗ ╗ч┐ы╟╤┤┘.
//
BYTE USER::UseSpecialPotion(short sSlot)
{
	CBufferEx TempBuf;
	short sSid = 0;
	BYTE tRet = 0;
	int j = 0;
    int hour = 0;
	int Damage = 0;	//╙├╙┌╚║╣е╔╦║ж╓╡▒ф┴┐
	
	if(sSlot < EQUIP_ITEM_NUM || sSlot >= TOTAL_INVEN_MAX) return FALSE;
	
	sSid = m_UserItem[sSlot].sSid;
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) return FALSE;
	if(m_UserItem[sSlot].sCount <= 0) return FALSE;

	switch(sSid)
	{
	case SPECIAL_ITEM_HIEXP	:
		if( (m_dwHiExpTime + HIEXP_TIME) > 3600*48*1000)
		{
			SendSystemMsg("╨╦╖▄╝┴╫ю╕▀└█╝╞48╨б╩▒", SYSTEM_NORMAL, TO_ME);
			return false;
		}
		if(m_iDisplayType == 5 || m_iDisplayType ==6) //╣л╖с ╗ч┐ы└┌└╬░б?
		{
			SendSystemMsg("╣л╖с ╗ч┐ы└┌┤┬ ╟╧└╠╕ж ╗ч┐ы╟╥ ╝Ў ╛°╜└┤╧┤┘.", SYSTEM_NORMAL, TO_ME);
			return tRet; //or m_dwHiExpTime = 0; //╣л╖с ╗ч┐ы└┌┤┬ ╗ч┐ы╟╥ ╝Ў ╛°┤┘.
		}
		else m_dwHiExpTime += HIEXP_TIME;
		//----------------------------------------------------------------------------------------
		m_dwLastHiExpTime = GetTickCount();
		tRet = EXP_POTION;

		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		AddAbnormalInfo(ABNORMAL_HIEXP);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);	
		Send(TempBuf, TempBuf.GetLength());

		break;

	case 1212	:
		if(m_dwHiExpTime !=0){
			SendSystemMsg("─у╧╓╘┌╥╤╛н╙╨╨╦╖▄╫┤╠м,╬▐╖и╘┘╩╣╙├│м╝╢╨╦╖▄.", SYSTEM_NORMAL, TO_ME);
			return false;
		}
		if(m_iDisplayType == 5 || m_iDisplayType ==6) //╣л╖с ╗ч┐ы└┌└╬░б?
		{
			SendSystemMsg("╣л╖с ╗ч┐ы└┌┤┬ ╟╧└╠╕ж ╗ч┐ы╟╥ ╝Ў ╛°╜└┤╧┤┘.", SYSTEM_NORMAL, TO_ME);
			return tRet; //or m_dwHiExpTime = 0; //╣л╖с ╗ч┐ы└┌┤┬ ╗ч┐ы╟╥ ╝Ў ╛°┤┘.
		}
		else m_dwHiExpTime = HIEXP_TIME72;
		//----------------------------------------------------------------------------------------
		m_dwLastHiExpTime = GetTickCount();
		tRet = EXP_POTION;

		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		AddAbnormalInfo(ABNORMAL_HIEXP);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);	
		Send(TempBuf, TempBuf.GetLength());

		break;

	case SPECIAL_ITEM_MAGICFIND :
		if( (m_dwMagicFindTime+ MAGICFIND_TIME) > 3600*48*1000 ){
			SendSystemMsg("╨╥╘╦╥й╫ю╕▀└█╝╞48╨б╩▒", SYSTEM_NORMAL, TO_ME);
			return false;
		}
		if(m_iDisplayType == 5 || m_iDisplayType ==6) //╣л╖с ╗ч┐ы└┌└╬░б?
		{
			SendSystemMsg("╣л╖с ╗ч┐ы└┌┤┬ MagicFind╕ж ╗ч┐ы╟╥╝Ў ╛°╜└┤╧┤┘.", SYSTEM_NORMAL, TO_ME);
			return tRet; //or m_dwMagicFindTime = 0; //╣л╖с ╗ч┐ы└┌┤┬ ╗ч┐ы╟╥ ╝Ў ╛°┤┘.
		}
		else m_dwMagicFindTime += MAGICFIND_TIME;
		//-----------------------------------------------------------------------------------------
		m_dwLastMagicFindTime = GetTickCount();
		tRet = MAGIC_POTION;

		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		AddAbnormalInfo(ABNORMAL_MAGICFIND);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);
		Send(TempBuf, TempBuf.GetLength());

		break;

	case 1568 :
		if(m_dwMagicFindTime !=0){
			SendSystemMsg("─у╧╓╘┌╥╤╛н╙╨╨╥╘╦╫┤╠м,╬▐╖и╘┘╩╣╙├│м╝╢╨╥╘╦.", SYSTEM_NORMAL, TO_ME);
			return false;
		}
		if(m_iDisplayType == 5 || m_iDisplayType ==6) //╣л╖с ╗ч┐ы└┌└╬░б?
		{
			SendSystemMsg("╣л╖с ╗ч┐ы└┌┤┬ MagicFind╕ж ╗ч┐ы╟╥╝Ў ╛°╜└┤╧┤┘.", SYSTEM_NORMAL, TO_ME);
			return tRet; //or m_dwMagicFindTime = 0; //╣л╖с ╗ч┐ы└┌┤┬ ╗ч┐ы╟╥ ╝Ў ╛°┤┘.
		}
		else m_dwMagicFindTime = MAGICFIND_TIME72;
		//-----------------------------------------------------------------------------------------
		m_dwLastMagicFindTime = GetTickCount();
		tRet = MAGIC_POTION;

		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		AddAbnormalInfo(ABNORMAL_MAGICFIND);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);
		Send(TempBuf, TempBuf.GetLength());

		break;

    /*case SPECIAL_ITEM_HX_LS: //╗├╧ы┴щ╩п
		hour = m_dwHtExpTime/3600000;
		if(hour < 500)
		{
			m_dwHtExpTime += HIEXP_TIME_ONE;
			m_dwLastHtExpTime = GetTickCount();			
			SendDGDuration(1035,sSlot);
			TempBuf.Add(SET_USER_STATE);
			TempBuf.Add(m_uid + USER_BAND);
			AddStateInfo(STATE_5);
			TempBuf.Add(m_dwAbnormalInfo);
			TempBuf.Add(m_dwAbnormalInfo_);					
			Send(TempBuf, TempBuf.GetLength());		
		}
		break;
	case SPECIAL_ITEM_HX_JS: //╗├╧ы╛з╩п
		hour = m_dwMagicFtTime/3600000;
		if(hour < 500)
		{
			m_dwMagicFtTime += HIEXP_TIME_ONE;
			m_dwLastMagicFtTime = GetTickCount();			
			SendDGDuration(1289,sSlot);
			TempBuf.Add(SET_USER_STATE);
			TempBuf.Add(m_uid + USER_BAND);
			AddStateInfo(STATE_28);			
			TempBuf.Add(m_dwAbnormalInfo);
			TempBuf.Add(m_dwAbnormalInfo_);					
			Send(TempBuf, TempBuf.GetLength());		
		}
		break;*/
		case SPECIAL_ITEM_HX_LS: //╗├┴щ
			if (m_dwHtExpTime != 0)
			{
				SendSystemMsg("─·╥╤╛н╩╣╙├┴╦╗├╧ы┴щ╩п,╬▐╨ш╓╪╕┤╩╣╙├",SYSTEM_NPC,TO_ME);
			}
			else
			{
				SendSystemMsg("╗╢╙н─·╩╣╙├╗├╧ы┴щ╩п,─·╡─╬ф╞ў╕─╩¤+1гб",SYSTEM_NPC,TO_ME);
				m_dwHtExpTime += HIEXP_TIME_ONE;
				m_dwLastHtExpTime = GetTickCount();
				SendUserStatusSkill();
				SendDGDuration(1035,sSlot);
				TempBuf.Add(SET_USER_STATE);
				TempBuf.Add(m_uid + USER_BAND);
				AddStateInfo(STATE_5);
				TempBuf.Add(m_dwAbnormalInfo);
				TempBuf.Add(m_dwAbnormalInfo_);					
				Send(TempBuf, TempBuf.GetLength());		
			}
			break;
  case SPECIAL_ITEM_HX_JS: //╗├╧ы╛з╩п ║═│м╝╢╨╥╘╦╫ў╙├
		
		if (m_dwMagicFtTime > 0)
		{
			SendSystemMsg("─·╥╤╛н╩╣╙├┴╦╗├╧ы╛з╩п,╬▐╨ш╓╪╕┤╩╣╙├",SYSTEM_NPC,TO_ME);
		}
		else
		{
			SendSystemMsg("╗╢╙н─·╩╣╙├╗├╧ы╛з╩п,─·╡─╫░▒╕╕─╩¤+1гб",SYSTEM_NPC,TO_ME);
			m_dwMagicFtTime += HIEXP_TIME_ONE;
			m_dwLastMagicFtTime = GetTickCount();	
			SendUserStatusSkill();
			SendDGDuration(1289,sSlot);
			TempBuf.Add(SET_USER_STATE);
			TempBuf.Add(m_uid + USER_BAND);
			AddStateInfo(STATE_28);			
			TempBuf.Add(m_dwAbnormalInfo);
			TempBuf.Add(m_dwAbnormalInfo_);					
			Send(TempBuf, TempBuf.GetLength());	
		}
		break;
/////////////////////////////////////////////////////////////////////////////
//╬я╞╖бкбк>╩╪╗д╠ь╩╣
	case SPECIAL_ITEM_TS: 
	    {
			if(m_dwShTsTime > 0)
			{	SendSystemMsg("─у╧╓╘┌╥╤╙╨╩╪╗д╠ь╩╣╫┤╠м,╬▐╖и╘┘╩╣╙├╩╪╗д╠ь╩╣.", SYSTEM_NORMAL, TO_ME);	}
			else
			{
				if(m_dwShTsTime == 0)
				{
                 m_dwShTsTime=SHTS_TIME;			
	             m_dwShTsLaseTime=GetTickCount();
	             TempBuf.Add(SET_USER_STATE);
				 TempBuf.Add(m_dwAbnormalInfo);
	             TempBuf.Add(m_dwAbnormalInfo_);
                 FreedomCB();
	             Send(TempBuf, TempBuf.GetLength());
	             SendMyInfo( TO_INSIGHT, INFO_MODIFY );
				 SendSystemMsg("╩╣╙├│╔╣ж!╗ё╡├24╨б╩▒╩╪╗д╠ь╩╣╫┤╠м.", SYSTEM_NORMAL, TO_ME);
	             tRet = SERVER_ARK_WINNER;
	            }
			}
		} 
		break;
/////////////////////////////////////////////////////////////////////////////
//╬я╞╖бкбк>VIP10╠ь┐и240╨б╩▒
	case 1560:	
		{
			if(m_dwZaiXianTime > 0)
			{	SendSystemMsg("─·─┐╟░╥╤╩╟VIP,╟ы╡╜╞┌║є╘┘▓╣│ф!", SYSTEM_NORMAL, TO_ME);	} //─ъ┐и
			else
			{
                   // m_dwGuarDianTianShi = 3600 * 24 * 1000;
					m_dwZaiXianTime = 7;
					m_dwPD = 7;
					//SetXingfen();//3▒╢╨╦╖▄═╝▒ъ
				    //SetXingYun();//3▒╢╨╥╘╦═╝▒ъ
					//FreedomCB();//╩╪╗д╠ь╩╣
					SendSystemMsg("─·╥╤│╔╬к╓▄┐и╗с╘▒", SYSTEM_NORMAL, TO_ME);
					
					CString str;
	                str.Format("╣з╧▓!═ц╝╥[ %s ]╩╣╙├[╓▄┐и╗с╘▒]│╔╬кVIP╙├╗з!",m_strUserID);
	                SendSystemMsg(str.GetBuffer(str.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);

					CBufferEx TempBuf;
					TempBuf.Add(SET_USER_STATE);
				   // AddStateInfo(STATE_31);
					//AddAbnormalInfo(ABNORMAL_VIP);
					TempBuf.Add(m_uid + USER_BAND);
					TempBuf.Add(m_dwAbnormalInfo);
					TempBuf.Add(m_dwAbnormalInfo_);				
					Send(TempBuf, TempBuf.GetLength());
					SendInsight(TempBuf, TempBuf.GetLength());
					tRet = 14;
					SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в
	                SendUserStatusSkill();					// ╖в╦═╙├╗з╩Ї╨╘╩¤╛▌
                    CheckMagicItemMove();
	
                    TCHAR strOP[1024]; ZeroMemory(strOP,sizeof(strOP));//┤ц┤в╝╟┬╝
					SYSTEMTIME time;
		            GetLocalTime(&time);
					sprintf(strOP,"╘┌%d-%d-%d %d:%d╖╓╩╣╙├╓▄┐и",time.wYear,time.wMonth,time.wDay ,time.wHour,time.wMinute);
					WriteOpratorLog(strOP,CHAT_LOG);
			}
		} 
		break;

			case 1561:	
        {
			if(m_dwZaiXianTime > 0)
			{	SendSystemMsg("─·─┐╟░╥╤╩╟VIP,╟ы╡╜╞┌║є╘┘▓╣│ф!", SYSTEM_NORMAL, TO_ME);	}
			else
			{
                    //m_dwGuarDianTianShi = 3600 * 72 * 1000;
					m_dwZaiXianTime = 30;
					m_dwPD = 30;
					//SetXingfen();//3▒╢╨╦╖▄═╝▒ъ
				 //   SetXingYun();//3▒╢╨╥╘╦═╝▒ъ
					//FreedomCB();//╩╪╗д╠ь╩╣
					SendSystemMsg("─·╥╤│╔╬к╘┬┐и╗с╘▒", SYSTEM_NORMAL, TO_ME);
					
					CString str;
	                str.Format("╣з╧▓!═ц╝╥[ %s ]╩╣╙├[╘┬┐и╗с╘▒]│╔╬кVIP╙├╗з!",m_strUserID);
	                SendSystemMsg(str.GetBuffer(str.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);

					CBufferEx TempBuf;
					TempBuf.Add(SET_USER_STATE);
				    //AddStateInfo(STATE_31);
					//AddAbnormalInfo(ABNORMAL_VIP);
					TempBuf.Add(m_uid + USER_BAND);
					TempBuf.Add(m_dwAbnormalInfo);
					TempBuf.Add(m_dwAbnormalInfo_);				
					Send(TempBuf, TempBuf.GetLength());
					SendInsight(TempBuf, TempBuf.GetLength());
					tRet = 14;
					SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в
	                SendUserStatusSkill();					// ╖в╦═╙├╗з╩Ї╨╘╩¤╛▌
                    CheckMagicItemMove();

                    TCHAR strOP[1024]; ZeroMemory(strOP,sizeof(strOP));//┤ц┤в╝╟┬╝
					SYSTEMTIME time;
		            GetLocalTime(&time);
					sprintf(strOP,"╘┌%d-%d-%d %d:%d╖╓╩╣╙├╘┬┐и",time.wYear,time.wMonth,time.wDay ,time.wHour,time.wMinute);
					WriteOpratorLog(strOP,CHAT_LOG);
			}
		} 
		break;
			case 1562:	
        {
			if(m_dwZaiXianTime > 0)
			{	SendSystemMsg("─·─┐╟░╥╤╩╟VIP,╟ы╡╜╞┌║є╘┘▓╣│ф!", SYSTEM_NORMAL, TO_ME);	}
			else
			{
                   // m_dwGuarDianTianShi = 3600 * 240 * 1000;
					m_dwZaiXianTime = 365;
					m_dwPD = 365;
					//SetXingfen();//3▒╢╨╦╖▄═╝▒ъ
				 //   SetXingYun();//3▒╢╨╥╘╦═╝▒ъ
					//FreedomCB();//╩╪╗д╠ь╩╣
					SendSystemMsg("─·╥╤│╔╬к─ъ┐и╗с╘▒", SYSTEM_NORMAL, TO_ME);
					
					CString str;
	                str.Format("╣з╧▓!═ц╝╥[ %s ]╩╣╙├[─ъ┐и╗с╘▒]│╔╬кVIP╙├╗з!",m_strUserID);
	                SendSystemMsg(str.GetBuffer(str.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);

					CBufferEx TempBuf;
					TempBuf.Add(SET_USER_STATE);
				    //AddStateInfo(STATE_31);
					//AddAbnormalInfo(ABNORMAL_VIP);
					TempBuf.Add(m_uid + USER_BAND);
					TempBuf.Add(m_dwAbnormalInfo);
					TempBuf.Add(m_dwAbnormalInfo_);				
					Send(TempBuf, TempBuf.GetLength());
					SendInsight(TempBuf, TempBuf.GetLength());
					tRet = 14;
					SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в
	                SendUserStatusSkill();					// ╖в╦═╙├╗з╩Ї╨╘╩¤╛▌
                    CheckMagicItemMove();

                    TCHAR strOP[1024]; ZeroMemory(strOP,sizeof(strOP));//┤ц┤в╝╟┬╝
					SYSTEMTIME time;
		            GetLocalTime(&time);
					sprintf(strOP,"╘┌%d-%d-%d %d:%d╖╓╩╣╙├─ъ┐и",time.wYear,time.wMonth,time.wDay ,time.wHour,time.wMinute);
					WriteOpratorLog(strOP,CHAT_LOG);
			}
		} 
		break;
				case 1563:	
        {
			if(m_dwZaiXianTime > 0)
			{	SendSystemMsg("─·─┐╟░╥╤╩╟VIP,╟ы╡╜╞┌║є╘┘▓╣│ф!", SYSTEM_NORMAL, TO_ME);	}
			else
			{
                   // m_dwGuarDianTianShi = 3600 * 240 * 1000;
					m_dwZaiXianTime = 9999;
					m_dwPD = 9999;
					//SetXingfen();//3▒╢╨╦╖▄═╝▒ъ
				 //   SetXingYun();//3▒╢╨╥╘╦═╝▒ъ
					//FreedomCB();//╩╪╗д╠ь╩╣
					SendSystemMsg("─·╥╤│╔╬к╓╒╔·╗с╘▒", SYSTEM_NORMAL, TO_ME);
					
					CString str;
	                str.Format("╣з╧▓!═ц╝╥[ %s ]╩╣╙├[╓╒╔э╗с╘▒┐и┐и]│╔╬кVIP╙├╗з!",m_strUserID);
	                SendSystemMsg(str.GetBuffer(str.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);

					CBufferEx TempBuf;
					TempBuf.Add(SET_USER_STATE);
				    //AddStateInfo(STATE_31);
					//AddAbnormalInfo(ABNORMAL_VIP);
					TempBuf.Add(m_uid + USER_BAND);
					TempBuf.Add(m_dwAbnormalInfo);
					TempBuf.Add(m_dwAbnormalInfo_);				
					Send(TempBuf, TempBuf.GetLength());
					SendInsight(TempBuf, TempBuf.GetLength());
					tRet = 14;
					SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в
	                SendUserStatusSkill();					// ╖в╦═╙├╗з╩Ї╨╘╩¤╛▌
                    CheckMagicItemMove();

                    TCHAR strOP[1024]; ZeroMemory(strOP,sizeof(strOP));//┤ц┤в╝╟┬╝
					SYSTEMTIME time;
		            GetLocalTime(&time);
					sprintf(strOP,"╘┌%d-%d-%d %d:%d╖╓╩╣╙├╓╒╔·┐и",time.wYear,time.wMonth,time.wDay ,time.wHour,time.wMinute);
					WriteOpratorLog(strOP,CHAT_LOG);
			}
		} 
		break;

   case SPECIAL_ITEM_KILLREMOVE :	// kill count╕ж ╟╧│к ┴┘┐й┴╪┤┘.
		m_iCityValue=m_iCityValue+1000;
		GetCityRank();
		if(m_sKillCount > 0){
			m_sKillCount -= 1;
			if( m_sKillCount < 0 ) m_sKillCount = 0;
		}
		tRet = KILLREMOVE_POTION;
		break;
	case EVENTITEM_SID_MOON: //└╧═╖
		if(m_dwAdamantineTime != 0 || m_dwMightyWeaponTime != 0 )
		{
			return FALSE;
		}
		SetBerserker(60 * 5);
		tRet = 19;
		break;
	case 1280: //╔ё╝г▒ж╩п(╖т╙б)
		{
		 int iNum = -1;
		 ItemList TempItem;
	     iNum = GetSameItem(TempItem, INVENTORY_SLOT);
		 iNum = GetEmptySlot(INVENTORY_SLOT);
		 if(iNum < 1)						
		 {

		    SendSystemMsg("░№╣№┐╒╝ф┬·┴╦,╟ы╓┴╔┘┴Ї1╕Ў┐╒╝ф╜т╖т!", SYSTEM_ERROR, TO_ME);
		 }else 
		 {
			 int iRandom = 0;
			 iRandom = myrand(1, 7);
			 switch(iRandom)
			 {
			 case 1: 
				 GiveAllItem(1287, 1, 0, 2, 162, 0, 0, 0, 0);//15┴ж
				 break;
			 case 2: 
				 GiveAllItem(1287, 1, 0, 2, 156, 0, 0, 0, 0);//15╠х╓╩
				 break;
			 case 3: 
				 GiveAllItem(1287, 1, 0, 2, 158, 0, 0, 0, 0);//15├Ї╜▌
				 break;
			 case 4: 
				 GiveAllItem(1287, 1, 0, 2, 164, 0, 0, 0, 0);//15╓╟╗█
				 break;
			 case 5:
				 GiveAllItem(1287, 1, 0, 2, 166, 0, 0, 0, 0);//15╓╟┴ж
				 break;
			 case 6: 
				 GiveAllItem(1287, 1, 0, 2, 190, 0, 0, 0, 0);//50┐╣
				 break;
			 case 7: 
				 GiveAllItem(1287, 1, 0, 2, 193, 0, 0, 0, 0);//150╤к
				 break;
			
			 default:
		           return FALSE;
			 }
			 tRet = 18;
		  }	
		}
		 break;
		 /////////////////////
	//	case 998:
	//	if( FindItem( 998) >= 1 )
	//	{
	//		RobItem( 998, 1 );
	//		GiveItem( 724, 10 );
	  //      tRet = 17;
	//	}
	//	break;
	
		 //////////////////
	case 1110: //▒ж╧ф ╣з╧▓╖в▓╞
		{
	
          int iNum = -1;
		  ItemList TempItem;
	      iNum = GetSameItem(TempItem, INVENTORY_SLOT);
		  if( m_sLevel >= 70)
		  {
		 
            if(iNum == -1)							
		    { 
			  iNum = GetEmptySlot(INVENTORY_SLOT);
			  if(iNum < 1)						
		      {

		    		SendSystemMsg("░№╣№┐╒╝ф┬·┴╦,╟ы╓┴╔┘┴Ї1╕Ў┐╒╝ф┐к▒ж╧ф!", SYSTEM_ERROR, TO_ME);
			  }

			/*  	int iRandom = myrand(0, 100);	
				if(iRandom > 50 && iRandom < 53)  
				{
					GiveItemAll(443,1,10,0,0,0,0,0,0,0,0,0,0);
				}else if(iRandom > 55 && iRandom < 58)
				{
					GiveItemAll(643,1,10,0,0,0,0,0,0,0,0,0,0);
				}else { */

			       RandChouJiang();
			       tRet = 18;
			 }
		  }
		
		else{
                SendSystemMsg("─·╡╚╝╢▓╗╫у70,╬▐╖и┐к╞Ї!", SYSTEM_ERROR, TO_ME);
				return FALSE;
		    }
		}
        break;
		//////////////////////////////////////////////
		
		case 938://╫░▒╕┤Є░№         //wear 116
	   {
		//================================================================================╩╫╧╚╝ь▓т╔э╔╧


		 bool bHaveItem = false;
		//╔э╔╧╩╟╖ё╙╨╫░▒╕
		for( int i = 0;i<10;i++)
		{
			if(m_UserItem[i].sSid != -1)
			{
				bHaveItem = true;
				break;
			}
		}
		if(bHaveItem)
		{
			SendEventMsg("╟ы╚б╧┬─·╔э╔╧╡─╫░▒╕╩╫╩╬");
			return FALSE ;
		}
		//╔э╔╧╩╟╖ё╙╨╫░▒╕
		for( int i = 34;i<40;i++)
		{
			if(m_UserItem[i].sSid != -1)
			{
				bHaveItem = true;
				break;
			}
		}
		if(bHaveItem)
		{
			SendEventMsg("╟ы╚б╧┬─·╔э╔╧╡─╗·╨╡╩╪╗д");
			return FALSE ;
		}
		if (o_yehuoini[0]->neice != 1) return FALSE ;
        //=============================================================================================
	     if (m_byClass==0)
	    {
		 // ╬╗╓├ ▒р║┼ ╩¤┴┐ ╤╒╔л ╕─╩¤ ╩Ї╨╘0 ╩Ї╨╘1 ╩Ї╨╘2 ╩Ї╨╘3 ╩Ї╨╘4
		GiveNewerItem( 4 ,514, 1, 3, 10, 145, 137, 113, 128, 0 );//╓ў╬ф╞ў
		GiveNewerItem( 5 ,1, 1, 3, 0, 158, 158, 162, 162, 0 );//╕▒╬ф╞ў
		GiveNewerItem( 0 ,1056, 1, 12, 10, 135, 135, 107, 107, 107 );//═╖┐°
		GiveNewerItem( 9 ,1092, 1, 12, 10, 135, 135, 107, 107, 107 );//╨м╫╙
		GiveNewerItem( 1 ,1060, 1, 12, 10, 135, 135, 107, 107, 107 );//╥┬╖■
		GiveNewerItem( 8 ,1064, 1, 12, 10, 135, 135, 107, 107, 107 );//┐у╫╙
        GiveNewerItem( 2 ,704, 1, 3, 8, 141, 49, 137, 1, 0 );//╢·╗╖
		GiveNewerItem( 3 ,703, 1, 3, 8, 141, 49, 137, 1, 0 );//╧ю┴┤
		GiveNewerItem( 6 ,643, 1, 3, 8, 141, 49, 137, 1, 0 );//╜ф╓╕1
		GiveNewerItem( 7 ,643, 1, 3, 8, 141, 49, 137, 1, 0 );//╜ф╓╕2
        GiveNewerItem( 34 ,877, 1, 2,  0, 9, 16, 16, 16, 16 );//╗·╨╡├▒╫╙
		GiveNewerItem( 35 ,884, 1, 2, 0, 8, 16, 16, 16, 16 );//╗·╨╡╥┬╖■
		GiveNewerItem( 37 ,901, 1, 2, 0, 5, 16, 16, 16, 16 );//╗·╨╡┐у╫╙
		GiveNewerItem( 36 ,987, 1, 2, 0, 59, 16, 16, 16, 16 );//▒╪╔▒
        GiveNewerItem( 38 ,961, 1, 9, 2, 30, 12, 18, 6, 0 );//666╩╪╗д╝╝─▄
        GiveNewerItemFinish();
		tRet = 17;
	   }else if (m_byClass==1){
	    // ╬╗╓├ ▒р║┼ ╩¤┴┐ ╤╒╔л ╕─╩¤ ╩Ї╨╘0 ╩Ї╨╘1 ╩Ї╨╘2 ╩Ї╨╘3 ╩Ї╨╘4
		GiveNewerItem( 4 ,479, 1, 18, 10, 145, 145, 117, 117, 0 );//╓ў╬ф╞ў
		GiveNewerItem( 5 ,3, 1, 3, 0, 158, 158, 162, 162, 0 );//╕▒╬ф╞ў
		GiveNewerItem( 0 ,1056, 1, 12, 10, 110, 135, 110, 135, 110 );//═╖┐°
		GiveNewerItem( 9 ,1092, 1, 12, 10, 110, 135, 110, 135, 110 );//╨м╫╙
		GiveNewerItem( 1 ,1068, 1, 12, 10, 110, 135, 110, 135, 110 );//╥┬╖■
		GiveNewerItem( 8 ,1072, 1, 12, 10, 110, 135, 110, 135, 110 );//┐у╫╙
        GiveNewerItem( 2 ,704, 1, 3, 8, 141, 53, 137, 4, 0 );//╢·╗╖
		GiveNewerItem( 3 ,703, 1, 3, 8, 141, 53, 137, 4, 0 );//╧ю┴┤
		GiveNewerItem( 6 ,643, 1, 3, 8, 141, 53, 137, 4, 0 );//╜ф╓╕1
		GiveNewerItem( 7 ,643, 1, 3, 8, 141, 53, 137, 4, 0 );//╜ф╓╕2
        GiveNewerItem( 34 ,877, 1, 2,  0, 14, 27, 27, 27, 27 );//╗·╨╡├▒╫╙
		GiveNewerItem( 35 ,884, 1, 2, 0, 10, 27, 27, 27, 27  );//╗·╨╡╥┬╖■
		GiveNewerItem( 37 ,901, 1, 2, 0, 5, 27, 27, 27, 27  );//╗·╨╡┐у╫╙
		GiveNewerItem( 36 ,987, 1, 2, 0, 59, 27, 27, 27, 27 );//▒╪╔▒
        GiveNewerItem( 38 ,961, 1, 9, 2, 30, 12, 18, 6, 0 );//666╩╪╗д╝╝─▄
        GiveNewerItemFinish();
		tRet = 17;
		}else  if (m_byClass==2){
		 // ╬╗╓├ ▒р║┼ ╩¤┴┐ ╤╒╔л ╕─╩¤ ╩Ї╨╘0 ╩Ї╨╘1 ╩Ї╨╘2 ╩Ї╨╘3 ╩Ї╨╘4
		GiveNewerItem( 4 ,443, 1, 18, 10, 145, 137, 120, 128, 0 );//╓ў╬ф╞ў
		GiveNewerItem( 5 ,7, 1, 3, 0, 158, 158, 162, 162, 0 );//╕▒╬ф╞ў
		GiveNewerItem( 0 ,1056, 1, 12, 10, 107, 135, 135, 107, 107 );//═╖┐°
		GiveNewerItem( 9 ,1092, 1, 12, 10, 107, 135, 135, 107, 107 );//╨м╫╙
		GiveNewerItem( 1 ,1076, 1, 12, 10, 107, 135, 135, 107, 107 );//╥┬╖■
		GiveNewerItem( 8 ,1080, 1, 12, 10, 107, 135, 135, 107, 107 );//┐у╫╙
        GiveNewerItem( 2 ,704, 1, 3, 8, 141, 56, 137, 1, 0 );//╢·╗╖
		GiveNewerItem( 3 ,703, 1, 3, 8, 141, 56, 137, 1, 0 );//╧ю┴┤
		GiveNewerItem( 6 ,643, 1, 3, 8, 141, 56, 137, 1, 0 );//╜ф╓╕1
		GiveNewerItem( 7 ,643, 1, 3, 8, 141, 56, 137, 1, 0 );//╜ф╓╕2
        GiveNewerItem( 34 ,877, 1, 2,  0, 9, 16, 16, 16, 16 );//╗·╨╡├▒╫╙
		GiveNewerItem( 35 ,884, 1, 2, 0, 8, 16, 16, 16, 16 );//╗·╨╡╥┬╖■
		GiveNewerItem( 37 ,901, 1, 2, 0, 5, 16, 16, 16, 16 );//╗·╨╡┐у╫╙
		GiveNewerItem( 36 ,987, 1, 2, 0, 59, 16, 16, 16, 16 );//▒╪╔▒
        GiveNewerItem( 38 ,961, 1, 9, 2, 30, 12, 18, 6, 0 );//666╩╪╗д╝╝─▄
        GiveNewerItemFinish();
		tRet = 17;
		}else  if (m_byClass==3){
		 // ╬╗╓├ ▒р║┼ ╩¤┴┐ ╤╒╔л ╕─╩¤ ╩Ї╨╘0 ╩Ї╨╘1 ╩Ї╨╘2 ╩Ї╨╘3 ╩Ї╨╘4
		GiveNewerItem( 4 ,409, 1, 18, 10, 145, 137, 125, 128, 0 );//╓ў╬ф╞ў
		GiveNewerItem( 5 ,10, 1, 3, 0, 158, 158, 162, 162, 0 );//╕▒╬ф╞ў
		GiveNewerItem( 0 ,1056, 1, 12, 10, 109, 135, 135, 109, 109 );//═╖┐°
		GiveNewerItem( 9 ,1092, 1, 12, 10, 109, 135, 135, 109, 109 );//╨м╫╙
		GiveNewerItem( 1 ,1084, 1, 12, 10, 109, 135, 135, 109, 109 );//╥┬╖■
		GiveNewerItem( 8 ,1088, 1, 12, 10, 109, 135, 135, 109, 109 );//┐у╫╙
        GiveNewerItem( 2 ,704, 1, 3, 8, 141, 61, 137, 3, 0 );//╢·╗╖
		GiveNewerItem( 3 ,703, 1, 3, 8, 141, 61, 137, 3, 0 );//╧ю┴┤
		GiveNewerItem( 6 ,643, 1, 3, 8, 141, 61, 137, 3, 0 );//╜ф╓╕1
		GiveNewerItem( 7 ,643, 1, 3, 8, 141, 61, 137, 3, 0 );//╜ф╓╕2
        GiveNewerItem( 34 ,877, 1, 2,  0, 9, 24, 24, 24, 24 );//╗·╨╡├▒╫╙
		GiveNewerItem( 35 ,884, 1, 2, 0, 8, 24, 24, 24, 24 );//╗·╨╡╥┬╖■
		GiveNewerItem( 37 ,901, 1, 2, 0, 5, 24, 24, 24, 24 );//╗·╨╡┐у╫╙
		GiveNewerItem( 36 ,987, 1, 2, 0, 59, 24, 24, 24, 24 );//▒╪╔▒
        GiveNewerItem( 38 ,961, 1, 9, 2, 30, 12, 18, 6, 0 );//666╩╪╗д╝╝─▄
        GiveNewerItemFinish();
		tRet = 17;
		
		}
	  }
	     break;
			
		/////////////////////////////////////////////////////////////////////▓т╩╘╥▓│╔╣ж
		
	case 1299://╨▐└э╗·╝╫1299
		{
			if(m_UserItem[39].sSid == 1184){
				m_UserItem[39].sBullNum = 10800;
//				m_UserItem[39].sDuration = 10;							
				SendCharData();
				SendMyInfo( TO_INSIGHT, INFO_MODIFY );	
				tRet = 17;
			}
			else{
				SendSystemMsg("▒╪╨ы╫░╓├│м╝╢╗·╝╫▓┼─▄╩╣╙├!", SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}
		break;
	case 1182:   //╩╣╙├╗·╝╫┐ё▒й╥й╦о
		{
			if(m_UserItem[39].sSid == 1184){
	//			m_UserItem[39].sBullNum = 10800;
				m_UserItem[39].sDuration = 10;							
				SendCharData();
				SendMyInfo( TO_INSIGHT, INFO_MODIFY );	
				tRet = 19;
			}
			else{
				SendSystemMsg("╫░╓├┴╦│м╝╢╗·╝╫▓┼─▄╩╣╙├.", SYSTEM_ERROR, TO_ME);
				return FALSE;
			    }
		   }
		   break;
		
	case 1304:
		{			
			if(m_UserItem[39].sSid != 1184)
			{
				SendSystemMsg("▒╪╨ы╫░╓├│м╝╢╗·╝╫,▓┼─▄╔¤╝╢┐╪╓╞╧╡═│!", SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
			CBufferEx TempBuf;
			TempBuf.Add((BYTE)236);
			TempBuf.Add((BYTE)1);		
			Send(TempBuf, TempBuf.GetLength());
		  }
		  break;
	case SPECIAL_ITEM1441:
		{
			if((m_dwShopPingDN + 20) < 21000000000)
			{
			//	GiveShopPingDN(20);
				tRet = 13;
				SendSystemMsg("╩╣╙├╘к▒ж╚п╗ё╡├20╘к▒ж!", SYSTEM_NORMAL, TO_ME);
			//	SendUserStatusSkill();
			}
		}
		break;
	case SPECIAL_ITEM1442:
		{
			if((m_dwShopPingDN + 50) < 21000000000)
			{
		//		GiveShopPingDN(50);
				tRet = 13;
				SendSystemMsg("╩╣╙├╘к▒ж╚п╗ё╡├50╘к▒ж!", SYSTEM_NORMAL, TO_ME);
			//	SendUserStatusSkill();
			}
		}
		break;
	case SPECIAL_ITEM1443:
		{
			if((m_dwShopPingDN + 100) < 21000000000)
			{
		//		GiveShopPingDN(100);
				tRet = 13;
				SendSystemMsg("╩╣╙├╘к▒ж╚п╗ё╡├100╘к▒ж!", SYSTEM_NORMAL, TO_ME);
			//	SendUserStatusSkill();
			}
		}
		break;
	case SPECIAL_ITEM1444:
		{
		  if(g_Shop.m_QanBao_KG == 1)
          {
			if((m_dwShopPingDN + 500) < 21000000000)
			{
		//		GiveShopPingDN(500);
				tRet = 13;
				SendSystemMsg("╩╣╙├╘к▒ж╚п╗ё╡├500╘к▒ж!", SYSTEM_NORMAL, TO_ME);
			//	SendUserStatusSkill();
			}
		   }
		}
		break;
	case SPECIAL_ITEM1445:
		{
		  if(g_Shop.m_QanBao_KG == 1)
          {
			if((m_dwShopPingDN + 4000) < 21000000000)
			{
		//		GiveShopPingDN(4000);
				tRet = 13;
				SendSystemMsg("╩╣╙├╘к▒ж╚п╗ё╡├4000╘к▒ж!", SYSTEM_NORMAL, TO_ME);
			//	SendUserStatusSkill();
			}
		  }
		}
		break;
	case 1019: //╤Є
		{
		if((m_dwDN + 1000000) < 21000000000)
			{
				GiveDN(1000000);
				tRet = 13;
				SendSystemMsg("─·╗ё╡├100═Є╛Ў╒╜▒╥!", SYSTEM_NORMAL, TO_ME);
				
			}
		}
		break;
	case 1042:
	    sSid = m_UserItem[33].sSid;	
	    if(sSid != 1053 && sSid != 1089 && sSid != 1054 && sSid != 1055 && sSid != 1056 && sSid != 1090 && 
	    sSid != 1091 && sSid != 1092 && sSid != 1065 && sSid != 1066 && sSid != 1067 && sSid != 1068 &&
	    sSid != 1057 && sSid != 1058 && sSid != 1059 && sSid != 1060 && sSid != 1069 && sSid != 1070 &&
	    sSid != 1071 && sSid != 1072 && sSid != 1061 && sSid != 1062 && sSid != 1063 && sSid != 1064 &&
	    sSid != 1082 && sSid != 1083 && sSid != 1084 && sSid != 1073 && sSid != 1074 && sSid != 1075 &&
	    sSid != 1076 && sSid != 1085 && sSid != 1086 && sSid != 1087 && sSid != 1088 && sSid != 1077 &&
	    sSid != 1078 && sSid != 1079 && sSid != 1080 && sSid != 1081 && sSid != 1709 && sSid != 1710 &&
		sSid != 1711 && sSid != 1712 && sSid != 1713 && sSid != 1714 && sSid != 1715 && sSid != 1716|| sSid == -1)
	    {
        SendSystemMsg( "╟ы░╤╥к╗╣╘н╡─░┘╝╢╫░▒╕╖┼▒│░№╫ю║є╥╗╨╨╫ю║є╥╗╕ё", SYSTEM_ERROR, TO_ME);
		return FALSE;
	    }	
		HuanYuan100();
		tRet = SERVER_ARK_WINNER;
		break;
	case 1147:
	    sSid = m_UserItem[33].sSid;	
	    if(  (sSid != 1199 && sSid != 1200 && sSid != 1201 && sSid != 1202 &&
		 sSid != 1203 && sSid != 1204 && sSid != 1205 && sSid != 1206  &&
		 sSid != 1207 && sSid != 1208 && sSid != 1209 && sSid != 1210  &&
		 sSid != 1211 && sSid != 1212 && sSid != 1213 && sSid != 1214 ) || sSid == -1)
	    {
        SendSystemMsg( "╟ы░╤╥к╗╣╘н╡─130╝╢╫░▒╕╖┼▒│░№╫ю║є╥╗╨╨╫ю║є╥╗╕ё", SYSTEM_ERROR, TO_ME);
		return FALSE;
	    }	
		HuanYuan130();
		tRet = SERVER_ARK_WINNER;
		break;
	case 1108: // super posion
		if( m_iCityValue >= 64000) return FALSE;
        m_sCityRank=5;
        m_sKillCount=0;
        m_iCityValue=64000;
		SendUserStatusSkill();

		tRet = KILLREMOVE_POTION;

		TempBuf.Add(SET_USER_PK_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		TempBuf.Add((BYTE)0x01);
		TempBuf.Add(m_sCityRank);
		SendInsight(TempBuf, TempBuf.GetLength());
		break;
	case 1109: // add XP posion
        m_dwXP += 10000;
		SendXP();
		tRet = KILLREMOVE_POTION;	
		break;

	//case 724: // ceshiba
	//	
	//	if( FindItem( 724) >= 1000  &&  FindItem( 724) <= 32000) 
	//	{
	//		if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE ) return FALSE; 
	//		int iSlot = -1;
	//	    iSlot = GetEmptySlot(INVENTORY_SLOT);
	//		if (FindItem( 725) <=0 )
	//		{
	//			if( iSlot == -1 )
	//			{
	//				SendEventMsg("─·├╗╙╨╫у╣╗╡─┐╒╝ф!");
	//				return FALSE; 
	//			}
	//		}
	//		RobItem( 724, 1000 );
	//		GiveItemAll(725,1,0,0,0,0,0,0,0,0,0,0,0);
	//		SendEventMsg("1000[╞╒═и▒ъ╓╛]╥╤╫к╗╗╬к[╜Ё▒ъ]!");
	//	}else
	//			SendEventMsg("╩¤┴┐▓╗╫у1000,╬▐╖и╫к╗╗╬к╜Ё▒ъ!");
	//		
	//		break;

  case 725: //▒ъ╓╛╫к╗╗
	  {
		if( FindItem( 725) < 1)  return FALSE; 
		if (m_bLive == USER_DEAD) return FALSE;	//╦└═Ў╟ы╟є	
		if (m_bNoItemMove == TRUE) return FALSE;		//╬я╞╖╥╞╢п╟ы╟є
	    if (m_bViewingAShop == TRUE) return FALSE;	//▓щ┐┤╔╠╡ъ╟ы╟є	
	    if (m_state != STATE_GAMESTARTED) return FALSE; //╙╬╧╖╬┤┐к╩╝╟ы╟є
	    if ( m_bZoneLogOut )return FALSE;
		if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE) return FALSE;

		int iSlot = -1;
	    iSlot = GetEmptySlot(INVENTORY_SLOT);
		if (FindItem( 724) <=0 )
		{
			if( iSlot == -1 )
			{
				SendEventMsg("─·├╗╙╨╫у╣╗╡─┐╒╝ф!");
				return FALSE; 
			}
		}
		if( FindItem( 724) + 1000  > 32000) 
		{
			SendEventMsg("│м╣¤┐╔╨п┤°╡─╫ю┤є▒ъ╓╛╩¤┴┐!");
			return FALSE; 
		}
		
		RobItem( 725, 1 );
		GiveItemAll(724,1000,0,0,0,0,0,0,0,0,0,0,0);
		SendEventMsg("╫к╗╗│╔╣ж,─·╗ё╡├1000[╞╒═и▒ъ╓╛]!");
		break;
	  }
//===================================================================================

	case 1670: // ╒┘╗╜╥┴═┐┬▐╜║─╥
		{
          if(m_tHuFaType != 0)
				return FALSE;
			return CallHuFa(0x01);
		    break;
		}
    case 1671: // ╒┘╗╜╞╒└╫╦■╜║─╥
		{
          if(m_tHuFaType != 0)
				return FALSE;
			return CallHuFa(0x02);
		    break;
		}
	case 1672: // ╒┘╗╜┐╦└═╦╣╜║─╥
		{
          if(m_tHuFaType != 0)
				return FALSE;
			return CallHuFa(0x03);
		    break;
		}
	case 1673: // ╒┘╗╜╥┴╬ў╦╣╜║─╥
		{
          if(m_tHuFaType != 0)
				return FALSE;
			return CallHuFa(0x04);
		    break;
		}
/*    case 1132:
		ZoneMoveReq(409,97,55);
		tRet = 17;
		break;*/
	case 1498: // │ш╬я╦╟┴╧▓╣│ф->╓╥│╧╢╚
		{
          if(m_tBabyCall != 1) return FALSE;//├╗╙╨│ш╩╟▓╗─▄╙├╡─
		  if(m_sFealty != 100)//╓╥│╧╢╚▓╗┬·
		  {
			//	if((m_sFealty + 1) < 101) m_sFealty += 1;
			//	SendEventMsg("╩╣╙├╦╟┴╧,│ш╬я[╓╥│╧╢╚]╘Ў╝╙[ 1 ]");
			     m_sFealty = 100;
				SendEventMsg("╩╣╙├╦╟┴╧,│ш╬я[╓╥│╧╢╚]▓╣┬·!");
				SendBabyInfo();
		   }  
		   tRet = 17;
		    break;
		}
	case 1007:
		ZoneMoveReq(409,68,88);
		tRet = 17;
		break;
	case 1100:
		if (m_curz == 59) 	tRet = 19;
		break;
	case 1017:
		if( FindItem( 854) >= 1 )
		{
			RobItem( 854, 1 );
			GiveItem( 862, 2 );
		//	ZoneMoveReq(409,97,55);
			tRet = 17;
		}
		break;
/*	case 862:
		GiveItem( 1118, 1 );
		ZoneMoveReq(409,97,55);
		tRet = 17;
		break;
		*/
		
  /* //▒ф╔э╬я╞╖бкбк>└╟▒ф
	case SPECIAL_ITEM_BIANLANG:
		if(m_dwBFindTime > 0)
		{
			m_sDramageUp = true;					// ┤Є┐к╔╦║ж╠с╕▀
			BianShen(0);
			CheckMagicItemMove();
			tRet = SERVER_GUILD_INVITE;
		}
		break;*/
		//▒ф╔э╬я╞╖бкбк>└╟▒ф
	case SPECIAL_ITEM_BIANLANG:
       {
		if(m_dwBFindTime > 0)
		
			SendEventMsg("─·╥╤╩╟▒ф╔э╫┤╠м,╟ы╬Ё╓╪╕┤╩╣╙├!");
       else
			{
            m_sDramageUp = true;					// ┤Є┐к╔╦║ж╠с╕▀
			BianShen(0);
			CheckMagicItemMove();
			tRet = SERVER_GUILD_INVITE;
			SendEventMsg("10╨б╩▒─┌╔·├№╘Ў╝╙100,╖└╙∙╘Ў╝╙15,─з┐╣╘Ў╝╙30,╣е╗ў╘Ў╝╙15,├№╓╨╘Ў╝╙20!");
		    }
		}
		break;

		
/////////////////////////////////////////////////////////////////////////////
//▒ф╔э╬я╞╖бкбк>╨▄▒ф
	case SPECIAL_ITEM_BIANXIONG:
		if(m_iSkin == 0)
		{
		//	m_sDramageUp = true;					// ┤Є┐к╔╦║ж╠с╕▀
		//	BianShen(2);
			CheckMagicItemMove();
			tRet = SERVER_GUILD_INVITE;
		}
		break;
	case 1016:  //╗├╧ы
		 
	  if(m_dwHXTime > 0)
	  {
		  SendEventMsg("─·╡▒╟░╥╤╛н╩╟╗├╧ы╫┤╠м╬▐╖и╓╪╕┤╩╣╙├!");return FALSE; }

	  else   
	        {
			
		    m_dwHXTime = 3600*3*1000;
			m_dwLastHXTime = GetTickCount();
			CheckMagicItemMove();
			tRet = SERVER_ARK_WINNER;
			SendEventMsg("─·╗ё╡├3╨б╩▒╗├╧ы╬ф╞ў╩╣╙├╚и(▓╗┼х┤ў╗├╧ы╬ф╞ў▓╗╝╞╩▒)");
			}
	   break;
	   case 1742:  //сў┴╘╥й╦о
		 
	  if(m_dwSGTime > 0)
	  {
		  SendEventMsg("─·╡▒╟░╥╤╩╟сў┴╘╩▒╝ф╬▐╖и╓╪╕┤╩╣╙├!");return FALSE; 

	  
	  }else if(m_dwZaiXianTime > 0)
	  {
		   SendEventMsg("VIP╗с╘▒╥╤╗ё╡├сў┴╘╩▒╝ф!");return FALSE; 
	  }else{  
	        
		    m_dwSGTime = 3600*1*1000;	
			m_dwLastSGTime = GetTickCount();
			CheckMagicItemMove();
			tRet = 25;
			SendEventMsg("─·╗ё╡├1╨б╩▒╖ш┐ёсў┴╘╩▒╝ф");
	  }
	   break;
	/*case 1015:
		if (m_sLevel >=105  && m_byClass == 1 && m_dwXP >=30000) 
		{

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == 30) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		m_UserPsi[m_nHavePsiNum].sSid = 30;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= 30000;

    	TempBuf.Add(BUY_PSY_RESULT);
	    TempBuf.Add((BYTE)1);
    	TempBuf.Add((short)1);
    	TempBuf.Add(30);
    	Send(TempBuf, TempBuf.GetLength());
        SendXP();

        tRet = 15;
		}
     	break;
		*/
	}


	return tRet;
}
void USER::JJSpeed() //┐ь╦┘▒ф═т╣█
{
	if(m_UserItem[39].sSid == -1) return;
	if(m_UserItem[39].sSid == 1184)
	{
		if(m_UserItem[39].tMagic[7] == 7)//╝ь▓т╗·╝╫╕╜╝■2╡─╩Ї╨╘╬к7╘Є▒ф╔э╒╜╔ё
		{
			SendPsiAttackResult(SUCCESS, m_uid + USER_BAND, (BYTE)204);//╘Ў╝╙▒ф╔э╨з╣√
			BianShen(8);		
		}else if (m_iSkin == 0)
        {
		   SendPsiAttackResult(SUCCESS, m_uid + USER_BAND, (BYTE)204);//╘Ў╝╙▒ф╔э╨з╣√
		   BianShen(5);
	    }
	}
}
void USER::BianShen(int x)
{
	//HuanYuanBianShen();
	m_iSkin = x;							// ╕─▒ф╔э╠х─г╨═
	if(m_UserItem[39].sSid == 1184 && x == 5){
		if(m_dwTransTime != 0) m_iHair = 10015;
		else
		{
			if(m_UserItem[39].tMagic[5] == 1) {
				m_iHair = 10001;
			}else if(m_UserItem[39].tMagic[5] == 2) {
				m_iHair = 10002;
			}
		}		
	}
//	TempBuf.Add(USE_POTION);		//╟╨╗╗╗·╝╫ ╧╘╩╛╨з╣√
//	TempBuf.Add(m_uid + USER_BAND);
//	TempBuf.Add((BYTE)16);
//	Send( TempBuf, TempBuf.GetLength() );
	UpdateUserData();						// ╕№╨┬╙├╗з╩¤╛▌  neo░ц▒╛
		switch(m_iSkin)
		{
		case 1:
			SetUserToMagicUser(2);
			break;
		case 2:
		case 4:
		case 7:
		case 8:
			SetUserToMagicUser(3);
			break;
		}
	SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в	
	UpdateUserData();						// ╕№╨┬╙├╗з╩¤╛▌		
	CheckMagicItemMove();
	m_dwBFindTime = BIANSHEN_TIME;
	m_dwLastBFindTime = GetTickCount();		
}
void USER::HuanYuanBianShen()    //╕№╨┬▒ф╔э╩▒╝ф
{
	m_iHair = 0;
	m_iSkin = 0;	
	m_dwBFindTime = 0;
	CheckMagicItemMove();

	CBufferEx PotionBuf;
	PotionBuf.Add(USE_POTION);
	PotionBuf.Add(m_uid + USER_BAND);
	PotionBuf.Add(BIAN_SHEN);
	SendExactScreen( PotionBuf, PotionBuf.GetLength() );
	SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в	
	DeleteAbnormalInfo(ABNORMAL_BIANSHEN);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());	
}
void USER::HuanYuanXf()    //╕№╨┬╨╦╖▄╩▒╝ф
{
	
	m_dwHiExpTime = 0;
	CheckMagicItemMove();

	CBufferEx PotionBuf;
	PotionBuf.Add(USE_POTION);
	PotionBuf.Add(m_uid + USER_BAND);
	PotionBuf.Add(TEST_21);
	SendExactScreen( PotionBuf, PotionBuf.GetLength() );
	SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в	
	DeleteAbnormalInfo(ABNORMAL_HIEXP);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());	
}

void USER::HuanYuanXy()    //╕№╨┬╨╥╘╦╩▒╝ф
{
	
	m_dwMagicFindTime = 0;
	CheckMagicItemMove();

	CBufferEx PotionBuf;
	PotionBuf.Add(USE_POTION);
	PotionBuf.Add(m_uid + USER_BAND);
	PotionBuf.Add(TEST_21);
	SendExactScreen( PotionBuf, PotionBuf.GetLength() );
	SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в	
	DeleteAbnormalInfo(ABNORMAL_MAGICFIND);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());	
}
void USER::HuanYuanFD()    //╕№╨┬╨╥╕г╩▒╣т
{
	
	m_dwVIPTime = 0;
	CheckMagicItemMove();

	CBufferEx PotionBuf;
	PotionBuf.Add(USE_POTION);
	PotionBuf.Add(m_uid + USER_BAND);
	PotionBuf.Add(TEST_21);
	SendExactScreen( PotionBuf, PotionBuf.GetLength() );
	SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в	
	DeleteAbnormalInfo(ABNORMAL_FUDAI);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());	
}
void USER::HuanYuanHl()    //╕№╨┬╗├┴щ╩▒╝ф
{
	
	m_dwHtExpTime = 0;
	CheckMagicItemMove();

	CBufferEx PotionBuf;
	PotionBuf.Add(USE_POTION);
	PotionBuf.Add(m_uid + USER_BAND);
	PotionBuf.Add(TEST_21);
	SendExactScreen( PotionBuf, PotionBuf.GetLength() );
	SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в	
	DeleteStateInfo(STATE_5);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());	
}
void USER::HuanYuanHj()    //╕№╨┬╗├╛з╩▒╝ф
{
	
	m_dwMagicFtTime = 0;
	CheckMagicItemMove();

	CBufferEx PotionBuf;
	PotionBuf.Add(USE_POTION);
	PotionBuf.Add(m_uid + USER_BAND);
	PotionBuf.Add(TEST_21);
	SendExactScreen( PotionBuf, PotionBuf.GetLength() );
	SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в	
	DeleteStateInfo(STATE_28);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());	
}
void USER::HuanYuanVip()    //╕№╨┬VIP╩▒╝ф
{
	
	m_dwGuarDianTianShi = 0;
	CheckMagicItemMove();

	CBufferEx PotionBuf;
	PotionBuf.Add(USE_POTION);
	PotionBuf.Add(m_uid + USER_BAND);
	PotionBuf.Add(TEST_21);
	SendExactScreen( PotionBuf, PotionBuf.GetLength() );
	SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в	
	DeleteAbnormalInfo(ABNORMAL_VIP);

	CBufferEx TempBuf;
	TempBuf.Add(SET_USER_STATE);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(m_dwAbnormalInfo);
	TempBuf.Add(m_dwAbnormalInfo_);
	Send(TempBuf, TempBuf.GetLength());	
}
/////////////////////////////////////////////////////////////////////////////////
//	╝╥╕Ё╝║ ╛╟╝╝╗ч╕о└╟ │╗▒╕╡╡╕ж ║╕│╜┤┘. ┤┘╛▓╕щ │п╕░┤┘.
//

void USER::SendAccessoriDuration(short sSid)
{
	BYTE tSlot = 0;
	int i;
	CBufferEx TempBuf;
	
	for(i = 0; i < MAX_ACCESSORI; i++)
	{
		tSlot = g_iAccessoriSlot[i];
		if(m_UserItem[tSlot].sSid == sSid)
		{
			m_UserItem[tSlot].sDuration--;
			if(m_UserItem[tSlot].sDuration <= 0) 
			{
				MakeItemLog( &m_UserItem[tSlot], ITEMLOG_ACC_USE );
				FlushItemLog( TRUE );
				
				ReSetItemSlot(&m_UserItem[tSlot]);
				
				TempBuf.Add(ITEM_MOVE_RESULT);
				TempBuf.Add(SUCCESS);
				TempBuf.Add((BYTE)0);		
				TempBuf.Add((BYTE)1);		// Count
				
				TempBuf.Add(tSlot);
				TempBuf.Add(m_UserItem[tSlot].sLevel);
				TempBuf.Add(m_UserItem[tSlot].sSid);
				TempBuf.Add(m_UserItem[tSlot].sDuration);
				TempBuf.Add(m_UserItem[tSlot].sBullNum);
				TempBuf.Add(m_UserItem[tSlot].sCount);
				for(i =0; i < MAGIC_NUM; i++) TempBuf.Add(m_UserItem[tSlot].tMagic[i]);
				TempBuf.Add(m_UserItem[tSlot].tIQ); 
				
				Send(TempBuf, TempBuf.GetLength());				
			}
			else
			{
				TempBuf.Add(ITEM_DURATION);
				TempBuf.Add(tSlot);
				TempBuf.Add(m_UserItem[tSlot].sDuration);
				Send(TempBuf, TempBuf.GetLength());
			}

			return;
		}
	}
}
void USER::SendDGDuration(short sSid,int slot)
{
	int i = 0;
	BYTE tSlot = slot;
	CBufferEx TempBuf;
	if(m_UserItem[tSlot].sSid == sSid)
	{
		m_UserItem[tSlot].sDuration--;
		if(m_UserItem[tSlot].sDuration <= 0) 
		{
			MakeItemLog( &m_UserItem[tSlot], ITEMLOG_ACC_USE );
			FlushItemLog( TRUE );
				
			ReSetItemSlot(&m_UserItem[tSlot]);
				
			TempBuf.Add(ITEM_MOVE_RESULT);
			TempBuf.Add(SUCCESS);
			TempBuf.Add((BYTE)0);		// Type
			TempBuf.Add((BYTE)1);		// Count
			
			TempBuf.Add(tSlot);
			TempBuf.Add(m_UserItem[tSlot].sLevel);
			TempBuf.Add(m_UserItem[tSlot].sSid);
			TempBuf.Add(m_UserItem[tSlot].sDuration);
			TempBuf.Add(m_UserItem[tSlot].sBullNum);
			TempBuf.Add(m_UserItem[tSlot].sCount);
			for(i =0; i < MAGIC_NUM; i++) TempBuf.Add(m_UserItem[tSlot].tMagic[i]);
			TempBuf.Add(m_UserItem[tSlot].tIQ); 
				
			Send(TempBuf, TempBuf.GetLength());				
		}
		else
		{
			TempBuf.Add(ITEM_DURATION);
			TempBuf.Add(tSlot);
			TempBuf.Add(m_UserItem[tSlot].sDuration);
			Send(TempBuf, TempBuf.GetLength());
		}
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	User └╟ └╠╕з└╠ └╠╣╠ ┴╕└ч╟╧┤┬┴Ў ├╝┼й╟╤┤┘.
//
void USER::CheckIDReq(TCHAR* pBuf)
{
	TCHAR szName[CHAR_NAME_LENGTH + 1];
	int nLen = 0;
	BYTE tResult = FAIL;
	int index = 0;
	CBufferEx TempBuf;

	::ZeroMemory(szName, sizeof(szName));
	nLen = GetVarString(sizeof(szName), szName, pBuf, index);
	if(nLen <= 0 || nLen > CHAR_NAME_LENGTH - 3) goto go_result;

	switch(m_iMyServer)
	{
	case	0:	// ┼╫╜║╞о
		break;
	case	1:	// └╠─л╖ч╜║
		strcat( szName, "[I]" );
		break;
	case	2:	// ┐д╞─╡╡╕г
		strcat( szName, "[E]" );
		break;
	case	3:	// ░б│╫┴Ў╛╞
		strcat( szName, "[K]" );
		break;
	case	4:	// ╟╩╕│╞ў
		strcat( szName, "[F]" );
		break;
	case	5:	// ╛╞╜║╞о
		strcat( szName, "[A]" );
		break;
	case	6:	// ▒╫╢√╡Ё┐б
		strcat( szName, "[G]" );
		break;
	case	7:	// ╞ф╝╝┐ь╜║
		strcat( szName, "[P]" );
		break;
	case	8:	// ╣╨╢є╡Ё
		strcat( szName, "[M]" );
		break;
	case	9:	// ╖ч└╠│╫╞о
		strcat( szName, "[R]" );
		break;
	case	10:	// ┼╕╕г╗■
		strcat( szName, "[T]" );
		break;
	default:
		return;
	}

	if(!IsExistCharId(szName)) tResult = SUCCESS;

go_result:

	TempBuf.Add(CHECK_ID_RESULT);
	TempBuf.Add(tResult);

	Send(TempBuf, TempBuf.GetLength());
}

/////////////////////////////////////////////////////////////////////////////////////
//	╗ч└╠┐└┤╨ ╜└╡ц ▒╕╜╜└╗ ╗ч┐ы╟╧┐й ╗ч└╠┐└┤╨└╗ ╜└╡ц╟╤┤┘.
//
BOOL USER::UsePsiStone(short sSlot)
{
	CBufferEx TempBuf;
	short sSid = 0;
	short sPsionicSid = 0;
	int j;

	if(sSlot < EQUIP_ITEM_NUM || sSlot >= TOTAL_INVEN_MAX) return FALSE;
	
	sSid = m_UserItem[sSlot].sSid;
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) return FALSE;
	if(m_UserItem[sSlot].sCount <= 0) return FALSE;
	
	switch(sSid)
	{
	case PSI_STONE_FAST_RUN	:  //╚н80╝╢╝╝─▄
		if(m_byClass != BRAWL)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 80) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
// 		if(FindEvent(6) == FALSE) 
// 		{
// 			SendSystemMsg(IDS_NEED_QUEST, SYSTEM_ERROR, TO_ME);
// 			return FALSE;
// 		}
		if(g_arPsiTable[PSIONIC_FAST_RUN]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_FAST_RUN) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_FAST_RUN;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_FAST_RUN]->m_iNeedXP;
		break;
   
	case PSI_STONE_BAO_YAN :		//╚н ▒й╤╫	
		if(m_byClass != BRAWL)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 50) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
//		if(FindEvent(6) == FALSE) 
//		{
//			SendSystemMsg(IDS_NEED_QUEST, SYSTEM_ERROR, TO_ME);
//			return FALSE;
//		}
        if(g_arPsiTable[PSIONIC_BAO_YAN]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_BAO_YAN) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_BAO_YAN;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_BAO_YAN]->m_iNeedXP;
		break;

	case PSI_STONE_CHAO_FAN_TAN :		//╚н │м╝╢╖┤╡п	
		if(m_byClass != BRAWL)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 135) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
//		if(FindEvent(6) == FALSE) 
//		{
//			SendSystemMsg(IDS_NEED_QUEST, SYSTEM_ERROR, TO_ME);
//			return FALSE;
//		}
        if(g_arPsiTable[PSIONIC_CHAO_FAN_TAN]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_CHAO_FAN_TAN) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_CHAO_FAN_TAN;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_CHAO_FAN_TAN]->m_iNeedXP;
		break;
	
	case PSI_STONE_MIND_SHOCK :		//╖и ╨─┴щ╖ч▒й			
		if(m_byClass != STAFF)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 80) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
//		if(FindEvent(6) == FALSE) 
//		{
//			SendSystemMsg(IDS_NEED_QUEST, SYSTEM_ERROR, TO_ME);
//			return FALSE;
//		}

		if(g_arPsiTable[PSIONIC_MIND_SHOCK]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_MIND_SHOCK) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_MIND_SHOCK;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_MIND_SHOCK]->m_iNeedXP;
		break;

	case PSI_STONE_CHAO_YI_NENG :		//╖и │м╝╢╥ь─▄			
		if(m_byClass != STAFF)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 135) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
//		if(FindEvent(6) == FALSE) 
//		{
//			SendSystemMsg(IDS_NEED_QUEST, SYSTEM_ERROR, TO_ME);
//			return FALSE;
//		}

		if(g_arPsiTable[PSIONIC_CHAO_YI_NENG]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_CHAO_YI_NENG) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_CHAO_YI_NENG;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_CHAO_YI_NENG]->m_iNeedXP;
		break;

	case PSI_STONE_MIND_GUARD :					
		if(m_byClass != STAFF)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 90) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
//		if(FindEvent(6) == FALSE) 
//		{
//			SendSystemMsg(IDS_NEED_QUEST, SYSTEM_ERROR, TO_ME);
//			return FALSE;
//		}
		if(g_arPsiTable[PSIONIC_MIND_GUARD]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_MIND_GUARD) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_MIND_GUARD;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_MIND_GUARD]->m_iNeedXP;
		break;

	case PSI_STONE_PSI_SHIELD :					
		if(m_byClass != EDGED)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 80) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
//		if(FindEvent(6) == FALSE) 
//		{
//			SendSystemMsg(IDS_NEED_QUEST, SYSTEM_ERROR, TO_ME);
//			return FALSE;
//		}	

		if(g_arPsiTable[PSIONIC_PSI_SHIELD]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_PSI_SHIELD) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_PSI_SHIELD;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_PSI_SHIELD]->m_iNeedXP;
		break;

	case PSI_STONE_BA_QI :		//╜г ю╕╞°	
		if(m_byClass != EDGED)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 50) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(g_arPsiTable[PSIONIC_BA_QI]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_BA_QI) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_BA_QI;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_BA_QI]->m_iNeedXP;
		break;

	case PSI_STONE_CHAO_FENG_LI :		//╜г │м╝╢╖ц└√	
		if(m_byClass != EDGED)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 135) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(g_arPsiTable[PSIONIC_CHAO_FENG_LI]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_CHAO_FENG_LI) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_CHAO_FENG_LI;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_CHAO_FENG_LI]->m_iNeedXP;
		break;

	case PSI_STONE_CHONG_RAN :		//╓╪╚╝	
/*		if(m_byClass != EDGED)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}*/
		if(m_sLevel < 50) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(g_arPsiTable[PSIONIC_CHONG_RAN]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_CHONG_RAN) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_CHONG_RAN;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_CHONG_RAN]->m_iNeedXP;
		break;

	case PSI_STONE_LI_HU_SHUO_LIAN :		//┴щ╗ъ╦°┴┤
		if(m_byClass != JUDGE)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 80) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(g_arPsiTable[PSIONIC_LI_HU_SHUO_LIAN]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_LI_HU_SHUO_LIAN) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_LI_HU_SHUO_LIAN;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_LI_HU_SHUO_LIAN]->m_iNeedXP;
		break;
	
	case PSI_STONE_PIERCING_SHIELD :		//╟╣ ┴ж│б┤й┤╠	
		if(m_byClass != FIREARMS)
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 80) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
//		if(FindEvent(6) == FALSE) 
//		{
//			SendSystemMsg(IDS_NEED_QUEST, SYSTEM_ERROR, TO_ME);
//			return FALSE;
//		}

		if(g_arPsiTable[PSIONIC_PIERCING_SHIELD]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_PIERCING_SHIELD) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_PIERCING_SHIELD;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_PIERCING_SHIELD]->m_iNeedXP;
		break;

	case PSI_STONE_CHAO_DUO_CHONG :		//╟╣║═╓┘▓├ │м╝╢╢р╓╪	
		if(m_byClass != FIREARMS && m_byClass != JUDGE)//▓╗╩╟╟╣╨╡╩ж╗Є╓┘▓├╬▐╖и╤з╧░
		{
			SendSystemMsg(IDS_PSI_ERROR_CLASS, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
		if(m_sLevel < 135) 
		{
			SendSystemMsg(IDS_PSI_ERROR_LEVEL, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}
//		if(FindEvent(6) == FALSE) 
//		{
//			SendSystemMsg(IDS_NEED_QUEST, SYSTEM_ERROR, TO_ME);
//			return FALSE;
//		}

		if(g_arPsiTable[PSIONIC_CHAO_DUO_CHONG]->m_iNeedXP > m_dwXP)
		{
			SendSystemMsg(IDS_PSI_ERROR_XP, SYSTEM_ERROR, TO_ME);
			return FALSE;
		}

		for(j = 0; j < m_nHavePsiNum; j++)
		{
			if(m_UserPsi[j].sSid == PSIONIC_CHAO_DUO_CHONG) 
			{
				SendSystemMsg(IDS_PSI_ERROR_EXIST, SYSTEM_ERROR, TO_ME);
				return FALSE;
			}
		}

		sPsionicSid = m_UserPsi[m_nHavePsiNum].sSid = PSIONIC_CHAO_DUO_CHONG;
		m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
		m_nHavePsiNum++;
		m_dwXP -= g_arPsiTable[PSIONIC_CHAO_DUO_CHONG]->m_iNeedXP;
		break;
	}

	TempBuf.Add(BUY_PSY_RESULT);
	TempBuf.Add((BYTE)1);
	TempBuf.Add((short)1);
	TempBuf.Add(sPsionicSid);
	Send(TempBuf, TempBuf.GetLength());

	SendXP();

	return TRUE;
}

//////////////////////////////////////////////////////////////////////////////////
//	Quest Window ╕ж ┐м┤┘(└п└·░б ░б┴Ў░э └╓┤┬ ─∙╜║╞о ┴д║╕╕ж ║╕│╗┴╪┤┘.)
//  CTRL+Q   ╚╬╬ё└╕┤Є┐к
void USER::QuestWindowOpenReq(TCHAR *pBuf)
{
	CBufferEx TempBuf;
	int iCount = m_arEventNum.GetSize();

	if(iCount >= MAX_EVENT_NUM) iCount = MAX_EVENT_NUM;

	TempBuf.Add(QUESTWINDOW_OPEN_RESULT);

	TempBuf.Add((short)iCount);
	for( int i = 0; i < iCount; i++)
	{
		TempBuf.Add((short)(*m_arEventNum[i]));
	}

	Send(TempBuf, TempBuf.GetLength());
}

//////////////////////////////////////////////////////////////////////////////////
//	Quest say╕ж ║╕│╜┤┘
//
void USER::SendMonsterSay(CNpc *pNpc, int iType, char *strSay)
{
	if( !pNpc ) return;
	if( strlen( strSay ) >= 128 ) return;
	
	CBufferEx TempBuf;

	TempBuf.Add(CHAT_RESULT);
	TempBuf.Add(SUCCESS);
	TempBuf.Add(NORMAL_CHAT);
	TempBuf.Add(pNpc->m_sNid + NPC_BAND);
	TempBuf.AddString(pNpc->m_strName);

	TempBuf.AddString((LPTSTR)(LPCTSTR)strSay);

	switch(iType)
	{
	case 0:
		Send(TempBuf, TempBuf.GetLength());
		break;
	case 1:
		SendExactScreen(TempBuf, TempBuf.GetLength());
		break;
	}
}

//////////////////////////////////////////////////////////////////////////////////
//	Quest ╕ж ╜╟╟р╟╤┤┘. (└╠║е╞о └п┴Ў╜├░г, ╜┬╕о┴╢░╟, ╕ў SID, ╕╢╕о╝Ў, ┴╕, ...)
//
BOOL USER::ExcuteSingleQuestEvent(int time, int type, int sid, int count, int z, int x, int y)
{
	int iEvent = g_QuestEventZone.GetEmptyEventZone();

	if(iEvent < 0)
	{
		SendNpcSay( NULL, 513 );										// ╜╟╞╨ say
		return FALSE;													
	}

	g_QuestEventZone.m_SingleEventZone[iEvent].m_sEventZone = z;
	g_QuestEventZone.m_SingleEventZone[iEvent].m_tEventTime = time;		// └╠║е╞о ┴°╟р╜├░г
	g_QuestEventZone.m_SingleEventZone[iEvent].m_tSuccessType = type;	// ╜┬╕о┴╢░╟

	g_QuestEventZone.m_SingleEventZone[iEvent].m_arUserList[0].uid = m_uid; // ┬№░б └п└· 

	int nLen = strlen(m_strUserID);
	::CopyMemory(g_QuestEventZone.m_SingleEventZone[iEvent].m_arUserList[0].strUserName, m_strUserID, nLen);

	m_tQuestWar = GUILD_WARRING;
	 
	int iNid = -1;
	for(int i = 0; i < count; i++)
	{
		iNid = -1;
		iNid = SummonQuestMonster(sid, z, x, y);									// ╕ў ╝╥╚п
		if(iNid > -1) g_QuestEventZone.m_SingleEventZone[iEvent].m_arNpcList.Add(iNid);	// ╟╪┤ч ╕ў
	}

	return TRUE;
}

//////////////////////////////////////////////////////////////////////////////////
//	Quest ╕ў└╗ ╞п┴д ┴┬╟е╖╬ ╝╥╚п╟╤┤┘.
//
int USER::SummonQuestMonster(int sid, int z, int x, int y)
{
	CNpc* pNpc = NULL;
	int i;

	MYSHORT sAI;
	BYTE upTemp = 0;			// ╗є└з 8║ё╞о
	BYTE dwTemp = 0;			// ╟╧└з 8║ё╞о

	CPoint pt;

	int NpcState = NPC_DEAD;

	for(i = 0; i < g_arNpc.GetSize(); i++)
	{
		pNpc = g_arNpc[i];
		if( !pNpc ) continue;
		if(pNpc->m_tNpcType != NPCTYPE_MONSTER) continue;

		if(pNpc->m_sSid == sid)
		{
			if(pNpc->m_sCurZ == 1005) continue;
			if(pNpc->m_NpcState != NPC_DEAD && pNpc->m_NpcState != NPC_STANDING) continue;
			if(pNpc->m_bSummon == TRUE) continue;

			if(::InterlockedExchange(&pNpc->m_lNowSummoning, 1) != 0) continue;

			NpcState = pNpc->m_NpcState;
			pNpc->m_Delay = 2000;

			if(pNpc->m_NpcState == NPC_STANDING)
			{
				pNpc->SetUidNPC(pNpc->m_sCurX, pNpc->m_sCurY, 0);

				pNpc->m_presx = pNpc->m_presy = -1;
				pNpc->SendNpcInfoBySummon(m_pCom);
			}

			pNpc->m_SummonZoneIndex = pNpc->m_ZoneIndex;
			pNpc->m_sSummonOrgZ = pNpc->m_sOrgZ;
			pNpc->m_sSummonOrgX = pNpc->m_sOrgX;
			pNpc->m_sSummonOrgY = pNpc->m_sOrgY;

			pNpc->m_sCurZ = pNpc->m_sOrgZ = z;
			pNpc->m_sCurX = pNpc->m_sOrgX = x;
			pNpc->m_sCurY = pNpc->m_sOrgY = y;

			pNpc->m_ZoneIndex		= -1;

			pNpc->m_dwStepDelay	= GetTickCount();
			
			sAI.i = (short)pNpc->m_sAI;						// NPC AI╕ж ╝┬╞├
			upTemp = sAI.b[0];
			dwTemp = sAI.b[1];
			
			pNpc->m_tNpcAttType = upTemp >> 7;				// │к┴▀┐б ├▀░б╟╪╛▀╟╤┤┘.
			upTemp = upTemp << 1;
			pNpc->m_tNpcLongType = upTemp >> 7;
			upTemp = upTemp << 1;
			pNpc->m_tNpcGroupType = upTemp >> 7;
			
			if(pNpc->m_sClientSpeed <= 20) pNpc->m_sClientSpeed = 20;	// ╣ц╛ю ─┌╡х;
			
			for(i = 0; i < g_zone.GetSize(); i++)
			{
				if(g_zone[i]->m_Zone == pNpc->m_sCurZ) 
				{
					pNpc->m_ZoneIndex = i;
					break;
				}
			}

			pNpc->m_bSummon = TRUE;
			pNpc->m_bSummonDead = TRUE;
			pNpc->EventNpcInit(x, y);

			pt = pNpc->FindNearRandomPoint(x, y);
			if(pt.x < 0 || pt.y < 0)
			{
				pNpc->m_bFirstLive = FALSE;
				pNpc->m_NpcState = NPC_DEAD;
				pNpc->m_sHP = 0;
				pNpc->m_Delay = pNpc->m_sRegenTime;

				pNpc->m_bSummon = FALSE;
				pNpc->m_bSummonDead = TRUE;

				if(::InterlockedExchange(&pNpc->m_lNowSummoning, 0) != 1) pNpc->m_lNowSummoning = 0;
				return -1;
			}

			if(NpcState == NPC_STANDING) 
			{
				pNpc->m_sCurX = pNpc->m_sOrgX = pt.x;
				pNpc->m_sCurY = pNpc->m_sOrgY = pt.y;

				pNpc->SetUidNPC(pt.x, pt.y, pNpc->m_sNid + NPC_BAND);

				pNpc->m_presx = pNpc->m_presy = -1;
				pNpc->SightRecalc(m_pCom);
			}

			// ╝╥╚п╡╚ ╕ў└║ ╝╥╚п╡╚ ┴┬╟е╕ж ┴▀╜╔└╕╖╬ ╟р╡┐╣▌░ц└╗ ░б┴°┤┘.
			MAP* pMap = g_zone[pNpc->m_ZoneIndex];
			pNpc->m_nInitMinX = pNpc->m_sOrgX - pNpc->m_sMinX;		if(pNpc->m_nInitMinX < 1) pNpc->m_nInitMinX = 1; 
			pNpc->m_nInitMinY = pNpc->m_sOrgY - pNpc->m_sMinY;		if(pNpc->m_nInitMinY < 1) pNpc->m_nInitMinY = 1; 
			pNpc->m_nInitMaxX = pNpc->m_sOrgX + pNpc->m_sMaxX;		if(pNpc->m_nInitMaxX >= pMap->m_sizeMap.cx) pNpc->m_nInitMaxX = pMap->m_sizeMap.cx - 1;
			pNpc->m_nInitMaxY = pNpc->m_sOrgY + pNpc->m_sMaxY;		if(pNpc->m_nInitMaxY >= pMap->m_sizeMap.cy) pNpc->m_nInitMaxY = pMap->m_sizeMap.cy - 1;

			if(::InterlockedExchange(&pNpc->m_lNowSummoning, 0) != 1) pNpc->m_lNowSummoning = 0;

			return pNpc->m_sNid;
		}
	}

	return -1;
}

BOOL USER::CheckZoneWho(int zone, int passtype, int zonetype)
{
	int i;
	BOOL bCheck = FALSE;

	switch(zonetype)
	{
	case 1:		// 80╖╛ ╗ч└╠┐└┤╨ ░№╖├ - ╕т╟╟╜║ ║ё╣╨┴Ў╟╧┐м▒╕╝╥ ╕╩ └╠║е╞о		
		for(i = 0; i < MAX_SINGLE_EVENT; i++)
		{
			if(g_QuestEventZone.m_SingleEventZone[i].m_lUsed == 1)
			{
				if(g_QuestEventZone.m_SingleEventZone[i].m_sEventZone == zone) bCheck = TRUE;
			}
		}

		if(bCheck) // ╟╪┤ч ┴╕┐б ╗ч╢ў└╠ └╓░э 
		{
			if(passtype == 1) return TRUE;	// ┼ы░· ┼╕└╘└╠ 1└╠╕щ └п└· ┼ы░·
		}
		else		// ╟╪┤ч ┴╕┐б └п└·░б ╛°└╕╕щ
		{
			if(passtype == 0) return TRUE;	// ┼ы░· ┼╕└╘└╠ 0└╠╕щ └п└· ┼ы░·
		}
		break;

	default:
		break;
	}

	return FALSE;
}

void USER::SendCharDataToOPUser(USER *pUser)//╖в╦═╜╟╔л╫░▒╕╩Ї╨╘╨┼╧в
{
/*    if(!pUser) return;
	
	int i = 0;
    CBufferEx TempBuf;
    
    TempBuf.Add(CHAR_DATA);//╓з│╓┐┤╢╘╖╜╩Ї╨╘└╕
    TempBuf.AddString(pUser->m_strUserID);
    TempBuf.Add(pUser->m_sMagicSTR);
    TempBuf.Add(pUser->m_sMagicCON);
    TempBuf.Add(pUser->m_sMagicDEX);
    TempBuf.Add(pUser->m_sMagicVOL);
    TempBuf.Add(pUser->m_sMagicWIS);

    TempBuf.Add((short)1);  // └╙╜├ ─┌╡х 

    TempBuf.Add(pUser->m_iSkin);
    TempBuf.Add(pUser->m_iHair);
    TempBuf.Add((BYTE)pUser->m_sGender);
    TempBuf.AddData(pUser->m_strFace, 10);

    TempBuf.Add(pUser->m_dwExp);
    TempBuf.Add(pUser->m_dwXP);

    TempBuf.Add(pUser->m_sSkillPoint);
    TempBuf.Add(pUser->m_sPA);
    TempBuf.Add(pUser->m_sSkillPoint_);

    TempBuf.Add(pUser->m_sMagicMaxHP);
    TempBuf.Add(pUser->m_sHP);
    TempBuf.Add(pUser->m_sMagicMaxPP);
    TempBuf.Add(pUser->m_sPP);
    TempBuf.Add(pUser->m_sMagicMaxSP);
    TempBuf.Add(pUser->m_sSP);

    TempBuf.Add(pUser->m_dwDN);     
    TempBuf.Add(pUser->m_sCityRank);
	
    TempBuf.Add(pUser->m_sLevel);
    TempBuf.Add(pUser->m_byClass); 

    TCHAR strSkill[_SKILL_DB], strItem[_ITEM_DB], strPsi[_PSI_DB],strSkill_[12*3];
    ::ZeroMemory(strSkill, sizeof(strSkill));
    ::ZeroMemory(strItem, sizeof(strItem));
    ::ZeroMemory(strPsi, sizeof(strPsi));

    UserSkillToStr((LPTSTR)strSkill);
    pUser->UserItemToStrForSend( (LPTSTR)strItem );
    UserPsiToStr((LPTSTR)strPsi);
    //130SUPER SKILL
    int index=0;
    for(i = 0; i < 12; i++)
    {
    SetShort(strSkill_, m_UserSkill_[i].sSid,index);
    SetByte (strSkill_, m_UserSkill_[i].tLevel, index);
    }

    TempBuf.AddData(strSkill, USER_SKILL_LEN); // Skill
    TempBuf.AddData(strSkill_,12*3);

    TempBuf.Add((BYTE)m_nHavePsiNum); // Psionic
    if(m_nHavePsiNum > 0) TempBuf.AddData(strPsi, m_nHavePsiNum * _PSI_SIZE); 
    TempBuf.AddData(strItem, USER_ITEM_LEN); // Item

    TempBuf.Add(m_dwExpNext); // Next Exp 
    TempBuf.Add(m_dwAbnormalInfo); // ╗є┼┬└╠╗є ┴д║╕
    TempBuf.Add(m_dwAbnormalInfo_);

    TempBuf.Add((BYTE)0x00);
    TempBuf.Add((BYTE)0x00);
    TempBuf.Add((BYTE)0x00);
    TempBuf.Add((BYTE)0x00);
    // Finito added 12 bytes below
    TempBuf.Add((BYTE)0x00);
    TempBuf.Add((BYTE)0x00);
    TempBuf.Add((BYTE)0x00);
    TempBuf.Add((BYTE)0x00);
    TempBuf.Add((BYTE)0x00);
    TempBuf.Add((BYTE)0x00);
    TempBuf.Add((BYTE)0x00);
    TempBuf.Add((BYTE)0x00);

    TempBuf.Add((BYTE)0x01);
    TempBuf.Add((BYTE)0x01);
    TempBuf.Add((BYTE)0x01);
    TempBuf.Add((BYTE)0x01);

    TempBuf.Add((int)pUser->m_dwGuild); 
    TempBuf.AddString(m_strGuildName); 
    TempBuf.Add(m_sGuildVersion);
    if(m_dwGuild >= 1)
    {
 //   TempBuf.Add((BYTE)0xF4);
 //   TempBuf.Add((BYTE)0x02);
//    TempBuf.Add((BYTE)0x41);
    }
    else
    {
 //   TempBuf.Add((BYTE)0x00);
//    TempBuf.Add((BYTE)0x00);
 //   TempBuf.Add((BYTE)0x00);
    }
    TempBuf.Add((BYTE)0x02);
 //   TempBuf.Add((BYTE)0xFF);
//	TempBuf.Add((BYTE)0xFF);
//	TempBuf.Add((BYTE)0x00);
//	TempBuf.Add((BYTE)0x00);
    TempBuf.Add((BYTE)0xFF);
    TempBuf.Add((short)-1);//┐к╗·└╢┴·╨─
    TempBuf.Add((BYTE)0x84); // Finito Added
    TempBuf.Add((BYTE)0x99); // Finito Added
    TempBuf.Add((BYTE)0x2c); // Finito Added
    TempBuf.Add((BYTE)0x02); // Finito Added

    CBufferEx TempBuf1;
    TempBuf1.Add( (short)(TempBuf.GetLength()) );
    TempBuf1.AddData( TempBuf, TempBuf.GetLength() );
    m_CompMng.FlushAddData();
    m_CompMng.AddData( TempBuf1, TempBuf1.GetLength() );
    m_CompMng.PreCompressWork();
    m_CompMng.Compress();
    int comp_data_len = m_CompMng.GetCompressedDataCount();
    int org_data_len = m_CompMng.GetUnCompressDataLength();
    DWORD crc_value = m_CompMng.GetCrcValue();
    CBufferEx SendBuf;
    SendBuf.Add( SIGHT_INFO_COMPRESSED );
    SendBuf.Add( (short)comp_data_len );
    SendBuf.Add( (short)org_data_len );
    SendBuf.Add( crc_value );
    SendBuf.Add( (short)1 );
    char* packet = m_CompMng.GetExtractedBufferPtr();
    SendBuf.AddData( packet, comp_data_len );
    TRACE( "%d -> %d\n", org_data_len, comp_data_len );
    SEND_DATA* pNewData = NULL;
    pNewData = new SEND_DATA;
    if(pNewData == NULL)
    {
    m_CompMng.FlushAddData();
    return;
    }
    pNewData->flag = SEND_USER;
    pNewData->len = SendBuf.GetLength();
    ::CopyMemory(pNewData->pBuf, SendBuf, SendBuf.GetLength());
    pNewData->uid = m_uid;
    m_pCom->Send(pNewData);
    if(pNewData) delete pNewData;
    m_CompMng.FlushAddData();*/
} 
/////////////////////////////////////////////////////////////////
//╔╠╡ъ╬я╞╖╣║┬Є╝╟┬╝
void USER::WriteOnlineShop_Log(CString strUname,CString osName,short price,short inum,short upg,short sx1,short sx2,short sx3,short sx4,short sx5,short sx6,short sx7,short sx8,short sx9,short sx10)
{
	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	TCHAR			szSQL[1024];		

	::ZeroMemory(szSQL, sizeof(szSQL));

	int index = 0;

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call INSERT_ONLINESHOP_LOG (\'%s\',\'%s\',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d)}"), 
	strUname,osName,price,inum,upg,sx1,sx2,sx3,sx4,sx5,sx6,sx7,sx8,sx9,sx10); 

	int db_index = 0;
	CDatabase* pDB = g_DBNew[m_iModSid].GetDB( db_index );
	if( !pDB ) return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode != SQL_SUCCESS)
		return;

	if (retcode == SQL_SUCCESS)
	{
		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
		}
	}
	
	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DBNew[m_iModSid].ReleaseDB(db_index);
}
//-------------------------------------------------------------------------
//yskang 0.4 ┐ю┐╡└┌ ╖╬▒╫ ▒т╖╧
//nOption 0:┴в╝╙╛╞└╠╟╟ 1:┤ы╚н 2:╛╞└╠┼█ ┴ж░°┴д║╕ 3:PK┴д║╕
//-------------------------------------------------------------------------
void USER::WriteOpratorLog(TCHAR *strContents, int nOption)//yskang 0.4
{
//	if( m_tIsOP == 0 ) return;

	SQLHSTMT		hstmt = NULL;
	SQLRETURN		retcode = 0;
	TCHAR			szSQL[1024];	
	int				i;

	::ZeroMemory(szSQL, sizeof(szSQL));

	SDWORD sSLen = strlen(strContents);
	if(sSLen <= 0 || sSLen >= 200) return;

	_sntprintf(szSQL, sizeof(szSQL), TEXT("{call WRITE_OPERATOR_LOG(\'%s\', \'%s\',%d)}"), m_strUserID, strContents,nOption ); 

	int db_index = 0;
	CDatabase* pDB = g_DB[m_iModSid].GetDB( db_index );
	if( !pDB ) return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if (retcode == SQL_SUCCESS)
	{
		i = 1;
//		SQLBindParameter( hstmt, i++, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_VARBINARY, sizeof(strSentence), 0, (TCHAR*)strSentence, 0, &sSLen );

		retcode = SQLExecDirect(hstmt, (unsigned char *)szSQL, SQL_NTS);
		if (retcode ==SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
		{
		}
		else if (retcode==SQL_ERROR)
		{
			DisplayErrorMsg( hstmt );
		}
	}
	else return;

	if (hstmt!=NULL) SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(db_index);
}

/////////////////////////////////////////////////////////////////////////////////////////////
//
void USER::SetPsiOne(BYTE tKind, DWORD dwTime)
{
	m_dwHasteTime = m_dwShieldTime = m_dwDexUpTime = m_dwMaxHPUpTime = 0;
	m_dwFastRunTime = m_dwBigShieldTime = m_dwMindShockTime = m_dwPsiShieldTime = m_dwPiercingShieldTime = 0;

	switch(tKind)
	{
	case PSIONIC_HASTE: //╝╙╦┘
		m_dwHasteTime = dwTime;
		break;
	case PSIONIC_SHIELD://╖└╗д
		m_dwShieldTime = dwTime;
		break;
	case PSIONIC_DEXUP://╝▓╖ч╓о╙ъ
		m_dwDexUpTime = dwTime;
		break;
	case PSIONIC_HPUP://╔·├№╓о╣т
		m_dwMaxHPUpTime = dwTime;
		break;
	case PSIONIC_FAST_RUN:
		m_dwFastRunTime = dwTime;
		break;
	case PSIONIC_MIND_SHOCK:
		m_dwMindShockTime = dwTime;
		break;
	case PSIONIC_PSI_SHIELD:
		m_dwPsiShieldTime = dwTime;
		break;
	case 30:
		m_dwBigShieldTime = dwTime;
		break;
	case PSIONIC_PIERCING_SHIELD:
		m_dwPiercingShieldTime = dwTime;
		break;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////
//	DB ╖╬ ║╬┼═ ╣ц╛ю╖┬╛ў, ░°░▌╖┬╛ў, ╣Ў╝н─┐ ┴д║╕╕ж ╝┬╞├╟╤┤┘.
//
void USER::SetPsiTwo(BYTE tKind, DWORD dwTime)
{
	m_dwAdamantineTime = m_dwMightyWeaponTime = m_dwBerserkerTime = 0;

	switch(tKind)
	{
	case PSIONIC_ADAMANTINE:
		m_dwAdamantineTime = dwTime;
		break;
	case PSIONIC_MIGHTYWEAPON:
		m_dwMightyWeaponTime = dwTime;
		break;
	case PSIONIC_BERSERKER:
		m_dwBerserkerTime = dwTime;
		break;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////
//	DB ╖╬ ║╬┼═ ╕╢└╬╡х░б╡х ┴д║╕╕ж ╝┬╞├╟╤┤┘.
//
void USER::SetPsiThree(BYTE tKind, DWORD dwTime)
{
	m_dwMindGuardTime = 0;

	switch(tKind)
	{
	case PSIONIC_MIND_GUARD:
		m_dwMindGuardTime = dwTime;
		break;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////
//	─з░° └╠║е╞о╕ж └з╟╧┐й ╕ў└╗ ╝╥╚п╟╤┤┘.
//  ╬▐╛б╡─╒┘╗╜
BOOL USER::InvaderSummon(BYTE tSlot)
{
	if(tSlot < 0 || tSlot >= TOTAL_INVEN_MAX) return FALSE;

	short sItemSid = m_UserItem[tSlot].sSid;
	if(sItemSid < 0 || sItemSid >= g_arItemTable.GetSize()) return FALSE;

	CPoint pt(-1, -1);

	short sMonsterID = myrand(184, 190);
	switch (sItemSid)
	{
	case 715:
		sMonsterID = 184;
		break;
	case 716:
		sMonsterID = 185;
		break;
	case 717:
        sMonsterID = 186;
		break;
	case 718:
		sMonsterID = 187;
		break;
	case 719:
		sMonsterID = 188;
		break;
	case 720:
		sMonsterID = 189;
		break;
	case 721:
		sMonsterID = 190;
		break;
	}
	
	if(sMonsterID < 0 || sMonsterID >= g_arNpc.GetSize()) return FALSE;
	

	g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_bMove = 1;
	pt = FindNearAvailablePoint_S(m_curx, m_cury);
	g_zone[m_ZoneIndex]->m_pMap[m_curx][m_cury].m_bMove = 0;
	
	if(pt.x == -1 || pt.y == -1) return FALSE;
	
	if(SummonQuestMonster(sMonsterID, m_curz, pt.x, pt.y) == -1) return FALSE;
//	if(SummonQuestMonster(sMonsterID, m_curz, m_curx, m_cury) == -1) return FALSE;
	return TRUE;
}

/////////////////////////////////////////////////////////////////////////////////
//	╛╡╕Ё╛°┤┬ ╕┼┴ў, ╖╣╛ю ╛╞└╠┼█└╗ ╡╣╖┴╝н ╗ї╖╬┐ю ┐╔╝╟└╗ ╛Є┤┬┤┘.
//
void USER::RemagicItemReq(TCHAR *pBuf, BOOL bEvent)
{
	if(m_dwDN < ITEM_REMAGIC_COST) 
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return;		// ╛ў▒╫╖╣└╠╡х ╟╥ ╡╖└╠ ╛°└╕╕щ ╕о┼╧
	}

	CBufferEx TempBuf;

	int iStart = 0, iCount = 3;
	int index = 0, iSuccess = 0;
	int i, j;
	int iWeight = 0;
	BYTE tItemSlot = -1;
	BYTE tMaterialSlot[3] = {0, 0, 0};
	BYTE bySlot = 0;
	short sMaterialSid[3] = {-1, -1, -1};
	CString szName1, szName2, szName3;
	ItemList RemagicItem;

	CByteArray arMaterial;
	arMaterial.RemoveAll();

	short sSourceSlot = GetShort(pBuf, index);	// ╝▒┼├╟╤ ╛╞└╠┼█ ╜╜╖╘╣°╚г

	if(sSourceSlot != -1) return;				// ╕о╕┼┴ў└║ ╝╥╜║╜╜╖╘└╠ ╛°┤┘.

	if(bEvent)	// ┼й╕о╜║╕╢╜║ └╠║е╞о ╛╞└╠┼█└╗ ╗ч┐ы╟╤ ░ц┐ь
	{
//		if(!0)
//		{
			SendSystemMsg(IDS_EVENT_END, SYSTEM_NORMAL, TO_ME);
			return;
//		}
		iStart = 1;
		tItemSlot = GetShort(pBuf, index);
		if(tItemSlot < EQUIP_ITEM_NUM && tItemSlot >= TOTAL_INVEN_MAX) return;
		if(m_UserItem[tItemSlot].sSid != 872) return;		// ┼й╕о╜║╕╢╜║ ╕╖┤ы╗ч┼┴└╠ ╛╞┤╧╕щ ╕о┼╧
		if(m_UserItem[tItemSlot].sCount < 1) return;		// ░│╝Ў░б ╕Ё└▀╖п╡╡ ╕о┼╧

		arMaterial.Add(tItemSlot);
		iWeight += g_arItemTable[872]->m_byWeight;			// ╣л░╘║п╚н╕ж ├╝┼й╟╤┤┘.
	}

	j = 0;
	for(i = iStart; i < iCount + iStart; i++, j++)				// ╕┼┴ў └ч╖с ░╦╗ч	
	{
		tMaterialSlot[j] = GetShort(pBuf, index);				// └ч╖с ( ╛°└╕╕щ -1 )
		if(tMaterialSlot[j] < EQUIP_ITEM_NUM && tMaterialSlot[j] >= TOTAL_INVEN_MAX) return;

		sMaterialSid[j] = m_UserItem[tMaterialSlot[j]].sSid;
		if(m_UserItem[tMaterialSlot[j]].sCount <= 0) return;
		if(m_UserItem[tMaterialSlot[j]].tIQ != UNIQUE_ITEM) if(m_UserItem[tMaterialSlot[j]].tMagic[5] != 0) return;		// ╛ў▒╫╖╣└╠╡х ╛╞└╠┼█└║ ╕о╕┼┴ў└╠ ╛╚╡╚┤┘.
		if(m_UserItem[tMaterialSlot[j]].tIQ == REMODEL_ITEM || m_UserItem[tMaterialSlot[j]].tIQ == REMODEL_MAGIC_ITEM) return; //░│┴╢ ╛╞└╠┼█└║ ╕о╕┼┴ў└╠ ╛╚╡╚┤┘.
		if(m_UserItem[tMaterialSlot[j]].tIQ != RARE_ITEM) return;//▓╗╩╟╜Ё╔л╫░▒╕▓╗─▄║╧│╔─з╖и╩в╫░
		if(sMaterialSid[j] < 0 || sMaterialSid[j] >= g_arItemTable.GetSize()) return;
		if(g_arItemTable[sMaterialSid[j]]->m_byWear < 1 || g_arItemTable[sMaterialSid[j]]->m_byWear > 5) return;	//╣л▒т, ╣ц╛ю▒╕╕╕
	}

	// ░░└║ ┴╛╖∙└╟ ╛╞└╠┼█└╬┴Ў ░╦╗ч╟╤┤┘.
	szName1 = g_arItemTable[sMaterialSid[0]]->m_strName;
	szName2 = g_arItemTable[sMaterialSid[1]]->m_strName;
	szName3 = g_arItemTable[sMaterialSid[2]]->m_strName;

	RemagicItem = m_UserItem[tMaterialSlot[0]];
	if(szName1 != szName2 || szName1 != szName3 || szName2 != szName3) return;

	iSuccess = GetMagicOption(&RemagicItem, 3, bEvent);
	RemagicItem.tIQ = RARE_ITEM;
	if(iSuccess == 0) return;

	
	m_UserItem[tMaterialSlot[0]] = RemagicItem;		// ╕┼┴ў╛╞└╠┼█┐б ╗ї╖╬┐ю ┐╔╝╟║╬┐й

	for(i = 0; i < 3; i++)	
	{
		if(i != 0) 
		{
			iWeight += g_arItemTable[sMaterialSid[i]]->m_byWeight;			// ╣л░╘║п╚н╕ж ├╝┼й╟╤┤┘.
			MakeItemLog(&m_UserItem[tMaterialSlot[i]], ITEMLOG_REMAGIC_DELETE );
			ReSetItemSlot(&m_UserItem[tMaterialSlot[i]]);
		}
		arMaterial.Add(tMaterialSlot[i]);
	}

	if(tItemSlot != -1)
	{
		if(m_UserItem[tItemSlot].sCount <= 1)
		{
			MakeItemLog(&m_UserItem[tItemSlot], ITEMLOG_REMAGIC_DELETE );
			ReSetItemSlot(&m_UserItem[tItemSlot]);
		}
		else
		{
			m_UserItem[tItemSlot].sCount -= 1;
		}
	}

	FlushItemLog( TRUE );

	if( m_dwDN <= ITEM_REMAGIC_COST ) m_dwDN = 0;
	else m_dwDN = m_dwDN - ITEM_REMAGIC_COST;
	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();							// ╡╖║п░ц ┴д║╕╕ж ║╕│╜┤┘.

	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = arMaterial.GetSize();

	TempBuf.Add((BYTE)0x03); // ╕о╕┼┴ў ╝║░°
	TempBuf.Add((BYTE)index);

	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		bySlot = (BYTE)arMaterial[i];
	
		TempBuf.Add(bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}

	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...

	Send(TempBuf, TempBuf.GetLength());

	arMaterial.RemoveAll();
}

///////////////////////////////////////////////////////////////////////////////////////
//	╗ї╖╬┐ю ╕┼┴ў ┐╔╝╟└╗ ╛Є┤┬┤┘.
//
BOOL USER::GetMagicOption(ItemList* pItem, BYTE tIQ, BYTE tSame)
{
	int iMagicCount = 0;
	int nLoop = 0;
	int i = 0, j = 0, iRandom = 0;
	int iCount = 0, iTemp = 0;
	short sSid = -1;

	if(pItem == NULL) return FALSE;
	sSid = pItem->sSid;
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) return FALSE;

	if(tIQ == MAGIC_ITEM) nLoop = 2;
	else if(tIQ == RARE_ITEM) nLoop = 4;
	else return FALSE;             //╔╛│¤└м╗°╩Ї╨╘     ///neo░ц▒╛

	if(m_sLevel <= 20)			iMagicCount = 205;		// ╕┼┴ў└╬╡ж╜║ ╣№└з╕ж ╖╣║з┐б ╡√╢є ┴ж╟╤╟╤┤┘. 
	else if(m_sLevel <= 40)		iMagicCount = 205;
	else if(m_sLevel <= 90)		iMagicCount = 205;
	else						iMagicCount = 205;

	if(iMagicCount >= g_arMagicItemTable.GetSize()) iMagicCount = g_arMagicItemTable.GetSize() - 1;

	pItem->tMagic[0] = pItem->tMagic[1] = pItem->tMagic[2] = pItem->tMagic[3] = pItem->tMagic[4] = pItem->tMagic[5] = 0;

	i = 0;
	while(nLoop > i)										
	{    
	//	sRandom = myrand(1,42);
		iRandom = myrand(1, iMagicCount);

		if(!g_arMagicItemTable[iRandom]->m_tUse) continue;
		if(g_arMagicItemTable[iRandom]->m_sSubType == 32) continue;	// │╗▒╕╡╡ ┐╔╝╟└║ ║┘└╠┴Ў ╛╩┤┬┤┘.
		
		if(CheckClassWear(sSid, iRandom) == FALSE)			// Npc.cpp └╟ CheckClassItem ░· ░░└║ ▒т┤╔└╗ ╝Ў╟р. User └╟ CheckClassItem └╗ ╚г├т╟╧╕щ ╛╚╡╩
		{
			if(i == 0) continue;							// ╕┼┴ў└║ ▒т║╗└╠ 1░│
			else if(tIQ == RARE_ITEM && i <= 2) continue;	// ╖б╛ю┤┬ ▒т║╗└╠ 3░│
			else { i++; continue; }
		}

		for(j = 0; j < 4; j++)
		{
			if(tSame != TRUE)
			{
				iCount = g_arMagicItemTable[pItem->tMagic[j]]->m_sSubType;
				if(iCount != 0 && iCount == g_arMagicItemTable[iRandom]->m_sSubType)	// ╝╙╝║└╠ ░у─е╝Ў └╓└╕╣╟╖╬ └╠┴▀ ┼л░к╕╕ ╝▒┼├	
				{
					iCount = g_arMagicItemTable[pItem->tMagic[j]]->m_sChangeValue;
					if(iCount < g_arMagicItemTable[iRandom]->m_sChangeValue)
					{
						iTemp = g_arMagicItemTable[pItem->tMagic[j]]->m_tLevel;
						if(pItem->sLevel - iTemp > 0) pItem->sLevel -= iTemp;
						pItem->sLevel += g_arMagicItemTable[iRandom]->m_tLevel;
						pItem->tMagic[j] = iRandom; 
						
						break;
					}
					else if(iCount == g_arMagicItemTable[iRandom]->m_sChangeValue) break;
				}
			}

			if(pItem->tMagic[j] > 0) continue;										// └╠╣╠ ╜╜╖╘┐б ░к└╠ └╓└╕╕щ │╤╛ю░и
			else
			{ 
				pItem->tMagic[j] = iRandom; i++;
				if(g_arMagicItemTable[iRandom]->m_tLevel > 0) pItem->sLevel += g_arMagicItemTable[iRandom]->m_tLevel;
				break; 
			}
		}
	}

	return TRUE;
}

////////////////////////////////////////////////////////////////////////////////////////////////
//	╟Ў└ч ║╬┐й╟╧╖┴┤┬ ╕┼┴ў╝╙╝║└╠ ╟╪┤ч ╛╞└╠┼█┐б └√┐ы╡╔ ╝Ў └╓┤┬┴Ў ┼м╖б╜║┴д║╕┐═ ┐■╛ю┴д║╕╕ж ░╦╗ч╟╤┤┘.
//
BOOL USER::CheckClassWear(int iItemSid, int iMagicSid)
{
	if(iItemSid < 0 || iItemSid >= g_arItemTable.GetSize()) return FALSE;
	if(iMagicSid < 0 || iMagicSid >= g_arMagicItemTable.GetSize()) return FALSE;

	BYTE tItemWear = g_arItemTable[iItemSid]->m_byWear;				// ╛╞└╠┼█ ┐■╛ю┴д║╕
	BYTE tMagicWear = g_arMagicItemTable[iMagicSid]->m_tWearInfo;	// ╕┼┴ў┐╔╝╟ ┐■╛ю ┴д║╕

	BYTE tNeedClass = g_arItemTable[iItemSid]->m_byClass;			
	BYTE tMagicClass = g_arMagicItemTable[iMagicSid]->m_tNeedClass;	// ╕┼┴ў╝╙╝║ ┼м╖б╜║

	// Class ├╝┼й
	if(tMagicClass != 15)		// ╕Ё╡ч░ш┐н┐б ║┘└╗ ╝Ў └╓┤┬ ┐╔╝╟└╠ ╛╞┤╧╕щ
	{
		BYTE tTemp = 1;	
		BYTE tFire = 0;
		BYTE tEdge = 0;
		BYTE tStaff = 0;
		BYTE tBrawl = 0;

		tFire	 = tTemp & tNeedClass; tTemp = 2; 
		tEdge	 = tTemp & tNeedClass; tTemp = 4;
		tStaff	 = tTemp & tNeedClass; tTemp = 8;
		tBrawl	 = tTemp & tNeedClass;

		tFire = tFire & tMagicClass;
		tEdge = tEdge & tMagicClass;
		tStaff = tStaff & tMagicClass;
		tBrawl = tBrawl & tMagicClass;

		tTemp = tFire^tEdge^tStaff^tBrawl;
		if(!tTemp) return FALSE;
	}

	// WearInfo ├╝┼й
	if(tMagicWear == 0) return TRUE;
	else if(tMagicWear == 1)											
	{														// 1╣°└╠╕щ ╣л▒т╖∙┐б ║┘┤┬┤┘.
		if(tItemWear != 1) return FALSE;
		else return TRUE;
	}
	else if(tMagicWear == 2)								
	{
		if(tItemWear <= 1 || tItemWear >= 9) return FALSE;
		else return TRUE;
	}
	else return FALSE;
}

/////////////////////////////////////////////////////////////////////////////////
//	EBody ╕ж ╛ў▒╫╖╣└╠╡х ╟╤┤┘.
//
void USER::EBodyUpgradeReq(TCHAR *pBuf)
{
#ifdef _ACTIVE_USER
	if(m_iDisplayType == 6) return; //yskang 0.5
#endif

	if(m_dwDN < EBODY_UPGRADE_COST) 
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return;		// ╛ў▒╫╖╣└╠╡х ╟╥ ╡╖└╠ ╛°└╕╕щ ╕о┼╧
	}
	if(m_dwXP < EBODY_UPGRADE_XP) 
	{
		SendSystemMsg( IDS_XP_ERROR, SYSTEM_ERROR, TO_ME);
		return;		// ╛ў▒╫╖╣└╠╡х XP░б ╛°└╕╕щ ╕о┼╧
	}

	CBufferEx TempBuf;

	int iCount = 1, iUpgradeCount = 0;
	int index = 0, iSuccess = 0;
	int i, j;
	int iWeight = 0;
	BYTE tItemSlot = -1;
	short sMaterialSlot[2] = {0};  //short sMaterialSlot = 0;
	BYTE bySlot = 0;
	short sMaterialSid = -1;
	short sSourceSid = -1;
	BYTE tSourceWear = 0;
	int iRandom = 0;
	int iRate1 = 0, iRate2 = 0;

	ItemList TempItem;

	CByteArray arMaterial;
	arMaterial.RemoveAll();

	short sSourceSlot = GetShort(pBuf, index);	
	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX) return;	// └╬║е┐б╝н╕╕ ╛ў▒╫╖╣└╠╡х ░б┤╔

	sSourceSid = m_UserItem[sSourceSlot].sSid;
	if(sSourceSid < 0 || sSourceSid >= g_arItemTable.GetSize()) return;
	if(m_UserItem[sSourceSlot].tMagic[0] != 0 && m_UserItem[sSourceSlot].tMagic[1] != 0 && m_UserItem[sSourceSlot].tMagic[2] != 0
		&& m_UserItem[sSourceSlot].tMagic[3] != 0 && m_UserItem[sSourceSlot].tMagic[4] != 0) return;

	for(i = 1; i < 5; i++)
	{
		if(m_UserItem[sSourceSlot].tMagic[i] <= 0) 
		{
			iUpgradeCount = i - 1;
			break;
		}
	}
	if(iUpgradeCount < 0 || iUpgradeCount > 3) return;	// EBdoy Upgrade ╕ж └╠╣╠ 4╣° ┤┘╟▀┤┘.
	if(iUpgradeCount >= g_arEBodyUpgradeTable.GetSize()) return;	// └▀╕°╡╚ ╛ў▒╫╖╣└╠╡х ░к

	tSourceWear = g_arItemTable[sSourceSid]->m_byWear;
	if(tSourceWear < 122 || tSourceWear > 125)			// ╛ў▒╫╖╣└╠╡х ╟╧╖┴┤┬ ╛╞└╠┼█└╠ EBody ░б ╛╞┤╧╢є╕щ
	{
		SendSystemMsg( IDS_USER_CANT_UPGRADE_ITEM, SYSTEM_ERROR, TO_ME);
		return;
	}

	j = 0;
	//┼╨╢╧╩╟╖ё╬к│м╝╢╗·╨╡
	if(IsSuperEbodyItem(sSourceSid))
        iCount = 2;
    BYTE bEM[2] ={ 0xff, 0xff};
	for(i = 0; i < iCount ; i++)				// ╕┼┴ў └ч╖с ░╦╗ч	
	{
		sMaterialSlot[i] = GetShort(pBuf, index);	// └ч╖с ( ╛°└╕╕щ -1 )
		if(sMaterialSlot[i] < EQUIP_ITEM_NUM && sMaterialSlot[i] >= TOTAL_INVEN_MAX) return;

		sMaterialSid = m_UserItem[sMaterialSlot[i]].sSid;
		if(m_UserItem[sMaterialSlot[i]].sCount != 1) return;			
		if(m_UserItem[sMaterialSlot[i]].tIQ != MAGIC_ITEM) return;		// ┐б└╠┤ї┤┬ ╣л┴╢░╟ ╕┼┴ў ╛╞└╠┼█
		
		if(sMaterialSid < 0 || sMaterialSid >= g_arItemTable.GetSize()) return;
		if(g_arItemTable[sMaterialSid]->m_byWear != 126) return;	// ┐б└╠┤ї░б ╛╞┤╧╕щ ╕о┼╧
		bEM[i] = m_UserItem[sMaterialSlot[i]].tMagic[0];
	}
    //┼╨╢╧╩Ї╨╘╩╟╖ё╥╗╓┬
	if(iCount == 2)
	{
		if(bEM[0]!=bEM[1]&&bEM[0]!=0xff)
			return;
	}
	iRandom = myrand(1, 100);
	iRate1 = g_arEBodyUpgradeTable[iUpgradeCount]->m_tRandom1;
	iRate2 = g_arEBodyUpgradeTable[iUpgradeCount]->m_tRandom2;

	if(iRandom <= iRate1) iSuccess = 1;
	else if(iRate1 < iRandom && iRandom <= iRate1 + iRate2) iSuccess = 0;
	else iSuccess = -1;

	if(iSuccess == -1)		// ┐╧└№╜╟╞╨, ║г└╠╜║┐═ ┐б└╠┤ї▒ю┴Ў │п╢є░г┤┘.
	{
		MakeItemLog(&m_UserItem[sSourceSlot], ITEMLOG_EBODY_BASE_DELETE );
		MakeItemLog(&m_UserItem[sMaterialSlot[0]], ITEMLOG_EBODY_ADDER_DELETE );
		//│м╝╢╗·╨╡
		if(iCount ==2)
			MakeItemLog(&m_UserItem[sMaterialSlot[1]], ITEMLOG_EBODY_ADDER_DELETE );

		ReSetItemSlot(&m_UserItem[sSourceSlot]);
		ReSetItemSlot(&m_UserItem[sMaterialSlot[0]]);
		if(iCount ==2)
			ReSetItemSlot(&m_UserItem[sMaterialSlot[1]]);

		iWeight += g_arItemTable[sSourceSid]->m_byWeight;			// ╣л░╘║п╚н╕ж ├╝┼й╟╤┤┘.
		iWeight += g_arItemTable[sMaterialSid]->m_byWeight;		

		arMaterial.Add((BYTE)sSourceSlot);
		arMaterial.Add((BYTE)sMaterialSlot[0]);
		if(iCount == 2)
			arMaterial.Add((BYTE)sMaterialSlot[1]);
	}
	else if(iSuccess == 0)	// ┐б└╠┤ї╕╕ │п╢є░г┤┘.
	{
		MakeItemLog(&m_UserItem[sMaterialSlot[0]], ITEMLOG_EBODY_ADDER_DELETE );
		if(iCount == 2)
			MakeItemLog(&m_UserItem[sMaterialSlot[1]], ITEMLOG_EBODY_ADDER_DELETE );
		ReSetItemSlot(&m_UserItem[sMaterialSlot[0]]);
		if(iCount == 2)
			ReSetItemSlot(&m_UserItem[sMaterialSlot[1]]);
		iWeight += g_arItemTable[sMaterialSid]->m_byWeight;		// ╣л░╘║п╚н╕ж ├╝┼й╟╤┤┘.

		arMaterial.Add((BYTE)sMaterialSlot[0]);
		if(iCount == 2)	
			arMaterial.Add((BYTE)sMaterialSlot[1]);
	}
	else					// ╝║░°, ┐б└╠┤ї┤┬ │п╕о░э, ║г└╠╜║┐б┤┬ ╗ї╖╬┐ю ╕┼┴ў╝╙╝║└╗ ├▀░б╟╤┤┘.
	{
		m_UserItem[sSourceSlot].tMagic[iUpgradeCount + 1] = m_UserItem[sMaterialSlot[0]].tMagic[0];
		m_UserItem[sSourceSlot].sLevel += m_UserItem[sMaterialSlot[0]].sLevel;		// EBody ┤┬ ╛ў▒╫╖╣└╠╡х ╡╔╢з╕╢┤┘ ╖╣║з└╠ ░░└╠ ┐├╢є░г┤┘.

		MakeItemLog(&m_UserItem[sSourceSlot], ITEMLOG_EBODY_UPGRADE_SUCCESS );
		MakeItemLog(&m_UserItem[sMaterialSlot[0]], ITEMLOG_EBODY_ADDER_DELETE );
		if(iCount == 2)
			MakeItemLog(&m_UserItem[sMaterialSlot[1]], ITEMLOG_EBODY_ADDER_DELETE );

		ReSetItemSlot(&m_UserItem[sMaterialSlot[0]]);
		if(iCount == 2)
			ReSetItemSlot(&m_UserItem[sMaterialSlot[1]]);

		iWeight += g_arItemTable[sMaterialSid]->m_byWeight;		// ╣л░╘║п╚н╕ж ├╝┼й╟╤┤┘.

		arMaterial.Add((BYTE)sSourceSlot);
		arMaterial.Add((BYTE)sMaterialSlot[0]);
		if(iCount==2)
			arMaterial.Add((BYTE)sMaterialSlot[1]);
	}

	FlushItemLog( TRUE );

	if( m_dwDN <= EBODY_UPGRADE_COST ) m_dwDN = 0;
	else m_dwDN = m_dwDN - EBODY_UPGRADE_COST;
	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();							// ╡╖║п░ц ┴д║╕╕ж ║╕│╜┤┘.

	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = arMaterial.GetSize();

	if(iSuccess == 1) TempBuf.Add((BYTE)0x01);	// EBody Upgrade ╝║░°
	else TempBuf.Add((BYTE)0x00);				// EBody Upgrade ╜╟╞╨

	TempBuf.Add((BYTE)index);

	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		bySlot = (BYTE)arMaterial[i];
	
		TempBuf.Add(bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}

	m_iCurWeight -= iWeight;
	if(m_iCurWeight < 0) m_iCurWeight = 0;

	GetRecoverySpeed();							// ╚╕║╣╝╙╡╡ ├╝┼й...

	Send(TempBuf, TempBuf.GetLength());

	arMaterial.RemoveAll();
}

//////////////////////////////////////////////////////////////////////////////////
//	╚о└╬╟╥ ╝Ў └╓┤┬ EBody ╕о╜║╞о╕ж ╕╕╡ч┤┘.
//
void USER::EBodyIdentifyOpen(int iStoreID)
{
#ifdef _ACTIVE_USER
	if(m_iDisplayType == 6) return; //yskang 0.5
#endif

	int rank = m_sCityRank + CITY_RANK_INTERVAL;
	if(rank == CHAONISE_RANK && IsCity()) 
	{
		SendSystemMsg( IDS_USER_CANT_USE_YOUR_CITY_RANK, SYSTEM_NORMAL, TO_ME);
		return;
	}

	int i;
	short sStoreID = iStoreID;

	int iStart = EQUIP_ITEM_NUM;
	int iEnd = TOTAL_INVEN_MAX;

	CStore* pStore = GetStore(sStoreID);
	if(pStore == NULL) return;

	CBufferEx CostBuf;
	BYTE tSlot = 0;
	short sCount = 0;
	for(i = iStart; i < iEnd; i++)
	{
		if(m_UserItem[i].sSid == 908)	// ╣╠╚о└╬ ╗є┼┬└╟ EBody └╟ Sid
		{
			tSlot = (BYTE)i;
			sCount++;
			CostBuf.Add(tSlot);
		}
	}

	CBufferEx TempBuf;
	TempBuf.Add(EBODY_IDENTIFY_OPEN);
	TempBuf.Add(sStoreID);
	TempBuf.Add(sCount);
	if(sCount > 0) TempBuf.AddData(CostBuf, CostBuf.GetLength());

	Send(TempBuf, TempBuf.GetLength());
}

//////////////////////////////////////////////////////////////////////////////////
//	╝°╢и╤й╗ъ
//
void USER::EBodyIdentifyReq(TCHAR* pBuf)
{
	int index = 0, i, j;
	int iRandom = 0;
	DWORD dwIdentifyCost = 0;
	DWORD dwNeedXP = 0;
	CByteArray	arSlot;
	ItemList MyItem[TOTAL_INVEN_MAX - EQUIP_ITEM_NUM];

	short sSid = -1, sEBodySid = -1;
	BYTE tSlot = 0;

	short sStoreID = GetShort(pBuf, index);
	if(sStoreID < 0) return;

	// └╠║е╞о └з─б╕ж ░╦╗ч -----------------------------------------//
	CPoint pt = ConvertToClient(m_curx, m_cury);
    if(!g_pEventBlock->CheckUserEvent(m_curz, pt.x, pt.y, REPAIR_BLOCK)) return;

	short sCount = GetShort(pBuf, index);

	if(sCount <= 0 || sCount >= TOTAL_INVEN_MAX - EQUIP_ITEM_NUM) return;

	for(i = 0; i < sCount; i++)
	{
		tSlot = GetByte(pBuf, index);
		if(tSlot < EQUIP_ITEM_NUM || tSlot >= TOTAL_INVEN_MAX) return;	// └╬║е┐б╝н╕╕ ╚о└╬ ░б┤╔
		if(m_UserItem[tSlot].sCount != 1) return;						// ░у─е ╝Ў ╛°┤┬ ╛╞└╠┼█└╠┤┘.

		sSid = m_UserItem[tSlot].sSid;
		if (sSid != 908)
		{
			return ;
		}
		if(sSid < 0 || sSid >= g_arItemTable.GetSize()) return;

		dwIdentifyCost += EBODY_IDENTIFY_COST;
		dwNeedXP += EBODY_IDENTIFY_XP;

		if(dwIdentifyCost > m_dwDN)
		{
			SendSystemMsg( IDS_USER_NOT_ENOUGH_DINA1, SYSTEM_ERROR, TO_ME);
			return;
		}
		if(dwNeedXP > m_dwXP)
		{
			SendSystemMsg( IDS_XP_ERROR, SYSTEM_ERROR, TO_ME);
			return;
		}

		arSlot.Add((BYTE)tSlot);
		MyItem[i] = m_UserItem[tSlot];
	}

	for(i = 0; i < arSlot.GetSize(); i++)
	{
		tSlot = arSlot[i];
		sSid = m_UserItem[tSlot].sSid;

		iRandom = myrand(0, g_arEBodyIdentifyTable.GetSize() -1);
		sEBodySid = g_arEBodyIdentifyTable[iRandom]->m_sSid;
		if(sEBodySid < 0 || sEBodySid >= g_arItemTable.GetSize()) 
		{
			for(j = 0; j < arSlot.GetSize(); j++)
			{
				m_UserItem[arSlot[j]] = MyItem[j];
				return;
			}
		}

		m_UserItem[tSlot].sLevel	= g_arItemTable[sEBodySid]->m_byRLevel;
		m_UserItem[tSlot].sSid		= g_arItemTable[sEBodySid]->m_sSid;
		m_UserItem[tSlot].sDuration = g_arItemTable[sEBodySid]->m_sDuration;
		m_UserItem[tSlot].sBullNum	= g_arItemTable[sEBodySid]->m_sBullNum;
		m_UserItem[tSlot].sCount	= 1;
		for(j =0; j < MAGIC_NUM; j++) 
		{
			if(j == 0)	m_UserItem[tSlot].tMagic[j] = g_arItemTable[sEBodySid]->m_bySpecial;
			else		m_UserItem[tSlot].tMagic[j] = 0;
		}
		m_UserItem[tSlot].tIQ = MAGIC_ITEM; 
	}

	//-----------------[ Send Packet ]---------------------------------------//
	if(m_dwDN<=dwIdentifyCost)
		m_dwDN = 0;
	else
		m_dwDN = m_dwDN - dwIdentifyCost;
	

	m_dwXP = m_dwXP - dwNeedXP;
	if(m_dwXP < 0) m_dwXP = 0;

	UpdateUserItemDN();							// ╛╞└╠┼█└╠┤╧▒ё ╣┘╖╬ └√┐ы╟╤┤┘.
	SendMoneyChanged();

	SendXP();

	CBufferEx TempBuf;

	TempBuf.Add(ITEM_MOVE_RESULT);
	TempBuf.Add((BYTE)0x01);				// ╝║░°
	TempBuf.Add((BYTE)0x00);				// └╧╣▌ ╛╞└╠┼█
	TempBuf.Add((BYTE)arSlot.GetSize());	// ║п╚н╡╚ ╜╜╖╘└╟ ╝Ў

	for(i = 0;  i < arSlot.GetSize(); i++)
	{
		tSlot = arSlot[i];
		TempBuf.Add((BYTE)tSlot);
		TempBuf.Add(m_UserItem[tSlot].sLevel);
		TempBuf.Add(m_UserItem[tSlot].sSid);
		TempBuf.Add(m_UserItem[tSlot].sDuration);
		TempBuf.Add(m_UserItem[tSlot].sBullNum);
		TempBuf.Add(m_UserItem[tSlot].sCount);
		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[tSlot].tMagic[j]);
		TempBuf.Add(m_UserItem[tSlot].tIQ); 
	}

	Send(TempBuf, TempBuf.GetLength());

	arSlot.RemoveAll();
}

//////////////////////////////////////////////////////////////////////////////////
//	Finito - Sends server date and tiem to  client for screen capture.
//
void USER::ScreenCaptureReq()
{
	CBufferEx TempBuf;

    SYSTEMTIME st;
    GetSystemTime(&st);

	TempBuf.Add(SCREEN_CAPTURE_REQ);
	TempBuf.Add(st.wYear);
	TempBuf.Add(st.wMonth);
	TempBuf.Add(st.wDay);
	TempBuf.Add(st.wHour);
	TempBuf.Add(st.wMinute);
	TempBuf.Add(st.wSecond);

	Send(TempBuf, TempBuf.GetLength());
}

//////////////////////////////////////////////////////////////////////////////////
//	Finito - Sends Expression data to client
//
void USER::ExpressionReq(TCHAR* pBuf)
{
	int index = 0;
	short sExpression;

	sExpression = GetShort(pBuf, index);

	CBufferEx TempBuf;

	TempBuf.Add(EXPRESSION_REQ);
	TempBuf.Add((BYTE)0);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add(sExpression);

	Send(TempBuf, TempBuf.GetLength());
	SendInsight(TempBuf, TempBuf.GetLength());
}

//////////////////////////////////////////////////////////////////////////////////
//	Finito - Opens expression dialog
//
void USER::ExpressionOpen()
{
	CBufferEx TempBuf;

	TempBuf.Add(EXPRESSION_OPEN);
	TempBuf.Add((short)1);
	TempBuf.Add((short)77);

	Send(TempBuf, TempBuf.GetLength());
}

/////////////////////////////////////////////////////////////////////////
//	Cures HP, PP, SP and restores energy / bullets for level 10 and below
//
void USER::SendHelperCure()
{
	BYTE result = SUCCESS;

	CBufferEx TempBuf;

	// └╠║е╞о └з─б╕ж ░╦╗ч ----------------------------------------//
	CPoint pt = ConvertToClient(m_curx, m_cury);
	if(!g_pEventBlock->CheckUserEvent(m_curz, pt.x, pt.y, CURE_BLOCK)) return;

	if(m_sHP >= m_sMagicMaxHP && m_sPP >= m_sMagicMaxPP && m_sSP >= m_sMagicMaxSP)
	{
		if(m_UserItem[RIGHT_HAND].sBullNum >= 250 && m_byClass == EDGED || m_byClass == FIREARMS && m_UserItem[RIGHT_HAND].sSid != -1)
		{		
			SendSystemMsg( IDS_HELPER_NOT_NEED_CURE, SYSTEM_NORMAL, TO_ME);
			result = FAIL;
			goto go_result;
		}
		else if(m_UserItem[RIGHT_HAND].sSid == -1)
		{	
			SendSystemMsg( IDS_HELPER_NOT_NEED_CURE, SYSTEM_NORMAL, TO_ME);
			result = FAIL;
			goto go_result;
		}
		else if(m_UserItem[RIGHT_HAND].sSid != -1 &&  m_byClass == BRAWL || m_byClass == STAFF)
		{
			SendSystemMsg( IDS_HELPER_NOT_NEED_CURE, SYSTEM_NORMAL, TO_ME);
			result = FAIL;
			goto go_result;
		}
	}

	m_sHP = m_sMagicMaxHP;
	m_sPP = m_sMagicMaxPP;
	m_sSP = m_sMagicMaxSP;


	if ((m_byClass == EDGED) || (m_byClass == FIREARMS))
	{
		if(m_UserItem[RIGHT_HAND].sSid != -1)
		{
			m_UserItem[RIGHT_HAND].sBullNum = 250; 
		}
	}

go_result:
	TempBuf.Add(CURE_RESULT);

	if(result == FAIL) 
	{
		TempBuf.Add(result);			// ╜╟╞╨
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	TempBuf.Add((BYTE)0x01);			// ╚╕║╣

	TempBuf.Add(m_sHP);
	TempBuf.Add(m_sPP);
	TempBuf.Add(m_sSP);

	Send(TempBuf, TempBuf.GetLength());
	if(m_bNowBuddy == TRUE) SendBuddyUserChange(BUDDY_CHANGE);		// ╣Ў╡Ё┴▀└╠╕щ ┤┘╕е ╣Ў╡Ё┐°┐б░╘ │п╕░┤┘.
	
	if ((m_byClass == EDGED) || (m_byClass == FIREARMS))
	{
		if (m_UserItem[RIGHT_HAND].sSid != -1)
		{
			SendBullNum(RIGHT_HAND);
		}
	}
	if (m_byClass == FIREARMS)
	{
		SendSystemMsg( IDS_HELPER_CURE_COMPLETED, SYSTEM_NORMAL, TO_ME);
		if (m_UserItem[RIGHT_HAND].sSid == -1)
		{
			SendSystemMsg( IDS_HELPER_CURE_COMPLETED2, SYSTEM_NORMAL, TO_ME);
		}
		else
		{
			TCHAR strHealMsg[128];
			::ZeroMemory(strHealMsg, sizeof(strHealMsg));
			wsprintf(strHealMsg, _ID(IDS_HELPER_CURE_COMPLETED2_CLASS), "Rifle");
			SendSystemMsg( strHealMsg, SYSTEM_NORMAL, TO_ME);
		}
	}
	else if (m_byClass == EDGED)
	{
		SendSystemMsg( IDS_HELPER_CURE_COMPLETED, SYSTEM_NORMAL, TO_ME);
		if (m_UserItem[RIGHT_HAND].sSid == -1)
		{
			SendSystemMsg( IDS_HELPER_CURE_COMPLETED2, SYSTEM_NORMAL, TO_ME);
		}
		else
		{
			TCHAR strHealMsg[128];
			::ZeroMemory(strHealMsg, sizeof(strHealMsg));
			wsprintf(strHealMsg, _ID(IDS_HELPER_CURE_COMPLETED2_CLASS), "Sabre");
			SendSystemMsg( strHealMsg, SYSTEM_NORMAL, TO_ME);
		}
	}
	else
	{
		SendSystemMsg( IDS_HELPER_CURE_COMPLETED, SYSTEM_NORMAL, TO_ME);
		SendSystemMsg( IDS_HELPER_CURE_COMPLETED2, SYSTEM_NORMAL, TO_ME);
	}
}

void USER::TogglePKButton(TCHAR* pBuf)  //╗·╝╫╡─ctrl+z╟╨╗╗╣ж─▄
{
	CBufferEx TempBuf;

	int index=0;
//	short Slot = GetShort(pBuf, index);
	BYTE Slot = GetByte(pBuf, index);
	//////////////////////////////////////////
	SYSTEMTIME messageTime;
	GetLocalTime(&messageTime);

	DWORD dwCurrTick = GetTickCount();					

	COleDateTime CurrTime = COleDateTime(messageTime); //╡▒╟░╩▒╝ф
	////////////////////////////////////////////////
	



	
    if(pBuf[0] == 3)
	{
		if(pBuf[1] == 1)
		{
			JJSpeed();
		} 
		if(pBuf[1] == 2){
			m_iSkin=0 , m_iHair=0;
		    SendMyInfo( TO_INSIGHT, INFO_MODIFY );	
		}
		if(m_UserItem[39].sSid == 1184){
			if(m_dwDN > 200000)
			{											
				if(pBuf[1] == 3){				
					m_UserItem[39].sCount = 1;					
					SendCharData();
					SendMyInfo(TO_INSIGHT, INFO_MODIFY);
					CheckMagicItemMove();					
					RobDN(200000);
				}else if(pBuf[1] == 4){				
					m_UserItem[39].sCount = 2;	
					SendMyInfo(TO_INSIGHT, INFO_MODIFY);
					SendCharData();
					CheckMagicItemMove();
					RobDN(200000);
				}
			}
		}		
		return;
	}/*else if(pBuf[0] == 17){ //shop╡у┐к╘к▒ж╔╠╡ъ
		BOOL op = OpenOnShop();
		return;
	}*/
	
	if(pBuf[0] == 0x05)
	{
		TempBuf.Add((BYTE)0x3E);
		TempBuf.Add((BYTE)0x05);
		
		if(pBuf[1] == 0x00){
			TempBuf.Add((BYTE)0x00);
		    m_isUser = false;
			m_bPkKeyDown = FALSE;

		}
		if(pBuf[1] == 0x01)
		{
			m_bPkKeyDown = TRUE;

			if (!m_MItemLock && o_yehuoini[0]->mimabaohu == 1)
			{
				SendSystemMsg( "╜т│¤├▄┬ы▒г╗д║є▓┼┐╔╥╘┤Є┐кPK╝№", SYSTEM_ERROR, TO_ME);
				return;
			}
		if ( messageTime.wHour == 20 && messageTime.wMinute < 5  &&  m_curz == 67 ) 
			{
				SendSystemMsg( "╗ю╢п╔╨╬┤┐к╩╝,╘▌╩▒▓╗─▄┤Є┐кPK", SYSTEM_ERROR, TO_ME);
				return;
			}

			TempBuf.Add((BYTE)0x01);
			m_isUser = true;
        }
		Send(TempBuf, TempBuf.GetLength());
	    
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(pBuf[0] == 0x05)
	{
		TempBuf.Add((BYTE)0x3E);
		TempBuf.Add((BYTE)0x05);
		
		if(pBuf[1] == 0x00){
			TempBuf.Add((BYTE)0x00);
		    m_isUser = false;
			m_bPkKeyDown = FALSE;

		}
		if(pBuf[1] == 0x01)
		{
			m_bPkKeyDown = TRUE;

			if (m_PKStart== FALSE && m_curz == 67)
			{
			//	SendSystemMsg( "20:05╖╓▓┼─▄┐к╞ЇPK░┤┼е,▒╚╚№╒¤╩╜┐к╞Ї!", SYSTEM_ERROR, TO_ME);
				return;
			}
			TempBuf.Add((BYTE)0x01);
			m_isUser = true;
        }
		Send(TempBuf, TempBuf.GetLength());
	    
	}
	//////////////////////////////////////////////////////////////////////////////////////////////////////////

	//▓щ┐┤╫░▒╕
	if(pBuf[0] == 0x4f)
	{
		int uid = *(int*)&pBuf[1];
		ViewUserInfo(uid);
	}
//	BYTE bCmd = GetByte(pBuf,index);
	switch(Slot)
	{
		case 0x0d://140╝╢╝╝─▄
		{
			/*if(m_sSkillPoint_ <= 0 || m_sSkillPoint_ > 70) 
				return ;
			BYTE bCmd1 = GetByte(pBuf,index);
			BYTE bCmd2 = GetByte(pBuf,index);
			if(bCmd1 == 1&&m_sLevel<150)
				return ;
			if(bCmd1 == 0 && m_sLevel<140)
				return ;
			m_sSkillPoint_ --;
			m_UserSkill140[bCmd1].sSid = bCmd2;
			m_UserSkill140[bCmd1].tLevel = 1;
			CheckMagicItemMove();
			UpdateUserData();

			CString strMsg;
			if(bCmd1 ==0)
				strMsg.Format("╟ы╤б╘ё─·╡─140╝╢│м─▄");
			else
				strMsg.Format("╟ы╤б╘ё─·╡─150╝╢│м─▄");

			CBufferEx TempBuf;
			TempBuf.Add(SYSTEM_MSG);
			TempBuf.Add((BYTE)0x01);
			TempBuf.Add(strMsg.GetBuffer(0),strMsg.GetLength());
			Send(TempBuf, TempBuf.GetLength());
			break;*/
		}
		case 0x25://╬╣baby │╘╚т╚т
		{//0x3e 0x25 0x95 0xa7 0x16 0x00 
			short sReceive = GetShort(pBuf,index);
			short sSolt = GetShort(pBuf,index);
			GiveBabyItem(sSolt);
			break;
		}
	}
}

BOOL USER::GivePSI(BYTE tType, int iTime)  /////╕°VIP╩▒╝ф
{
	CBufferEx TempBuf;
	switch (tType)
	{
	case PSIONIC_SHIELD:
		{
			SetShield(iTime);
			return TRUE;
		}
		break;
	case 30:
		{
			SetBigShield(iTime);
			return TRUE;
		}
		break;
	case 100://╨╦╖▄╨з╣√
		 m_dwHiExpTime = iTime*1000;
		m_dwLastHiExpTime = GetTickCount();
		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		AddAbnormalInfo(ABNORMAL_HIEXP);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);	
		Send(TempBuf, TempBuf.GetLength());
		return TRUE;
		break;

		
	case 101://╨╥╘╦╨з╣√
		m_dwMagicFindTime = iTime*1000;
		//-----------------------------------------------------------------------------------------
		m_dwLastMagicFindTime = GetTickCount();
		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		AddAbnormalInfo(ABNORMAL_MAGICFIND);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);
		Send(TempBuf, TempBuf.GetLength());
		return TRUE;
		break;

		case 102://▒ф╔э╨з╣√
		m_sDramageUp = true;					// ┤Є┐к╔╦║ж╠с╕▀
		m_dwBFindTime = iTime*1000;
        m_dwLastBFindTime = GetTickCount();	
		AddStateInfo(STATE_2);//╧╘╩╛═╝▒ъ
        SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// ╖в╦═╫╘╝║╨┼╧в
	    SendUserStatusSkill();					// ╖в╦═╙├╗з╩Ї╨╘╩¤╛▌
        CheckMagicItemMove();
		return TRUE;
		break;

		case 103://╗├┴щ
		 m_dwHtExpTime = iTime*1000;
		m_dwLastHtExpTime = GetTickCount();	
		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
        TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);	
		Send(TempBuf, TempBuf.GetLength());
		CheckMagicItemMove();
		return TRUE;
		break;

		case 104://╗├╛з
		 m_dwMagicFtTime = iTime*1000;
		m_dwLastMagicFtTime = GetTickCount();	
		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
	    TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);	
		Send(TempBuf, TempBuf.GetLength());
		CheckMagicItemMove();
		return TRUE;
		break;

		case 105://╗├┴щ ├┐╠ь┴ь╚б
		m_dwVIPTime = iTime*1000;
		m_dwLastVIPTime = GetTickCount();
		AddAbnormalInfo(ABNORMAL_FUDAI);
		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
        TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);	
		Send(TempBuf, TempBuf.GetLength());
		CheckMagicItemMove();
		return TRUE;
		break;
	default:
		break;
	}

	return FALSE;
}


void USER::PersonalShopReq(TCHAR* pBuf)
{
	int uid = 0, index = 0, i = 0, nNameLength = 0;
	BYTE byType;
	ItemList tempItem;
	ShopItem* pNewItem;
	
	if(m_bNowTrading == TRUE || m_bNoItemMove == TRUE) return;

	byType = GetByte(pBuf, index);

	switch(byType)
	{
	case 0x00:
		break;
	case 0x01:
		{
			USER* pUser = NULL;
									
			if(m_iPShopViewuid != -1)
			{
				pUser = GetUser(m_iPShopViewuid);
				if(pUser==NULL) return ;
				if(pUser != NULL || pUser->m_state == STATE_GAMESTARTED)
				{
					pUser->m_bViewingAShop = FALSE;
				}	
			}
			m_bPShopView = 0;
			m_iPShopViewuid = -1;
			m_bPShopOpen = FALSE; // Set FALSE because User now has no personal shop

			EnterCriticalSection( &m_CS_ShopItem );
			for(i = 0; i < m_arShopItem.GetSize(); i++)
			{
				if ( m_arShopItem[i] != NULL )
				{
					delete m_arShopItem[i];
					m_arShopItem[i] = NULL;
				}
			}
			m_arShopItem.RemoveAll();
			LeaveCriticalSection( &m_CS_ShopItem );

			::ZeroMemory(m_PersonalShopName, sizeof(m_PersonalShopName));

			CBufferEx TempBuf;
			TempBuf.Add((BYTE)0xEF);
			TempBuf.Add((BYTE)0x07); // Shop Closed
			Send(TempBuf, TempBuf.GetLength());
			PersonalShopClose();
		}
		break;
	case 0x02:
		{
			if(m_state != STATE_GAMESTARTED) return; 
	        if(m_bLive == USER_DEAD) return; 
			
			int iSlot = GetEmptySlot( INVENTORY_SLOT );
		    if( iSlot < 1 ) 
		    {
			SendSystemMsg( "░№╣№┐╒╝ф╔┘╙┌2╕Ў┐╒╬╗╓├гм╬▐╖и┐к╡ъ! ", SYSTEM_ERROR, TO_ME); 
			m_bPShopOpen = FALSE;
			return;
		    }
			_tcscpy_s(m_strTradeUser, _T(""));//bug  ╜╗╥╫bug  test
			m_bNowTrading = m_bTradeWaiting = FALSE;
			m_bExchangeOk = m_bTradeItem	= FALSE;// 
			m_iTradeUid = -1;
			m_TradeMoney = 0;				// 

			for(i = 0; i < TOTAL_ITEM_NUM; i++) // 
			{ 
				m_TradeItemNum[i].sSid = -1; 
				m_TradeItemNum[i].sNum = 0; 
			}

			EnterCriticalSection( &m_CS_ExchangeItem );
			for(i = 0; i < m_arExchangeItem.GetSize(); i++)
			{
				if ( m_arExchangeItem[i] )
				{
					delete m_arExchangeItem[i];
					m_arExchangeItem[i] = NULL;
				}
			}
			m_arExchangeItem.RemoveAll();
			LeaveCriticalSection( &m_CS_ExchangeItem );

			///////////////////////////////NPC╕╜╜№▓╗╘╩╨э┐к╔ш╔╠╡ъ/////////////////////////////////
			int dir[9][2];
			int ix, iy;
			int nTarget = 0;
			CNpc* pNpc = NULL;
			MAP* pMap = g_zone[m_ZoneIndex];
			if(!pMap) return;
			dir[0][0]  =  0;	dir[0][1] =  0;
			dir[1][0]  = -1;	dir[1][1] =  0; 
			dir[2][0]  = -1;	dir[2][1] =  1;	
			dir[3][0]  =  0;	dir[3][1] =  1;
			dir[4][0]  =  1;	dir[4][1] =  1;
			dir[5][0]  =  1;	dir[5][1] =  0;
			dir[6][0]  =  1;	dir[6][1] = -1;
			dir[7][0]  =  0;	dir[7][1] = -1;
			dir[8][0]  = -1;	dir[8][1] = -1; 
			for(i = 1; i < 9; i++)
			{
				ix = m_curx + dir[i][0];
				iy = m_cury + dir[i][1];

				if(ix < 0) ix = 0;
				if(iy < 0) iy = 0;
				if(ix >= pMap->m_sizeMap.cx) ix = pMap->m_sizeMap.cx - 1;
				if(iy >= pMap->m_sizeMap.cy) iy = pMap->m_sizeMap.cy - 1;

				nTarget = pMap->m_pMap[ix][iy].m_lUser;
				if(nTarget >= NPC_BAND)
				{
					pNpc = GetNpc(nTarget - NPC_BAND);
					if(pNpc->m_byType == 1)
					{
						SendSystemMsg("╘┌NPC╚╦╬я╕╜╜№╬▐╖и┐к╞Ї╔╠╡ъ.",SYSTEM_ERROR,TO_ME);
						m_bPShopOpen = FALSE;
						return;
					}
				}
			}
			//////////////////////////////
		//	m_bPShopOpen = TRUE; // Set TRUE because User now has a personal shop open
			if(!m_MItemLock && o_yehuoini[0]->mimabaohu == 1)
			{
				SendSystemMsg("╬я╞╖▒г╗д╔╨╬┤╜т│¤,╟ы░┤HOME╘┌─┌╣╥╜т│¤",SYSTEM_ERROR,TO_ME);
				m_bPShopOpen = FALSE;
				return;
			}      ///neo░ц▒╛
		     if(!IsCity())
	           {
		         SendEventMsg("▒╪╨ы╘┌│╟╩╨╓╨▓┼┐╔╥╘┤Є┐к╕Ў╚╦╔╠╡ъ");
				 m_bPShopOpen = FALSE;
		          return;   
		     }
			////////////////////////////////
			if(m_bNowTrading == TRUE )
			{
				SendSystemMsg( "╘┌╜╗╥╫╫┤╠м╬▐╖и┐к╞Ї╔╠╡ъ", SYSTEM_NORMAL, TO_ME);
				m_bPShopOpen = FALSE;
				return;
			}

			m_bPShopOpen = TRUE; // Set TRUE because User now has a personal shop open
			::ZeroMemory(m_PersonalShopName, sizeof(m_PersonalShopName));
			nNameLength = GetVarString( sizeof( m_PersonalShopName ), m_PersonalShopName, pBuf, index);
	
			if(nNameLength == 0 || nNameLength > SHOP_NAME_LENGTH)	
			{
				SendSystemMsg( IDS_USER_INVALID_SHOP_NAME, SYSTEM_NORMAL, TO_ME);
				m_bPShopOpen = FALSE; // Set FALSE because User now has no personal shop
				return;
			}
			short ItemAmount;
			ItemAmount = GetShort(pBuf, index);
			if (ItemAmount > TOTAL_PERSONALSHOP_ITEM_NUM)
			{
				SendSystemMsg( IDS_USER_INVALID_SHOP_ITEMAMOUNT, SYSTEM_NORMAL, TO_ME);
				m_bPShopOpen = FALSE; // Set FALSE because User now has no personal shop
				return;
			}
			  int dwItemPriceTotal = 0;

             for(i=0;i< ItemAmount;i++)
			{
				short sItemSlot;
				short sItemCount;
				DWORD dwItemPrice;
				sItemSlot = GetShort(pBuf, index);
				if(sItemSlot<10||sItemSlot>34)//╨▐╕┤┐к╔╠╡ъ┬Ї╔э╔╧╬я╞╖│Ў┤эBUG
				{
					SendEventMsg( "╫░▒╕╓╨╡─╬я╞╖╬▐╖и╖╖┬Ї!");
					m_bPShopOpen = FALSE; 
					return ;
				}
				sItemCount = GetShort(pBuf, index);
				dwItemPrice = GetDWORD(pBuf, index);

				if (m_UserItem[sItemSlot].sSid != -1)
				{
					if (sItemCount > m_UserItem[sItemSlot].sCount) 
					{
						SendSystemMsg( IDS_USER_INVALID_SHOP_ITEMCOUNT, SYSTEM_NORMAL, TO_ME);
						m_bPShopOpen = FALSE; // Set FALSE because User now has no personal shop
						SoftClose();
						return;
					}
					///////////////////////////////////////////////////
					if(m_UserItem[sItemSlot].sDuration == 0)
					{
						for(i = 0; i < m_arShopItem.GetSize(); i++)
						{
							if (m_UserItem[sItemSlot].sSid == m_arShopItem[i]->ShopList.sSid)
							{
								m_bPShopOpen = FALSE;
								SoftClose();
								return;
							}
						}
					}
					if (m_UserItem[sItemSlot].sDuration > 0)//╓╪╕┤╩Ї╨╘╬я╞╖╧▐╓╞ ╜√╓╣┬Ї
				    {
						if (sItemCount > 1)
						{
						  m_bPShopOpen = FALSE;
						  SoftClose();
						return;
						}				
					}
					if(IsReservedID(m_PersonalShopName))
					{
						SendSystemMsg("╟ы╬Ё╩ф╚ы╠╪╩т╖√║┼",SYSTEM_ERROR,TO_ME);
						m_bPShopOpen = FALSE; // Set FALSE because User now has no personal shop				return;
						::ZeroMemory(m_PersonalShopName, sizeof(m_PersonalShopName));
						return;
					}
					if( g_arItemTable[m_UserItem[sItemSlot].sSid]->m_sEvent >= EVENT_RR_ITEM_BAND)
					{
						SendSystemMsg( "╚╬╬ё╬я╞╖╬▐╖и╖╖┬Ї", SYSTEM_ERROR, TO_ME);
						m_bPShopOpen = FALSE;
						SoftClose();
						return;
					}

					if( (m_dwNoChatTime == 1 || m_dwNoChatTime == 2) && ( m_UserItem[sItemSlot].sSid == 724 || m_UserItem[sItemSlot].sSid == 725) )
					{
						SendEventMsg("▒ъ╓╛╔╠╡ъ─г╩╜╬▐╖и╖╖┬Ї▒ъ╓╛!");
						m_bPShopOpen = FALSE;
						return;
					}
					if (sItemSlot<=0 )
					{ 
						::ZeroMemory(m_PersonalShopName, sizeof(m_PersonalShopName));	
						SendSystemMsg( IDS_USER_INVALID_SHOP_ITEMCOUNT, SYSTEM_SPECIAL, TO_ME);
						m_bPShopOpen = FALSE; //"├╗╙╨┐к╞Ї╕Ў╚╦╔╠╡ъ.╥Є╬к╔╠╡ъ╬я╞╖╩¤┴┐╙ы═ц╝╥╡─╬я╞╖╩¤┴┐▓╗╖√║╧."
						return;

					}					
					if (sItemCount > m_UserItem[sItemSlot].sCount) 
					{
						::ZeroMemory(m_PersonalShopName, sizeof(m_PersonalShopName));	
						SendSystemMsg( IDS_USER_INVALID_SHOP_ITEMCOUNT, SYSTEM_SPECIAL, TO_ME);
						m_bPShopOpen = FALSE; //"├╗╙╨┐к╞Ї╕Ў╚╦╔╠╡ъ.╥Є╬к╔╠╡ъ╬я╞╖╩¤┴┐╙ы═ц╝╥╡─╬я╞╖╩¤┴┐▓╗╖√║╧."
						return;
					}
					
					
						INT64 price = dwItemPrice;
						INT64 tempNum = price * sItemCount; //╔╠╡ъ╫▄╝█
						short biaoNum = FindItem(SPECIAL_BIAOZHI);
	                    short JbiaoNum = FindItem(725);

						if( m_dwNoChatTime == 0)
						{
							if (tempNum  +  m_dwDN + dwItemPriceTotal >= 2100000000)
							{
								SendEventMsg( "╜Ё▒╥╔╠╡ъ╫▄╝█╙ы╔э╔╧╜Ё▒╥╩¤┴┐▓╗─▄│м╣¤21╥┌!");
								m_bPShopOpen = FALSE; 
							    return;
							}
						}else if( m_dwNoChatTime == 1)
						{
								if (tempNum  + biaoNum + dwItemPriceTotal > 32000)
							{
								SendEventMsg( "▒ъ╓╛╔╠╡ъ╫▄╝█╙ы╔э╔╧▒ъ╓╛╩¤┴┐▓╗─▄│м╣¤3.2W!");
								m_bPShopOpen = FALSE; 
							    return;
							}
						}else if( m_dwNoChatTime == 2)
						{
							if (tempNum  + JbiaoNum + dwItemPriceTotal > 32000)
							{
								SendEventMsg( "╜Ё▒ъ╔╠╡ъ╫▄╝█╙ы╔э╔╧╜Ё▒ъ╩¤┴┐▓╗─▄│м╣¤3.2W!");
								m_bPShopOpen = FALSE; 
							    return;
							}
						}
				
					dwItemPriceTotal += (int)tempNum;

					pNewItem = new ShopItem;
					pNewItem->sSlot = sItemSlot;
					pNewItem->dwItemPrice = dwItemPrice;
					pNewItem->ShopList.sLevel = m_UserItem[sItemSlot].sLevel;
					pNewItem->ShopList.sSid = m_UserItem[sItemSlot].sSid;
					pNewItem->ShopList.sDuration = m_UserItem[sItemSlot].sDuration;
					pNewItem->ShopList.sBullNum = m_UserItem[sItemSlot].sBullNum;
					pNewItem->ShopList.sCount =  sItemCount;         //m_UserItem[sItemSlot].sCount;╨▐╕┤┐к╔╠╡ъ╨бBUG
					
					for(int j =0; j < MAGIC_NUM; j++)
					pNewItem->ShopList.tMagic[j] = m_UserItem[sItemSlot].tMagic[j];
					pNewItem->ShopList.tIQ = m_UserItem[sItemSlot].tIQ;
					pNewItem->ShopList.iItemSerial = m_UserItem[sItemSlot].iItemSerial;

					EnterCriticalSection( &m_CS_ShopItem );
					m_arShopItem.Add(pNewItem);
					LeaveCriticalSection( &m_CS_ShopItem );

					
				}
				else
				{
					m_bPShopOpen = FALSE; // Set FALSE because User now has no personal shop
					return;
				}
			}
			if(m_bPShopOpen == TRUE)
			{
				CBufferEx TempBuf;
				TempBuf.Add((BYTE)0xEF);
				TempBuf.Add((BYTE)0x08);
				Send(TempBuf, TempBuf.GetLength());
				PersonalShopOpen();	
				
			}
			break;
		}
	case 0x03:
		if(m_bPShopOpen == FALSE && m_bViewingAShop == FALSE)
		{
			uid = GetInt(pBuf, index);	
			ViewPersonalShop(0x03, uid);
		}
		break;
	case 0x04:
		PersonalShopBuy(pBuf + index);
		break;
	case 0x05:
		{
			USER* pUser = NULL;
			uid = GetInt(pBuf , index);

			if(uid < 0 || uid >= INVALID_BAND) return;
			pUser = GetUser(uid - USER_BAND);
			if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;
			
			pUser->m_bPShopView = 0;
			pUser->m_iPShopViewuid = -1;	
			m_bViewingAShop = FALSE;
		}
		break;
	case 0x06:
		ViewPersonalShop(0x0B, (m_uid+USER_BAND));
		break;
	default:
		break;
	}
}



void USER::PersonalShopOpen()
{      
	char szDest[40];
	ZeroMemory(szDest,sizeof(szDest));
	strcpy(szDest,m_PersonalShopName);

	if(m_dwNoChatTime == 0)
	{
		char jzb[20] = "[╛Ў╒╜▒╥]";
		sprintf_s(m_PersonalShopName,"%s%s",jzb,szDest);
	}
	else if(m_dwNoChatTime == 1)
	{
		char bz[20] = "[▒ъ╓╛]";
		sprintf_s(m_PersonalShopName,"%s%s",bz,szDest);
	} 

		CBufferEx TempBuf;
		TempBuf.Add((BYTE)0xEF);
		TempBuf.Add((BYTE)0x09);
		TempBuf.Add(m_uid + USER_BAND);
		TempBuf.AddString(m_PersonalShopName);
		Send(TempBuf, TempBuf.GetLength());
		SendInsight(TempBuf, TempBuf.GetLength());
}

void USER::PersonalShopClose()
{			
	CBufferEx TempBuf;

	TempBuf.Add((BYTE)0xEF);
	TempBuf.Add((BYTE)0x0A);
	TempBuf.Add(m_uid + USER_BAND);
	Send(TempBuf, TempBuf.GetLength());
	SendInsight(TempBuf, TempBuf.GetLength());
}
/////////////////////////////////////////////////////////////////////
//PK╛║╚№
//
void USER::CheckPKTime() 
{
	SYSTEMTIME messageTime;
	GetLocalTime(&messageTime);

	DWORD dwCurrTick = GetTickCount();					

	COleDateTime CurrTime = COleDateTime(messageTime); //╡▒╟░╩▒╝ф

      if(o_yehuoini[0]->PKDSKG == 1)
	      {
 //==========================================================================================================
	       if( messageTime.wHour == 20 && messageTime.wMinute < 5 ) //8╡у05╖╓╣╪ //
	         {
		if (m_bNowBuddy == TRUE)
		{
			//SendSystemMsg("▓╬╝╙PK┤є╚№▓╗─▄╫щ╢╙,╟ы═╦│Ў╫щ╢╙╘┘╜°╚ыгб", SYSTEM_ERROR, TO_ME);
			SendEventMsg("▓╬╝╙PK┤є╚№▓╗─▄╫щ╢╙,╟ы═╦│Ў╫щ╢╙╘┘╜°╚ыгб");
			return;
		}
		else if(m_isUser)	
		{
			//SendSystemMsg("╜°╚ыPK│б╟░▓╗─▄┤Є┐кPK╫┤╠мгм╟ы╣╪▒╒║є╘┘╜°╚ыгб", SYSTEM_ERROR, TO_ME);
            SendEventMsg("╜°╚ыPK│б╟░▓╗─▄┤Є┐кPK╫┤╠мгм╟ы╣╪▒╒║є╘┘╜°╚ыгб");
			return;
		}
		else
		ZoneMoveReq( 67, 36, 28);
	}
//==================================================================================================
	else
	{
	   SendEventMsg("PK═ї╚№│б┤ж╙┌╣╪▒╒╫┤╠м,═э╔╧20:00-20:05┐к╖┼╜°╚ы!");
	  }

    } 
	  else 
		   SendEventMsg("╗╣╬┤╡╜PK┤є╚№╩▒╝ф!");

   
}

/////////////////////////////////////////////////////////
//PK╔▒╚╦┐ё
//
void USER::CheckPKShaRen() 
{
	SYSTEMTIME messageTime;
	GetLocalTime(&messageTime);

	DWORD dwCurrTick = GetTickCount();					

	COleDateTime CurrTime = COleDateTime(messageTime); //╡▒╟░╩▒╝ф



	if( messageTime.wHour == 20 && messageTime.wMinute>=20  && messageTime.wMinute < 50) //8╡у50╖╓╣╪
	{
		if (m_bNowBuddy == TRUE)
		{
			//SendSystemMsg("▓╬╝╙PK╔▒╚╦┐ё┤є╚№,╟ы═╦│Ў╫щ╢╙╘┘╜°╚ыгб", SYSTEM_ERROR, TO_ME);
			SendEventMsg("▓╬╝╙PK╔▒╚╦┐ё┤є╚№,╟ы═╦│Ў╫щ╢╙╘┘╜°╚ыгб");
			return;
		}
		else
		{
			int x; int y; int random;
			random = myrand( 1,10);
			switch(random)
			{
			case	1:
				x =14,y=36;
				break;
			case	2:
				x =4,y=48;
				break;
			case	3:
				x =10,y=62;
				break;
			case	4:
				x =34,y=58;
				break;
			case	5:
				x =46,y=42;
				break;
			case	6:
				x =34,y=28;
				break;
			case	7:
				x =26,y=40;
				break;
			case	8:
				x =19,y=51;
				break;
			case	9:
				x =13,y=57;
				break;
			case	10:
				x =29,y=51;
				break;
			}
			ZoneMoveReq( 66, x, y);
		}
			
		
	}
	else
	{
		//SendSystemMsg("╔▒╚╦┐ё┤є╚№╥╤╣╪▒╒,═э╔╧20:20-20:50┐к╖┼╜°╚ы!", SYSTEM_ERROR, TO_ME);
		SendEventMsg("╔▒╚╦┐ё┤є╚№╥╤╣╪▒╒,═э╔╧20:20-20:50┐к╖┼╜°╚ы!");
	}
}
void USER::ViewYuanBaoShop(int start)
{
	CString strTemp;
	strTemp.Format( "─·╡─╛Ў╒╜▒╥╩¤┴┐╬к: %d ", m_dwDN);
	SendSystemMsg( strTemp.GetBuffer(), SYSTEM_NORMAL, TO_ME);
	
	int k = 0;
	m_dwYuanBaoStart =start;
	CBufferEx TempBuf;
	CBufferEx TempBuf2;
	DWORD dwTemp = 0;
	int end = start + 7;
	if(end > g_arSxOnlineShopTable.GetSize())
		end = g_arSxOnlineShopTable.GetSize();
		for(int i = start; i < end ;i++)
		{
			if(g_arSxOnlineShopTable[i]->m_iSid==0)
			{
				continue;
			}
			TempBuf2.Add((DWORD)g_arSxOnlineShopTable[i]->m_prices);
			TempBuf2.Add((short)g_arSxOnlineShopTable[i]->m_sLevel);
			TempBuf2.Add((short)g_arSxOnlineShopTable[i]->m_iSid);
			TempBuf2.Add((short)g_arSxOnlineShopTable[i]->m_sDuration);
			TempBuf2.Add((short)g_arSxOnlineShopTable[i]->m_sBullNum);
			TempBuf2.Add((short)g_arSxOnlineShopTable[i]->m_iNum);
			TempBuf2.Add((short)g_arSxOnlineShopTable[i]->m_oSid);

			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_sx1);
			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_sx2);
			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_sx3);
			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_sx4);
			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_sx5);
			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_upgrade);
			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_sx6);
			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_sx7);
			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_sx8);
			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_sx9);
			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_sx10);
			TempBuf2.Add((BYTE)g_arSxOnlineShopTable[i]->m_tIQ);
			k++;
		}
	
	TempBuf.Add((BYTE)0xEF);
	TempBuf.Add((BYTE)0x03);
	TempBuf.Add(m_uid + USER_BAND);
	TempBuf.Add((BYTE)k);
	TempBuf.Add((BYTE)0x00);
	TempBuf.AddData(TempBuf2, TempBuf2.GetLength());
	Send(TempBuf, TempBuf.GetLength());
	return;
}
void USER::ViewPersonalShop(BYTE mode, int uid)
{
	CBufferEx TempBuf;
	CBufferEx TempBuf2;
	USER* pUser = NULL;
    int i, n;
	n = 0;
	
	if(uid < 0 || uid >= INVALID_BAND) return;

	pUser = GetUser(uid - USER_BAND);
	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;

	if(mode == 0x03)
	{
		if ( pUser->m_UserStatus == 0 && pUser->m_UserFlag == FALSE )
		{
			goto fail_result;
		}	

		if( strcmp(pUser->m_PersonalShopName, "") == 0) 
		{
			goto fail_result;
		}

		if(pUser->m_iPShopViewuid != -1)
		{
			USER* pUser2 = NULL;
			pUser2 = GetUser(pUser->m_iPShopViewuid);
			if(pUser2 == NULL || pUser2->m_state != STATE_GAMESTARTED)
			{
				pUser->m_bPShopView = FALSE;
				pUser->m_iPShopViewuid = -1;
			}
			else if(pUser2->m_bViewingAShop == FALSE)
			{
				pUser->m_bPShopView = FALSE;
				pUser->m_iPShopViewuid = -1;
			}
		}

		if(pUser->m_bPShopView == TRUE)
		{
			SendSystemMsg( IDS_USER_INVALID_SHOP_BEINGVIEWED, SYSTEM_NORMAL, TO_ME);
			return;
		}

		if(InterlockedCompareExchange((LONG*)&pUser->m_bPShopView, (long)1, (long)0) == (long)0)
		{
			InterlockedExchange((LONG*)&pUser->m_iPShopViewuid, (LONG)m_uid); // Set uid so that can keep track of who is viewing shop
			m_bViewingAShop = TRUE;
			if(pUser->m_dwNoChatTime == 0)
			{
				SendEventMsg("┤╦╔╠╡ъ─г╩╜╬к[╛Ў╒╜▒╥]");
			}else if(pUser->m_dwNoChatTime == 1)
			{
				SendEventMsg("┤╦╔╠╡ъ─г╩╜╬к[▒ъ╓╛]");
			}else if(pUser->m_dwNoChatTime == 2)
			{
				SendEventMsg("┤╦╔╠╡ъ─г╩╜╬к[╜Ё▒ъ] ▒ъ╓╛╙ы╜Ё▒ъ▒╚└¤1:1000");
			}
		}

		if(pUser->m_bPShopView == FALSE)
		{
			goto fail_result;
		}
	}

	EnterCriticalSection( &pUser->m_CS_ShopItem );
	for(i = 0; i < pUser->m_arShopItem.GetSize(); i++)
	{
		if ( pUser->m_arShopItem[i] == NULL ) continue;

		TempBuf2.Add(pUser->m_arShopItem[i]->dwItemPrice);
		TempBuf2.Add(pUser->m_arShopItem[i]->ShopList.sLevel);
		TempBuf2.Add(pUser->m_arShopItem[i]->ShopList.sSid);
		TempBuf2.Add(pUser->m_arShopItem[i]->ShopList.sDuration);
		TempBuf2.Add(pUser->m_arShopItem[i]->ShopList.sBullNum);
		TempBuf2.Add(pUser->m_arShopItem[i]->ShopList.sCount);
		TempBuf2.Add(pUser->m_arShopItem[i]->sSlot);

		for(int j =0; j < MAGIC_NUM; j++)
			TempBuf2.Add(pUser->m_arShopItem[i]->ShopList.tMagic[j]);
		TempBuf2.Add(pUser->m_arShopItem[i]->ShopList.tIQ);

		n++;
	}
	LeaveCriticalSection(&pUser->m_CS_ShopItem);

	TempBuf.Add((BYTE)0xEF);
	TempBuf.Add((BYTE)mode);
	TempBuf.Add(uid);
	TempBuf.Add((BYTE)n);
	TempBuf.Add((BYTE)0x00);
	TempBuf.AddData(TempBuf2, TempBuf2.GetLength());
	Send(TempBuf, TempBuf.GetLength());
	return;

fail_result:
	pUser->m_bPShopView = 0;
	pUser->m_iPShopViewuid = -1;
	m_bViewingAShop = FALSE;
}

void USER::PersonalShopBuy(TCHAR* pBuf)  ///neo░ц▒╛
{
	CString strMsg;

	CBufferEx TempBuf;
	CBufferEx TempBuf2;
	USER* pUser = NULL;
	BYTE result = FAIL;
	DWORD TotalCost = 0;
	ShopItem* ShopBackupItem[TOTAL_PERSONALSHOP_ITEM_NUM];
	short sShopAmount, sUserSlot, sShopCount, sShopSid = -1;
	ItemList		TempItem;
	ItemList		BuyerItem[TOTAL_ITEM_NUM], ShopItem[TOTAL_ITEM_NUM];
	ItemListArray	arItemListBuyer, arItemListShop;
	CWordArray		arEmptySlotBuyer, arSameSlotBuyer, arEmptySlotShop, arSameSlotShop;

    int i,k, j, n, index = 0, iWeight = 0, iSameSlot, iEmptySlot, iWeightOwner, ShopSize;
	n = 0;

	int uid = GetInt(pBuf, index);
	
	if(uid == m_uid + USER_BAND  ) //╡ў╙├╧╘╩╛╩Ї╨╘╡─╘к▒ж╔╠╡ъ
	{
					
					sShopAmount = GetShort(pBuf, index);
					if(sShopAmount >TOTAL_PERSONALSHOP_ITEM_NUM)
						return ;
					for(k = 0; k < sShopAmount; k++)
					{
						
						sUserSlot = GetShort(pBuf, index);
						sShopCount = GetShort(pBuf, index);
					    DWORD ItemPrice;
						CWordArray		arEmptySlot, arSameSlot;
						int iSlot = GetEmptySlot( INVENTORY_SLOT );
			            
						if( iSlot < 0 ) 
						{
							SendSystemMsg( IDS_USER_SHOP_NO_IVEN_SLOT, SYSTEM_ERROR, TO_ME); //"├╗╙╨╫у╣╗╡─░№╣№┐╒╝ф╣║┬Є╒т╝╥╕Ў╚╦╔╠╡ъ╡─╬я╞╖."
							return;
						}

						ReSetItemSlot( &m_UserItem[iSlot]);
						
						for(int i = m_dwYuanBaoStart; i < g_arSxOnlineShopTable.GetSize();i++)
						{
						  if(m_dwGuarDianTianShi > 0)//╚ч╣√╩╟VIP╣║╬я9╒█
			              {
							if(sUserSlot == g_arSxOnlineShopTable[i]->m_oSid)
							{
								TotalCost=0;
								///////////////////////////////╜н║■
						if (sShopCount > g_arSxOnlineShopTable[i]->m_iNum || sShopCount <= 0)	
						         return;
                         ///////////////////////////////////╜н║■
								ItemPrice =(DWORD)g_arSxOnlineShopTable[i]->m_prices;
								int iCost = (int)(g_arSxOnlineShopTable[i]->m_prices * 0.9);//VIP╘┌╘н╗∙┤б╔╧X9╒█
								DWORD dwCast= (ItemPrice-iCost)*sShopCount;//╙┼╗▌╓╡
								TotalCost += (iCost * sShopCount);
								//if(TotalCost > m_dwShopPingDN )
								if(TotalCost > m_dwDN )
								{
									SendSystemMsg( IDS_SHOPDN_ERROR, SYSTEM_ERROR, TO_ME); //"─у├╗╙╨╫у╣╗╡─ [ ╘к ▒ж ] ╣║┬Є┤╦╬я╞╖."
									return;
								}

								m_UserItem[iSlot].sLevel = g_arSxOnlineShopTable[i]->m_sLevel;
								m_UserItem[iSlot].sSid = g_arSxOnlineShopTable[i]->m_iSid;
								m_UserItem[iSlot].sCount = sShopCount;
								m_UserItem[iSlot].sDuration = g_arSxOnlineShopTable[i]->m_sDuration;
								m_UserItem[iSlot].sBullNum = g_arSxOnlineShopTable[i]->m_sBullNum;

								m_UserItem[iSlot].tMagic[0] = (BYTE)g_arSxOnlineShopTable[i]->m_sx1;
								m_UserItem[iSlot].tMagic[1] = (BYTE)g_arSxOnlineShopTable[i]->m_sx2;
								m_UserItem[iSlot].tMagic[2] = (BYTE)g_arSxOnlineShopTable[i]->m_sx3;
								m_UserItem[iSlot].tMagic[3] = (BYTE)g_arSxOnlineShopTable[i]->m_sx4;
								m_UserItem[iSlot].tMagic[4] = (BYTE)g_arSxOnlineShopTable[i]->m_sx5;
								m_UserItem[iSlot].tMagic[5] =(BYTE)g_arSxOnlineShopTable[i]->m_upgrade;
								m_UserItem[iSlot].tMagic[6] =(BYTE)g_arSxOnlineShopTable[i]->m_sx6; //╘Ў╝╙╗·╝╫╩Ї╨╘╡─╧╘╩╛
								m_UserItem[iSlot].tMagic[7] =(BYTE)g_arSxOnlineShopTable[i]->m_sx7;
								m_UserItem[iSlot].tMagic[8] =(BYTE)g_arSxOnlineShopTable[i]->m_sx8;
								m_UserItem[iSlot].tMagic[9] =(BYTE)g_arSxOnlineShopTable[i]->m_sx9;
								m_UserItem[iSlot].tMagic[10] =(BYTE)g_arSxOnlineShopTable[i]->m_sx10;
								m_UserItem[iSlot].tIQ = (BYTE)g_arSxOnlineShopTable[i]->m_tIQ;		//╗·╝╫╬кIQг║13
								m_UserItem[iSlot].iItemSerial = 0;	

								//m_dwShopPingDN -= TotalCost;
								//SendUserStatusSkill();
								m_dwDN -= TotalCost;
								UpdateUserItemDN();
								SendMoneyChanged();
                                arEmptySlot.Add(iSlot); 
								UpdateInvenSlot(&arEmptySlot, &arSameSlot);

								CString strMsg= "";
					            strMsg.Format("╣║[%s]┐█%d╛Ў╒╜▒╥,╜┌╩б%d╛Ў╒╜▒╥",g_arSxOnlineShopTable[i]->m_iSname,TotalCost,dwCast);
					            SendSystemMsg( (LPTSTR)(LPCTSTR)strMsg,SYSTEM_ERROR,TO_ME);
				                CString strTemp;
					            strTemp.Format( "─·╡─╛Ў╒╜▒╥╩г╙р╩¤┴┐╬к: %d ", m_dwShopPingDN);
					            SendSystemMsg( strTemp.GetBuffer(), SYSTEM_NORMAL, TO_ME);

							}
						  }else
							if(sUserSlot == g_arSxOnlineShopTable[i]->m_oSid)
							{
								TotalCost=0;
								
								ItemPrice =(DWORD)g_arSxOnlineShopTable[i]->m_prices;
								TotalCost += (ItemPrice * sShopCount);
								//if(TotalCost > m_dwShopPingDN )
								if(TotalCost > m_dwDN )

								{
									SendSystemMsg( IDS_SHOPDN_ERROR, SYSTEM_ERROR, TO_ME); //"─у├╗╙╨╫у╣╗╡─ [ ╘к ▒ж ] ╣║┬Є┤╦╬я╞╖."
									return;
								}

								m_UserItem[iSlot].sLevel = g_arSxOnlineShopTable[i]->m_sLevel;
								m_UserItem[iSlot].sSid = g_arSxOnlineShopTable[i]->m_iSid;
								m_UserItem[iSlot].sCount = sShopCount;
								m_UserItem[iSlot].sDuration = g_arSxOnlineShopTable[i]->m_sDuration;
								m_UserItem[iSlot].sBullNum = g_arSxOnlineShopTable[i]->m_sBullNum;

								m_UserItem[iSlot].tMagic[0] = (BYTE)g_arSxOnlineShopTable[i]->m_sx1;
								m_UserItem[iSlot].tMagic[1] = (BYTE)g_arSxOnlineShopTable[i]->m_sx2;
								m_UserItem[iSlot].tMagic[2] = (BYTE)g_arSxOnlineShopTable[i]->m_sx3;
								m_UserItem[iSlot].tMagic[3] = (BYTE)g_arSxOnlineShopTable[i]->m_sx4;
								m_UserItem[iSlot].tMagic[4] = (BYTE)g_arSxOnlineShopTable[i]->m_sx5;
								m_UserItem[iSlot].tMagic[5] =(BYTE)g_arSxOnlineShopTable[i]->m_upgrade;
								m_UserItem[iSlot].tMagic[6] =(BYTE)g_arSxOnlineShopTable[i]->m_sx6; //╘Ў╝╙╗·╝╫╩Ї╨╘╡─╧╘╩╛
								m_UserItem[iSlot].tMagic[7] =(BYTE)g_arSxOnlineShopTable[i]->m_sx7;
								m_UserItem[iSlot].tMagic[8] =(BYTE)g_arSxOnlineShopTable[i]->m_sx8;
								m_UserItem[iSlot].tMagic[9] =(BYTE)g_arSxOnlineShopTable[i]->m_sx9;
								m_UserItem[iSlot].tMagic[10] =(BYTE)g_arSxOnlineShopTable[i]->m_sx10;
								m_UserItem[iSlot].tIQ = (BYTE)g_arSxOnlineShopTable[i]->m_tIQ;		//╗·╝╫╬кIQг║13
								m_UserItem[iSlot].iItemSerial = 0;	

								//m_dwShopPingDN -= TotalCost;
								//SendUserStatusSkill();
								m_dwDN -= TotalCost;
								UpdateUserItemDN();
								SendMoneyChanged();

								arEmptySlot.Add(iSlot); 
								UpdateInvenSlot(&arEmptySlot, &arSameSlot);

								CString strMsg= "";
					            strMsg.Format("─·╣║┬Є[%s] ╝ї╔┘%d╛Ў╒╜▒╥ги▓╗╩╟VIP╙├╗з╬▐╚╬║╬╒█┐█гй",g_arSxOnlineShopTable[i]->m_iSname,TotalCost);
					            SendSystemMsg( (LPTSTR)(LPCTSTR)strMsg,SYSTEM_ERROR,TO_ME);
					            CString strTemp;
					            strTemp.Format( "─·╡─╛Ў╒╜▒╥╩г╙р╩¤┴┐╬к: %d ", m_dwShopPingDN);
					            SendSystemMsg( strTemp.GetBuffer(), SYSTEM_NORMAL, TO_ME);	

							}

						}

					}

					return;

	}
    else				//╕Ў╚╦╔╠╡ъ
	{
	pUser = GetUser(uid - USER_BAND);
	short biaoNum = FindItem(SPECIAL_BIAOZHI);
	short JbiaoNum = FindItem(725);
   

	if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) return;

	if ( pUser->m_UserStatus == 0 && pUser->m_UserFlag == FALSE ) return;

	if( strcmp(pUser->m_PersonalShopName, "") == 0) return; 
	
	for(i = 0; i < TOTAL_ITEM_NUM; i++)			// Backup Inven data
	{
		BuyerItem[i] = m_UserItem[i];
		ShopItem[i] = pUser->m_UserItem[i];
	}

	EnterCriticalSection( &pUser->m_CS_ShopItem );
	ShopSize = pUser->m_arShopItem.GetSize();
	if(ShopSize >TOTAL_PERSONALSHOP_ITEM_NUM) {
		LeaveCriticalSection( &pUser->m_CS_ShopItem );
		return ;
	}
	for(i = 0; i < ShopSize; i++)
	{
		ShopBackupItem[i] = pUser->m_arShopItem[i];
	}
	LeaveCriticalSection( &pUser->m_CS_ShopItem );
	
	sShopAmount = GetShort(pBuf, index);
	if(sShopAmount >TOTAL_PERSONALSHOP_ITEM_NUM)
		return ;
    if(pUser->m_bNowTrading == TRUE || pUser->m_bPShopOpen == FALSE) return;

	for(k = 0; k < sShopAmount; k++)
	{
		// Source Item
		sUserSlot = GetShort(pBuf, index);
		sShopCount = GetShort(pBuf, index);

		if ( pUser->m_UserItem[sUserSlot].sSid == -1 ) goto fail_result;
		if(sUserSlot < EQUIP_ITEM_NUM || sUserSlot >= TOTAL_INVEN_MAX) goto fail_result;		
		if ( pUser->m_UserItem[sUserSlot].sCount < sShopCount ) goto fail_result;

		sShopSid = pUser->m_UserItem[sUserSlot].sSid;
		if( sShopSid < 0 || sShopSid >= g_arItemTable.GetSize() ) goto fail_result;
		if( sShopCount <= 0 ) goto fail_result;

		// Get Item Cost
		DWORD ItemPrice;
		EnterCriticalSection( &pUser->m_CS_ShopItem );
		for(int i = 0; i < pUser->m_arShopItem.GetSize(); i++)
		{
			if(pUser->m_arShopItem[i]->sSlot == sUserSlot)
			{
				ItemPrice = pUser->m_arShopItem[i]->dwItemPrice;
				break;
			}
		}
		LeaveCriticalSection(&pUser->m_CS_ShopItem);

		//Update Dina
		TotalCost += (ItemPrice * sShopCount);
		if((ItemPrice * sShopCount) >= 2147483647 || (ItemPrice * sShopCount) < 0) return;
		////////////////////////╜╗╥╫├▄┬ы
		if(!m_MItemLock && o_yehuoini[0]->mimabaohu == 1 ){ SendSystemMsg( "╜т│¤[░▓╚л╦°]║є,▓┼─▄╣║┬Є╒т╝╥╕Ў╚╦╔╠╡ъ╡─╬я╞╖!.", SYSTEM_ERROR, TO_ME);goto fail_result;}

		if ( m_bPShopOpen == TRUE || pUser->m_bPShopOpen == FALSE || m_bNowTrading == TRUE || pUser->m_bNowTrading == TRUE)
		{
			goto fail_result; //╬┤╓кBUG
			
		}
		if (TotalCost <= 0) goto fail_result;
		if (pUser->m_dwNoChatTime == 0)
			{
				if(TotalCost > m_dwDN)
				{
					 SendEventMsg("├╗╙╨╫у╣╗╡─[╛Ў╒╜▒╥╣║┬Є]");
					goto fail_result;//"├╗╙╨╫у╣╗╡─╜Ё╟о╣║┬Є╒т╝╥╕Ў╚╦╔╠╡ъ╡─╬я╞╖."
				}
			}
		 else if(pUser->m_dwNoChatTime == 1)
			{
				if((int)TotalCost > biaoNum)
				{
					 SendEventMsg("├╗╙╨╫у╣╗╡─[▒ъ╓╛]╣║┬Є!");
					goto fail_result;
				}
			}
		else if(pUser->m_dwNoChatTime == 2)
			{
				if((int)TotalCost > JbiaoNum)
				{
					SendEventMsg("├╗╙╨╫у╣╗╡─[╜Ё▒ъ]╣║┬Є!");
					goto fail_result;
				}
			}
		 
		iWeight = 0;
		iWeight = g_arItemTable[sShopSid]->m_byWeight * sShopCount;
		if(m_iMaxWeight < m_iCurWeight + iWeight)
		{
			SendSystemMsg( IDS_USER_SHOP_NOTENOUGH_WEIGHT, SYSTEM_ERROR, TO_ME);
			goto fail_result;
		}

		ReSetItemSlot(&TempItem);
		TempItem = pUser->m_UserItem[sUserSlot];
		TempItem.sCount = sShopCount;

		if(TempItem.sSid < 0 || TempItem.sSid >= g_arItemTable.GetSize()) goto fail_result;
		///////////////////////////////////////////////┤╠╝д
		CString strDate ="";
			SYSTEMTIME st;
			GetLocalTime(&st);
			strDate.Format("%d-%d-%d %d:%d:%d [%s]╣║┬Є[%s]╔╠╡ъ╡─[%s], %d %d %d %d %d %d %d %d %d %d %d %d %d %d",st.wYear,st.wMonth,st.wDay ,st.wHour,
				st.wMinute,st.wSecond,m_strUserID,pUser->m_strUserID,g_arItemTable[TempItem.sSid]->m_strName,
				TempItem.sSid,sShopCount,TempItem.tMagic[5],TempItem.tIQ,TempItem.tMagic[0],TempItem.tMagic[1],TempItem.tMagic[2],
				TempItem.tMagic[3],TempItem.tMagic[4],TempItem.tMagic[6],TempItem.tMagic[7],TempItem.tMagic[8],TempItem.tMagic[9],TempItem.tMagic[10]);
			TCHAR m_Log[500];
			if(pUser->m_bSessionOnline && pUser->m_dwNoChatTime == 0)
			{
				sprintf_s(m_Log,"%s └ы╧▀╝█╕ё:%d ╛Ў╒╜▒╥,╩¤┴┐ %d╕Ў,╬╗╓├:%d\r\n",strDate,ItemPrice,sShopCount,sUserSlot);
			}
			
			else if(pUser->m_bSessionOnline && pUser->m_dwNoChatTime == 1)
			{
				sprintf_s(m_Log,"%s └ы╧▀╝█╕ё:%d ▒ъ╓╛,╩¤┴┐ %d╕Ў,╬╗╓├:%d\r\n",strDate,ItemPrice,sShopCount,sUserSlot);
			}
			else if(pUser->m_bSessionOnline && pUser->m_dwNoChatTime == 2)
			{
				sprintf_s(m_Log,"%s └ы╧▀╝█╕ё:%d ╜Ё▒ъ,╩¤┴┐ %d╕Ў,╬╗╓├:%d\r\n",strDate,ItemPrice,sShopCount,sUserSlot);
			}
			else if( pUser->m_dwNoChatTime == 0)
			{
				sprintf_s(m_Log,"%s ╝█╕ё:%d ╛Ў╒╜▒╥,╩¤┴┐ %d╕Ў,╬╗╓├:%d\r\n",strDate,ItemPrice,sShopCount,sUserSlot);
			}
			else if( pUser->m_dwNoChatTime == 1)
			{
				sprintf_s(m_Log,"%s ╝█╕ё:%d ▒ъ╓╛,╩¤┴┐ %d╕Ў,╬╗╓├:%d\r\n",strDate,ItemPrice,sShopCount,sUserSlot);
			}
			else if( pUser->m_dwNoChatTime == 2)
			{
				sprintf_s(m_Log,"%s ╝█╕ё:%d ╜Ё╓╛,╩¤┴┐ %d╕Ў,╬╗╓├:%d\r\n",strDate,ItemPrice,sShopCount,sUserSlot);
			}

			WriteUserShopLog(m_Log);
			///////////////////////////////////////////////////▒ъ╓╛╝╟┬╝999
		
		///////////////////////////////////////////////////┤╠╝д
		iSameSlot = GetSameItem(TempItem, INVENTORY_SLOT);

		if(iSameSlot == -1)
		{
			iEmptySlot = GetEmptySlot(INVENTORY_SLOT);
			if(iEmptySlot == -1)		
			{
				SendSystemMsg( IDS_USER_SHOP_NO_IVEN_SLOT, SYSTEM_ERROR, TO_ME);
				goto fail_result;
			}

			m_UserItem[iEmptySlot] = TempItem;

			m_UserItem[iEmptySlot].sSid = TempItem.sSid;
			//////////////////////////////////////////////////////╜н║■
			if (m_UserItem[iEmptySlot].sSid < 0 || m_UserItem[iEmptySlot].sSid >= g_arItemTable.GetSize()) goto fail_result;
			////////////////////////////////////////////////////////////
		
			m_UserItem[iEmptySlot].sLevel  = TempItem.sLevel;
			m_UserItem[iEmptySlot].sBullNum  = TempItem.sBullNum;
			m_UserItem[iEmptySlot].sDuration  = TempItem.sDuration;
			m_UserItem[iEmptySlot].sCount  = TempItem.sCount;
			for(j =0; j < MAGIC_NUM; j++) m_UserItem[iEmptySlot].tMagic[j] = TempItem.tMagic[j];
			m_UserItem[iEmptySlot].tIQ = TempItem.tIQ; 
			m_UserItem[iEmptySlot].iItemSerial = TempItem.iItemSerial;
			iWeightOwner = (g_arItemTable[m_UserItem[iEmptySlot].sSid]->m_byWeight * sShopCount);
			arEmptySlotBuyer.Add((BYTE)iEmptySlot);
		}
		else								
		{
			m_UserItem[iSameSlot].sSid = TempItem.sSid;
			if(m_UserItem[iSameSlot].sSid < 0 || m_UserItem[iSameSlot].sSid >= g_arItemTable.GetSize()) goto fail_result;
			m_UserItem[iSameSlot].sLevel  = TempItem.sLevel;
			m_UserItem[iSameSlot].sBullNum  = TempItem.sBullNum;
			m_UserItem[iSameSlot].sDuration  = TempItem.sDuration;
			CheckMaxValue((short &)m_UserItem[iSameSlot].sCount,(short)TempItem.sCount);

			for(j =0; j < MAGIC_NUM; j++) m_UserItem[iSameSlot].tMagic[j] = TempItem.tMagic[j];
			m_UserItem[iSameSlot].tIQ = TempItem.tIQ; 
			m_UserItem[iSameSlot].iItemSerial = TempItem.iItemSerial;
			iWeightOwner = (g_arItemTable[m_UserItem[iSameSlot].sSid]->m_byWeight * sShopCount);
			arSameSlotBuyer.Add((BYTE)iSameSlot);
		}

		// Update Shop Owner weight
		
		//MakeItemLog( &m_UserItem[tSlot], ITEMLOG_EXCHANGE_GIVE, pUser->m_strUserID );

		pUser->ReSetItemSlot(&TempItem);
		TempItem = pUser->m_UserItem[sUserSlot];
		TempItem.sCount = sShopCount;

		if(TempItem.sSid < 0 || TempItem.sSid >= g_arItemTable.GetSize()) goto fail_result;
		iSameSlot = pUser->GetSameItem(TempItem, INVENTORY_SLOT);
		if(iSameSlot == -1)
		{
			//MakeItemLog( &m_UserItem[iEmptySlot], ITEMLOG_EXCHANGE_RECEIVE, pUser->m_strUserID );
			pUser->ReSetItemSlot( &pUser->m_UserItem[sUserSlot] );
			EnterCriticalSection( &pUser->m_CS_ShopItem );
			for(int l = 0; l < pUser->m_arShopItem.GetSize(); l++)
			{
				if(pUser->m_arShopItem[l]->sSlot == sUserSlot)
				{
					pUser->m_arShopItem.RemoveAt(l);
					break;
				}
			}
			LeaveCriticalSection(&pUser->m_CS_ShopItem);

			arEmptySlotShop.Add((BYTE)sUserSlot);

		}
		else								
		{
			if(pUser->m_UserItem[iSameSlot].sCount - TempItem.sCount < 0) 
			{
				goto fail_result;
			}
			else if(pUser->m_UserItem[iSameSlot].sCount - TempItem.sCount == 0)
			{
				pUser->ReSetItemSlot( &pUser->m_UserItem[sUserSlot] );
			}
			/////////////////////////////////////////╜н║■
		    else if(pUser->m_UserItem[iSameSlot].sCount < TempItem.sCount) //bug 
				{
					goto fail_result;
				}
             //////////////////////////////////////////////
			else
			{
				pUser->m_UserItem[iSameSlot].sCount -= TempItem.sCount;
                if(pUser->m_UserItem[iSameSlot].sCount < 0)pUser->m_UserItem[iSameSlot].sCount = 0;
				pUser->m_UserItem[iSameSlot].sSid = pUser->m_UserItem[iSameSlot].sSid;
				pUser->m_UserItem[iSameSlot].sLevel = pUser->m_UserItem[iSameSlot].sLevel;
				pUser->m_UserItem[iSameSlot].sBullNum = pUser->m_UserItem[iSameSlot].sBullNum;
				pUser->m_UserItem[iSameSlot].sDuration = pUser->m_UserItem[iSameSlot].sDuration;
				pUser->m_UserItem[iSameSlot].sCount = pUser->m_UserItem[iSameSlot].sCount;
			
				for(j =0; j < MAGIC_NUM; j++) pUser->m_UserItem[iSameSlot].tMagic[j] = pUser->m_UserItem[iSameSlot].tMagic[j];
				pUser->m_UserItem[iSameSlot].tIQ = pUser->m_UserItem[iSameSlot].tIQ; 
				pUser->m_UserItem[iSameSlot].iItemSerial = pUser->m_UserItem[iSameSlot].iItemSerial;
			}
			EnterCriticalSection( &pUser->m_CS_ShopItem );
			for(int l = 0; l < pUser->m_arShopItem.GetSize(); l++)
			{
				if(pUser->m_arShopItem[l]->sSlot == sUserSlot)
				{
					if(pUser->m_arShopItem[l]->ShopList.sCount - TempItem.sCount == 0)
					{
						pUser->m_arShopItem.RemoveAt(l);
					}
					/////////////////////////////////////////////////╜н║■
					else if(pUser->m_arShopItem[l]->ShopList.sCount < TempItem.sCount)
						{
							LeaveCriticalSection(&pUser->m_CS_ShopItem);				//bug 
							goto fail_result;
						}
					//////////////////////////////////////////////////////////

					else
					{
						pUser->m_arShopItem[l]->ShopList.sCount -= TempItem.sCount;
						////////////////////////////////╜н║■
						if(pUser->m_arShopItem[l]->ShopList.sCount < 0) pUser->m_arShopItem[l]->ShopList.sCount = 0;
						///////////////////////////////////////

					}
					break;
				}
			}
			LeaveCriticalSection(&pUser->m_CS_ShopItem);

			arSameSlotShop.Add((BYTE)iSameSlot);
		}
	}

	

	if (TotalCost <= 0 || TotalCost>= 2147483647)return;//╝ь▓т╩¤╛▌╥ч│Ў╬╗╓├╢■
			

	if (pUser->m_dwNoChatTime == 0)//╕Ў╚╦╜Ё▒╥╔╠╡ъ
	{
	    if( TotalCost>m_dwDN)  return ;
        pUser->m_dwDN += TotalCost;//Update Buyer and Shop
		pUser->m_iCurWeight -= iWeightOwner;
		if(pUser->m_iCurWeight < 0) pUser->m_iCurWeight = 0;
		pUser->SendMoneyChanged();
		pUser->GetRecoverySpeed();
		pUser->UpdateInvenSlot(&arEmptySlotShop, &arSameSlotShop);
		m_dwDN -= TotalCost;
		if(m_dwDN<0) m_dwDN=0;
		m_iCurWeight += iWeight;
		SendMoneyChanged();
		GetRecoverySpeed();
		UpdateInvenSlot(&arEmptySlotBuyer, &arSameSlotBuyer);
		pUser->UpdateUserItemDN();
		UpdateUserItemDN();
		pUser->m_bPShopView = 0;
		pUser->m_iPShopViewuid = -1;
		m_bViewingAShop = FALSE;
	}
	else if (pUser->m_dwNoChatTime == 1)
	{
		if ((int)TotalCost > biaoNum)  return ;
		BYTE SOLT = pUser->FindItem(SPECIAL_BIAOZHI);

		pUser->GiveItemAll(SPECIAL_BIAOZHI,TotalCost,0,0,0,0,0,0,0,0,0,0,0);
		pUser->m_iCurWeight -= iWeightOwner;
		if(pUser->m_iCurWeight < 0) pUser->m_iCurWeight = 0;
		pUser->GetRecoverySpeed();
		pUser->UpdateInvenSlot(&arEmptySlotShop, &arSameSlotShop);
        RobItem(SPECIAL_BIAOZHI,TotalCost);
		if(( FindItem(SPECIAL_BIAOZHI) < 0)) return;
		m_iCurWeight += iWeight;
		GetRecoverySpeed();
		UpdateInvenSlot(&arEmptySlotBuyer, &arSameSlotBuyer);
        ///////////////////////////////////////////////////////////▒ъ╓╛╝╟┬╝88888
		CString str = _T("");
        SYSTEMTIME st;
		CString strDate;
		GetLocalTime(&st);
		strDate.Format("%d-%d-%d %d:%d",st.wYear,st.wMonth,st.wDay ,st.wHour,st.wMinute);
        str.Format("[%s]═ц╝╥ [%s]┬Ї╢л╬ў╗ё╡├▒ъ %d  \r\n",strDate,pUser->m_strUserID,TotalCost);
		EnterCriticalSection( &m_CS_FileWrite );
		g_fpSpeedHack1.Write( str, str.GetLength() );
		LeaveCriticalSection( &m_CS_FileWrite);

			////////////////////////////////////////////////////////////////////////
		pUser->m_bPShopView = 0;
		pUser->m_iPShopViewuid = -1;
		m_bViewingAShop = FALSE;
	}

	else if (pUser->m_dwNoChatTime == 2)
	{
		if ((int)TotalCost > JbiaoNum)  return ;
		BYTE SOLT = pUser->FindItem(725);

		pUser->GiveItemAll(725,TotalCost,0,0,0,0,0,0,0,0,0,0,0);
		pUser->m_iCurWeight -= iWeightOwner;
		if(pUser->m_iCurWeight < 0) pUser->m_iCurWeight = 0;
		pUser->GetRecoverySpeed();
		pUser->UpdateInvenSlot(&arEmptySlotShop, &arSameSlotShop);
        
		RobItem(725,TotalCost);
		m_iCurWeight += iWeight;
		GetRecoverySpeed();
		UpdateInvenSlot(&arEmptySlotBuyer, &arSameSlotBuyer);
        ///////////////////////////////////////////////////////////▒ъ╓╛╝╟┬╝88888
		CString str = _T("");
        SYSTEMTIME st;
		CString strDate;
		GetLocalTime(&st);
		strDate.Format("%d-%d-%d %d:%d",st.wYear,st.wMonth,st.wDay ,st.wHour,st.wMinute);
        str.Format("[%s]═ц╝╥ [%s]┬Ї╢л╬ў╗ё╡├╜Ё▒ъ %d  \r\n",strDate,pUser->m_strUserID,TotalCost);
		EnterCriticalSection( &m_CS_FileWrite );
		g_fpSpeedHack1.Write( str, str.GetLength() );
		LeaveCriticalSection( &m_CS_FileWrite);

			////////////////////////////////////////////////////////////////////////
		pUser->m_bPShopView = 0;
		pUser->m_iPShopViewuid = -1;
		m_bViewingAShop = FALSE;
	}
	if(m_curz != pUser->m_curz)
		{
			pUser->m_bPShopView = 0;
			pUser->m_iPShopViewuid = -1;
			m_bViewingAShop = FALSE;
			goto fail_result;
		}

	

	if(sShopAmount == 1)
		strMsg.Format(IDS_USER_SHOP_BUY_SUCCESS, "Item");
	else
		strMsg.Format(IDS_USER_SHOP_BUY_SUCCESS, "Items");

	SendSystemMsg( strMsg.GetBuffer(strMsg.GetLength()), SYSTEM_ERROR, TO_ME);

	return;
	}

fail_result:
	for(i = 0; i < TOTAL_ITEM_NUM; i++)		// Item Information Backup
	{
		m_UserItem[i] = BuyerItem[i];
		pUser->m_UserItem[i] = ShopItem[i];
	}
	EnterCriticalSection( &pUser->m_CS_ShopItem );
	pUser->m_arShopItem.RemoveAll();
	for(i = 0; i < ShopSize; i++)
	{
		pUser->m_arShopItem.Add(ShopBackupItem[i]); 
	}
	LeaveCriticalSection( &pUser->m_CS_ShopItem );

	pUser->m_bPShopView = 0;
	pUser->m_iPShopViewuid = -1;
	m_bViewingAShop = FALSE;
	////////////////////////┤╠╝д
	TCHAR c_Log[500];
	sprintf_s(c_Log,"[%s]╘┌[%s]╡─╔╠╡ъ╣║┬Є╬я╞╖╩з░▄\r\n",m_strUserID,pUser->m_strUserID);
	WriteUserShopLog(c_Log);
	////////////////////////┤╠╝д

	UpdateUserData(TRUE); 
	pUser->UpdateUserData(TRUE);
	if(sShopAmount == 1)
		strMsg.Format(IDS_USER_SHOP_BUY_FAIL, "Item");
	else
		strMsg.Format(IDS_USER_SHOP_BUY_FAIL, "Items");
	SendSystemMsg( strMsg.GetBuffer(strMsg.GetLength()), SYSTEM_ERROR, TO_ME);
	return;
  
}

BOOL USER::GetTransformOption(ItemList* pItem)///╔╛│¤└м╗°╩Ї╨╘      NEO░ц▒╛
{
	int iMagicCount = 0;
	int nLoop = 0;
	int i = 0, j = 0, iRandom = 0;
	int iCount = 0, iTemp = 0;
	short sSid = -1;

	if(pItem == NULL) return FALSE;
	sSid = pItem->sSid;
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) return FALSE;

	nLoop = 4;

	//if(m_sLevel <= 20)					// ╕┼┴ў└╬╡ж╜║ ╣№└з╕ж ╖╣║з┐б ╡√╢є ┴ж╟╤╟╤┤┘. 
	if(m_sLevel <= 20) iMagicCount = 205;
	else iMagicCount = 205;

	if(iMagicCount >= g_arMagicItemTable.GetSize()) iMagicCount = g_arMagicItemTable.GetSize() - 1;

	i = 0;
	srand( (unsigned)time( NULL ) );

	while(nLoop > i)										
	{
		iRandom = myrand(1, iMagicCount);

		if(!g_arMagicItemTable[iRandom]->m_tUse) continue;
		if(g_arMagicItemTable[iRandom]->m_sSubType == 32) continue;	// │╗▒╕╡╡ ┐╔╝╟└║ ║┘└╠┴Ў ╛╩┤┬┤┘.
		
		if(CheckClassWear(sSid, iRandom) == FALSE)			// Npc.cpp └╟ CheckClassItem ░· ░░└║ ▒т┤╔└╗ ╝Ў╟р. User └╟ CheckClassItem └╗ ╚г├т╟╧╕щ ╛╚╡╩
		{
			if(i == 0) continue;							// ╕┼┴ў└║ ▒т║╗└╠ 1░│
			else if(i <= 3) continue;	// ╖б╛ю┤┬ ▒т║╗└╠ 3░│
			else { i++; continue; }
		}

		for(j = 0; j < 4; j++)
		{
			iCount = g_arMagicItemTable[pItem->tMagic[j]]->m_sSubType;
			if(iCount != 0 && iCount == g_arMagicItemTable[iRandom]->m_sSubType)	// ╝╙╝║└╠ ░у─е╝Ў └╓└╕╣╟╖╬ └╠┴▀ ┼л░к╕╕ ╝▒┼├	
			{
				iCount = g_arMagicItemTable[pItem->tMagic[j]]->m_sChangeValue;
				if(iCount < g_arMagicItemTable[iRandom]->m_sChangeValue)
				{
					iTemp = g_arMagicItemTable[pItem->tMagic[j]]->m_tLevel;
					if(pItem->sLevel - iTemp > 0) pItem->sLevel -= iTemp;
					pItem->sLevel += g_arMagicItemTable[iRandom]->m_tLevel;
					pItem->tMagic[j] = iRandom; 
					break;
						
				}
				else if(iCount == g_arMagicItemTable[iRandom]->m_sChangeValue) break;
			}
			if(pItem->tMagic[j] > 0) continue;										// └╠╣╠ ╜╜╖╘┐б ░к└╠ └╓└╕╕щ │╤╛ю░и
			else
			{ 
				pItem->tMagic[j] = iRandom; i++;
				if(g_arMagicItemTable[iRandom]->m_tLevel > 0) pItem->sLevel += g_arMagicItemTable[iRandom]->m_tLevel;
				break;
			}
		}
	}
	return TRUE;
}

void USER::TransformWindow()
{
	if(FindEvent(24) == TRUE) return;
	if(m_sLevel < 20) return;

	CBufferEx TempBuf;

	TempBuf.Add((BYTE)0xEC);
	TempBuf.Add((BYTE)0x00);
	Send(TempBuf, TempBuf.GetLength());

}

void USER::TransformReq(TCHAR* pBuf)
{
	short sSourceSid = -1;
	int index = 0, j = 0;
	BYTE result = TRUE;

	if(FindEvent(24) == TRUE) return;

	if(m_sLevel < 20) return;

	// Source Item
	short sSourceSlot = GetShort(pBuf, index);			// ╝▒┼├╟╤ ╛╞└╠┼█ ╜╜╖╘╣°╚г
	if(sSourceSlot < EQUIP_ITEM_NUM || sSourceSlot >= TOTAL_INVEN_MAX) return;
	
	sSourceSid = m_UserItem[sSourceSlot].sSid;
	if(sSourceSid < 0 || sSourceSid >= g_arItemTable.GetSize()) return;
	
	if( sSourceSid == 669 || sSourceSid == 670 )		// ╛ў▒╫╖╣└╠╡х ╟╧╖┴┤┬ ╛╞└╠┼█└╠ ▒█╖п▒╫┴╛╖∙╢є╕щ
	{
		result = FALSE;
		goto result;
	}

	if(g_arItemTable[sSourceSid]->m_byWear < 1 && g_arItemTable[sSourceSid]->m_byWear > 5) // ╣л▒т, ╣ц╛ю▒╕░б ╛╞┤╧╕щ ░│┴╢╟╥ ╝Ў ╛°┤┘.
	{
		result = FALSE;
		goto result;
	}

	if(m_UserItem[sSourceSlot].tMagic[5] >= 1)			// ╛ў▒╫╖╣└╠╡х╡╚ ╛╞└╠┼█└║ ░│┴╢╟╥ ╝Ў ╛°┤┘.
	{
		result = FALSE;
		goto result;
	}

	if(m_UserItem[sSourceSlot].sLevel > 40)	
	{
		result = FALSE;
		goto result;
	}

	if(!GetTransformOption(&m_UserItem[sSourceSlot]))
	{
		result = FALSE;
		goto result;
	}

	m_UserItem[sSourceSlot].tIQ = RARE_ITEM;

result:
	CBufferEx TempBuf;
	TempBuf.Add((BYTE)TRANSFORM_REQ);
	TempBuf.Add(result);
	if(result == FALSE)
	{
		Send(TempBuf, TempBuf.GetLength());
		return;
	}

	AddMyEventNum(24);

	TempBuf.Add((short)sSourceSlot);						
	TempBuf.Add(m_UserItem[sSourceSlot].sLevel);
	TempBuf.Add(m_UserItem[sSourceSlot].sSid);
	TempBuf.Add(m_UserItem[sSourceSlot].sDuration);
	TempBuf.Add(m_UserItem[sSourceSlot].sBullNum);
	TempBuf.Add(m_UserItem[sSourceSlot].sCount);
	for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[sSourceSlot].tMagic[j]);
	TempBuf.Add(m_UserItem[sSourceSlot].tIQ);
	
	Send(TempBuf, TempBuf.GetLength());
}

BOOL USER::ChuanSongChiJiu()
{

	for(int i = 10; i < 34 ; i++)
	{
		if (m_UserItem[i].sSid == 1425 && m_UserItem[i].sDuration >= 1 )
		 {
			
			 if ( (m_UserItem[i].sDuration - 1) <=0 )
			 {
				 ReSetItemSlot(&m_UserItem[i]);
				 SendCharData();
				 return true;
			 
			 }else{
			  m_UserItem[i].sDuration -=1;
			  SendCharData();
			  return true;
			 }
			 
		}
   }
              
	return false;
}

void USER::CheckDevilTime() //╢ё─з╣у│б
{
	SYSTEMTIME messageTime;
	GetLocalTime(&messageTime);
	
	DWORD dwCurrTick = GetTickCount();					

	COleDateTime CurrTime = COleDateTime(messageTime); //╡▒╟░╩▒╝ф
	
	if(o_yehuoini[0]->EMGCKG != 1)
	{

		SendEventMsg("╢ё─з╣у│б╘▌╬┤┐к╖┼");
		return;
	}
	
	   if( messageTime.wHour == 20 && messageTime.wMinute < 30)
		{
			ZoneMoveReq(92, 20, 20);
		}
		else
		{
		//	SendSystemMsg("╜°╚ы╢ё─з╣у│б╩▒╝ф╬┤╡╜!├┐═э19:00--19:30┐к╖┼.", SYSTEM_ERROR, TO_ME);
            SendEventMsg("╗╣╬┤╡╜╜°╚ы╩▒╝ф,20╡у╓о║є╘┘└┤░╔!");
		}
}
//▓щ┐┤╫░▒╕
void USER::ViewUserInfo(int uid)
{
	USER *pUser = GetUser(uid- USER_BAND);
	if(pUser == NULL)
		return ;
	TCHAR  pBuf[_ITEM_DB];
	::ZeroMemory(pBuf, sizeof(pBuf));
	int index = 0;
	int i, j;
	short sCount = 0;
	///////////////////////////////////////////////////////////////╨┬╘Ў╝╙▓щ┐┤╫░▒╕
	if(pUser && pUser->m_state == STATE_GAMESTARTED )
	{
	
	CString sayStr;
	CBufferEx TempBuf, TempSayBuf , TempBuf3;
	
	sayStr.Format("%s",pUser->m_strUserID);//╜╟╔л├√╫╓
	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );                  

	sayStr.Format("%d",pUser->m_sLevel);//╡╚╝╢  
	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );

    sayStr.Format("%d",pUser->m_sMagicSTR);//┴ж┴┐ 
	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );

	   sayStr.Format("%d",pUser->m_sMagicCON);//╠х╓╩
	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );

	   sayStr.Format("%d",pUser->m_sMagicDEX);//├Ї╜▌
	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );

	   sayStr.Format("%d",pUser->m_sMagicVOL);//╓╟╗█
	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );

	   sayStr.Format("%d",pUser->m_sMagicWIS);//╓╟┴ж
	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );

     if( pUser->m_dwDN > 0 )
	 {

	 sayStr.Format("%d",pUser->m_dwDN);//╛Ў╒╜▒╥╩¤┴┐
	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
	 }
	 else
	 {
		 sayStr.Format("0",pUser->m_dwDN);//╛Ў╒╜▒╥╩¤┴┐
	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );

	 }    
	if( pUser->m_dwShaGuai > 0 )
	{
	sayStr.Format("%d",pUser->m_dwShaGuai);//╔▒╣╓╩¤┴┐
	 TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
	}
	else 
	{
		sayStr.Format("0");
		TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
	}
	 //sayStr.Format("%d",pUser->GetUserSpellAttack(TRUE));//▓щ┐┤─з╖и╣е╗ў  
	 //TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );


	
	TempBuf.Add(CLIENT_EVENT_SAY);
	TempBuf.Add((BYTE)SUCCESS);
	TempBuf.Add((short)5009);
	TempBuf.Add((BYTE)0x09);
	TempBuf.AddData(TempSayBuf, TempSayBuf.GetLength());
	Send(TempBuf, TempBuf.GetLength());
 }
	//===================================================================================================
	for(i = 0; i < 10; i++)
	{
		sCount++;
		SetShort(pBuf,  pUser->m_UserItem[i].sLevel,	index);
		SetShort(pBuf,  pUser->m_UserItem[i].sSid,		index);
		SetShort(pBuf,  pUser->m_UserItem[i].sDuration,	index);
		SetShort(pBuf,  pUser->m_UserItem[i].sBullNum,	index);
		SetShort(pBuf,  pUser->m_UserItem[i].sCount,	index);

		for(j = 0; j < MAGIC_NUM; j++) 
			SetByte(pBuf,  pUser->m_UserItem[i].tMagic[j], index);

		SetByte(pBuf,  pUser->m_UserItem[i].tIQ, index);
	}
	//╗·╨╡
	for(i = 34; i < 40; i++)
	{
		sCount++;
		SetShort(pBuf,  pUser->m_UserItem[i].sLevel,	index);
		SetShort(pBuf,  pUser->m_UserItem[i].sSid,		index);
		SetShort(pBuf,  pUser->m_UserItem[i].sDuration,	index);
		SetShort(pBuf,  pUser->m_UserItem[i].sBullNum,	index);
		SetShort(pBuf,  pUser->m_UserItem[i].sCount,	index);

		for(j = 0; j < MAGIC_NUM; j++) 
			SetByte(pBuf,  pUser->m_UserItem[i].tMagic[j], index);

		SetByte(pBuf,  pUser->m_UserItem[i].tIQ, index);
	}
	CBufferEx TempBuf;

	TempBuf.Add(PK_BUTTON_REQ);
	TempBuf.Add((BYTE)0x50);
	TempBuf.Add((short)sCount);
	TempBuf.AddData(pBuf,index);
	Send(TempBuf, TempBuf.GetLength());
}

//╩╟╖ё╬к130╝╢╫░▒╕
BOOL USER::Is130Item(int sSid)										
{
	if(sSid<=0||sSid>g_arItemTable.GetSize())
		return FALSE;
	if(g_arItemTable[sSid]->m_byRLevel == 130&&g_arItemTable[sSid]->m_byWear != 1)
		return TRUE;
	return FALSE;
}
//╩╟╖ё╬к130╝╢╬ф╞ў
BOOL USER::Is130Wearp(int sSid)										
{
	if(sSid<=0||sSid>g_arItemTable.GetSize())
		return FALSE;
	if(g_arItemTable[sSid]->m_byRLevel == 130 &&g_arItemTable[sSid]->m_byWear == 1)
		return TRUE;
	return FALSE;
}
//╩╟╖ё╬к100╝╢
BOOL USER::Is100Item(int sSid)										
{
	if(sSid<=0||sSid>g_arItemTable.GetSize())
		return FALSE;
	if(g_arItemTable[sSid]->m_byRLevel == 100 && g_arItemTable[sSid]->m_byWear != 1)
	/*if( (g_arItemTable[sSid]->m_sPid == 316||
		g_arItemTable[sSid]->m_sPid == 317||
		g_arItemTable[sSid]->m_sPid == 318||
		g_arItemTable[sSid]->m_sPid == 319)

		&& (g_arItemTable[sSid]->m_byWear != 1))*/
		return TRUE;
	return FALSE;
}
//╩╟╖ё╬к100╝╢
BOOL USER::Is100Wearp(int sSid)										
{
	if(sSid<=0||sSid>g_arItemTable.GetSize())
		return FALSE;
	if(g_arItemTable[sSid]->m_byRLevel == 100 &&g_arItemTable[sSid]->m_byWear == 1)
		return TRUE;
	return FALSE;
}	

//╠э╝╙╝╝─▄╡у
void USER::AddMagicPoint(short sPoint)									
{
	m_DynamicUserData[MAGIC_STR_UP]+=sPoint;//╫░▒╕╫█║╧╓╡┴ж┴┐	
	m_DynamicUserData[MAGIC_CON_UP]+=sPoint;//╫░▒╕╫█║╧╓╡╠х╓╩
	m_DynamicUserData[MAGIC_DEX_UP]+=sPoint;//╫░▒╕╫█║╧╓╡├Ї╜▌
	m_DynamicUserData[MAGIC_VOL_UP]+=sPoint;//╫░▒╕╫█║╧╓╡╓╟╗█
	m_DynamicUserData[MAGIC_WIS_UP]+=sPoint;//╫░▒╕╫█║╧╓╡╓╟┴ж
}
//╤к┴┐░┘╖╓▒╚
void USER::AddMaxHPPoint(short sPoint)									
{
	//
	m_nHPPoint +=sPoint;
	//m_DynamicUserData[MAGIC_HP_RATING_UP]+=sPoint;
}
//130╬ф╞ў╫к╗╗
int USER::Wearp130Convert(int sourceSolt)
{
	int i;
	int sSid = m_UserItem[sourceSolt].sSid;
	if(sSid < 0||sSid > g_arItemTable.GetSize() )
		return FALSE;
	//╘н╬я╞╖
	switch(sSid)
	{
		//130╬ф╞ў1577╟╣,1574╡╢,1580╒╚,1583╚н
	case 330://┴·╓о┼н
        m_UserItem[sourceSolt].sSid = 1578;
		break;
    case 475://╟┐╗п┴·╓о┼н
	case 476://╟┐╗п┴·╓о┼н
	case 477://╟┐╗п┴·╓о┼н
       {
		    m_UserItem[sourceSolt].sSid = 1579;
		    break;
		}
	case 478://┴·╔ё╓о┼нбкS
	case 479://┴·╔ё╓о┼нбкS
	    m_UserItem[sourceSolt].sSid = 1580;
		break;
	case 323://╖┤I
		m_UserItem[sourceSolt].sSid = 1572;
		break;
	case 440://╖┤II
	case 441://╖┤II
	case 442://╖┤II
		{
            m_UserItem[sourceSolt].sSid = 1573;
		    break;
         }
	case 443://╖┤III
	case 444://╖┤III
	    m_UserItem[sourceSolt].sSid = 1574;
		break;
	case 337://┴·╓о╥э
		m_UserItem[sourceSolt].sSid = 1581;
		break;
	case 510://╟┐╗п┴·╓о╥э
	case 511://╟┐╗п┴·╓о╥э
	case 512://╟┐╗п┴·╓о╥э
		{
            m_UserItem[sourceSolt].sSid = 1582;
		    break;
		}
	case 513://┴·╓о╥эs
	case 514://┴·╓о╥эs
	    m_UserItem[sourceSolt].sSid = 1583;
		break;
	case 316://┴·╔ё┼┌g2
		m_UserItem[sourceSolt].sSid = 1575;
		break;
	case 405://┴·╔ё┼┌g4
    case 406://┴·╔ё┼┌g4
	case 407://┴·╔ё┼┌g4
       {
            m_UserItem[sourceSolt].sSid = 1576;
			break;
		}
	case 408://┴·╔ё┼┌g6
    case 409://┴·╔ё┼┌g6
	    m_UserItem[sourceSolt].sSid = 1577;
		break;
	case 1698://┴·╔ё╘ж
		m_UserItem[sourceSolt].sSid = 1584;
		break;
	case 1699://╟┐╗п┴·╔ё╘ж
		m_UserItem[sourceSolt].sSid = 1585;
		break;
	case 1700://┴·╔ё╘ж-S
		m_UserItem[sourceSolt].sSid = 1586;
		break;
	default:
	
        return FALSE;
		break;
	}
	//╝╢▒Ё╓╪╨┬╝╞╦у
	if(m_UserItem[sourceSolt].sSid<0 || m_UserItem[sourceSolt].sSid > g_arItemTable.GetSize())
		return FALSE;
	//╩Ї╨╘╝╢▒Ё
	m_UserItem[sourceSolt].sLevel = g_arItemTable[m_UserItem[sourceSolt].sSid]->m_byRLevel;
	m_UserItem[sourceSolt].sDuration = g_arItemTable[m_UserItem[sourceSolt].sSid]->m_sDuration;
	int itemCount = 0;
	//130╝╢╫░▒╕
	m_UserItem[sourceSolt].tIQ = 0x12;//╩╣╙├18╬▐╖и┐┤╡╜╦─┼┼╥╘║є╡─╩Ї╨╘
	m_UserItem[sourceSolt].tMagic[ITEM_UPGRADE_COUNT] -=2;//║╧│╔║є╬ф╞ў╡Ї2╕─
	if(m_UserItem[sourceSolt].tIQ > NORMAL_ITEM)
	{
		if(m_UserItem[sourceSolt].tIQ == UNIQUE_ITEM) 
			itemCount = MAGIC_NUM;	
		else 
			itemCount = 4;								
		for(i = 0; i < itemCount; i++)
		{
			BYTE bMagic = m_UserItem[sourceSolt].tMagic[i];
			if(bMagic >= 0 && bMagic < g_arMagicItemTable.GetSize())
			{
				m_UserItem[sourceSolt].sLevel += g_arMagicItemTable[bMagic]->m_tLevel;
			}
		}
	}
	CString strMsg;
	CString GoodsMagic;
	for(int i = 0; i <= 4; i++)
	{
		if(m_UserItem[sourceSolt].tMagic[0] != 0)
		{
			GoodsMagic+=g_arMagicItemTable[m_UserItem[sourceSolt].tMagic[i]]->m_strText;
			GoodsMagic+=",";
		}
	}
	strMsg.Format("═ц╝╥ %s ╓╞╫ў [%s] : ", this->m_strUserID,g_arItemTable[m_UserItem[sourceSolt].sSid]->m_strName );
	strMsg+=GoodsMagic;
	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
	return TRUE;
}
//╫░▒╕╫к╗╗
int USER::Item130Convert(int sourceSolt)
{
	int i;
	int sSid = m_UserItem[sourceSolt].sSid;
	if(sSid < 0||sSid > g_arItemTable.GetSize() )
		return FALSE;
	//╘н╬я╞╖
	switch(sSid)
	{
	case 1053://┴·╤└├▒
	case 1054://╟┐╗п┴·╤└├▒
	case 1055://╠╪╩т┴·╤└┐°
	case 1056://┴·╤└┐°S╨═
		{
			//╚н1590,╖и1594,╡╢1598,╟╣1602,╓┘▓├1606
			int s = 1590;
			switch(m_byClass)
			{
			case 0:
				break;
			case 1:
				s = 1594;
				break;
			case 2:
				s = 1598;
				break;
			case 3:
				s = 1602;
				break;
			case 4:
				s = 1606;
				break;
			}
			m_UserItem[sourceSolt].sSid = s;
			break;
		}
	case 1057://┴╥╤ц╒╜╝╫
		m_UserItem[sourceSolt].sSid = 1607;
		break;
	case 1058://╟┐╗п┴╥╤ц╒╜╝╫
		m_UserItem[sourceSolt].sSid = 1608;
		break;
	case 1059://┴╥╤ц╒╜╝╫G╨═
		m_UserItem[sourceSolt].sSid = 1609;
		break;
	case 1060://┴╥╤ц╒╜╝╫S╨═
		m_UserItem[sourceSolt].sSid = 1610;
		break;
	case 1061://┴╥╤ц╗д═╚
		m_UserItem[sourceSolt].sSid = 1611;
		break;
	case 1062://╟┐╗п┴╥╤ц╗д═╚
		m_UserItem[sourceSolt].sSid = 1612;
		break;
	case 1063://┴╥╤ц╗д═╚G╨═
		m_UserItem[sourceSolt].sSid = 1613;
		break;
	case 1064://┴╥╤ц╗д═╚S╨═
		m_UserItem[sourceSolt].sSid = 1614;
		break;
	case 1065://▓╘╘┬╓ою°
		m_UserItem[sourceSolt].sSid = 1615;
		break;
	case 1066://╟┐╗п▓╘╘┬╓ою°
		m_UserItem[sourceSolt].sSid = 1616;
		break;
	case 1067://▓╘╘┬╓ою°II╨═
		m_UserItem[sourceSolt].sSid = 1617;
		break;
	case 1068://▓╘╘┬╓ою°M╨═
		m_UserItem[sourceSolt].sSid = 1618;
		break;
	case 1069://▓╘╘┬╗д═╚
		m_UserItem[sourceSolt].sSid = 1619;
		break;
	case 1070://╟┐╗п▓╘╘┬╗д═╚
		m_UserItem[sourceSolt].sSid = 1620;
		break;
	case 1071://▓╘╘┬╗д═╚II╨═
		m_UserItem[sourceSolt].sSid = 1621;
		break;
	case 1072://▓╘╘┬╗д═╚M╨═
		m_UserItem[sourceSolt].sSid = 1622;
		break;
	case 1073://║о▒∙╓ою°
		m_UserItem[sourceSolt].sSid = 1623;
		break;
	case 1074://╟┐╗п║о▒∙╓ою°
		m_UserItem[sourceSolt].sSid = 1624;
		break;
	case 1075://║о▒∙╓ою°G╨═
		m_UserItem[sourceSolt].sSid = 1625;
		break;
	case 1076://║о▒∙╓ою°S╨═
		m_UserItem[sourceSolt].sSid = 1626;
		break;
	case 1077://║о▒∙╗д═╚
		m_UserItem[sourceSolt].sSid = 1627;
		break;
	case 1078://╟┐╗п║о▒∙╗д═╚
		m_UserItem[sourceSolt].sSid = 1628;
		break;
	case 1079://║о▒∙╗д═╚G╨═
		m_UserItem[sourceSolt].sSid = 1629;
		break;
	case 1080://║о▒∙╗д═╚S╨═
		m_UserItem[sourceSolt].sSid = 1630;
		break;
	case 1081://╝▓╖ч╒╜╝╫
		m_UserItem[sourceSolt].sSid = 1631;
		break;
	case 1082://╟┐╗п╝▓╖ч╒╜╝╫
		m_UserItem[sourceSolt].sSid = 1632;
		break;
	case 1083://╝▓╖ч╒╜╝╫II╨═
		m_UserItem[sourceSolt].sSid = 1633;
		break;
	case 1084://╝▓╖ч╒╜╝╫M╨═
		m_UserItem[sourceSolt].sSid = 1634;
		break;
	case 1085://╝▓╖ч╗д═╚
		m_UserItem[sourceSolt].sSid = 1635;
		break;
	case 1086://╟┐╗п╝▓╖ч╗д═╚
		m_UserItem[sourceSolt].sSid = 1636;
		break;
	case 1087://╝▓╖ч╗д═╚II╨═
		m_UserItem[sourceSolt].sSid = 1637;
		break;
	case 1088://╝▓╖ч╗д═╚M╨═
		m_UserItem[sourceSolt].sSid = 1638;
		break;
	case 1709://╣т├ўю°╝╫
		m_UserItem[sourceSolt].sSid = 1639;
		break;
	case 1710://╟┐╗п╣т├ўю°╝╫
		m_UserItem[sourceSolt].sSid = 1640;
		break;
	case 1711://╣т├ўю°╝╫II╨═
		m_UserItem[sourceSolt].sSid = 1641;
		break;
	case 1712://╣т├ўю°╝╫M╨═
		m_UserItem[sourceSolt].sSid = 1642;
		break;
	case 1713://╣т├ў╗д═╚
		m_UserItem[sourceSolt].sSid = 1643;
		break;
	case 1714://╟┐╗п╣т├ў╗д═╚
		m_UserItem[sourceSolt].sSid = 1644;
		break;
	case 1715://╣т├ў╗д═╚II╨═
		m_UserItem[sourceSolt].sSid = 1645;
		break;
	case 1716://╣т├ў╗д═╚M╨═
		m_UserItem[sourceSolt].sSid = 1646;
		break;
	case 1089://┴·╣╟╤е
	case 1090://╟┐╗п┴·╣╟╤е
	case 1091://╠╪╩т┴·╣╟╤е
	case 1092://┴·╣╟╤еS╨═
		{
			//╚н╨м1650,╖и╨м1654,╡╢╨м1658,╟╣╨м1662,╓┘▓├1666
			int s = 1650;
			switch(m_byClass)
			{
			case 0:
				break;
			case 1:
				s = 1654;
				break;
			case 2:
				s = 1658;
				break;
			case 3:
				s = 1662;
				break;
			case 4:
				s = 1666;
				break;
			}
			m_UserItem[sourceSolt].sSid = s;
			break;
		}
	default:
		return FALSE;
		break;
	}
	//╝╢▒Ё╓╪╨┬╝╞╦у
	if(m_UserItem[sourceSolt].sSid<0 || m_UserItem[sourceSolt].sSid > g_arItemTable.GetSize())
		return FALSE;
	//╩Ї╨╘╝╢▒Ё
	m_UserItem[sourceSolt].sLevel = g_arItemTable[m_UserItem[sourceSolt].sSid]->m_byRLevel;
	m_UserItem[sourceSolt].sDuration = g_arItemTable[m_UserItem[sourceSolt].sSid]->m_sDuration;
	int itemCount = 0;
	//130╝╢╫░▒╕
	m_UserItem[sourceSolt].tIQ = 18;
	m_UserItem[sourceSolt].tMagic[ITEM_UPGRADE_COUNT] -=2;//║╧│╔║є╫░▒╕╡Ї2╕─
	if(m_UserItem[sourceSolt].tIQ > NORMAL_ITEM)
	{
		if(m_UserItem[sourceSolt].tIQ == UNIQUE_ITEM) 
			itemCount = MAGIC_NUM;	
		else if(m_UserItem[sourceSolt].tIQ == 12||m_UserItem[sourceSolt].tIQ == 18)
			itemCount = 5;								
		else
			itemCount = 4;								
		for(i = 0; i < itemCount; i++)
		{
			BYTE bMagic = m_UserItem[sourceSolt].tMagic[i];
			if(bMagic >= 0 && bMagic < g_arMagicItemTable.GetSize())
			{
				m_UserItem[sourceSolt].sLevel += g_arMagicItemTable[bMagic]->m_tLevel;
			}
		}
	}
	//╓╞╫ў130╫░▒╕╠с╨╤=====================================================================
	
    CString strMsg;
	CString GoodsMagic;
	for(int i = 0; i <= 4; i++)
	{
		if(m_UserItem[sourceSolt].tMagic[0] != 0)
		{
			GoodsMagic+=g_arMagicItemTable[m_UserItem[sourceSolt].tMagic[i]]->m_strText;
			GoodsMagic+=",";
		}
	}
	strMsg.Format("═ц╝╥ %s ╓╞╫ў [%s] : ", this->m_strUserID,g_arItemTable[m_UserItem[sourceSolt].sSid]->m_strName );
	strMsg+=GoodsMagic;
	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
	//=========================================================================================
	return TRUE;
}

void USER::Item130Convert(int sourceSolt,int materialSolt1,int materialSolt2,int materialSolt3)		//░┘╝╢╫к130╝╢╫░▒╕
{
	//┼╨╢╧╬╗╓├
	if(sourceSolt<10||materialSolt1<10||materialSolt2<10||materialSolt3<10
		||sourceSolt>=34||materialSolt1>=34||materialSolt2>=34||materialSolt3>=34)
		return ;
	//┼╨╢╧ID
	int sSid = m_UserItem[sourceSolt].sSid,s1 = m_UserItem[materialSolt1].sSid,
		s2 = m_UserItem[materialSolt2].sSid,s3 = m_UserItem[materialSolt3].sSid;
	if(sSid < 0||sSid > g_arItemTable.GetSize() )
		return ;

	if(s1 < 0||s1 > g_arItemTable.GetSize() )
		return ;

	if(s2 < 0||s2 > g_arItemTable.GetSize() )
		return ;

	if(s3 < 0||s3 > g_arItemTable.GetSize() )
		return ;
	//▓─┴╧ID
	if(s1 != 1674||s2 !=1675||s3 != 1676)
		return ;
	//╟о╩¤╩╟╖ё╣╗
	if(m_dwDN < 10000000)
	{
		SendSystemMsg("╫к╗╗130╝╢╫░▒╕╨ш╥к1000═Є,─у╡─╜Ё╟о▓╗╫у",SYSTEM_ERROR,TO_ME);
		return;
	}
	//╓ў╠х╩╟╖ё╣╗╕─╩¤
	//╬ф╞ў╗╣╩╟╫░▒╕
	if(g_arItemTable[sSid]->m_byWear == 1)
	{
		//70╝╢╬ф╞ў╨ш╥к10╕─
		if(m_UserItem[sourceSolt].tMagic[ITEM_UPGRADE_COUNT] <10)
			return ;
		//╬ф╞ў╫к╗╗
		if(!Wearp130Convert(sourceSolt))
			return ;	
	}else 
	{
		//100╝╢╖└╛▀8╕─
		if(m_UserItem[sourceSolt].tMagic[ITEM_UPGRADE_COUNT] <8)
			return ;
		//╖└╛▀╫к╗╗
		if(!Item130Convert(sourceSolt))
			return ;
	}
	//130╝╢tIQ=18

	m_UserItem[materialSolt1].sCount-=1;//╝ї╚е▓─┴╧
	if(m_UserItem[materialSolt1].sCount<=0)
		ReSetItemSlot(&m_UserItem[materialSolt1]);

	//╝ї╚е▓─┴╧
	m_UserItem[materialSolt2].sCount-=1;
	if(m_UserItem[materialSolt2].sCount<=0)
		ReSetItemSlot(&m_UserItem[materialSolt2]);
	//╝ї╚е▓─┴╧
	m_UserItem[materialSolt3].sCount-=1;
	if(m_UserItem[materialSolt3].sCount<=0)
		ReSetItemSlot(&m_UserItem[materialSolt3]);

	//╝ї╚е╟о
	if( m_dwDN <= 10000000 )
		m_dwDN = 0;
	else
		m_dwDN = m_dwDN - 10000000;
	UpdateUserItemDN();					
	SendMoneyChanged();
	
	//╖в╦═╬я╞╖▒ф╗п
	CByteArray arMaterial;
	arMaterial.RemoveAll();
	arMaterial.Add((BYTE)sourceSolt);
	arMaterial.Add((BYTE)materialSolt1);
	arMaterial.Add((BYTE)materialSolt2);
	arMaterial.Add((BYTE)materialSolt3);

	CBufferEx TempBuf;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	int index = arMaterial.GetSize();
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)index);
	int i,j;
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) 
			TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());
	FlushItemLog( TRUE );
}

//╔¤╝╢130╝╢╫░▒╕
void USER::Update130Item(int sourceSolt,int materialSolt1,BYTE bReceive,int nAdd1,int nAdd2,int nAdd3,int nAdd4)		
{
/*	//┼╨╢╧╬╗╓├
	if(sourceSolt<10||materialSolt1<10||sourceSolt>=34||materialSolt1>=34)
		return ;
	//┼╨╢╧ID
	int sSid = m_UserItem[sourceSolt].sSid,s1 = m_UserItem[materialSolt1].sSid;
	if(sSid < 0||sSid > g_arItemTable.GetSize() )
		return ;

	if(s1 < 0||s1 > g_arItemTable.GetSize() )
		return ;
	//═ї╒▀┴щ╩п1438,═ї╒▀╛з╩п1437
	if(s1 != 1438 && s1 != 1437)
		return ;
	//╖╟130╝╢╫░▒╕
	//if(g_arItemTable[sSid]->m_byRLevel!= 130)
	//	return ;
	//╖╟130╝╢╫░▒╕
	if(!Is130Wearp(sSid) && !Is130Item(sSid))
	{
		SendSystemMsg( "═ї╒▀╛з╩п,═ї╒▀┴щ╩п╓╗─▄╔¤╝╢130╝╢╫░▒╕╙ы╬ф╞ў", SYSTEM_ERROR, TO_ME);
		return ;
	}
	//130╫░▒╕╟╥═ї╒▀┴щ╩п
	if( Is130Wearp(sSid)&& s1 != 1438)
	{
		return ;
	}
	//130╫░▒╕╟╥═ї╒▀╛з╩п
	if( Is130Item(sSid)&& s1 != 1437)
	{
		return ;
	}
	//╨ш╥к╦─╕Ў╔ё╩п╗Є╥╗╕Ў│м╔ё
	int nAddSid,nNAddCount=0;
	if(nAdd1<10||nAdd1>=34)
	{
		goto ErrorNoMeartial;
	}
	nAddSid = m_UserItem[nAdd1].sSid;
	//│м╝╢╔ё╩п986,626╔ё╩п
	if(nAddSid != 986 &&nAddSid != 626)
	{
		goto ErrorNoMeartial;
	}
	nNAddCount++;
	if(nAddSid == 986)
	{
		goto SucMeartial;
	}
	//╡┌╢■┐щ╔ё╩п
	if(nAdd2<10||nAdd2>=34)
	{
		goto ErrorNoMeartial ;
	}
	nAddSid = m_UserItem[nAdd2].sSid;
	if(nAddSid != 626)
	{
		goto ErrorNoMeartial;
	}
	nNAddCount++;
	//╡┌╚¤┐щ╔ё╩п
	if(nAdd3<10||nAdd3>=34)
	{
		goto ErrorNoMeartial ;
	}
	nAddSid = m_UserItem[nAdd3].sSid;
	if(nAddSid != 626)
	{
		goto ErrorNoMeartial;
	}
	nNAddCount++;
	//╡┌╦─┐щ╔ё╩п
	if(nAdd4<10||nAdd4>=34)
	{
		goto ErrorNoMeartial ;
	}
	nAddSid = m_UserItem[nAdd4].sSid;
	if(nAddSid != 626)
	{
		goto ErrorNoMeartial;
	}
	nNAddCount++;
	goto SucMeartial;

ErrorNoMeartial:
	SendSystemMsg(IDS_USER_SHENGSHI, SYSTEM_ERROR, TO_ME);
	return ;
SucMeartial:
	int iRandom = 0;

	BYTE tCount = m_UserItem[sourceSolt].tMagic[5];
	if(tCount >= MAX_ITEM_UPGRADE_COUNT) 
		return ;		
	iRandom = myrand(1, 10000);						// ╝║░°╖№░· ║ё▒│└з╟╪ ╖г┤¤╝Ў╕ж ▒╕╟╘
	int iSuccess = 0;
	if(iRandom <= g_ItemAttUpgrade[tCount])
	{			
		iRandom = myrand(1, 10000);				// ├р╛╞└╠┼█└╧░ц┐ь +3╛ў▒ю┴Ў ║╕│╩╜║╖╬ ╡╡└№╟╥╝Ў └╓┤┘
		for(int i = 0; i < 3; i++)
		{
			iSuccess += 1;						// ├р ╛╞└╠┼█┐б└╟╟╪ ╕ю╣° ╛ў▒█╟▀┤┬┴Ў ╛╦╖┴ ┴╪┤┘.

			if(iRandom <= g_ItemBlessingUpgrade[i])
				break;
			if((tCount + iSuccess) >= MAX_ITEM_UPGRADE_COUNT)
				break;
		}
	}
	BOOL bSuc = (iSuccess>=1);
	if(iSuccess >= 1)									// ╟╪┤ч ╣°┬░└╟ ╝║░°╖№║╕┤┘ └█└╕╕щ
	{	
		if(m_UserItem[sourceSolt].tIQ==12)
			m_UserItem[sourceSolt].tMagic[ITEM_UPGRADE_COUNT]++;
		else
			m_UserItem[sourceSolt].tMagic[ITEM_UPGRADE_COUNT] = tCount + iSuccess;
		MakeItemLog( &m_UserItem[sourceSolt], ITEMLOG_BLESS_UPGRADE_SUCCESS );
	}else
	{
		int iUp = m_UserItem[sourceSolt].tMagic[ITEM_UPGRADE_COUNT];
		iRandom = myrand(1, 10000);
		//╜╡╝╢
		if(iRandom <= g_ItemNormalDownUpgrade[0]) 
		{
			iUp-=1;
		}
		if(iUp < 0) 
			iUp = 0;
		m_UserItem[sourceSolt].tMagic[ITEM_UPGRADE_COUNT] = iUp;
	}
	//┐к╩╝╟х└э╩¤╛▌
	//╝ї╚е▓─┴╧
	m_UserItem[materialSolt1].sCount-=1;
	if(m_UserItem[materialSolt1].sCount<=0)
		ReSetItemSlot(&m_UserItem[materialSolt1]);
	m_UserItem[nAdd1].sCount-=nNAddCount;
	if(m_UserItem[nAdd1].sCount<=0)
		ReSetItemSlot(&m_UserItem[nAdd1]);


	//╖в╦═╬я╞╖▒ф╗п
	CByteArray arMaterial;
	arMaterial.RemoveAll();
	arMaterial.Add((BYTE)sourceSolt);
	arMaterial.Add((BYTE)materialSolt1);
	arMaterial.Add((BYTE)nAdd1);

	CBufferEx TempBuf;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	int index = arMaterial.GetSize();
	TempBuf.Add((BYTE)bSuc);
	TempBuf.Add((BYTE)index);
	int i,j;
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) 
			TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());
	FlushItemLog( TRUE );
	return ;*/
}
/////////////////////////////////////////////////////////////////////////////
//	sSid,sitemmagic
// 
BOOL USER::IsMagicVSItem(int artable,int armagic)
{
	if(artable < 0 || artable >= g_arItemTable.GetSize())
		return FALSE;	

	if(armagic < 0 || armagic >= g_arMagicItemTable.GetSize())
		return FALSE;

	int iWear;

	BYTE armWear = g_arItemTable[artable]->m_byWear;			// ╛╞└╠┼█ ░ш┐н 1: ╣л▒т 2~8 : ┬°┐ы╛╞└╠┼█
	BYTE tNeedClass = g_arItemTable[artable]->m_byClass;
	BYTE armMagic = g_arMagicItemTable[armagic]->m_tNeedClass;	// ╕┼┴ў╝╙╝║ ░ш┐н

	//15▒э╩╛╦∙╙╨╓░╥╡
	if(armMagic != ALL_JOBS)
	{
		BYTE tTemp = 1;	
		BYTE tFire = 0;
		BYTE tEdge = 0;
		BYTE tStaff = 0;
		BYTE tBrawl = 0;

		tFire	 = tTemp & tNeedClass; tTemp = 2; 
		tEdge	 = tTemp & tNeedClass; tTemp = 4;
		tStaff	 = tTemp & tNeedClass; tTemp = 8;
		tBrawl	 = tTemp & tNeedClass;

		tFire = tFire & armMagic;
		tEdge = tEdge & armMagic;
		tStaff = tStaff & armMagic;
		tBrawl = tBrawl & armMagic;

		tTemp = tFire^tEdge^tStaff^tBrawl;
		if(!tTemp)
			return FALSE;
		//		if(tNeedClass != armMagic) return FALSE;
	}

	iWear = g_arMagicItemTable[armagic]->m_tWearInfo;		// 0▒э╩╛├╗╙╨╧▐╓╞гм1▒э╩╛╬ф╞ў╩Ї╨╘,2▒э╩╛╫░▒╕╩Ї╨╘

	if(iWear == 0)
		return TRUE;
	else if(iWear == 1)											
	{														// 1╣°└╠╕щ ╣л▒т╖∙┐б ║┘┤┬┤┘.
		if(armWear != 1)
			return FALSE;
		else return TRUE;
	}
	else if(iWear == 2)										// 2╣°└╠╕щ ╣л▒т╕ж ┴ж┐▄╟╤ ┬°┐ы╛╞└╠┼█┐б ║┘┤┬┤┘.
	{
		if((armWear <= 1 || armWear >= 9)&&armWear!= 143)//130╝╢╫░▒╕╩Ї╨╘
			return FALSE;
		else 
			return TRUE;
	}
	else return FALSE;
}
//	100-130╝╢╫░▒╕╕─╩¤─з╖└
short USER::Get100ItemPsiDefense(short sSid, int slot)          ////─з╖и╖└╙∙╝╞╦у    //////////////////////////////////NEO░ц▒╛╨ш╥к┐к╖┼╡─
{
	short sDefense = 0;

	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) 
		return 0;
	if(slot < 0 || slot > EQUIP_ITEM_NUM) 
		return 0;
	if(m_UserItem[slot].tIQ!=12&&m_UserItem[slot].tIQ!=18)
		return 0;
	//╕─╩¤╫к│╔╖└																
	if(m_UserItem[slot].tIQ != UNIQUE_ITEM)	
	{
		int up_count = 0;
		up_count = m_UserItem[slot].tMagic[ITEM_UPGRADE_COUNT];
		if(up_count > 0 && up_count <= MAX_ITEM_UPGRADE_COUNT)
		{
			//100╝╢─з╖и╖└╕─+3,║є├ц+5,130╝╢─з┐╣6╕─5╡у,6╕─╥╘╔╧╡у
			if(Is130Item(sSid)&&m_UserItem[slot].tIQ==18)
			{
				if(up_count<=6)
				{
					sDefense = up_count*5;
				}
				else
				{
					sDefense = (up_count-6)*7+6*5;
				}
			}else
			{
				if(up_count<=7)
				{
					sDefense = up_count*3;
				}
				else
				{
					sDefense = (up_count-7)*5+7*3;
				}
			}
		}
	}
	//╘н╩╝╫░▒╕╡─╖└
	return sDefense;
} 
//////////////////////╗·╨╡╫к╗╗╬к│м╝╢╗·╨╡/////////////////////////////
void USER::EbodyConvertSuperEbody(int sMaster,int sMetral1,int sMetral2)
{
	//┼╨╢╧╬╗╓├
	short sSid;
	if(sMaster < EQUIP_ITEM_NUM || sMaster >= TOTAL_INVEN_MAX)
		return;
	sSid = m_UserItem[sMaster].sSid;
	if(sSid <0||sSid>g_arItemTable.GetSize())
		return;
	if(!IsEbodyItem(sSid))
		return;	
	if( m_UserItem[sMaster].tMagic[5]<7)
	{
		return;
	}
	if(m_UserItem[sMaster].tIQ!=2)
		return ;
	if(m_UserItem[sMaster].tMagic[MAGIC_100_ADD_POS]!=0)
		return ;

	if(sMetral1 < EQUIP_ITEM_NUM || sMetral1 >= TOTAL_INVEN_MAX)//▓─┴╧1╩╟╖ё║╧╖и
		return;
	sSid = m_UserItem[sMetral1].sSid;
	if(sSid <0||sSid>g_arItemTable.GetSize())
		return;
	if(!IsEbodyItem(sSid))
		return;	
	if( m_UserItem[sMetral1].tMagic[5]<7)
	{
		return;
	}
	if(m_UserItem[sMetral1].tIQ!=2)
		return ;
	if(m_UserItem[sMetral1].tMagic[MAGIC_100_ADD_POS]!=1)
		return ;

	if(sMetral2 < EQUIP_ITEM_NUM || sMetral2 >= TOTAL_INVEN_MAX)//▓─┴╧2╩╟╖ё║╧╖и
		return;
	sSid = m_UserItem[sMetral2].sSid;
	if(sSid <0||sSid>g_arItemTable.GetSize())
		return;
	if(!IsEbodyItem(sSid))
		return;	
	if( m_UserItem[sMetral2].tMagic[5]<7)
	{
		return;
	}
	if(m_UserItem[sMetral2].tIQ!=2)
		return ;
	if(m_UserItem[sMetral2].tMagic[MAGIC_100_ADD_POS]!=1)
		return ;
	//╩Ї╨╘╩¤╩╟╖ё<
	int magicount1  = 0,magicount2= 0,magicount3 = 0;
	int i ;
	for(i = 1;i<4;i++)
	{
		BYTE bMagic = m_UserItem[sMaster].tMagic[i];
		if(bMagic >0 && bMagic<g_arEBodyTable.GetSize())
			magicount1++;

		bMagic = m_UserItem[sMetral1].tMagic[i];
		if(bMagic >0 && bMagic<g_arEBodyTable.GetSize())
			magicount2++;

		bMagic = m_UserItem[sMetral2].tMagic[i];
		if(bMagic >0 && bMagic<g_arEBodyTable.GetSize())
			magicount3++;
	}
	if(magicount1<1||magicount1>magicount2 ||magicount1>magicount3)
		return;

	//╩╟╖ё╣╗╟о╩¤╙ы╛н╤щ
	if(m_dwDN < 20000000)
	{
		SendSystemMsg( IDS_USER_NOT_ENOUGH_PAY, SYSTEM_ERROR, TO_ME);
		return ;		
	}
	if(m_dwXP < 1500)
	{
		SendSystemMsg( "╒╜╢╖╛н╤щ▓╗╫у", SYSTEM_ERROR, TO_ME);
		return ;		
	}
	if( m_dwDN <= 20000000 ) 
		m_dwDN = 0;
	else 
		m_dwDN = m_dwDN - 20000000;
	//╒╜╢╖╛н╤щ
	if( m_dwXP <= 1500 ) 
		m_dwXP = 0;
	else 
		m_dwXP = m_dwXP - 1500;

	//1247-1252═╖
	//1253-1267╥┬╖■
	//1268-1270╩╓▒█
	//1271-1276┐у╫╙
	//1277 ═╖
	short sEbodyID[]={877,878,879,880,881,883,910,//═╖
					  884,885,886,887,888,889,890,891,892,893,890,891,892,893,
	                  894,895,896,897,898,899,987,//▒╪╔▒-->│м╝╢░в┼л▒╚╦╣
					  901,902,903,904,905,906};
	short sConvertEbodyID[]={1247,1248,1249,1250,1251,1252,1252,//═╖
					  1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,
	                  1268,1269,1270,1268,1269,1269,1270,
					  1271,1272,1273,1274,1275,1276};

	/*
	//╦└═Ў╩╣╒▀-->│м╝╢░в┼л▒╚╦╣
	//░м▒┤╥└╢р->│м╝╢░в▒┤╥┴
	//░в┐и╡┌░▓->│м╝╢░в┐и╡╧░▓
	//░в└╒├Ї->│м╝╢░в╢√├Ї
	//╤╟┐╦->│м╝╢░в┐╦
	//╜▄┬▐╦╛-->│м╝╢╜▄┬▐╦╣
	//░в├╫┼╡->│м╝╢░в├╫┼л
	//╚╓чф-->│м╝╢┬▐├╫
	//╘╤╜Ё->│м╝╢└н╢√
	//═о▒╠╓╛->│м╝╢╠╘├╫╫╚
	//▓╖└√═в->│м╝╢▓╝╢√╠р
	//░┬╢б->│м╝╢░┬╪ъ
	//╚х▒┤╦╛->│м╝╢┬│▒┤╦╣
	//╓┘щЄ->│м╝╢┬│╫╚
	//░▓╝к└н->│м╝╢╕ё╢√
	//┬ъ╫╚->│м╝╢┬э╫╚
	//╝▓├Ї->│м╝╢╝к├╫
	//╡┬┴ж┬э->│м╝╢└╫└√░в
	//╝╙╦╣->│м╝╢╝╙╦╣
	//┬ъ┘п->│м╝╢┬э┼л
	//╡┬╥┴░в->│м╝╢└╫╥┴░в
	//╒з░═╬╓┐╦->│м╝╢╘·░═╬╓┐╦
	//чф└√->│м╝╢─╖└√
	//чъ╥┴┬ъ->│м╝╢чъ╢√┬ъ
	//┐н┬▐▒┤╫╚->│м╝╢┐и▒┤╢√
	//╝▓├Ї->│м╝╢░═├╫└я╬┬
	//░в┬╖╬ў╦╣-->│м╝╢░в╢√╧г╦╣
	//┼┴┬▐─с->│м╝╢░═┬х─с
	//┐т▒┤->│м╝╢┐т▒┤╢√
	//╛┴чф->
	short sEbodyID[]={987,877,888,899,902,889,896,903,885,900,904,881,890,897,905,
	880,891,898,906,955,884,895,879,886,887,878,892,893,910,883};
	short sConvertEbodyID[]={1270,1247,1257,1268,1272,1258,1265,1273,1254,1269,1274,1251,1259,1266,1275,
	1250,1260,1267,1276,1253,1264,1249,1255,1256,1248,1261,1262,1277,1252};
	*/
	int nECount = sizeof(sEbodyID)/sizeof(sEbodyID[0]);
	int j;
	//╓ў╠хid
	sSid = m_UserItem[sMaster].sSid;
	for(i = 0;i<nECount;i++)
	{
		if(sSid == sEbodyID[i])
		{
			break;
		}
	}
	if(i>=nECount)
		return ;
	ReSetItemSlot(&m_UserItem[sMetral1]);
	ReSetItemSlot(&m_UserItem[sMetral2]);
	m_UserItem[sMaster].sSid = sConvertEbodyID[i];
	m_UserItem[sMaster].tIQ = SUPER_EBODY_ITEM;
	m_UserItem[sMaster].tMagic[5] -= 7;
	//╝╢▒Ё╓╪╨┬╝╞╦у
	if(m_UserItem[sMaster].sSid<0 || m_UserItem[sMaster].sSid > g_arItemTable.GetSize())
		return ;
	//╩Ї╨╘╝╢▒Ё
	m_UserItem[sMaster].sLevel = g_arItemTable[m_UserItem[sMaster].sSid]->m_byRLevel;
	m_UserItem[sMaster].sDuration = g_arItemTable[m_UserItem[sMaster].sSid]->m_sDuration;
	int itemCount = 0;
	if(m_UserItem[sMaster].tIQ > NORMAL_ITEM)
	{
		if(m_UserItem[sMaster].tIQ == UNIQUE_ITEM) 
			itemCount = MAGIC_NUM;	
		else 
			itemCount = 4;								
		for(i = 0; i < itemCount; i++)
		{
			BYTE bMagic = m_UserItem[sMaster].tMagic[i];
			if(bMagic >= 0 && bMagic < g_arEBodyTable.GetSize())
			{
				m_UserItem[sMaster].sLevel += g_arEBodyTable[bMagic]->m_tLevel;
			}
		}
	}

	//╖в╦═╬я╞╖▒ф╗п
	CByteArray arMaterial;
	arMaterial.RemoveAll();
	arMaterial.Add((BYTE)sMaster);
	arMaterial.Add((BYTE)sMetral1);
	arMaterial.Add((BYTE)sMetral2);

	CBufferEx TempBuf;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	int index = arMaterial.GetSize();
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)index);
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) 
			TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());
	FlushItemLog( TRUE );
}
//╫к╓░
void USER::ChangeJob(int nNewJob,int npcsay)
{
	int i = 0;
	int nOldClass = m_byClass;
	if(m_byClass == nNewJob)
	{
		//SendSystemMsg("─у╥╤╛н╩╟╓┘▓├╒▀,╬▐╨ш╫к╓░!", SYSTEM_ERROR, TO_ME);
		SendEventMsg("─у╥╤╛н╩╟╓┘▓├╒▀,╬▐╨ш╫к╓░!");
        return ;
	}
	bool bHaveItem = false;
	//╔э╔╧╩╟╖ё╙╨╫░▒╕
	for(i = 0;i<10;i++)
	{
		if(m_UserItem[i].sSid != -1)
		{
			bHaveItem = true;
			break;
		}
	}
	if(bHaveItem)
	{
	//	SendSystemMsg("╟ы╚б╧┬─·╔э╔╧╡─╫░▒╕║є,╘┘└┤╫к╓░.", SYSTEM_ERROR, TO_ME);
		SendEventMsg("╟ы╚б╧┬─·╔э╔╧╡─╫░▒╕║є,╘┘└┤╫к╓░.");
		return ;
	}
	//╔э╔╧╩╟╖ё╙╨╫░▒╕
	for(i = 34;i<40;i++)
	{
		if(m_UserItem[i].sSid != -1)
		{
			bHaveItem = true;
			break;
		}
	}
	if(bHaveItem)
	{
		//SendSystemMsg("╟ы╚б╧┬─·╔э╔╧╡─╗·╨╡╩╪╗д║є,╘┘└┤╫к╓░.", SYSTEM_ERROR, TO_ME);
        SendEventMsg("╟ы╚б╧┬─·╔э╔╧╡─╗·╨╡╩╪╗д║є,╘┘└┤╫к╓░.");
		return ;
	}
	m_byClass = nNewJob;

	//╝╝─▄╟х┴у
	for( i = 0; i < SKILL_COUNT; i++)
	{
		m_UserSkill[i].sSid=i;
		m_UserSkill[i].tLevel = 0;
	}
	for( i = 0; i < 12; i++)
	{
		m_UserSkill_[i].sSid=i;
		m_UserSkill_[i].tLevel = 0;
	}
    for( i = 0; i < 2; i++)
	{
		m_UserSkill140[i].sSid = 0;
		m_UserSkill140[i].tLevel = 0;
	}

	switch (m_byClass)
	{
	case 0://╚н
		m_sSTR = 14;
		m_sCON = 15;
		m_sDEX = 10;
		m_sVOL = 9;	
		m_sWIS = 9;
		break;
	case 1:
		m_sSTR = 9;
		m_sCON = 10;
		m_sDEX = 9;
		m_sVOL = 17;
		m_sWIS = 12;
		break;
	case 2:
		m_sSTR = 15;
		m_sCON = 14;
		m_sDEX = 10;
		m_sVOL = 9;
		m_sWIS = 9;
		break;
	case 3:
		m_sSTR = 10;
		m_sCON = 12;
		m_sDEX = 17;
		m_sVOL = 9;
		m_sWIS = 9;
		break;
	case 4:
		m_sSTR = 10;
		m_sCON = 12;
		m_sDEX = 17;
		m_sVOL = 9;
		m_sWIS = 9;
		break;
	}
	DelMyEventNum(251);//120╝╢╝╝─▄
	//DelMyEventNum(300);//╨┬╩╓╫░▒╕╝╝─▄
	//╟х└э─з╖и
	m_nHavePsiNum = 0;

	for(i = 0; i < TOTAL_PSI_NUM; i++)					// ├╩▒т╚н╕ж ▓└ ╟╪╛▀ ╟╤┤┘.
	{
		m_UserPsi[i].sSid = -1;
		m_UserPsi[i].tOnOff = FALSE;
	}

	//╝╝─▄╡у
	m_sPA = (short)(m_sLevel-1)+8;
	int skill_point = 0;
	if( m_sLevel <= 60 )
		skill_point = (int)( (double)m_sLevel / 2 + 0.5 );
	else if( m_sLevel > 60 && m_sLevel <= 99 )
		skill_point = (int)( 30 + (double)m_sLevel - 60 + 0.5 );
	else if( m_sLevel > 99 )
		skill_point = (int)( 30 + 99 - 60 + 0.5 );
	m_sSkillPoint = (short)skill_point;

	if(m_sLevel >= 130 && o_yehuoini[0]->chaoneng == 1)//130╝╢╝╝─▄
	{
		m_sSkillPoint_= m_sLevel - 129;
		if(m_sSkillPoint_ >70)
			m_sSkillPoint_=70;
	}
	for( i = 0;i<2;i++)
	{
		m_UserSkill140[i].sSid = 0;
		m_UserSkill140[i].tLevel = 0;
	}
	//
	GetMagicItemSetting();

	SendMyInfo( TO_INSIGHT, INFO_MODIFY );	// || 

	SendUserStatusSkill();

	SendCharData();

	TCHAR szMsg[200],szOldJob[40],szNewJob[40];
	switch(nOldClass)
	{
	case 0:
		wsprintf(szOldJob,"╕ё╢╖╝╥");
		break;
	case 1:
		wsprintf(szOldJob,"─з╖и╩ж");
		break;
	case 2:
		wsprintf(szOldJob,"╜г╬ф╩┐");
		break;
	case 3:
		wsprintf(szOldJob,"╟╣╨╡╩ж");
		break;
	case 4:
		wsprintf(szOldJob,"╓┘▓├╒▀");
		break;
	}
	switch(nNewJob)
	{
	case 0:
		wsprintf(szNewJob,"╕ё╢╖╝╥");
		break;
	case 1:
		wsprintf(szNewJob,"─з╖и╩ж");
		break;
	case 2:
		wsprintf(szNewJob,"╜г╬ф╩┐");
		break;
	case 3:
		wsprintf(szNewJob,"╟╣╨╡╩ж");
		break;
	case 4:
		wsprintf(szNewJob,"╓┘▓├╒▀");
		break;
	}
	wsprintf(szMsg,"%s ╫к╓░│╔╬к %s",szOldJob,szNewJob);
	SendSayAddStr(npcsay,szMsg);
	//SendSystemMsg("╫к╓░│╔╣ж.╨╗╨╗▓╬╙ы", SYSTEM_ANNOUNCE, TO_ME);
}

void USER::StudyNewJobPsi(int sPsi)
{
//	if(m_byClass!=JUDGE)
//		return ;
	BYTE tResult = 1;
	for(int i = 0;i<m_nHavePsiNum;i++)
	{
		if(m_UserPsi[i].sSid == sPsi)
			return ;
	}
	m_UserPsi[m_nHavePsiNum].sSid = sPsi;
	m_UserPsi[m_nHavePsiNum].tOnOff = FALSE;
	m_nHavePsiNum++;
	CBufferEx TempBuf;

	TempBuf.Add(BUY_PSY_RESULT);
	TempBuf.Add(tResult);
	TempBuf.Add(1);

	TempBuf.Add((short)sPsi);
	Send(TempBuf, TempBuf.GetLength());
	SendCharData();
}

//┼╨╢╧─▄╖ё╕°╨┬╩╓╫░▒╕
BOOL USER::CanGiveNewerItem()
{
	if(FindEvent(300))
	{
	//	SendSystemMsg("─у╥╤╛н┴ь╚б╨┬╩╓╫░▒╕,╟ы╬Ё╓╪╕┤┴ь╚б.", SYSTEM_ERROR, TO_ME);
		SendEventMsg("─у╥╤╛н┴ь╚б╨┬╩╓╫░▒╕,╟ы╬Ё╓╪╕┤┴ь╚б.");
		return FALSE;
	}
	int i;
	bool bHaveItem = false;
	//╔э╔╧╩╟╖ё╙╨╫░▒╕
	for(i = 0;i<10;i++)
	{
		if(m_UserItem[i].sSid != -1)
		{
			bHaveItem = true;
			break;
		}
	}
	if(bHaveItem)
	{
		//SendSystemMsg("╟ы╚б╧┬─·╔э╔╧╡─╫░▒╕║є,╘┘└┤┴ь╚б╨┬╩╓╫░▒╕.", SYSTEM_ERROR, TO_ME);
		SendEventMsg("╟ы╚б╧┬─·╔э╔╧╡─╫░▒╕║є,╘┘└┤┴ь╚б╨┬╩╓╫░▒╕.");
		return FALSE;
	}
	//╔э╔╧╩╟╖ё╙╨╫░▒╕
	for(i = 34;i<40;i++)
	{
		if(m_UserItem[i].sSid != -1)
		{
			bHaveItem = true;
			break;
		}
	}
	if(bHaveItem)
	{
		//SendSystemMsg("╟ы╚б╧┬─·╔э╔╧╡─╗·╨╡╩╪╗д║є,╘┘└┤┴ь╚б╨┬╩╓╫░▒╕.", SYSTEM_ERROR, TO_ME);
          SendEventMsg("╟ы╚б╧┬─·╔э╔╧╡─╗·╨╡╩╪╗д║є,╘┘└┤┴ь╚б╨┬╩╓╫░▒╕.");
		return FALSE;
	}
	return TRUE;
}
//╨┬╩╓╫░▒╕
void  USER::GiveNewerItem(int nSolt,int sSid,int sCount,int sIQ,int nUpg,int magic0,int magic1,int magic2,int magic3,int magic4)	
{
	if(nSolt<0||nSolt>40)
	{
		return ;
	}
	int itemSize = g_arItemTable.GetSize();
	if(sSid<0||sSid>itemSize)
		return ;

	if(sCount<=0)
		return ;
	if(nUpg>MAX_ITEM_UPGRADE_COUNT)
		return ;
	
	/*
	//╥┬┐у╙ы╫░▒╕
	if(g_arItemTable[sSid]->m_byWear == 1&&(nSolt !=LEFT_HAND||nSolt!=RIGHT_HAND))
	return ;
	if(g_arItemTable[sSid]->m_byWear == 2&&nSolt != HEAD)
	return ;
	if(g_arItemTable[sSid]->m_byWear == 3&&nSolt != BODY)
	return ;
	if(g_arItemTable[sSid]->m_byWear == 4&&nSolt != PANTS)
	return ;
	if(g_arItemTable[sSid]->m_byWear == 5&&nSolt != SHOES)
	return ;
	//╗·╨╡
	*/
	ReSetItemSlot(&m_UserItem[nSolt]);
	m_UserItem[nSolt].sSid = sSid;
	m_UserItem[nSolt].sCount = sCount;
	m_UserItem[nSolt].tMagic[0] = magic0;
	m_UserItem[nSolt].tMagic[1] = magic1;
	m_UserItem[nSolt].tMagic[2] = magic2;
	m_UserItem[nSolt].tMagic[3] = magic3;
	m_UserItem[nSolt].tMagic[4] = magic4;
	m_UserItem[nSolt].tMagic[5] = nUpg;
	m_UserItem[nSolt].tIQ = sIQ;

	m_UserItem[nSolt].sDuration = g_arItemTable[sSid]->m_sDuration;
	ResetItemLevelBySolt(nSolt);
}
//╨┬╩╓╫░▒╕╖в╦══ъ│╔
void USER::GiveNewerItemFinish()
{
	GetMagicItemSetting();
	SendCharData();
	SendUserStatusSkill();
    SendMyInfo(TO_INSIGHT, INFO_MODIFY);
	return ;
}
//╓╪╓├╫░▒╕╝╢▒Ё
void USER::ResetItemLevelBySolt(int sourceSolt)
{
	int i;
	if(sourceSolt < EQUIP_ITEM_NUM || sourceSolt >= TOTAL_INVEN_MAX) 
		return;
	m_UserItem[sourceSolt].sLevel = g_arItemTable[m_UserItem[sourceSolt].sSid]->m_byRLevel;

	//╓╪╓├╝╢▒Ё
	int itemCount;
	if(m_UserItem[sourceSolt].tIQ > NORMAL_ITEM)
	{
		if(m_UserItem[sourceSolt].tIQ == UNIQUE_ITEM) 
			itemCount = MAGIC_NUM;	
		else if(m_UserItem[sourceSolt].tIQ == 12
			||m_UserItem[sourceSolt].tIQ == 18)
			itemCount = 5;								
		else
			itemCount = 4;								
		for(i = 0; i < itemCount; i++)
		{
			BYTE bMagic = m_UserItem[sourceSolt].tMagic[i];
			if(bMagic >= 0 && bMagic < g_arMagicItemTable.GetSize())
			{
				m_UserItem[sourceSolt].sLevel += g_arMagicItemTable[bMagic]->m_tLevel;
			}
		}
	}
}		

//╖в╦═NPC╠с╩╛│Ў╧╓├√│╞
void USER::SendSayAddStr(int npcsay,TCHAR *pStrMsg)
{
	if(pStrMsg == NULL)
		return;
	DWORD dwCuttime = GetTickCount();
	static DWORD dwLastTime = 0;
	if(dwCuttime - dwLastTime<1000)
	{
		return ;
	}
	dwLastTime = dwCuttime;
	CBufferEx TempBuf, TempSayBuf;
	TempSayBuf.AddString( pStrMsg );

	TempBuf.Add(CLIENT_EVENT_SAY);
	TempBuf.Add((BYTE)SUCCESS);
	TempBuf.Add((short)npcsay);
	TempBuf.Add((BYTE)0x01);
	TempBuf.AddData(TempSayBuf, TempSayBuf.GetLength());
	Send(TempBuf, TempBuf.GetLength());
	return ;
}		

//╨┬╓░╥╡╨ш╥к╣е╗ў┴ж╙ы╠х╓╩╫к│╔╗д╖и╔·├№
void USER::GetSkillSetting()
{
	if(m_byClass != JUDGE)
	{
		return ;
	}
	//╓┘▓├╝╝─▄
	for (int i=SKILL_JUDGE_QIANGHUAHUFA;i<SKILL_COUNT;i++)
	{
		switch(i)
		{
		case SKILL_JUDGE_QIANGHUAHUFA://╟┐╗п╗д╖и
			{
				break;
			}
		case SKILL_JUDGE_RENMINBUXI://╔·╗ю▓╗╧в
			{
				int iLevel = m_UserSkill[i].tLevel;		
				if(iLevel < 0)
					iLevel = 0;
				if(iLevel >= 1) 
					iLevel += m_DynamicUserData[MAGIC_ALL_SKILL_UP];

				if(iLevel >= g_arSkillTable[i]->m_arSuccess.GetSize()) 
					return ;
				if(iLevel >= SKILL_LEVEL) 
					iLevel = SKILL_LEVEL - 1;

				if(i >= g_arSkillTable.GetSize())
					return ;
				int iPos = g_arSkillTable[i]->m_arInc.GetAt(iLevel);
				m_DynamicUserData[MAGIC_MAX_HP_UP]+=m_sCON*iPos/100;
				break;
			}
		}
	}
}

void USER::UserJudgeSkill_ToStr(TCHAR *pBuf)
{
	int	index = 0;
	int i ;
	//┴э═т5╕Ў╨┬╓░╥╡╝╝─▄
	//0x19,0x1a,0x1b,0x1c,0x18
	for(i = 25;i<SKILL_COUNT;i++)
	{
		SetShort(pBuf, m_UserSkill[i].sSid,		index);
		SetByte (pBuf, m_UserSkill[i].tLevel,	index);
	}
	SetShort(pBuf, m_UserSkill[24].sSid,		index);
	SetByte (pBuf, m_UserSkill[24].tLevel,	index);
}

void USER::User140SkillToStr(TCHAR *pBuf)
{
	int	index = 0;
	int i ;
	//140╝╢╝╝─▄
	//0x10,0x11,0x12
	for(i = 16;i<19;i++)
    {
		SetShort(pBuf, i,	index);
		//╢┴╚б│Ў┤э,▒╪╨ы╓╪╓├
		if(m_UserSkill_[i].tLevel > 20 || m_sLevel <130)
			m_UserSkill_[i].tLevel = 0;

		SetByte (pBuf, m_UserSkill_[i].tLevel,	index);
	}
}

void USER::AddHuFaStatus(DWORD dwAbnormal)
{
	m_dwJudgePsiState |= dwAbnormal;
}

void USER::DelHuFaStatus(DWORD dwAbnormal)
{

	m_dwJudgePsiState &= (~dwAbnormal);
}

BOOL USER::CheckHuFaStatus(DWORD dwAbnormal)
{
	if((m_dwJudgePsiState & dwAbnormal) == dwAbnormal) 
		return TRUE;
	else
		return FALSE;
}
//╩╟╖ё┤ц╘┌╒┘╗╜╡└╛у
 BOOL USER::SubInvernItemBySsid(int iSid)
 {
	 int tSlot ;
	 for( tSlot = EQUIP_ITEM_NUM;tSlot<TOTAL_INVEN_MAX;tSlot++)
	 {
		 if(m_UserItem[tSlot].sSid ==0xffff)
			 continue;
		if(m_UserItem[tSlot].sSid == iSid)
		{
			break;
		}
	 }
	 if(tSlot >=TOTAL_INVEN_MAX)
	 {
		 if(iSid<0||iSid>g_arItemTable.GetSize())
			 return FALSE;
		 CString strMsg;
		 strMsg.Format("─у╨ш╥к╡└╛▀ %s ",g_arItemTable[iSid]->m_strName);
		 SendSystemMsg(strMsg.GetBuffer(0), SYSTEM_NORMAL, TO_ME);
		 return FALSE;
	 }
	 m_UserItem[tSlot].sCount--;
	 if(m_UserItem[tSlot].sCount<=0)
		 ReSetItemSlot(&m_UserItem[tSlot]);

	 CBufferEx TempBuf;
	 TempBuf.Add(ITEM_USE_RESULT);
	 TempBuf.Add(SUCCESS);
	 TempBuf.Add((BYTE)QUICK_ITEM_TELEPORT);
	 TempBuf.Add((BYTE)tSlot);
	 TempBuf.Add(m_UserItem[tSlot].sLevel);
	 TempBuf.Add(m_UserItem[tSlot].sSid);
	 TempBuf.Add(m_UserItem[tSlot].sDuration);
	 TempBuf.Add(m_UserItem[tSlot].sBullNum);
	 TempBuf.Add(m_UserItem[tSlot].sCount);
	 for(int i = 0; i < MAGIC_NUM; i++) 
		 TempBuf.Add(m_UserItem[tSlot].tMagic[i]);
	 TempBuf.Add(m_UserItem[tSlot].tIQ);
	 Send(TempBuf, TempBuf.GetLength());
	 return TRUE;
 }
 BOOL USER::SubInvernItemBySolt(short tSlot)
 {
	 if(tSlot<EQUIP_ITEM_NUM||tSlot>=TOTAL_INVEN_MAX)
		 return FALSE;
	if(m_UserItem[tSlot].sSid ==0xffff)
		return FALSE;
	int iSid = m_UserItem[tSlot].sSid;

	 if(tSlot >=TOTAL_INVEN_MAX)
	 {
		 if(iSid<0||iSid>g_arItemTable.GetSize())
			 return FALSE;
		 CString strMsg;
		 strMsg.Format("─у├╗╙╨╡└╛у %s ",g_arItemTable[iSid]->m_strName);
		 SendSystemMsg(strMsg.GetBuffer(0), SYSTEM_NORMAL, TO_ME);
		 return FALSE;
	 }
	 m_UserItem[tSlot].sCount--;
	 if(m_UserItem[tSlot].sCount<=0)
		 ReSetItemSlot(&m_UserItem[tSlot]);

	 CBufferEx TempBuf;
	 TempBuf.Add(ITEM_USE_RESULT);
	 TempBuf.Add(SUCCESS);
	 TempBuf.Add((BYTE)QUICK_ITEM_TELEPORT);//╩╣╙├│ш╬я╦╟┴╧гм┤╦╓╡╬к116
	 TempBuf.Add((BYTE)tSlot);
	 TempBuf.Add(m_UserItem[tSlot].sLevel);
	 TempBuf.Add(m_UserItem[tSlot].sSid);
	 TempBuf.Add(m_UserItem[tSlot].sDuration);
	 TempBuf.Add(m_UserItem[tSlot].sBullNum);
	 TempBuf.Add(m_UserItem[tSlot].sCount);
	 for(int i = 0; i < MAGIC_NUM; i++) 
		 TempBuf.Add(m_UserItem[tSlot].tMagic[i]);
	 TempBuf.Add(m_UserItem[tSlot].tIQ);
	 Send(TempBuf, TempBuf.GetLength());
	 return TRUE;
 }									

BOOL USER::CallHuFa(BYTE tType)
{
//	static DWORD dw = 1000*60*10,dwLast = 0;

//	if(m_byClass!=JUDGE)
//		return FALSE;
	if(m_dwXiShengTime !=0){
			SendSystemMsg("╬■╔№╗д╖и╫┤╠м╧┬▓╗─▄╒┘╗╜╗д╖и,╟ы╡╚┤¤5╖╓╓╙║є╒┘╗╜.", SYSTEM_ERROR, TO_ME);
			return false;
		}

/*	DWORD dwCur = GetTickCount();
	DWORD dwSpace = dwCur - dwLast;
	if(dwSpace < dw)
	{
		CString str;
		str.Format("─·╒┘╗╜╗д╖и╗╣╨ш╡╚┤¤%d╖╓%d├ы.",(dw - dwSpace)/60/1000,((dw - dwSpace)/1000)%60);
		SendSystemMsg(str.GetBuffer(0), SYSTEM_ERROR, TO_ME);
		return FALSE;
	}
	dwLast = dwCur;*/
	switch(tType)
	{
	case 1://╥┴═┐┬▐8000+
		{
			//80╝╢  10010
			//120╝╢ 17500
			m_nHuFaMaxHP = 16000+m_sLevel*40+50*m_sMagicWIS;
			//130╝╢╝╝─▄╘Ў╝╙╗д╖и╤к
			//╞Ё╡у17%,├┐╝╢╘Ў╝╙2%╡у
			if(m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel>0&&m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel<20)
			{
				int nAdd = m_nHuFaMaxHP*(17+2*(m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel-1))/100;
				m_nHuFaMaxHP +=nAdd;
			}
			m_nHuFaHP = m_nHuFaMaxHP;
			break;
		}
	case 2://╞╒└╫╦■15000+	
		{//120╝╢ 31250
			m_nHuFaMaxHP = 30000+m_sLevel*40+50*m_sMagicWIS;
			//130╝╢╝╝─▄╘Ў╝╙╗д╖и╤к
			//╞Ё╡у17%,├┐╝╢╘Ў╝╙2%╡у
			if(m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel>0&&m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel<20)
			{
				int nAdd = m_nHuFaMaxHP*(17+2*(m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel-1))/100;
				m_nHuFaMaxHP +=nAdd;
			}
			m_nHuFaHP = m_nHuFaMaxHP;
			break;
		}
	case 3://
		{
			m_nHuFaMaxHP = 48000+m_sLevel*40+50*m_sMagicWIS;
			//130╝╢╝╝─▄╘Ў╝╙╗д╖и╤к
			//╞Ё╡у17%,├┐╝╢╘Ў╝╙2%╡у
			if(m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel>0&&m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel<20)
			{
				int nAdd = m_nHuFaMaxHP*(17+2*(m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel-1))/100;
				m_nHuFaMaxHP +=nAdd;
			}
			m_nHuFaHP = m_nHuFaMaxHP;
			break;
		}
	case 4:
		{
			m_nHuFaMaxHP = 80000+m_sLevel*40+50*m_sMagicWIS;
			//130╝╢╝╝─▄╘Ў╝╙╗д╖и╤к
			//╞Ё╡у17%,├┐╝╢╘Ў╝╙2%╡у
			if(m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel>0&&m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel<20)
			{
				int nAdd = m_nHuFaMaxHP*(17+2*(m_UserSkill_[SKILL_130_REN_MI_FU_HA].tLevel-1))/100;
				m_nHuFaMaxHP +=nAdd;
			}
			m_nHuFaHP = m_nHuFaMaxHP;
			break;
		}
	case 0:
	default:
		return FALSE;
		break;
	}
	//▓т╩╘
//#ifdef _DEBUG
//		m_nHuFaMaxHP = 1000;
//		m_nHuFaHP = 1000;	
//#endif
//	m_dwLastCallHuFaTime = dwCur;
	m_dwLevealHuFaTime = 1000*60*60;
	m_tHuFaType = tType;

	CPoint pt = FindNearAvailablePoint_S(m_curx,m_cury);
	if(pt.x == -1||pt.y == -1)
		return FALSE;
	m_xHuFa = pt.x;
	m_yHuFa = pt.y;

	SendNewHufaInfo();
	//CPoint pt = FindNearAvailablePoint_S(m_curx,m_cury);
	//if(pt.x == -1||pt.y == -1)
	//	return ;
	//CPoint ptNew = ConvertToClient( pt.x, pt.y );

	//if( ptNew.x == -1 || ptNew.y == -1 ) 
	//	return;
	//
	//CBufferEx TempBuf;
	//TempBuf.Add(PK_BUTTON_REQ);
	//TempBuf.Add((BYTE)0x43);
	//TempBuf.Add((BYTE)0x01);
	//TempBuf.Add((int)m_uid+USER_BAND+USER_HUFA_BAND);
	//TempBuf.Add((BYTE)m_tHuFaType);
	//TempBuf.Add((int)m_nHuFaMaxHP);
	//TempBuf.Add((int)m_nHuFaHP);
	//TempBuf.Add((BYTE)m_tDir);
	//TempBuf.Add((int)m_curz);
	//TempBuf.Add((int)ptNew.x);
	//TempBuf.Add((int)ptNew.y);
	//Send(TempBuf, TempBuf.GetLength());

#ifdef _USE_Guo_Fu_
	SendHuFaInfo(this,TO_INSIGHT);
#endif
	return TRUE;
}
void USER::SendHuFaInfo(USER *pUser,BYTE towho)
{
	if(pUser ==NULL)
		return ;
	if(pUser->m_tHuFaType == 0)
		return ;
	CPoint pt = FindNearAvailablePoint_S(pUser->m_curx,pUser->m_cury);
	if(pt.x == -1||pt.y == -1)
		return ;

	CPoint ptNew = ConvertToClient( pt.x, pt.y );

	if( ptNew.x == -1 || ptNew.y == -1 ) 
		return;

	CBufferEx TempBuf2;

	TempBuf2.Add(PK_BUTTON_REQ);
	TempBuf2.Add((BYTE)0x44);
	TempBuf2.Add((int)pUser->m_uid+USER_BAND+USER_HUFA_BAND);
	TempBuf2.Add((BYTE)pUser->m_tHuFaType);
	TempBuf2.Add((int)pUser->m_nHuFaHP);
	TempBuf2.Add((int)pUser->m_nHuFaMaxHP);
	TempBuf2.Add((BYTE)pUser->m_tDir);
	TempBuf2.Add((int)pUser->m_curz);
	TempBuf2.Add((int)ptNew.x-1);//╗д╖и╡─╫°▒ъ,╜т╛Ў╡▓╫б╜╟╔л╡─BUG
	TempBuf2.Add((int)ptNew.y-2);//╗д╖и╡─╫°▒ъ,╜т╛Ў╡▓╫б╜╟╔л╡─BUG
	switch(towho)
	{
	case TO_ALL:
		SendAll(TempBuf2, TempBuf2.GetLength());
		break;

	case TO_ME:
		Send(TempBuf2, TempBuf2.GetLength());
		break;

	case TO_ZONE:
		SendZone(TempBuf2, TempBuf2.GetLength());
		break;

	case TO_INSIGHT:
	default:
		SendInsight(TempBuf2, TempBuf2.GetLength());
		break;
	}
	SendJudgePsiStatus();
}
//╖в╦═╗д╖и╥╞╢п╧√╧в
void USER::SendHuFaMoveInfo(BYTE bMoveType)
{
	if(m_tHuFaType == 0)
		return ;
	CPoint pt;// = FindNearAvailablePoint_S(m_curx,m_cury);
	pt.x = m_curx+1;
	pt.y = m_cury+2;

	if(pt.x == -1||pt.y == -1)
		return;

	CPoint ptNew = ConvertToClient(pt.x,pt.y );
	if( ptNew.x == -1 || ptNew.y == -1 ) 
	{
		return ;
	}
	BYTE bSuc = 0x01;
	int index = 0;
	SetByte(m_TempBuf, bMoveType, index);
	SetByte(m_TempBuf, bSuc, index);
	SetInt(m_TempBuf, m_uid + USER_BAND + USER_HUFA_BAND, index);
	SetShort(m_TempBuf, ptNew.x, index);
	SetShort(m_TempBuf, ptNew.y, index);
	SendInsight(m_TempBuf, index);
}
//╨┬│Ў╔·╗д╖и╨┼╧в
void USER::SendNewHufaInfo()
{
	if(m_tHuFaType == 0)
		return ;
	CPoint pt = FindNearAvailablePoint_S(m_curx,m_cury);
	if(pt.x == -1||pt.y == -1)
		return ;
	CPoint ptNew = ConvertToClient( pt.x, pt.y );

	if( ptNew.x == -1 || ptNew.y == -1 ) 
		return;

	CBufferEx TempBuf;
	TempBuf.Add(PK_BUTTON_REQ);
	TempBuf.Add((BYTE)0x43);
	TempBuf.Add((BYTE)0x01);
	TempBuf.Add((int)m_uid+USER_BAND+USER_HUFA_BAND);
	TempBuf.Add((BYTE)m_tHuFaType);
	TempBuf.Add((int)m_nHuFaHP);
	TempBuf.Add((int)m_nHuFaMaxHP);
	TempBuf.Add((BYTE)m_tDir);
	TempBuf.Add((int)m_curz);
	TempBuf.Add((int)ptNew.x);
	TempBuf.Add((int)ptNew.y);

	Send(TempBuf, TempBuf.GetLength());
}

//╝╙╚ы╗д╖и╖в╦═╢╙┴╨
void USER::AddHuFaDataBuf(USER *pUser,TCHAR *pData,int &nIndex)
{	
	if(pUser == NULL)
		return ;
	if(pUser->m_tHuFaType == 0)
		return ;
	CPoint pt = FindNearAvailablePoint_S(pUser->m_curx,pUser->m_cury);
	if(pt.x == -1||pt.y == -1)
		return ;
	CPoint ptNew = ConvertToClient( pt.x, pt.y );

	if( ptNew.x == -1 || ptNew.y == -1 ) 
		return;

	////0x43
	//SetByte(pData,PK_BUTTON_REQ,nIndex);
	//SetByte(pData,0x43,nIndex);
	//SetByte(pData,0x01,nIndex);
	//SetInt(pData,(int)pUser->m_uid+USER_BAND+USER_HUFA_BAND,nIndex);
	//SetByte(pData,(BYTE)pUser->m_tHuFaType,nIndex);
	//SetInt(pData,(int)pUser->m_nHuFaMaxHP,nIndex);
	//SetInt(pData,(int)pUser->m_nHuFaHP,nIndex);
	//SetByte(pData,(BYTE)pUser->m_tDir,nIndex);
	//SetInt(pData,(int)pUser->m_curz,nIndex);
	//SetInt(pData,(int)ptNew.x,nIndex);
	//SetInt(pData,(int)ptNew.y,nIndex);

	//0x44
	SetByte(pData,PK_BUTTON_REQ,nIndex);
	SetByte(pData,0x44,nIndex);
	SetInt(pData,(int)pUser->m_uid+USER_BAND+USER_HUFA_BAND,nIndex);
	SetByte(pData,(BYTE)pUser->m_tHuFaType,nIndex);
	SetInt(pData,(int)pUser->m_nHuFaHP,nIndex);
	SetInt(pData,(int)pUser->m_nHuFaMaxHP,nIndex);
	SetByte(pData,(BYTE)pUser->m_tDir,nIndex);
	SetInt(pData,(int)pUser->m_curz,nIndex);
	SetInt(pData,(int)ptNew.x,nIndex);
	SetInt(pData,(int)ptNew.y,nIndex);
}

//╓╟┴ж╔╧╔¤
void USER::SendJudgePsiStatus(BYTE bType)
{
	CBufferEx TempBuf2;

	TempBuf2.Add(PK_BUTTON_REQ);
	TempBuf2.Add((BYTE)0x17);
	TempBuf2.Add((int)m_uid+USER_BAND);
	TempBuf2.Add((int)m_dwJudgePsiState);
	TempBuf2.Add((int)m_dwJudgePsiExState);
	switch(bType)
	{
/*	case TO_ME:
		Send(TempBuf2, TempBuf2.GetLength());
	default:
		SendInsight(TempBuf2, TempBuf2.GetLength());
		break;*/

	case TO_ALL:
		SendAll(TempBuf2, TempBuf2.GetLength());
		break;

	case TO_ME:
		Send(TempBuf2, TempBuf2.GetLength());
		break;

	case TO_ZONE:
		SendZone(TempBuf2, TempBuf2.GetLength());
		break;

	case TO_INSIGHT:
	default:
		SendInsight(TempBuf2, TempBuf2.GetLength());
		break;

	}
}

//╕№╨┬╗д╖и╤к┴┐
//0x4c,0x5c,0x44,0x00,0x00,0x5c,0x44,0x00,0x00,
void USER::SendHuFaHPInfo()
{
	CBufferEx TempBuf2;
	TempBuf2.Add(PK_BUTTON_REQ);
	TempBuf2.Add((BYTE)0x4c);
	TempBuf2.Add(m_nHuFaHP);
	TempBuf2.Add(m_nHuFaMaxHP);
	SendInsight(TempBuf2, TempBuf2.GetLength());
}													

//╗д╖и╧√╩з
//0x3e,0x45,0xc8,0x79,0x00,0x00,
void USER::SendHuFaPostion(int nType)
{
	CBufferEx TempBuf2;
	TempBuf2.Add(PK_BUTTON_REQ);
	TempBuf2.Add((BYTE)0x45);
	TempBuf2.Add((int)m_uid+USER_BAND+USER_HUFA_BAND);
	SendInsight(TempBuf2, TempBuf2.GetLength());
	if(nType)
	{
		m_tHuFaType = 0;
		m_nHuFaHP = 0;
		m_nHuFaMaxHP =0 ;
		//SendSystemMsg("╒┘╗╜╡─╗д╖и╥╤╛н╦└═Ў",SYSTEM_NORMAL,TO_ME);
	}
}
//╔ш╓├╗д╖и╔╦║ж
void USER::SetHuFaDamage(int nDamage)
{
	if(nDamage <= 0) 
		return;
	if(m_bLive == USER_DEAD)
		return;
	//╙├╗з╡Ї╤к╧╘╩╛
	SendDamageNum(0,m_uid+USER_BAND+USER_HUFA_BAND,nDamage);	
	m_nHuFaHP -= nDamage;
	if( m_nHuFaHP <= 0 )
	{
		m_nHuFaHP = 0;
		SendHuFaPostion(HUFA_DEA);
	}
	else
	{
		SendNpcHP(m_uid+USER_BAND+USER_HUFA_BAND,m_nHuFaHP);
		SendHuFaHPInfo();	
	}
}		
//╗ё╚б╗д╖и╔╦║ж╣е╗ў╓╡
int  USER::GetHuFaDamage()										
{
	int nBase = 15;
	switch(m_tHuFaType)
	{
	case 0x01:
		nBase+=80;
		break;
	case 0x02:
		nBase+=160;
		break;
	case 0x03:
		nBase+=320;
		break;
	case 0x04:
		nBase+=480;
		break;
	}
	
	//╟┐╗п╗д╖и,╓╟┴ж▒ф│╔╗д╖и╣е╗ў┴ж
	int iLevel = m_UserSkill[SKILL_JUDGE_QIANGHUAHUFA].tLevel;		
	if(iLevel < 0)
		iLevel = 0;
	if(iLevel >= 1) 
		iLevel += m_DynamicUserData[MAGIC_ALL_SKILL_UP];

	if(iLevel >= g_arSkillTable[SKILL_JUDGE_QIANGHUAHUFA]->m_arSuccess.GetSize()) 
		return nBase;
	if(iLevel >= SKILL_LEVEL) 
		iLevel = SKILL_LEVEL - 1;

	if(SKILL_JUDGE_QIANGHUAHUFA >= g_arSkillTable.GetSize())
		return nBase;
	int iPos = g_arSkillTable[SKILL_JUDGE_QIANGHUAHUFA]->m_arInc.GetAt(iLevel);
	nBase+=m_sWIS*iPos/100;
	return nBase;
}
//╗ё╚б╖┤╗ў╣е╗ў
int  USER::HuFaAttack(int npcid)	
{
	int sHP = 0,sMaxHP = 0;
	DWORD dwCur = GetTickCount();
	//╗д╖и╣е╗ў2├ы╥╗┤╬
	if(dwCur - m_dwHuFaLastAttack<2000)
		return 0;
	m_dwHuFaLastAttack = dwCur;
	//╗д╖и╣е╗ў
	if(m_tHuFaType !=0&&m_nHuFaHP>0)
	{
		int nDamage = GetHuFaDamage();
		if(nDamage<15)
			nDamage = 15;
		//╗д╖и╣е╗ў─┐▒ъ╚е╤к
		if(npcid >= USER_BAND && npcid < NPC_BAND)
		{
			USER *pUser = GetUser(npcid-USER_BAND);
			if(pUser)
			{
				pUser->SetDamage(nDamage);
				sHP = pUser->m_sHP;
				sMaxHP = pUser->m_sMaxHP;
			}
			//╙├╗з╡Ї╤к╧╘╩╛
			SendDamageNum(0,npcid,nDamage);	
		}else
		{
			CNpc *pNpc = GetNpc(npcid-NPC_BAND);
			if(pNpc)
			{
				pNpc->SetHuFaFinalDamage(this,nDamage);
				sHP = pNpc->m_sHP;
				sMaxHP = pNpc->m_sMaxHP;
			}
			//npc╡Ї╤к
			//SendDamageNum(1,npcid,nDamage);	

			SendNpcHP(npcid,sHP);
		}
		CBufferEx TempBuf2;

		TempBuf2.Add(ATTACK_RESULT);//╣·╖■╥╤╛н╨▐╒¤

		TempBuf2.Add(ATTACK_SUCCESS);

		TempBuf2.Add((int)(m_uid + USER_BAND+USER_HUFA_BAND));
		TempBuf2.Add(npcid);
#ifdef _USE_Guo_Fu_
		TempBuf2.Add((int)sHP);
		TempBuf2.Add((int)sMaxHP);
#else
		TempBuf2.Add((short)sHP);
		TempBuf2.Add((short)sMaxHP);
#endif
		if(m_curz == 61 || m_curz == 62 || m_curz == 63)
			SendInsight(TempBuf2, TempBuf2.GetLength());
		else 
			SendExactScreen(TempBuf2, TempBuf2.GetLength());
	}
	return 0;
}
//╚║╣е╔╦║ж
void USER::SendWideRangeAttack(int x, int y,int psi,int damage)
{
	if( m_ZoneIndex < 0 || m_ZoneIndex >= g_zone.GetSize() ) return;

	int dir[9][2];
	int ix, iy;
	int nTarget = 0;
	int nDamage = 0;

	USER* pUser = NULL;
	CNpc* pNpc = NULL;
	MAP* pMap = g_zone[m_ZoneIndex];
	if(!pMap) return;

	dir[0][0]  =  0;		dir[0][1] =  0;		// 
	dir[1][0]  = -1;		dir[1][1] =  0;		// 
	dir[2][0]  = -1;		dir[2][1] =  1;		// 
	dir[3][0]  =  0;		dir[3][1] =  1;		// 
	dir[4][0]  =  1;		dir[4][1] =  1;		// 

	dir[5][0]  =  1;		dir[5][1] =  0;		// 
	dir[6][0]  =  1;		dir[6][1] = -1;		// 
	dir[7][0]  =  0;		dir[7][1] = -1;		// 
	dir[8][0]  = -1;		dir[8][1] = -1;		// 

	for(int i = 1; i < 9; i++)
	{
		ix = x + dir[i][0];
		iy = y + dir[i][1];

		if(ix < 0) ix = 0;
		if(iy < 0) iy = 0;
		if(ix >= pMap->m_sizeMap.cx) ix = pMap->m_sizeMap.cx - 1;
		if(iy >= pMap->m_sizeMap.cy) iy = pMap->m_sizeMap.cy - 1;

		nTarget = pMap->m_pMap[ix][iy].m_lUser;

		if(nTarget >= USER_BAND && nTarget < NPC_BAND)	// USER
		{
			pUser = GetUser(nTarget - USER_BAND);			// User Pointer ╕ж ╛Є┤┬┤┘.
			if(pUser == NULL || pUser->m_state != STATE_GAMESTARTED) continue;	
			if(pUser->m_bLive == USER_DEAD || pUser->m_uid == m_uid)	continue;		// Target User ░б └╠╣╠ ┴╫╛ю└╓└╕╕щ ╕о┼╧
			if(!pUser->m_bPkStatus) continue;				// └╧╜├└√ ─л┐└░б ╛╞┤╧╕щ ░°░▌└╠ ╛╚╡╚┤┘.

			if(m_dwGuild > 0)
			{
				if(m_tGuildWar == GUILD_WARRING && pUser->m_tGuildWar == GUILD_WARRING)
				{												
					if(pUser->m_dwGuild == m_dwGuild)  return;
				}

				if(m_tFortressWar == GUILD_WARRING && pUser->m_tFortressWar == GUILD_WARRING)
				{												// ▒ц╡х└№└╧╢з └╧╜├└√ ─л┐└┤┬ ░░└║▒ц╡х┐°┐б░╘┤┬ ╣л╜├
					if(pUser->m_dwGuild == m_dwGuild)  return;
				}																			
			}

			nDamage = (int)((double)damage *  ((double)m_sMagicVOL / (m_sMagicVOL + pUser->m_sMagicVOL + pUser->m_DynamicUserData[MAGIC_PSI_RESIST_UP] + \
				(int)((double)pUser->m_DynamicEBodyData[EBODY_PSI_RESIST_UP] / 100) \
				)));
			nDamage = (int)((double)nDamage/2 + 0.5);	// ╡е╣╠┴Ў└╟ 50%╕╕ ╡щ╛ю░г┤┘.

			pUser->SetDamage(nDamage);
			if(pUser->m_sHP > 0)		// ╗ь└║ ░ц┐ь └№▒т╡е╣╠┴Ў ├▀░б
			{
				//				pUser->SetColdDamage();
			}
			else if(pUser->m_lDeadUsed == 1)
			{
				int tempRank = m_sCityRank + CITY_RANK_INTERVAL;
				IsChangeCityRank(m_sCityRank, pUser);
				pUser->GetLevelDownExp(USER_PK, tempRank, FALSE,m_strUserID);			// ░ц╟ш─б┐═ ▒╫┐▄ ║п╚н╖о╕ж ╣▌┐╡╟╤┤┘.
			}
		}
		else if(nTarget >= NPC_BAND)				// NPC
		{
			pNpc = GetNpc(nTarget - NPC_BAND);				// NPC Point ╕ж ╛Є┤┬┤┘.
			if(pNpc == NULL) continue;					// └▀╕°╡╚ NPC └╠╕щ ╕о┼╧
			if(pNpc->m_NpcState == NPC_DEAD || pNpc->m_tNpcType != NPCTYPE_MONSTER) continue;	// NPC ░б └╠╣╠ ┴╫╛ю └╓└╕╕щ ╕о┼╧
			if(pNpc->m_sHP <= 0) continue;
			if(pNpc->m_byAX == 0 && pNpc->m_byAZ == 0 && pNpc->m_tNpcType == 0) continue;			// ░°░▌┤╔╖┬└╠ ╛°┤┬ ╕є╜║┼═(╟Ў└ч ┐°╝о)└║ └╧╣▌ ░°░▌└╠ ╡╟┴Ў ╛╩┤┬┤┘.

			nDamage = (int)(damage *  ((double)m_sMagicVOL / (m_sMagicVOL + pNpc->m_sVOL)));
			nDamage = (int)((double)nDamage/2 + 0.5);	// ╡е╣╠┴Ў└╟ 50%╕╕ ╡щ╛ю░г┤┘.

			//			if(pNpc->SetDamage(nDamage, m_strUserID, m_uid + USER_BAND, m_pCom) == FALSE)
			if(pNpc->SetDamage(nDamage, m_uid + USER_BAND, m_pCom) == FALSE)
			{
				if(m_tGuildHouseWar == GUILD_WARRING && pNpc->m_NpcVirtualState == NPC_WAIT)
				{
					CheckGuildHouseWarEnd();
				}

				pNpc->SendExpToUserList(m_pCom); // ░ц╟ш─б ║╨╣ш!!
				int diffLevel = abs(m_sLevel - pNpc->m_byClassLevel);
				if(diffLevel <= o_yehuoini[0]->djxz || pNpc->m_sEvent != 0 )
				{
					if (m_isDoubleBAOLV  > 0 || g_sanBaoLv == TRUE || m_dwGuarDianTianShi > 0)
						pNpc->SendDead(m_pCom,1,TRUE);
					else
						pNpc->SendDead(m_pCom);
				}
				else
				{
					pNpc->SendDead(m_pCom,0);
					SendSystemMsg("─·║═╡▒╟░╣╓╬я╡╚╝╢╧р▓ю20,├╗╙╨╚╬║╬╦∙╡├", SYSTEM_ERROR,TO_ME);
				}
			/*if (m_dwShaGuai >= 3000 ) 
			{
	            SendSystemMsg("─·╜ё╚╒╔▒╣╓╩¤┴┐╥╤┬·,┤Є╣╓╬▐╖и╗ё╡├╚╬║╬╛н╤щ╓╡", SYSTEM_ERROR,TO_ME);
			}  */
		 //if(diffLevel <= o_yehuoini[0]->djxz  &&  pNpc->m_tNpcType == 0 )
			//   {
			//	   CString strMsg;
			//	   if (m_dwShaGuai == 1000)
			//	   {
			//		   SetUserToMagicUser();
			//           CheckMagicItemMove();
			//           UpdateUserData();
			//		   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 5 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
			//		   m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
			//	   }else if (m_dwShaGuai == 2000)
			//	   {
			//		    SetUserToMagicUser();
			//           CheckMagicItemMove();
			//           UpdateUserData();
			//		   
			//		   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 10 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
			//		  m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
			//	   }else if (m_dwShaGuai == 3000)
			//	   {
			//		    SetUserToMagicUser();
			//           CheckMagicItemMove();
			//           UpdateUserData();
			//		    
			//		   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 15 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
			//		m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
			//	   }else if (m_dwShaGuai == 4000)
			//	   {
			//		   SetUserToMagicUser();
			//           CheckMagicItemMove();
			//           UpdateUserData();
			//		    
			//		   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 20 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
			//		m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
			//	   }else if (m_dwShaGuai == 5000)
			//	   {
			//		    SetUserToMagicUser();
			//           CheckMagicItemMove();
			//           UpdateUserData();
			//		   
			//		   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 30 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
			//		m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
			//	   }
			//   }

			
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

				if(diffLevel < 40)
				{
					m_iCityValue=m_iCityValue+250;
					m_dwShaGuai=m_dwShaGuai+1;
					GetCityRank();
					CheckMaxValue(m_dwXP, 1);		
					SendXP();
					SendUserStatusSkill();
				}
			}
			else									// ╗ь└║ ░ц┐ь └№▒т╡е╣╠┴Ў ├▀░б
			{
				//				pNpc->SetColdDamage();
			}
			SendDamageNum(1,nTarget,nDamage);
			SendNpcHP(nTarget,pNpc->m_sHP);		
		}
	}
	return ;
}


//┴ь╚б│ф╓╡╜с╣√╬к╬я╞╖└р
/*void USER::OnlineExchange(int nErrorSay,int nSucSay)
{
	DWORD dwCuttime = GetTickCount();
	static DWORD dwLastTime = 0;
	if(dwCuttime - dwLastTime<5000)
	{
		return ;
	}
	dwLastTime = dwCuttime;
	//╗ё╚б╩╟╖ё┤ц╘┌╬┤╢╥╗╗╡─╠ї─┐
	//╢╥╗╗▒р┬ы
	int exCount = 0;
	typedef struct _Ex_Code_Array_
	{
		int nSID;
		int nrmbCode;
	}Ex_Code_Array;
	Ex_Code_Array exCodeArray[10] = {{0,0}};
	CDatabase*	pDB;
	SQLHSTMT	hstmt = NULL;
	TCHAR		szSQL[1024];	
	SQLRETURN	retcode;

	int	nDBIndex;
	int	i;
	::ZeroMemory( szSQL, sizeof(szSQL) );

	nDBIndex = 0;

	pDB = g_DB[m_iModSid].GetDB( nDBIndex );
	if( !pDB ) 
		return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS ) 
		return;

	_sntprintf(szSQL, sizeof(szSQL), TEXT( "select sid,rmbpoint from rmbshop where struserid='%s' and state=0" ),m_strUserID );
	retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, sizeof(szSQL));

	if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
	{
		SQLINTEGER		iSID;
		SQLINTEGER		nCode;
		SQLINTEGER		ivd;

		while (TRUE)
		{
			retcode = SQLFetch(hstmt);

			if (retcode ==SQL_SUCCESS || retcode ==SQL_SUCCESS_WITH_INFO)
			{
				i = 1;

				SQLGetData( hstmt, i++, SQL_C_SLONG, &iSID, sizeof(iSID), &ivd );
				SQLGetData( hstmt, i++, SQL_C_SLONG, &nCode, sizeof(nCode), &ivd );
                //╫ю╢р╓╗╢╥╗╗╩о╧ю
				exCodeArray[exCount].nSID = iSID;
				exCodeArray[exCount].nrmbCode = nCode;

				if(exCount++>=10)
					break;
			}
			else break;
		}	
	}
	else
	{
		DisplayErrorMsg(hstmt);
		retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		g_DB[m_iModSid].ReleaseDB(nDBIndex);
		return;
	}

	retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(nDBIndex);

	//┼╨╢╧╕№╨┬╠ї─┐╩╟╖ё║╧╖и
	if(exCount<=0)
	{
		SendNpcSay(0,nErrorSay);
		return ;
	}
	int nRmbCount = g_arOnlineRMBShopTable.GetSize();
	int nPos=0;
	for(i = 0;i<exCount;i++)
	{
		//┼╨╢╧─▄╣╗╢╥╗╗
		for( nPos = 0;nPos<nRmbCount;nPos++)
		{
			if(exCodeArray[i].nrmbCode == g_arOnlineRMBShopTable[nPos]->m_rmbCode)
			{
				break;
			}
		}
		if(nPos>=nRmbCount)
			return ;
		//╕№╨┬╢╥╗╗╠ї─┐
		::ZeroMemory( szSQL, sizeof(szSQL) );
		nDBIndex = 0;
		pDB = g_DB[m_iModSid].GetDB( nDBIndex );
		if( !pDB ) 
			return;

		retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
		if( retcode != SQL_SUCCESS ) 
			return;

		_sntprintf(szSQL, sizeof(szSQL), TEXT( "update  rmbshop set state=1 where struserid='%s' and sid=%d" ),m_strUserID,exCodeArray[i].nSID );
		retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, sizeof(szSQL));

		if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
		{
		}
		else
		{
			DisplayErrorMsg(hstmt);
			retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			g_DB[m_iModSid].ReleaseDB(nDBIndex);
			return;
		}

		retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

		g_DB[m_iModSid].ReleaseDB(nDBIndex);

		//╢╥╗╗╬я╞╖│╔╣ж
		GiveAllItem(g_arOnlineRMBShopTable[nPos]->m_iSid,g_arOnlineRMBShopTable[nPos]->m_iNum,g_arOnlineRMBShopTable[nPos]->m_upgrade,
			g_arOnlineRMBShopTable[nPos]->m_tIQ,g_arOnlineRMBShopTable[nPos]->m_sx1,g_arOnlineRMBShopTable[nPos]->m_sx2,
			g_arOnlineRMBShopTable[nPos]->m_sx3,g_arOnlineRMBShopTable[nPos]->m_sx4);
       
		CString strMsg1 = _T("");
		strMsg1.Format( "─у│╔╣ж┴ь╚б┴╦ %s ",g_arOnlineRMBShopTable[nPos]->m_iText);
		CBufferEx	TempBuf,TempBuf1;
		TempBuf.Add((byte)CHAT_RESULT);
		TempBuf.Add((byte)1);
		TempBuf.Add(WHISPER_CHAT);
		TempBuf.Add((int)0x01);
		TempBuf.Add("GM", _tcslen("GM"));
		TempBuf.Add(strMsg1.GetBuffer(0), strMsg1.GetLength());
		Send(TempBuf, TempBuf.GetLength());
	}
	return ;
}*/
//┴ь╚б│ф╓╡╜с╣√╬к╛Ў╒╜▒╥/╘к▒ж...
void USER::OnlineExchange(int nErrorSay,int nSucSay)
{
	DWORD dwCuttime = GetTickCount();
	static DWORD dwLastTime = 0;
	if(dwCuttime - dwLastTime<5000)
	{
		return ;
	}
	if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
	if(m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
	if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
	if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
	if( m_bZoneLogOut ) return;
	if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
	dwLastTime = dwCuttime;
	int iSlot = -1;
	iSlot = GetEmptySlot(INVENTORY_SLOT);
	if ( iSlot == -1)
	{
		SendNpcSay( NULL, 9000);
        return ;
	}
	//╗ё╚б╩╟╖ё┤ц╘┌╬┤╢╥╗╗╡─╠ї─┐
	//╢╥╗╗▒р┬ы
	int exCount = 0;
	typedef struct _Ex_Code_Array_
	{
		int nSID;
		int nrmbPoint;
	}Ex_Code_Array;
	Ex_Code_Array exCodeArray[10] = {{0,0}};
	CDatabase*	pDB;
	SQLHSTMT	hstmt = NULL;
	TCHAR		szSQL[1024];	
	SQLRETURN	retcode;

	int	nDBIndex;
	int	i;
	::ZeroMemory( szSQL, sizeof(szSQL) );

	nDBIndex = 0;

	pDB = g_DB[m_iModSid].GetDB( nDBIndex );
	if( !pDB ) 
		return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS ) 
		return;
   //╜╟╔л┴ь╚б
//	_sntprintf(szSQL, sizeof(szSQL), TEXT( "select sid,rmbpoint from rmbshop where struserid='%s' and state=0" ),m_strUserID);
    //╒╩╗з┴ь╚б
	_sntprintf(szSQL, sizeof(szSQL), TEXT( "select sid,rmbpoint from rmbshop where struserid='%s' and state=0" ),m_strAccount);
	retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, sizeof(szSQL));

	if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
	{
		SQLINTEGER		iSID;
		SQLINTEGER		nCode;
		SQLINTEGER		ivd;

		while (TRUE)
		{
			retcode = SQLFetch(hstmt);

			if (retcode ==SQL_SUCCESS || retcode ==SQL_SUCCESS_WITH_INFO)
			{
				i = 1;

				SQLGetData( hstmt, i++, SQL_C_SLONG, &iSID, sizeof(iSID), &ivd );
				SQLGetData( hstmt, i++, SQL_C_SLONG, &nCode, sizeof(nCode), &ivd );

				//╫ю╢р╓╗╢╥╗╗╩о╧ю
				exCodeArray[exCount].nSID = iSID;
				exCodeArray[exCount].nrmbPoint = nCode;

				if(exCount++>=10)
					break;
			}
			else break;
		}	
	}
	else
	{
		DisplayErrorMsg(hstmt);
		retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		g_DB[m_iModSid].ReleaseDB(nDBIndex);
		return;
	}

	retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(nDBIndex);

	//┼╨╢╧╕№╨┬╠ї─┐╩╟╖ё║╧╖и
	if(exCount<=0)
	{
		SendNpcSay(0,nErrorSay);
		return ;
	}
	int PointCount = 0;
	int nPos=0;
	for(i = 0;i<exCount;i++)
	{
		//╕№╨┬╢╥╗╗╠ї─┐
		::ZeroMemory( szSQL, sizeof(szSQL) );
		nDBIndex = 0;
		pDB = g_DB[m_iModSid].GetDB( nDBIndex );
		if( !pDB ) 
			return;

		retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
		if( retcode != SQL_SUCCESS ) 
			return;
        //╜╟╔л┴ь╚б
	//	_sntprintf(szSQL, sizeof(szSQL), TEXT( "update  rmbshop set state=1 where struserid='%s' and sid=%d" ),m_strUserID,exCodeArray[i].nSID );
		//╒╩╗з┴ь╚б
		_sntprintf(szSQL, sizeof(szSQL), TEXT( "update  rmbshop set state=1 where struserid='%s' and sid=%d" ),m_strAccount,exCodeArray[i].nSID );
		retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, sizeof(szSQL));

		if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
		{
		}
		else
		{
			DisplayErrorMsg(hstmt);
			retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			g_DB[m_iModSid].ReleaseDB(nDBIndex);
			return;
		}

		retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);

		g_DB[m_iModSid].ReleaseDB(nDBIndex);

		PointCount+=exCodeArray[i].nrmbPoint;
		//CString strMsg1 = _T("");
		//strMsg1.Format( "─у│╔╣ж╢╥╗╗┴╦%d",exCodeArray[i].nrmbPoint);
		//CBufferEx	TempBuf,TempBuf1;
		//TempBuf.Add((byte)CHAT_RESULT);
		//TempBuf.Add((byte)1);
		//TempBuf.Add(WHISPER_CHAT);
		//TempBuf.Add((int)0x01);
		//TempBuf.Add("│ф╓╡", _tcslen("│ф╓╡"));
		//TempBuf.Add(strMsg1.GetBuffer(0), strMsg1.GetLength());
		//Send(TempBuf, TempBuf.GetLength());
	}
	TCHAR szCount[40]="";
	TCHAR szVal[40]="";
	wsprintf(szCount,"%d",exCount);
	wsprintf(szVal,"%d",PointCount);
//	GiveMoney(PointCount);
//	GiveShopPingDN(PointCount);//┴ь╚б╡╜╘к▒ж
//	SendUserStatusSkill();//╧╘╩╛╡╜╩Ї╨╘╘к▒ж╩¤┴┐
	//GiveDN(PointCount);//┴ь╚б╡╜JZB
	if( PointCount < 32000 )
	{
	  GiveItemAll( 724,PointCount ,0,0,0,0,0,0,0,0,0,0,0 );
	
	}else if ( PointCount > 32000)
	{
		int zhuanhuan = (PointCount - 30000)/100;
		GiveItemAll( 724,30000 ,0,0,0,0,0,0,0,0,0,0,0 );
		GiveItemAll( 725,zhuanhuan ,0,0,0,0,0,0,0,0,0,0,0 );
        SendEventMsg("▒╛┤╬│ф╓╡▓┐╖╓╫к╗╗╬к[╜Ё▒ъ╓╛]╙╥╝№╝┤┐╔╫к╗╗!");
		
    }
	m_dwShopPingDN = 1;
	//│ф╓╡┴ь╚б╠с╩╛
	CString strMsg = _T("");
	strMsg.Format("═ц╝╥[ %s ]│ф╓╡╗ё╡├[ %d ]▒ъ╓╛",m_strUserID,PointCount);
	SendSystemMsg(strMsg.GetBuffer(strMsg.GetLength()),SYSTEM_ANNOUNCE,TO_ALL);
	////////////////////////////////////////// ▒ъ╓╛╝╟┬╝
	CString str = _T("");
	 SYSTEMTIME st;
			CString strDate;
			GetLocalTime(&st);
			strDate.Format("%d-%d-%d %d:%d",st.wYear,st.wMonth,st.wDay ,st.wHour,st.wMinute);
            str.Format("[%s]═ц╝╥ [%s]┴ь╚б▒ъ╓╛ %d  \r\n",strDate,m_strUserID,PointCount);
			EnterCriticalSection( &m_CS_FileWrite );
			g_fpSpeedHack1.Write( str, str.GetLength() );
			LeaveCriticalSection( &m_CS_FileWrite);
	/////////////////////////////////////////////////////
	SendMoneyChanged();
	UpdateUserItemDN();
	SendBoCaiAddStr(nSucSay,szCount,szVal,"");
	
/*
	TCHAR strOP[1024]; ZeroMemory(strOP,sizeof(strOP));//╒╩╗з┴ь╚б╩▒╨ш╥к┤ц┤в┴ь╚б╝╟┬╝
	SYSTEMTIME time;
	GetLocalTime(&time);
	sprintf(strOP,"%d-%d-%d %d:%d╖╓ ┴ь╚б┴╦╒╩╗з%s│ф╓╡",time.wYear,time.wMonth,time.wDay ,time.wHour,time.wMinute,m_strAccount);
	WriteOpratorLog(strOP,CHAT_LOG);
*/
	//CString strMsg1 = _T("");
	//strMsg1.Format( "─у│╔╣ж╢╥╗╗┴╦%d",exCodeArray[i].nrmbPoint);
	//CBufferEx	TempBuf,TempBuf1;
	//TempBuf.Add((byte)CHAT_RESULT);
	//TempBuf.Add((byte)1);
	//TempBuf.Add(WHISPER_CHAT);
	//TempBuf.Add((int)0x01);
	//TempBuf.Add("│ф╓╡", _tcslen("│ф╓╡"));
	//TempBuf.Add(strMsg1.GetBuffer(0), strMsg1.GetLength());
	//Send(TempBuf, TempBuf.GetLength());

	return ;
} 
void USER::SendBoCaiAddStr(int npcsay,TCHAR *pBase,TCHAR *szResult,TCHAR *szLoster)
{
	CBufferEx TempBuf, TempSayBuf;
	TempSayBuf.AddString( pBase );
	TempSayBuf.AddString( szResult );
	TempSayBuf.AddString( szLoster );

	TempBuf.Add(CLIENT_EVENT_SAY);
	TempBuf.Add((BYTE)SUCCESS);
	TempBuf.Add((short)npcsay);
	TempBuf.Add((BYTE)0x03);
	TempBuf.AddData(TempSayBuf, TempSayBuf.GetLength());
	Send(TempBuf, TempBuf.GetLength());
	return ;
}	
void USER::ChangeAttributeItem(int srcSid,int srcCount,int srcIQ,int src1,int src2,int src3,int src4,
							   int dstSid,int dstCount,int dstIQ,int dst1,int dst2,int dst3,int dst4,int dst5)
{
	//╔╛│¤╬я╞╖
	if(srcSid < 0 || srcSid >= g_arItemTable.GetSize())
		return;
	//╔╛│¤╬я╞╖
	if(dstSid < 0 || dstSid >= g_arItemTable.GetSize())
		return;
	if(srcCount<=0 || dstCount<=0)
		return ;
	int n,i,j;
	int nCount= 0,nSolt[24] = {0};
	BOOL bTogether  = FALSE;
	for(i = EQUIP_ITEM_NUM; i < EQUIP_ITEM_NUM + INVENTORY_NUM; i++)
	{
		if(m_UserItem[i].sSid == srcSid)  //id╧р═м
		{
			//╩Ї╨╘╧р═м
			if(m_UserItem[i].tMagic[0] == src1
				&&m_UserItem[i].tMagic[1] == src2
				&&m_UserItem[i].tMagic[2] == src3
				&&m_UserItem[i].tMagic[3] == src4
				&&m_UserItem[i].tIQ == dstIQ)
			{ 
				nSolt[nCount++] = i;
				if(m_UserItem[i].sCount > 1)
				{
					bTogether = TRUE;
					nCount = m_UserItem[i].sCount;
					break;
				}
			}
		}
	}
	//┼╨╢╧╩¤┴┐╩╟╖ё╢╘
	if(nCount < srcCount)
		return ;
	if(m_dwDN < 1000000)
	{
	//	SendSystemMsg("╟о▓╗╣╗!╕°░╫яп╫в╚ы╩Ї╨╘╨ш╗и╖╤100═Є!", SYSTEM_ERROR, TO_ME);
        SendEventMsg("╟о▓╗╣╗!╕°░╫яп╫в╚ы╩Ї╨╘╨ш╗и╖╤100═Є!");
		return ;		// ░°░▌┐ы╛ў▒╫╖╣└╠╡х║ё┐ы║╕┤┘└█└╕╕щ
	}
	if( m_dwDN <= 1000000 )
		m_dwDN = 0;
	else
		m_dwDN = m_dwDN - 1000000;
	//┤Є░№╬я╞╖
	if(bTogether)
	{
		int iSlot = nSolt[0];
		CBufferEx TempBuf;
		ItemList	TempItem;
		ReSetItemSlot(&TempItem);

		TempItem.sSid		= g_arItemTable[srcSid]->m_sSid;
		TempItem.sBullNum	= g_arItemTable[srcSid]->m_sBullNum;
		TempItem.sDuration	= g_arItemTable[srcSid]->m_sDuration;
		for(i =0; i < MAGIC_NUM; i++) 
			TempItem.tMagic[i] = 0;
		TempItem.tIQ = NORMAL_ITEM;


		if((m_UserItem[iSlot].sCount - srcCount) <= 0)				// ┤┘└╜│╗└╬║е╕ж╗й┴╪┤┘.		
		{														// ─№╛╞└╠┼█║п╚н░б└╓└╕╕щ		
			ReSetItemSlot(&m_UserItem[iSlot]);
		}
		else
		{
			m_UserItem[iSlot].sCount -= srcCount;
		}

		int iWeight = srcCount * g_arItemTable[srcSid]->m_byWeight;

		m_iCurWeight -= iWeight;
		if(m_iCurWeight < 0) 
			m_iCurWeight = 0;


		TempBuf.Add(ITEM_GIVE_RESULT);
		TempBuf.Add((BYTE)0x01);
		TempBuf.Add((BYTE)iSlot);
		TempBuf.Add(m_UserItem[iSlot].sLevel);
		TempBuf.Add(m_UserItem[iSlot].sSid);
		TempBuf.Add(m_UserItem[iSlot].sDuration);
		TempBuf.Add(m_UserItem[iSlot].sBullNum);
		TempBuf.Add(m_UserItem[iSlot].sCount);
		for(j = 0; j < MAGIC_NUM; j++) 
			TempBuf.Add(m_UserItem[iSlot].tMagic[j]);

		TempBuf.Add(m_UserItem[iSlot].tIQ);

		Send(TempBuf, TempBuf.GetLength());
	}else
	{
		for(n = 0;n<srcCount;n++)
		{
			int iSlot = nSolt[n];
			CBufferEx TempBuf;
			ItemList	TempItem;
			ReSetItemSlot(&TempItem);

			TempItem.sSid		= g_arItemTable[srcSid]->m_sSid;
			TempItem.sBullNum	= g_arItemTable[srcSid]->m_sBullNum;
			TempItem.sDuration	= g_arItemTable[srcSid]->m_sDuration;
			for(i =0; i < MAGIC_NUM; i++) 
				TempItem.tMagic[i] = 0;
			TempItem.tIQ = NORMAL_ITEM;

			if((m_UserItem[iSlot].sCount - 1) <= 0)				// ┤┘└╜│╗└╬║е╕ж╗й┴╪┤┘.		
			{														// ─№╛╞└╠┼█║п╚н░б└╓└╕╕щ		
				ReSetItemSlot(&m_UserItem[iSlot]);
			}
			else m_UserItem[iSlot].sCount -= srcCount;

			int iWeight = srcCount * g_arItemTable[srcSid]->m_byWeight;

			m_iCurWeight -= iWeight;
			if(m_iCurWeight < 0) 
				m_iCurWeight = 0;


			TempBuf.Add(ITEM_GIVE_RESULT);
			TempBuf.Add((BYTE)0x01);
			TempBuf.Add((BYTE)iSlot);
			TempBuf.Add(m_UserItem[iSlot].sLevel);
			TempBuf.Add(m_UserItem[iSlot].sSid);
			TempBuf.Add(m_UserItem[iSlot].sDuration);
			TempBuf.Add(m_UserItem[iSlot].sBullNum);
			TempBuf.Add(m_UserItem[iSlot].sCount);
			for(j = 0; j < MAGIC_NUM; j++) 
				TempBuf.Add(m_UserItem[iSlot].tMagic[j]);

			TempBuf.Add(m_UserItem[iSlot].tIQ);

			Send(TempBuf, TempBuf.GetLength());
		}
	}
	//╕°╬я╞╖
	GiveAllItem(dstSid,dstCount,0,dstIQ,dst1,dst2,dst3,dst4,0);

	SendMoneyChanged();
	SendSystemMsg("╫в╚ы│╔╣ж", SYSTEM_ERROR, TO_ME);
}
/////////////////////////////////////////////////////////////////////////////////
//╚║╣е╝╝─▄---
int USER::GetQunGongAttack(int x, int y, int dDamage)	
{
	int sx = m_curx / 10;		//╖╢╬з
	int sy = m_cury / 10;

	int min_x = (sx-1)*10; if( min_x < 0 ) min_x = 0;
	int max_x = (sx+2)*10;
	int min_y = (sy-1)*10; if( min_y < 0 ) min_y = 0;
	int max_y = (sy+2)*10;
	int zzzz=m_curz;
	MAP* pMap = g_zone[m_ZoneIndex];
	if( !pMap ) return -1;

	if( max_x >= pMap->m_sizeMap.cx ) max_x = pMap->m_sizeMap.cx - 1;
	if( max_y >= pMap->m_sizeMap.cy ) max_y = pMap->m_sizeMap.cy - 1;

	int nTarget;
	int num = 0; //▒ъ╩╢╙╨╢р╔┘╕Ў╣╓╬я

	CNpc* pNpc = NULL;
	int radom = myrand(50,200);
	dDamage = dDamage + radom; //╦ц╗·╘Ў╝╙╣е╗ў
	for( int i = min_x; i < max_x; i++ )
	{
		for( int j = min_y; j < max_y; j++ )
		{				
			nTarget = pMap->m_pMap[i][j].m_lUser;
			if(nTarget >= NPC_BAND)
			{

				pNpc = GetNpc(nTarget - NPC_BAND);
				if(pNpc->m_byType == 0)
				{
					num++; 
					switch(m_byClass)		//┼╨╢╧╓░╥╡
					{
					case 0:
						SendPsiAttackResult(SUCCESS, nTarget, (BYTE)212);   //╚н╩ж╩╣╙├35▒р║┼╨з╣√
						break;
					case 1:
						SendPsiAttackResult(SUCCESS, nTarget, (BYTE)8);   //╖и╩ж╩╣╙├122▒р║┼╨з╣√
						break;
					case 2:
						SendPsiAttackResult(SUCCESS, nTarget, (BYTE)36);   //╜г╩ж╩╣╙├36▒р║┼╨з╣√
						break;
					case 3:
						SendPsiAttackResult(SUCCESS, nTarget, (BYTE)190);   //╟╣╩ж╩╣╙├190▒р║┼╨з╣√
						break;
					case 4:
						SendPsiAttackResult(SUCCESS, nTarget, (BYTE)41);   //╓┘▓├╩╣╙├122▒р║┼╨з╣√
						break;
					}
					short sOldNpcHP = pNpc->m_sHP;

					if(pNpc->SetDamage(dDamage, m_uid + USER_BAND, m_pCom) == FALSE)
					{
						pNpc->SendExpToUserList(m_pCom); 
						int diffLevel = abs(m_sLevel - pNpc->m_byClassLevel); //╣╓╬я╡╚╝╢╧р▓ю30╝╢├╗╛н╤щ
						if(diffLevel <= o_yehuoini[0]->djxz || pNpc->m_sEvent != 0 )
						{
							if (m_isDoubleBAOLV  > 0 || g_sanBaoLv == TRUE || m_dwGuarDianTianShi > 0)
								pNpc->SendDead(m_pCom,1,TRUE);
							else
								pNpc->SendDead(m_pCom);
						}
						else
						{
							pNpc->SendDead(m_pCom,0);
							SendSystemMsg("─·║═╡▒╟░╣╓╬я╡╚╝╢╧р▓ю20,├╗╙╨╚╬║╬╦∙╡├", SYSTEM_ERROR,TO_ME);
						}
			/*if (m_dwShaGuai >= 3000 ) 
			{
	            SendSystemMsg("─·╜ё╚╒╔▒╣╓╩¤┴┐╥╤┬·,┤Є╣╓╬▐╖и╗ё╡├╚╬║╬╛н╤щ╓╡", SYSTEM_ERROR,TO_ME);
			}  */
			 //if(diffLevel <= o_yehuoini[0]->djxz  &&  pNpc->m_tNpcType == 0 )
			 //  {
				//   CString strMsg;
				//   if (m_dwShaGuai == 1000)
				//   {
				//	   SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 5 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	   m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 2000)
				//   {
				//	    SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	   
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 10 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	  m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 3000)
				//   {
				//	    SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	    
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 15 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 4000)
				//   {
				//	   SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	    
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 20 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }else if (m_dwShaGuai == 5000)
				//   {
				//	    SetUserToMagicUser();
			 //          CheckMagicItemMove();
			 //          UpdateUserData();
				//	   
				//	   strMsg.Format("═ц╝╥б║ %s б╗╔▒╣╓ %d ╜ё╚╒╦∙╙╨╩Ї╨╘╡у╔╧╔¤ 30 !", this->m_strUserID,m_dwShaGuai);//╣л╕ц╠с╩╛
				//	m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
				//   }
			 //  }

			
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

						if(m_tGuildHouseWar == GUILD_WARRING && pNpc->m_NpcVirtualState == NPC_WAIT)
						{
							CheckGuildHouseWarEnd();
						}
						else
						{
							
							if(diffLevel < 40)
							{
								CheckMaxValue(m_dwXP, 1);		
								SendXP();			//╖в╦═╛н╤щ
							}
						}
					}
				    SendDamageNum(1,nTarget,(short)dDamage);	//╖в╦═╔╦║ж╓╡
					SendNpcHP(nTarget,pNpc->m_sHP);				//╖в╦═╤к┴┐
				}//if
			}
		}
	}//for
	return num;
}
//│ш╬я╨┼╧в
void USER::GetBabySetting()										
{
	if(m_tBabyCall !=1)
		return ;
	if(m_sBabyLevel>20)
		return ;
	switch(m_sBabyID)
	{
	case 256://┴·
	case 512:
	case 768:
		{
			int attDown = m_sBabyLevel*3;
			if(attDown>60)
				attDown = 60;
			m_DynamicUserData[MAGIC_FINALLY_ATTACK_UP]+= attDown;
		//	m_DynamicMagicItem[5]+= attDown;
			break;
		}
	case 257://╩и
	case 513:
	case 769:
		{
			int hpAdd = m_sBabyLevel*15;
			if(hpAdd>300)
				hpAdd = 300;
			m_DynamicUserData[MAGIC_MAX_HP_UP]+= hpAdd;
			break; 
		}
	default:
		return ;
	}
	//╝╝─▄
	/*
	1 ╗∙▒╛╝╝─▄╬╣╤° 
	2 1╜╫╢╬╝╝─▄ ╔·├№╗╓╕┤ 
	3 1╜╫╢╬╝╝─▄ ╫ю╓╒╔╦║ж╝ї╔┘10 
	4 2╜╫╢╬╝╝─▄ ╥й╦о▒ф╗╗╚л╧╡┴╨
	5 2╜╫╢╬╝╝─▄ ╬¤╞м▒ф╗╗╚л╧╡┴╨
	6 2╜╫╢╬╝╝─▄ ╓┬├№╓о┤╧╕ё╢╖╝╥
	7 2╜╫╢╬╝╝─▄ ╔·├№╓о╣т╕ё░ы╝╥
	8 2╜╫╢╬╝╝─▄ │м╝╢ю╕╞°
	9 2╜╫╢╬╝╝─▄ │╓╨°─з╖и╩ж
	10 2╜╫╢╬╝╝─▄ ╔·├№╓о╣т ─з╖и╩ж
	11 2╜╫╢╬╝╝─▄ ┴щ├Ї╓о╗█ ─з╖и╩ж
	12 2╜╫╢╬╝╝─▄ ╔·├№╓о╣т ╜г╬ф╩┐
	13 2╜╫╢╬╝╝─▄ ┐╣│т ╜г╬ф╩┐
	14 2╜╫╢╬╝╝─▄ ▒г╗дю╕╞° ╜г╬ф╩┐
	15 2╜╫╢╬╝╝─▄ ╔·├№╓о╣т ╟╣╨╡╩ж
	16 2╜╫╢╬╝╝─▄ ┐╣│т ╟╣╨╡╩ж
	17 2╜╫╢╬╝╝─▄ ┴щ├Ї╓о╗█ ╟╣╨╡╩ж
	18 3╜╫╢╬╝╝─▄ ╦∙╙╨─▄┴ж╓╡╘Ў╝╙3
	19 3╜╫╢╬╝╝─▄ ╦∙╙╨╝╝─▄╘Ў╝╙1
	*/
	for(int i = 1;i<4;i++)        /////│ш╬я╩Ї╨╘
	{
		if(m_tBabySkill[i] == 0)
			continue;
		switch(m_tBabySkill[i])
		{
			case 3:
			//	m_DynamicMagicItem[5]+= 10;
				m_DynamicUserData[MAGIC_FINALLY_ATTACK_DOWN]+= 10;
				break;
			/*case 6://╓┬├№╓о┤╧╕ё╢╖╝╥
				m_UserSkill_[0].tLevel++;
				break;
			case 7://╔·├№╓о╣т╕ё░ы╝╥
				m_UserSkill_[1].tLevel++;
				break;
			case 8://│м╝╢ю╕╞°
				m_UserSkill_[2].tLevel++;
				break;
			case 9://│╓╨°─з╖и╩ж
				m_UserSkill_[3].tLevel++;
				break;
			case 10://╔·├№╓о╣т ─з╖и╩ж
				m_UserSkill_[4].tLevel++;
				break;	
			case 11://┴щ├Ї╓о╗█ ─з╖и╩ж
				m_UserSkill_[5].tLevel++;
				break;
			case 12://╔·├№╓о╣т ╜г╬ф╩┐
				m_UserSkill_[6].tLevel++;
				break;
			case 13://┐╣│т ╜г╬ф╩┐
				//m_UserSkill_[6].tLevel++;
				break;
			case 14://▒г╗дю╕╞° ╜г╬ф╩┐
				m_UserSkill_[8].tLevel++;
				break;
			case 15://╔·├№╓о╣т ╟╣╨╡╩ж
				m_UserSkill_[9].tLevel++;
				break;
			case 16://┐╣│т ╟╣╨╡╩ж
				m_UserSkill_[10].tLevel++;
				break;
			case 17://┴щ├Ї╓о╗█ ╟╣╨╡╩ж
				m_UserSkill_[11].tLevel++;
				break;*/
			case 18:
				AddMagicPoint(3);
				break;
			case 19:
				m_DynamicUserData[MAGIC_ALL_SKILL_UP]+= 1;
				break;
		}
	}
}
BOOL USER::UserBabyCall(int nSolt)
{
	if(m_tBabyCall ==1)
		return FALSE;
	//100╝╢▓┼┐╔╥╘╒┘╗╜
	if(m_sLevel<110)
	{
		SendEventMsg("110╝╢╥╘╔╧▓┼┐╔╒┘╗╜│ш╬я!");
		return FALSE;
	}
	if(!SubInvernItemBySsid(1490))
		return FALSE;
	int nRand = myrand(1,1000);
	m_tBabyCall = 1;
	if(nRand<500)
	{
		m_sBabyID = 256;
	}else
	{
		m_sBabyID = 257;
	}
	m_sBabyLevel = 1;
	m_sBabyNormal = 0;
	m_nBabyExp = 1000;//0;//│ш╡▒╟░╛н╤щ╓╡
	m_nBabyNextLevelExp = 1000;//│ш╔¤╝╢╛н╤щ╓╡
	m_sFealty = 100;
	m_sBabyStatus = 512;
	m_sMaxHungry = 512;
	m_sHungry = 512;
	m_tBabySkill[0] = 1;
	switch(m_byClass)
	{
	case 0:
		m_tBabySkill[1] = 10;
		break;
	case 1:
		m_tBabySkill[1] = 7;
		break;
	case 2:
		m_tBabySkill[1] = 12;
		break;
	case 3:
		m_tBabySkill[1] = 15;
		break;
	case 4:
		m_tBabySkill[1] = 0;
		break;
	default:
		m_tBabySkill[1] = 0;
		break;
	}
	m_tBabySkill[1] = 3;
	m_tBabySkill[2] = 0;
	m_tBabySkill[3] = 0;
	//m_tBabySkill[2] = 18;
	//m_tBabySkill[3] = 19;
	SendMyInfo(TO_INSIGHT,INFO_MODIFY);

	SendBabyInfo();
	return TRUE;
}
void USER::UserKillBaby(int nDN,int nSucSay,int nErrSay)
{
	if(m_tBabyCall==0)
	{
		CString str;
		str.Format("─у├╗╙╨│ш╬я┐╔┬Ї!");
		SendSayAddStr(nErrSay,str.GetBuffer(0));
		return ;
	}
	m_tBabyCall = 0;
	m_sBabyNormal = 0;
	m_sBabyLevel= 0;
	m_sBabyID = 0;
	m_sFealty = 0;
	m_sHungry = 0;
	m_sMaxHungry = 0;
	m_sBabyStatus = 0;
	m_tBabySkill[0] = 0;
	m_tBabySkill[1] = 0;
	m_tBabySkill[2] = 0;
	m_tBabySkill[3] = 0;

	SendMyInfo(TO_INSIGHT,INFO_MODIFY);
	CString str;
	str.Format("═ц╝╥[ %s ]╜л╫╘╝║╡─│ш╬я┬Ї╕°╒з╥╜╘║NPCб╛└┘└Є╤╟б┐╗ё╡├[ %d ]╛Ў╒╜▒╥!",m_strUserID,nDN);
	SendSystemMsg(str.GetBuffer(0),SYSTEM_ANNOUNCE,TO_ALL);
	
	str.Format("%d",nDN);
	SendSayAddStr(nSucSay,str.GetBuffer(0));

	if(nDN<=0)
		return ;
	GiveDN(nDN);//╕°╜Ё▒╥
//	GiveShopPingDN(nDN);//╕°╘к▒ж
	//SendUserStatusSkill();	//╕№╨┬╘к▒ж╩¤┴┐.
	SendMoneyChanged();
	UpdateUserItemDN();

}
void USER::SendBabyInfo()
{
/*
	0x3e,0x20,0x01,0x00,0x13,0x01,0x00,0x00,0x01,
	0x04,0xb3,0xe8,0xce,0xef,//babyname
	0x04,0x66,0x64,0x73,0x66,//username
	0x00,0x00,				//baby level;
	0x01,0x00,0x00,0x00,
	0x0a,0x00,0x00,0x00,
	0x01,0x02,//babyid
	0x50,0x00,//╓╥│╧╢╚
	0x00,0x00,
	0x00,0x02,
	0xf4,0x01,
	0xd0,0x2a,0x4e,0x4d,
	0x00,0x00,0x00,0x00,//╝╝─▄
*/
	if(m_sBabyID <= 0 )
		return ;
	CBufferEx TempBuf2;
	TempBuf2.Add(PK_BUTTON_REQ);
	TempBuf2.Add((BYTE)0x20);
	TempBuf2.Add((BYTE)0x01);
	TempBuf2.Add((BYTE)0x00);
	TempBuf2.Add((BYTE)0x13);
	TempBuf2.Add((BYTE)0x01);
	TempBuf2.Add((BYTE)0x00);
	TempBuf2.Add((BYTE)0x00);
	TempBuf2.Add((BYTE)0x01);
	TempBuf2.Add(g_szBabyName[m_sBabyID%2],strlen(g_szBabyName[m_sBabyID%2]));
	TempBuf2.Add(m_strUserID,strlen(m_strUserID));
	TempBuf2.Add((short)m_sBabyLevel);			//baby level ┴·1╝╢╝╙3╡у╫ю╓╒╔╦║ж,╩и╫╙1╝╢╘Ў╝╙15╡у╤к
	TempBuf2.Add((int)m_nBabyExp);				//cur baby exp
	TempBuf2.Add((int)m_nBabyNextLevelExp);		//cur next level exp
	TempBuf2.Add((short)m_sBabyID);				//baby ssid
	TempBuf2.Add((short)m_sFealty);				//╓╥│╧╢╚
	TempBuf2.Add((short)m_sBabyStatus);			//╫┤╠м
	TempBuf2.Add((short)m_sMaxHungry);			//▒е╓╡╫┤╠м┴┘╜ч
	TempBuf2.Add((short)m_sHungry);				//╝в╢Ў╓╡
	//
	SYSTEMTIME systime;
	CTime cTime(2012,12,12,0,0,0);
	cTime.GetAsSystemTime(systime);//╫к│╔systime
	double dtime;
	SystemTimeToVariantTime(&systime,&dtime);

	TempBuf2.Add((BYTE)0xe0);
	TempBuf2.Add((BYTE)0x24);
	TempBuf2.Add((BYTE)0xe4);
	TempBuf2.Add((BYTE)0x40);
	//╝╝─▄
	/*
	1 ╗∙▒╛╝╝─▄╬╣╤° 
	2 1╜╫╢╬╝╝─▄ ╔·├№╗╓╕┤ 
	3 1╜╫╢╬╝╝─▄ ╫ю╓╒╔╦║ж╝ї╔┘10 
	4 2╜╫╢╬╝╝─▄ ╥й╦о▒ф╗╗╚л╧╡┴╨
	5 2╜╫╢╬╝╝─▄ ╬¤╞м▒ф╗╗╚л╧╡┴╨
	6 2╜╫╢╬╝╝─▄ ╓┬├№╓о┤╧╕ё╢╖╝╥
	7 2╜╫╢╬╝╝─▄ ╔·├№╓о╣т╕ё░ы╝╥
	8 2╜╫╢╬╝╝─▄ │м╝╢ю╕╞°
	9 2╜╫╢╬╝╝─▄ │╓╨°─з╖и╩ж
	10 2╜╫╢╬╝╝─▄ ╔·├№╓о╣т ─з╖и╩ж
	11 2╜╫╢╬╝╝─▄ ┴щ├Ї╓о╗█ ─з╖и╩ж
	12 2╜╫╢╬╝╝─▄ ╔·├№╓о╣т ╜г╬ф╩┐
	13 2╜╫╢╬╝╝─▄ ┐╣│т ╜г╬ф╩┐
	14 2╜╫╢╬╝╝─▄ ▒г╗дю╕╞° ╜г╬ф╩┐
	15 2╜╫╢╬╝╝─▄ ╔·├№╓о╣т ╟╣╨╡╩ж
	16 2╜╫╢╬╝╝─▄ ┐╣│т ╟╣╨╡╩ж
	17 2╜╫╢╬╝╝─▄ ┴щ├Ї╓о╗█ ╟╣╨╡╩ж
	18 3╜╫╢╬╝╝─▄ ╦∙╙╨─▄┴ж╓╡╘Ў╝╙3
	19 3╜╫╢╬╝╝─▄ ╦∙╙╨╝╝─▄╘Ў╝╙1
	*/
	TempBuf2.Add((BYTE)m_tBabySkill[0]);
	TempBuf2.Add((BYTE)m_tBabySkill[1]);
	TempBuf2.Add((BYTE)m_tBabySkill[2]);
	TempBuf2.Add((BYTE)m_tBabySkill[3]);

	SendInsight(TempBuf2, TempBuf2.GetLength());
}
//╬╣│ш╬я
//╬╣╤°║є╢ю═т╖в┴╦╥╗╕Ў░№
//0x77 0x1f 0x27 0x00 0x00 0x15 
void USER::GiveBabyItem(short sSolt)
{
	if(!SubInvernItemBySolt(sSolt))
		return ;
	BYTE bSuc = 0x01;
	//1498 1491╚т
	m_sHungry+=100;
	if(m_sHungry>m_sMaxHungry)
		m_sHungry = m_sMaxHungry;
/*	if((m_sFealty + 1) < 101)
        m_sFealty+=1;
	SendEventMsg("╩╣╙├╦╟┴╧.│ш╬я[╓╥│╧╢╚]╘Ў╝╙[ 1 ]");*/
	SendBabyInfo();

	CBufferEx TempBuf;
	TempBuf.Add(PK_BUTTON_REQ);
	TempBuf.Add((BYTE)0x26);
	TempBuf.Add((BYTE)bSuc);
	TempBuf.Add((short)100);
	TempBuf.Add((short)150);

	Send(TempBuf, TempBuf.GetLength());
}
void USER::BabyUpgradeLevel()
{
	if(m_sLevel<100)
		return ;
	short sOldLevel = m_sBabyLevel;

	m_sBabyLevel = (m_sLevel-100)/10 +1;

	if(m_sBabyLevel>=4)
	{
		if(m_sBabyID==256||m_sBabyID == 257)
			m_sBabyID+=256;
		m_tBabySkill[2] = 18;
	}else
	{
		if(m_sBabyID==512||m_sBabyID == 513)
			m_sBabyID-=256;

		m_tBabySkill[2] = 0;
	}

	if(m_sBabyLevel>=7)
	{
		if(m_sBabyID==512||m_sBabyID == 513)
			m_sBabyID+=256;
		m_tBabySkill[3] = 19;
	}else
	{
		if(m_sBabyID==768||m_sBabyID == 769)
			m_sBabyID-=256;
		m_tBabySkill[3] = 0;
	}

	if(sOldLevel != m_sBabyLevel)
		SendBabyInfo();
}

/////////////// ┤╠╝д
void USER::WriteUserShopLog(TCHAR *strContents)
{
	SDWORD sSLen = strlen(strContents);
	if(sSLen <= 0 || sSLen >= 500) return;
	CFile file_log;
	file_log.Open("UserShop.Log", CFile::modeWrite | CFile::modeCreate | CFile::modeNoTruncate | CFile::shareDenyNone );
	file_log.SeekToEnd();
	file_log.Write(strContents,sSLen );
	file_log.Close();
}
///////////////┤╠╝д
////////////////////////////////////////////////////////
//┐█╦░ ╨б└╢-2012-1-1
//////////////////////////////////////////
DWORD USER::SubTaxRate(DWORD dwCost,short sStoreID)		
{
	int nPos = 0;

	CGuildFortress *pGuild= GetGuildWarWin();
	if(pGuild!= NULL)
	{
		nPos = pGuild->m_tTaxRate;
	}
    
	DWORD dwTax = (dwCost * nPos)/1000;//╨▐╕─╬к╖■╬ё╞ў╟з╖╓▒╚
	DWORD dwCast= dwCost-dwTax;

	if(nPos > 0)
	{
		CString strTemp;
	    strTemp.Format( " ╫▄╝█%d,╥к╚√╦░┬╩%d,╦∙╡├╦░%d,╡╜╒╦╜Ё╢ю%d", dwCost,nPos,dwTax,dwCast);
	    SendSystemMsg( strTemp.GetBuffer(), SYSTEM_NORMAL, TO_ME);	
	}
	

	//CString strMsg1 = _T("");
	//strMsg1.Format( "─·╜╗╥╫╜Ё╢ю%d,╦░┬╩%d%% ╦∙╡├╦░╩╒%d,╩╡╝╩╜Ё╢ю%d ",dwCost,nPos,dwTax,dwCast);
	//CBufferEx	TempBuf,TempBuf1;
	//TempBuf.Add((byte)CHAT_RESULT);
	//TempBuf.Add((byte)1);
	//TempBuf.Add(WHISPER_CHAT);
	//TempBuf.Add((int)0x01);
	//TempBuf.Add("╥к╚√═┼│д", _tcslen("╥к╚√═┼│д"));
	//TempBuf.Add(strMsg1.GetBuffer(0), strMsg1.GetLength());
	//Send(TempBuf, TempBuf.GetLength());
	////
	if(pGuild!= NULL)
		AddTaxToGuildBank(dwTax,sStoreID);
	return dwCast;
}
/////////////////////////////////////////
//╦░╩╒╖в╡╜╥к╚√╛№═┼▓╓┐т-╨б└╢-2012-1-1
///////////////////////////////////////////
void USER::AddTaxToGuildBank(DWORD dwTax,short sStoreID)
{
	//╥к╚√╦∙╙╨╒▀
	CGuildFortress *pGuild= GetGuildWarWin();
	if(pGuild== NULL)
	{
		return ;
	}

	int dwVal =dwTax;

	CDatabase*	pDB;
	SQLHSTMT	hstmt = NULL;
	TCHAR		szSQL[1024];	
	SQLRETURN	retcode;

	int	nDBIndex;
	int	i;
	::ZeroMemory( szSQL, sizeof(szSQL) );

	nDBIndex = 0;

	pDB = g_DB[m_iModSid].GetDB( nDBIndex );
	if( !pDB ) 
		return;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS ) 
		return;

	_sntprintf(szSQL, sizeof(szSQL), TEXT( "select isid,idn from guild where strmastername='%s'" ),pGuild->m_strMasterName );
	retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, sizeof(szSQL));

	if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
	{
		retcode = SQLFetch(hstmt);

		if (retcode ==SQL_SUCCESS || retcode ==SQL_SUCCESS_WITH_INFO)
		{
			SQLINTEGER		iSID;
			SQLINTEGER		nCode;
			SQLINTEGER		ivd;
			i = 1;
			SQLGetData( hstmt, i++, SQL_C_SLONG, &iSID, sizeof(iSID), &ivd );
			SQLGetData( hstmt, i++, SQL_C_SLONG, &nCode, sizeof(nCode), &ivd );
			dwVal = nCode;
			CheckMaxValue(dwVal,dwTax);
		}
	}
	else
	{
		DisplayErrorMsg(hstmt);
		retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		g_DB[m_iModSid].ReleaseDB(nDBIndex);
		return;
	}

	retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[m_iModSid].ReleaseDB(nDBIndex);
	{
		pDB = g_DB[m_iModSid].GetDB( nDBIndex );
		if( !pDB ) 
			return;

		retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
		if( retcode != SQL_SUCCESS ) 
			return;
		/////////////////////▓т╩╘╨▐╕┤╖в╦═╦░╩╒│м│Ў21E╬╩╠т/////////////////////
		if(dwVal < 0 )	dwVal = 0;
		memset(szSQL,0,sizeof(szSQL));
		if(dwVal >= _MAX_INT/2) dwVal = 0; 
		/////////////////////▓т╩╘╨▐╕┤╖в╦═╦░╩╒│м│Ў21E╬╩╠т /////////////////////

		_sntprintf(szSQL, sizeof(szSQL), TEXT( "update guild set idn=%d where strmastername='%s'" ),dwVal,pGuild->m_strMasterName );
		retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, sizeof(szSQL));
		if( retcode == SQL_SUCCESS)
		{
			retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			g_DB[m_iModSid].ReleaseDB(nDBIndex);
			return ;
		}
		retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		g_DB[m_iModSid].ReleaseDB(nDBIndex);

	}
}
/////////////////////////////////////////////////////////////
//╕№╨┬╦░┬╩ - ╨б└╢2012-1-1
//////////////////////////////////////////////////////////////
void USER::UpdateTaxToDB(CGuildFortress *pGuild,int itax)
{
	CDatabase*	pDB;
	SQLHSTMT	hstmt = NULL;
	TCHAR		szSQL[1024];	
	SQLRETURN	retcode;

	int	nDBIndex;
	::ZeroMemory( szSQL, sizeof(szSQL) );

	nDBIndex = 0;
	{
		pDB = g_DB[m_iModSid].GetDB( nDBIndex );
		if( !pDB ) 
			return;

		retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
		if( retcode != SQL_SUCCESS ) 
			return;

		_sntprintf(szSQL, sizeof(szSQL), TEXT( "update guild_Fortress set staxRate=%d where sFortressID=%d" ),itax,pGuild->m_sFortressID );
		retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, sizeof(szSQL));
		if( retcode == SQL_SUCCESS)
		{
			retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
			g_DB[m_iModSid].ReleaseDB(nDBIndex);
			return ;
		}
		retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		g_DB[m_iModSid].ReleaseDB(nDBIndex);

	}
}
//=======================================================================================================╤░╗╢╨┬╘Ў
void USER::huishou( int sid,int yanse,int sx0,int sx1,int sx2,int sx3,int zongjia)
{
	BOOL bTogether  = FALSE;
	int success =0;
	CBufferEx TempBuf;
	if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
	if(m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
	if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
	if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
	if( m_bZoneLogOut ) return;
	if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
	int iSlot = -1;
	iSlot = GetEmptySlot(INVENTORY_SLOT);
	if(sid < 0 || sid >= g_arItemTable.GetSize()) return;
	if (zongjia >=30000) return;


	int nCount= 0,nSolt[24] = {0};

	for( int i = 10; i < 34; i++) 
	{
		if( m_UserItem[i].sSid == sid && m_UserItem[i].tIQ == yanse && m_UserItem[i].tMagic[0] == sx0 && m_UserItem[i].tMagic[1] == sx1 && m_UserItem[i].tMagic[2] == sx2 && m_UserItem[i].tMagic[3] == sx3 && m_UserItem[i].sCount == 1)
		{
			nSolt[nCount++] = i;
			bTogether = TRUE;
			break;
		}
	}
	if (bTogether)
	{
		if( FindItem(SPECIAL_BIAOZHI) <=0 )
		{
			if( iSlot == -1 )
			{
				SendEventMsg("─·├╗╙╨╫у╣╗╡─┐╒╝ф┤ц╖┼▒ъ╓╛!");
                return ;
			}
		}
		if( FindItem(SPECIAL_BIAOZHI) + zongjia >=32000)
		{
			SendEventMsg("│м╣¤┐╔╨п┤°▒ъ╓╛╫▄╩¤!");
			return;
		}
		int iSlot = nSolt[0];
		
		ReSetItemSlot(&m_UserItem[iSlot]);
		GiveItemAll( 724,zongjia,0,0,0,0,0,0,0,0,0,0,0 );
		
		TempBuf.Add(ITEM_GIVE_RESULT);
		TempBuf.Add((BYTE)0x01);
		TempBuf.Add((BYTE)iSlot);
		TempBuf.Add(m_UserItem[iSlot].sLevel);
		TempBuf.Add(m_UserItem[iSlot].sSid);
		TempBuf.Add(m_UserItem[iSlot].sDuration);
		TempBuf.Add(m_UserItem[iSlot].sBullNum);
		TempBuf.Add(m_UserItem[iSlot].sCount);
		for(int j = 0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[iSlot].tMagic[j]);
		TempBuf.Add(m_UserItem[iSlot].tIQ);
		Send(TempBuf, TempBuf.GetLength());
		success = 1;
	}
	if (success == 1)
	{
		CString str;
		str.Format( "╖╖┬Ї│╔╣ж╗ё╡├▒ъ %d", zongjia);
		SendEventMsg(str.GetBuffer(0));
	}else
		SendEventMsg("╬┤╝ь▓т╡╜╕├╬я╞╖");

}
void USER::AddShuxing3PaiReq(int Slot, int SlotDJ)
{
	int index = 0, i, j = 0 ,k= 0;
	short sSid = -1;
    int random = 0 , random2 = 0,success =0;
    int iWeight = 0;
    CByteArray arMaterial;
	arMaterial.RemoveAll();

	if (m_dwDN < 2000000)
	{
		SendEventMsg("╓╞╫ў╗├╧ы╬ф╞ў╨ш╥к200═Є");
		return;
	}
	if(Slot < EQUIP_ITEM_NUM || Slot >= TOTAL_INVEN_MAX) return;	
	if(m_UserItem[Slot].sCount >= 2) return;
	sSid = m_UserItem[Slot].sSid;
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) return;
//===========================================================================
	if  (FindItem( 1188) < 1 )  return;

	if ( m_UserItem[Slot].tIQ == 18 )
	{
		SendEventMsg("130╝╢╬ф╞ў╬▐╖и╓╞╫ў");
		return;
    }

	if ( m_UserItem[Slot].tIQ != 2 && m_UserItem[Slot].tIQ != 3 )
	{
		SendEventMsg("├╗╙╨╩Ї╨╘╡─╬ф╞ў╬▐╖и╓╞╫ў");
		return;
    }
	
     int solt = GetEmptySlot( INVENTORY_SLOT );
    if(solt == -1)
	{
		SendEventMsg("─·├╗╙╨╫у╣╗╡─╬╗╓├┤ц╖┼╗├╧ы╬ф╞ў");
		return;

	}
    int tClass = g_arItemTable[m_UserItem[Slot].sSid]->m_byWear;

	if ( tClass != 1 ) 
	{
		SendEventMsg("▒╪╨ы╩╟╬ф╞ў▓┼┐╔╥╘╓╞╫ў");
		return;
    }

    if ( tClass == 1 && m_UserItem[Slot].iItemSerial == 0 )
	{
	    BYTE magic = m_UserItem[Slot].tMagic[0];
		if (magic < 0 || magic >= g_arMagicItemTable.GetSize())  return;
        GiveAllItem(  m_UserItem[Slot].sSid,1,m_UserItem[Slot].tMagic[5],14,m_UserItem[Slot].tMagic[0],m_UserItem[Slot].tMagic[1],m_UserItem[Slot].tMagic[2],m_UserItem[Slot].tMagic[3],0);
        success =1;
		m_UserItem[Slot].iItemSerial = 1;
        iWeight += g_arItemTable[sSid]->m_byWeight;		
		arMaterial.Add((BYTE)Slot);

		FlushItemLog( TRUE );
		if( m_dwDN <= 2000000 ) m_dwDN = 0;
		else m_dwDN = m_dwDN - 2000000;	
		ReSetItemSlot(&m_UserItem[SlotDJ]);
		UpdateUserItemDN();							
		SendMoneyChanged();	
		SendCharData();
	    SendMyInfo(TO_INSIGHT, INFO_MODIFY);

		CBufferEx TempBuf;
		TempBuf.Add(UPGRADE_ITEM_RESULT);
		index = arMaterial.GetSize();

		if(success == 1) TempBuf.Add((BYTE)0x01);	// EBody Upgrade ╝║░°
		else TempBuf.Add((BYTE)0x00);				// EBody Upgrade ╜╟╞╨

		TempBuf.Add((BYTE)index);

		for(i = 0;  i < arMaterial.GetSize(); i++)
		{
			Slot = arMaterial[i];
			TempBuf.Add((BYTE)Slot);
			TempBuf.Add(m_UserItem[Slot].sLevel);
			TempBuf.Add(m_UserItem[Slot].sSid);
			TempBuf.Add(m_UserItem[Slot].sDuration);
			TempBuf.Add(m_UserItem[Slot].sBullNum);
			TempBuf.Add(m_UserItem[Slot].sCount);
			for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[Slot].tMagic[j]);
			TempBuf.Add(m_UserItem[Slot].tIQ); 
		}
		m_iCurWeight -= iWeight;
		if(m_iCurWeight < 0) m_iCurWeight = 0;
		GetRecoverySpeed();	
		Send(TempBuf, TempBuf.GetLength());
		arMaterial.RemoveAll();
		//=======================================================================
		if (success==1)
		{
			SendEventMsg("╓╞╫ў│╔╣ж");
            CString strMsg;
		    CString GoodsMagic;
			for(int i = 0; i < 4; i++)
		    {
				if(m_UserItem[Slot].tMagic[i] != 0)
				{
					GoodsMagic+=g_arMagicItemTable[m_UserItem[Slot].tMagic[i]]->m_strText;
				    GoodsMagic+=",";
				}
			}
			strMsg.Format("%s ╓╞╫ў╗├╧ы╬ф╞ў %s %d╕─:", this->m_strUserID,g_arItemTable[m_UserItem[Slot].sSid]->m_strName,m_UserItem[Slot].tMagic[5] );//╣л╕ц╠с╩╛
		    strMsg+=GoodsMagic;
		    m_pCom->Announce((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
		}
	}else{
		SendEventMsg("┤╦╬ф╞ў╥╤╛н╓╞╫ў╣¤╗├╧ы╬ф╞ў┴╦");
        return;
	}
}


void USER::XuanYun() //╨┬╘Ў╤г╘╬╣ж─▄ 
{
	   
	    m_dwXYTime = 5 * 1000;
		m_dwLastXYTime = GetTickCount();

		CBufferEx TempBuf;
		TempBuf.Add(SET_USER_STATE);
		TempBuf.Add(m_uid + USER_BAND);
		AddAbnormalInfo(ABNORMAL_CONFUSION);
		TempBuf.Add(m_dwAbnormalInfo);
		TempBuf.Add(m_dwAbnormalInfo_);
		SendExactScreen(TempBuf, TempBuf.GetLength());
}
void USER::DelXuanYun() //╨┬╘Ў╤г╘╬╣ж─▄ 
{
	  int index = 0;
	  DWORD dwRemainTime = 0;
	  DWORD dwCurrTick = GetTickCount();
	  
       if( m_dwXYTime != 0)	// ╤г╘╬
		{
			if((dwCurrTick - m_dwLastXYTime) > m_dwXYTime)		// ╕┼┴ў┬∙╜║ 5╣ш ╜├░г└╠ │б│╡└╕╕щ
			{
			
				m_dwXYTime = 0;
				DeleteAbnormalInfo(ABNORMAL_CONFUSION);
				m_dwLastXYTime = dwCurrTick;
				SendSystemMsg("▒ф╟х╨╤",SYSTEM_ERROR,TO_ME);

				index = 0;
				SetByte(m_TempBuf, SET_USER_STATE, index);
				SetInt(m_TempBuf, m_uid + USER_BAND, index);
				SetDWORD(m_TempBuf, m_dwAbnormalInfo, index);
				SetDWORD(m_TempBuf, m_dwAbnormalInfo_, index);
				Send(m_TempBuf, index);
			}
			else
			{
				dwRemainTime = m_dwXYTime - (dwCurrTick - m_dwLastXYTime);
				m_dwXYTime = dwRemainTime;
				m_dwLastXYTime = dwCurrTick;
				
			}
		}
	   if ( m_dwXYTime != 0  &&  ( IsCity())  )
	   {
		        m_dwXYTime = 0;
				DeleteAbnormalInfo(ABNORMAL_CONFUSION);
				m_dwLastXYTime = dwCurrTick;
				SendSystemMsg("─·╥╤╗╪╡╜│╟╩╨╓╨,╧╡═│╬к─·╟х└э╡Ї╤г╘╬╫┤╠м",SYSTEM_ERROR,TO_ME);

				index = 0;
				SetByte(m_TempBuf, SET_USER_STATE, index);
				SetInt(m_TempBuf, m_uid + USER_BAND, index);
				SetDWORD(m_TempBuf, m_dwAbnormalInfo, index);
				SetDWORD(m_TempBuf, m_dwAbnormalInfo_, index);
				Send(m_TempBuf, index);
	   }

}

void USER::SXzhuizong(short sSid)//╦в╨┬╫╖╫┘┐и─═╛├
{
	BYTE tSlot = 0;
	int i;
	CBufferEx TempBuf;
	
	for(i = 10; i < 34; i++)
	{
		tSlot = g_iSSSlot[i];
		if(m_UserItem[tSlot].sSid == sSid)
		{
			m_UserItem[tSlot].sDuration--;
			if(m_UserItem[tSlot].sDuration <= 0) 
			{
				MakeItemLog( &m_UserItem[tSlot], ITEMLOG_ACC_USE );
				FlushItemLog( TRUE );
				
				ReSetItemSlot(&m_UserItem[tSlot]);
				
				TempBuf.Add(ITEM_MOVE_RESULT);
				TempBuf.Add(SUCCESS);
				TempBuf.Add((BYTE)0);		
				TempBuf.Add((BYTE)1);		// Count
				
				TempBuf.Add(tSlot);
				TempBuf.Add(m_UserItem[tSlot].sLevel);
				TempBuf.Add(m_UserItem[tSlot].sSid);
				TempBuf.Add(m_UserItem[tSlot].sDuration);
				TempBuf.Add(m_UserItem[tSlot].sBullNum);
				TempBuf.Add(m_UserItem[tSlot].sCount);
				for(i =0; i < MAGIC_NUM; i++) TempBuf.Add(m_UserItem[tSlot].tMagic[i]);
				TempBuf.Add(m_UserItem[tSlot].tIQ); 
				
				Send(TempBuf, TempBuf.GetLength());				
			}
			else
			{
				TempBuf.Add(ITEM_DURATION);
				TempBuf.Add(tSlot);
				TempBuf.Add(m_UserItem[tSlot].sDuration);
				Send(TempBuf, TempBuf.GetLength());
			}

			return;
		}
	}
}
void USER::YJmzb()
{
    BOOL Haveitem = FALSE;
    short sNum = 1;
    int iWeight = 0;
    DWORD dwSellCost, dwResultCost = 0;
    DWORD dwMaxCost = 0, tempCost = 0;

    // ╫┤╠м╝ь▓щ
    if(m_bLive == USER_DEAD || m_bNoItemMove == TRUE || m_bViewingAShop == TRUE || 
       m_state != STATE_GAMESTARTED || m_bZoneLogOut || 
       m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)
    {
        return;
    }

    for(int i = EQUIP_ITEM_NUM; i < EQUIP_ITEM_NUM + 12; i++)
    {
        if(m_UserItem[i].sSid < 0 || m_UserItem[i].sSid >= g_arItemTable.GetSize()) continue;
        //if(m_UserItem[i].iItemSerial == 1) continue;
        if(g_arItemTable[m_UserItem[i].sSid]->m_byRLevel == 100) continue; // ░┘╝╢╫░▒╕▓╗┐╔┬Ї
        if(g_arItemTable[m_UserItem[i].sSid]->m_byWear < 1 || g_arItemTable[m_UserItem[i].sSid]->m_byWear > 5) continue; // ▓╗╩╟╬ф╞ў║═╫░▒╕╠°│Ў
        if(m_UserItem[i].sCount != 1) continue; // ╩¤┴┐▓╗╡╚╙┌1╠°│Ў
        if(m_UserItem[i].tMagic[5] != 0) continue; // ╕─╣¤╡─▓╗┬Ї

        int sSid = m_UserItem[i].sSid;
        
        // ╝╞╦у╬я╞╖╞└╖╓
        int itemScore = CalcItemPingfen(&m_UserItem[i]);
        if(itemScore >= 170) 
        {
            CString strKeepMsg;
            strKeepMsg.Format("[%s] ╞└╖╓:%d - ▒г┴Ї", g_arItemTable[sSid]->m_strName, itemScore);
            SendSystemMsg((LPTSTR)(LPCTSTR)strKeepMsg, SYSTEM_NORMAL, TO_ME);
            continue;
        }

        CBufferEx TempBuf;
        dwSellCost = GetSellCost(i);
        if(dwSellCost > 0)
        {
            Haveitem = TRUE;
            tempCost = dwResultCost + dwSellCost * sNum;
            if(!CheckMaxValueReturn((DWORD &)tempCost, (DWORD)(dwResultCost + dwSellCost * sNum))) continue;
            iWeight += g_arItemTable[m_UserItem[i].sSid]->m_byWeight * sNum;
            dwResultCost = tempCost;
        }

        ReSetItemSlot(&m_UserItem[i]);
        
        // ╖в╦═╬я╞╖╕№╨┬╩¤╛▌░№
        TempBuf.Add(ITEM_GIVE_RESULT);
        TempBuf.Add((BYTE)0x01);
        TempBuf.Add((BYTE)i);
        TempBuf.Add(m_UserItem[i].sLevel);
        TempBuf.Add(m_UserItem[i].sSid);
        TempBuf.Add(m_UserItem[i].sDuration);
        TempBuf.Add(m_UserItem[i].sBullNum);
        TempBuf.Add(m_UserItem[i].sCount);
        for(int j = 0; j < MAGIC_NUM; j++) 
            TempBuf.Add(m_UserItem[i].tMagic[j]);
        TempBuf.Add(m_UserItem[i].tIQ);    
        Send(TempBuf, TempBuf.GetLength());

        // ╖в╦═┬Ї│Ў╠с╩╛╧√╧в
       /* CString strSellMsg;
        strSellMsg.Format("[%s] ╞└╖╓:%d - ╥╤┬Ї│Ў", g_arItemTable[sSid]->m_strName, itemScore);
        SendSystemMsg((LPTSTR)(LPCTSTR)strSellMsg, SYSTEM_ERROR, TO_ME);*/
    }

    // ╚ч╣√╙╨╬я╞╖▒╗┬Ї│Ўгм┤ж└э╜Ё╟о║═╓╪┴┐╕№╨┬
    if(Haveitem == TRUE)
    {
        dwResultCost = SubTaxRate(dwResultCost, 30);    // ╦░╩╒
        CheckMaxValue((DWORD &)m_dwDN, (DWORD)dwResultCost);
        MakeMoneyLog(dwResultCost, ITEMLOG_SELL_MONEY);
        UpdateUserItemDN();
        m_iCurWeight -= iWeight;
        if(m_iCurWeight < 0) m_iCurWeight = 0;
        GetRecoverySpeed();
        SendMoneyChanged();
    }
}
//void USER::YJmzb()
//{
//	BOOL Haveitem = FALSE;
//	short sNum = 1;
//	int iWeight = 0;
//	DWORD dwSellCost, dwResultCost = 0;
//	DWORD dwMaxCost = 0, tempCost = 0;
//	if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
//    if(m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
//	if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
//	if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
//	if( m_bZoneLogOut ) return;
//	if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
// 
//
//	for(int i = EQUIP_ITEM_NUM; i < EQUIP_ITEM_NUM + 12; i++)
//	{
//		if(m_UserItem[i].sSid < 0 || m_UserItem[i].sSid >= g_arItemTable.GetSize()) continue;
//		if(m_UserItem[i].iItemSerial == 1) continue;
//		if( g_arItemTable[m_UserItem[i].sSid]->m_byRLevel == 100) continue;//░┘╝╢╫░▒╕▓╗┐╔┬Ї
//		if( g_arItemTable[m_UserItem[i].sSid]->m_byWear < 1|| g_arItemTable[m_UserItem[i].sSid]->m_byWear> 5 ) continue;//▓╗╩╟╬ф╞ў║═╫░▒╕╠°│Ў
//		if(m_UserItem[i].sCount!=1) continue;//╩¤┴┐▓╗╡╚╙┌1╠°│Ў
//		if(m_UserItem[i].tMagic[5] != 0) continue;//╕─╣¤╡─▓╗┬Ї
//		CBufferEx TempBuf;
//		int sSid;
//		sSid = m_UserItem[i].sSid;
//
//		dwSellCost = GetSellCost(i);
//		if(dwSellCost > 0)
//		{
//			Haveitem = TRUE;
//			tempCost = dwResultCost + dwSellCost * sNum;
//			if(!CheckMaxValueReturn((DWORD &)tempCost, (DWORD)(dwResultCost + dwSellCost * sNum)))continue;
//			iWeight += g_arItemTable[m_UserItem[i].sSid]->m_byWeight * sNum;
//			dwResultCost = tempCost;
//		}
//		ReSetItemSlot(&m_UserItem[i]);
//		
//		TempBuf.Add(ITEM_GIVE_RESULT);
//		TempBuf.Add((BYTE)0x01);
//		TempBuf.Add((BYTE)i);
//		TempBuf.Add(m_UserItem[i].sLevel);
//		TempBuf.Add(m_UserItem[i].sSid);
//		TempBuf.Add(m_UserItem[i].sDuration);
//		TempBuf.Add(m_UserItem[i].sBullNum);
//		TempBuf.Add(m_UserItem[i].sCount);
//		for(int j = 0; j < MAGIC_NUM; j++) 
//		TempBuf.Add(m_UserItem[i].tMagic[j]);
//
//		TempBuf.Add(m_UserItem[i].tIQ);	
//		Send(TempBuf, TempBuf.GetLength())	;
//		CString strMsg;
//		strMsg = _T("");
//		strMsg.Format( "╥╗╝№┬Ї╡Ї┴╦[%s]"  ,g_arItemTable[sSid]->m_strName);
//		//strMsg.Format( "░№╣№╬╗╓├%d:┬Ї╡Ї┴╦[%s]╩Ї╨╘╬к:%d %d %d %d %d."  ,i-9,g_arItemTable[sSid]->m_strName,m_UserItem[i].tMagic[0],m_UserItem[i].tMagic[1],m_UserItem[i].tMagic[2],
//		//	m_UserItem[i].tMagic[3],m_UserItem[i].tMagic[4]);
//		SendSystemMsg( (LPTSTR)(LPCTSTR)strMsg,SYSTEM_ERROR, TO_ME);
//	}
//	if ( Haveitem == TRUE)
//	{
//		dwResultCost = SubTaxRate(dwResultCost,30);	//╦░╩╒
//		CheckMaxValue((DWORD &)m_dwDN, (DWORD)dwResultCost);
//		MakeMoneyLog( dwResultCost, ITEMLOG_SELL_MONEY );
//		UpdateUserItemDN();
//		m_iCurWeight -= iWeight;
//		if(m_iCurWeight < 0) m_iCurWeight = 0;
//		GetRecoverySpeed();
//		SendMoneyChanged();
//	}
//}
void USER::KuaiSuZuDui() //╫╘╢п╫щ╢╙
{
	
	USER *pUser = NULL;
	CBufferEx TempBuf;
	int i ,j ;
	int diffLevel = 0;
	CString msg;
	if(m_bMakeBuddy || m_bNowBuddy || m_bBuddyMode == TRUE) return;	
	/*{
		msg.Format( "─у╙╨╢╙╬щ." );
		SendSystemMsg((LPTSTR)(LPCTSTR)msg, SYSTEM_NORMAL, TO_ME);*/
	for (i = 0; i < MAX_USER; i++ )	
	{
		pUser = m_pCom->GetUserUid(i);
		if(!(pUser && pUser->m_state == STATE_GAMESTARTED)) continue;	
		if(strcmp(m_strUserID, pUser->m_strUserID) == 0)  continue;	
		diffLevel = abs(m_sLevel - pUser->m_sLevel);
		if( diffLevel > 20) continue;
		if(pUser->m_bMakeBuddy) 
		{ 
			for(j = 0; j < MAX_BUDDY_USER_NUM; j++)	
			{	
				if(pUser->m_MyBuddy[j].uid == -1)
				{	
					TempBuf.AddString(m_strUserID);
					pUser->BuddyUserChange(TempBuf, 6);	
					return;
				}
            }
         }
	}
}

void USER::DUBOxitong(TCHAR *pBuf)
{
    if(m_dwDN < 200000)
	{
		SendSystemMsg("▒ф╕№╩Ї╨ш20═Є╛Ў╒╜▒╥!",SYSTEM_ERROR,TO_ME);
		return;
	}
	bool SxUse = false;
	BYTE tWear = -1;
	int iRandom = 0;
	BYTE newSX = -1;
	int index = 0;
	int iCount = 0;//╩Ї╨╘└р▒Ё┼┼╩¤│ї╩╝╗п
	short sid1 = -1;
	short sid2 = -1;
	short Slot1 = GetShort(pBuf, index);
	short Slot2 = GetShort(pBuf, index);
	short Slot3 = GetShort(pBuf, index);
	if(Slot1 < EQUIP_ITEM_NUM || Slot1 >= TOTAL_INVEN_MAX) return;//╓ў╠х
	if(Slot2 < EQUIP_ITEM_NUM || Slot2 >= TOTAL_INVEN_MAX) return;//░┬╩ї
	if(Slot3 < 0 || Slot3 > 3) return;//╩Ї╨╘╓╕╒ы

	sid1 = m_UserItem[Slot1].sSid;
	sid2 = m_UserItem[Slot2].sSid;
	if(sid1 < 0 || sid2 < 0 || sid1 > g_arItemTable.GetSize() || sid2 > g_arItemTable.GetSize()) return;
	if(m_UserItem[Slot1].tMagic[3] == 0) return;//▓╗╩╟╦─╠ї╩Ї╨╘╡─╫░▒╕╬ф╞ў╖╡╗╪
	if(m_UserItem[Slot1].tMagic[5] >= 1) return ;//╓ў╠х╕─╩¤┤є╙┌0╖╡╗╪
	tWear = g_arItemTable[sid1]->m_byWear;	
	if(tWear != 1 && tWear != 2 && tWear != 3 && tWear != 4 && tWear != 5) return;
	if(sid2 != 1439) return;
	do
	{
	  iRandom = myrand(1, 145);
        if(g_arMagicItemTable[iRandom]->m_tUse == 1 )//╥╤┐к╖┼╡─╩Ї╨╘╟░╠с╧┬
		{
			if(tWear == 1)//╬ф╞ў
			{
			  if(CheckClassItem(g_arItemTable[sid1]->m_byClass, g_arMagicItemTable[iRandom]->m_tNeedClass))	// ╝ь▓т╩Ї╨╘╩Ї╙┌──╕Ў╓░╥╡
			  {
				if(g_arMagicItemTable[iRandom]->m_tWearInfo == 1 || g_arMagicItemTable[iRandom]->m_tWearInfo == 0)//╩Ї╨╘└р▒Ё╟°╖╓,0=╠╪╩т╩Ї╨╘╬ф╞ў╫░▒╕═и╙├,1=╬ф╞ў 2=╫░▒╕ 
				{
					newSX = (unsigned)g_arMagicItemTable[iRandom]->m_sSid;
					if(newSX == m_UserItem[Slot1].tMagic[0] || newSX == m_UserItem[Slot1].tMagic[1] || newSX == m_UserItem[Slot1].tMagic[2] || newSX == m_UserItem[Slot1].tMagic[3]) continue;//╩Ї╨╘▓╗┐╔╓╪╕┤
					SxUse = true;
				 }
			  }
			 }else if(tWear == 2 || tWear == 3 || tWear == 4|| tWear==5)//╫░▒╕
			   { 
				if(g_arMagicItemTable[iRandom]->m_tWearInfo == 2 || g_arMagicItemTable[iRandom]->m_tWearInfo == 0)//10╩Ї╨╘,100╤к╒т└р╠╪╩т╩Ї╨╘╡─╬ф╞ў/╫░▒╕╟°╖╓╩╟0
				{ 
					newSX = (unsigned)g_arMagicItemTable[iRandom]->m_sSid;
					if(newSX == m_UserItem[Slot1].tMagic[0] || newSX == m_UserItem[Slot1].tMagic[1] || newSX == m_UserItem[Slot1].tMagic[2] || newSX == m_UserItem[Slot1].tMagic[3]) continue;//╩Ї╨╘▓╗┐╔╓╪╕┤
					SxUse = true;
				}
			}
		}
    }while(!SxUse);
	
	if(newSX == -1) return;	
	
	ItemList	TempItem;
	TempItem = m_UserItem[Slot1];	
	ReSetItemSlot(&m_UserItem[Slot1]);
	if(m_UserItem[Slot2].sCount <= 1) ReSetItemSlot(&m_UserItem[Slot2]);// ╝╥║ё╝║ └╠╣╟╖╬ ╕╒└· ├╩▒т╚н╟╧░э 
	else							   m_UserItem[Slot2].sCount -= 1;
	m_UserItem[Slot1] = TempItem;		
	m_UserItem[Slot1].tMagic[Slot3] = newSX;

   
	CUIntArray arMaterial;
	arMaterial.Add(Slot1);
	arMaterial.Add(Slot2);
	CBufferEx TempBuf;
	int i,j;
	TempBuf.Add(UPGRADE_ITEM_RESULT);
	index = arMaterial.GetSize();
	TempBuf.Add((BYTE)1);
	TempBuf.Add((BYTE)index);
	for(i = 0; i < arMaterial.GetSize(); i++)
	{
		BYTE bySlot = (BYTE)arMaterial[i];
		TempBuf.Add((BYTE)bySlot);
		TempBuf.Add(m_UserItem[bySlot].sLevel);
		TempBuf.Add(m_UserItem[bySlot].sSid);
		TempBuf.Add(m_UserItem[bySlot].sDuration);
		TempBuf.Add(m_UserItem[bySlot].sBullNum);
		TempBuf.Add(m_UserItem[bySlot].sCount);

		for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[bySlot].tMagic[j]);

		TempBuf.Add(m_UserItem[bySlot].tIQ); 
	}
	Send(TempBuf, TempBuf.GetLength());
	FlushItemLog( TRUE );	
	
	if(m_dwDN <= 200000) m_dwDN = 0;
	else m_dwDN = m_dwDN - 200000;
	UpdateUserItemDN();							
	SendMoneyChanged();

}  

void USER::DELSX(TCHAR* pBuf) //xiaoke
{
	int index = 0, i, j = 0 ,k= 0;
	short sSid = -1;
	BYTE tSlot = 0;
	int iWeight = 0;
	int random = 0 , random2 = 0,success =0;


	CByteArray arMaterial;
	arMaterial.RemoveAll();

    tSlot = GetByte(pBuf, index);
	if(tSlot < EQUIP_ITEM_NUM || tSlot >= TOTAL_INVEN_MAX) return;	
	if(m_UserItem[tSlot].sCount >= 2) return;
	sSid = m_UserItem[tSlot].sSid;
	if(sSid < 0 || sSid >= g_arItemTable.GetSize()) return;

	if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
	if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
	if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
	if( m_bZoneLogOut ) return;
	if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;


	if (m_UserItem[tSlot].tIQ == 12) return;

	if( FindItem( 724) < 3000)
	{
		SendEventMsg("╔╛│¤╫ю║є╥╗╠ї╩Ї╨╘╨ш╥к3000▒ъ╓╛");
		return;
	}

	    BYTE magic = m_UserItem[tSlot].tMagic[0];
		if (magic < 0 || magic >= g_arMagicItemTable.GetSize()) return;
				
			
		if( m_UserItem[tSlot].tMagic[3] !=0)	//4┼┼
		{
			m_UserItem[tSlot].tMagic[3]=0;
			MakeItemLog(&m_UserItem[tSlot], ITEMLOG_EBODY_UPGRADE_SUCCESS );
			iWeight += g_arItemTable[sSid]->m_byWeight;		
			arMaterial.Add((BYTE)tSlot);
			FlushItemLog( TRUE );
			RobItem( 724, 3000 );
			UpdateUserItemDN();							
			SendMoneyChanged();							
			CBufferEx TempBuf;
			TempBuf.Add(UPGRADE_ITEM_RESULT);
			index = arMaterial.GetSize();
			if(success == 1) TempBuf.Add((BYTE)0x01);	// EBody Upgrade ╝║░°
			else TempBuf.Add((BYTE)0x00);				// EBody Upgrade ╜╟╞╨

			TempBuf.Add((BYTE)index);
			
			for(i = 0;  i < arMaterial.GetSize(); i++)
			{
				tSlot = arMaterial[i];
				TempBuf.Add((BYTE)tSlot);
				TempBuf.Add(m_UserItem[tSlot].sLevel);
				TempBuf.Add(m_UserItem[tSlot].sSid);
				TempBuf.Add(m_UserItem[tSlot].sDuration);
				TempBuf.Add(m_UserItem[tSlot].sBullNum);
				TempBuf.Add(m_UserItem[tSlot].sCount);
				for(j =0; j < MAGIC_NUM; j++) TempBuf.Add(m_UserItem[tSlot].tMagic[j]);
				TempBuf.Add(m_UserItem[tSlot].tIQ); 
			}
			m_iCurWeight -= iWeight;
			if(m_iCurWeight < 0) m_iCurWeight = 0;
			GetRecoverySpeed();	
			Send(TempBuf, TempBuf.GetLength());
			arMaterial.RemoveAll();
			SendEventMsg("╩Ї╨╘╔╛│¤│╔╣ж");
			
		}else

			SendEventMsg("▒╪╨ы╬к╦─┼┼╩Ї╨╘");
}

void USER::Shenshengzhufu()
{
	DWORD dwCurrTick = GetTickCount();
    // ╝ь▓щ╕ў╓╓╫┤╠мгм╠с╟░╖╡╗╪
    if (m_bLive == USER_DEAD || m_bNoItemMove == TRUE || m_bViewingAShop == TRUE || 
        m_state != STATE_GAMESTARTED || m_bZoneLogOut || m_bPShopOpen == TRUE || 
        m_bNowTrading == TRUE || m_bSessionOnline == TRUE)
    {
        return;
    }
	if (dwCurrTick - m_dwLastItemZFTime < 1*1000)
	{
		return ;
	}else{
		m_dwLastItemZFTime = dwCurrTick;
	}

    // │ї┤╬╟ы╟є╫г╕г
    if (m_DianJinum == 0)
    {
        SendNpcSay(NULL, 2307);
        m_DianJinum++;
        return;
    }

    // ╝ь▓щ▒ъ╓╛╩¤┴┐
    if (FindItem(724) < 100)
    {
        SendEventMsg("│щ╚б╫г╕г╩▒╝ф╨ш╥к100▒ъ╓╛");
        return;
    }

    // ╧√║─100▒ъ╓╛
    RobItem(724, 100);

    // ╦ц╗·╔·│╔╫г╕г└р╨═(▒▄├т╙ы╡▒╟░╧р═м)
    int iRandom;
    const int MAX_RETRY = 3;  // ╫ю┤є╓╪╩╘┤╬╩¤
    int retryCount = 0;
    
    do {
        iRandom = myrand(1, 16);
        retryCount++;
    } while(iRandom == m_dwZF && retryCount < MAX_RETRY);  // ╩╣╙├m_dwZF╫ў╬к╔╧┤╬╡─╫г╕г└р╨═

    m_dwZF = iRandom;  // ╔ш╓├╨┬╡─╫г╕г└р╨═

    // ╕∙╛▌╓░╥╡║═╫г╕г└р╨═╗ё╚б╠с╩╛╧√╧в
    char szMsg[256] = {0};
    switch (iRandom)
    {
        case 1:
            if (m_byClass == 0 || m_byClass == 2)
            {
                strcpy(szMsg, "┴ж╓╡5╘Ў╝╙");
            }
            else if (m_byClass == 1)
            {
                strcpy(szMsg, "╓╟╗█5╘Ў╝╙");
            }
            else if (m_byClass == 3)
            {
                strcpy(szMsg, "├Ї╜▌5╘Ў╝╙");
            }
            break;
            
        case 2:
            strcpy(szMsg, "╔·├№╓╡100╘Ў╝╙");
            break;
            
        case 3:
            if(m_byClass != 1)
            {
                strcpy(szMsg, "╬я└э╦Ё╔╦80╘Ў╝╙");
            }
            else
            {
                strcpy(szMsg, "─з╖и╦Ё╔╦50╘Ў╝╙");
            }
            break;
            
        case 4:
            strcpy(szMsg, "╖└╙∙┴ж100╘Ў╝╙");
            break;
            
        case 5:
            strcpy(szMsg, "─з╖и┐╣│т50╘Ў╝╙");
            break;
            
        case 6:
            strcpy(szMsg, "╦∙╙╨╩Ї╨╘╡у5╘Ў╝╙");
            break;
            
        case 7:
            strcpy(szMsg, "╬я└э╔╦║ж╝ї╔┘50");
            break;
            
        case 8:
            strcpy(szMsg, "─з╖и╔╦║ж╝ї╔┘50");
            break;
            
        case 9:
            strcpy(szMsg, "╫ю╓╒╔╦║ж╝ї╔┘30");
            break;
            
        case 10:
            strcpy(szMsg, "╖└╙∙┴ж╠с╔¤░┘╖╓╓о10");
            break;
            
        case 11:
            if(m_byClass != 1)
            {
                strcpy(szMsg, "╬я└э╔╦║ж╠с╔¤░┘╖╓╓о5");
            }
            else
            {
                strcpy(szMsg, "─з╖и╔╦║ж╠с╔¤░┘╖╓╓о5");
            }
            break;
            
        case 12:
            strcpy(szMsg, "╔▒╣╓╛н╤щ╓╡╠с╔¤░┘╖╓╓о5");
            break;
            
        case 13:
            strcpy(szMsg, "╗╪▒▄┬╩╠с╔¤15");
            break;
            
        case 14:
            if(m_byClass != 1)
            {
                strcpy(szMsg, "├№╓╨┬╩╠с╔¤10");
            }
            else
            {
                strcpy(szMsg, "┐╣─з╡─░┘╖╓╓о20╫к╣е╗ў");
            }
            break;
            
        case 15:
            strcpy(szMsg, "╦∙╙╨╝╝╩ї╡╚╝╢1");
            break;
            
        case 16:
            if(m_byClass == 0)
            {
                strcpy(szMsg, "╨╦╖▄╝╝╩ї╡╚╝╢2");
            }
            else if(m_byClass == 1)
            {
                strcpy(szMsg, "╖и╩ж┤є╩ж╡╚╝╢2");
            }
            else if(m_byClass == 2)
            {
                strcpy(szMsg, "┤й┤╠╝╝╩ї╡╚╝╢2");
            }
            else if(m_byClass == 3)
            {
                strcpy(szMsg, "┴м╔ф╝╝╩ї╡╚╝╢2");
            }
            break;
    }

    // ╖в╦═╠с╩╛╧√╧в
    char szFinal[512] = {0};
    sprintf(szFinal, "─·│щ╚б╫г╕г╬кг║%s", szMsg);
    SendEventMsg(szFinal);

    // ╔ш╓├╫г╕г╩▒╝ф▓в╖в╦═╨з╣√
    m_dwZFTime = 3600 * 2 * 1000;
    CheckMagicItemMove();

    // ╖в╦═╤╠╗и╨з╣√
    CBufferEx TempBuf3;
    TempBuf3.Add(USE_POTION);
    TempBuf3.Add(m_uid + USER_BAND);
    TempBuf3.Add((BYTE)12);
    Send(TempBuf3, TempBuf3.GetLength());
}

//void USER::Shenshengzhufu()//╔ё╩е╫г╕г
//{
//	if(m_bLive == USER_DEAD) return;	//╦└═Ў╟ы╟є	
//    if(m_bNoItemMove == TRUE) return;		//╬я╞╖╥╞╢п╟ы╟є
//	if(m_bViewingAShop == TRUE) return;	//▓щ┐┤╔╠╡ъ╟ы╟є	
//	if(m_state != STATE_GAMESTARTED) return; //╙╬╧╖╬┤┐к╩╝╟ы╟є
//	if( m_bZoneLogOut ) return;
//	if(m_bPShopOpen == TRUE || m_bNowTrading == TRUE || m_bSessionOnline == TRUE)  return;
//	CBufferEx TempBuf, TempSayBuf , TempBuf3;
//	
//	if (m_DianJinum == 0)
//	{
//		SendNpcSay(NULL, 2307);
//	    m_DianJinum++;
//		return;
//	}
//	if( FindItem( 724) < 100)
//	{
//		SendEventMsg("│щ╚б╫г╕г╩▒╝ф╨ш╥к100▒ъ╓╛");
//		return;
//	}
//	RobItem( 724, 100 );
//
//	int iRandom;
//	iRandom = myrand(1,16);//╦ц╗·─┌╩¤
//	
//	if(iRandom == 1)
//	{
//		m_dwZF = 1;
//
//		if( m_byClass == 0 || m_byClass == 2)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║┴ж╓╡5╘Ў╝╙");
//	    }else if( m_byClass == 1 )
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╓╟╗█5╘Ў╝╙");
//	    }else if( m_byClass == 3)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║├Ї╜▌5╘Ў╝╙");
//	    }
//	}
//	if(iRandom == 2)
//	{
//		m_dwZF = 2;
//		SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╔·├№╓╡100╘Ў╝╙");
//	}
//	if(iRandom == 3)
//	{
//		m_dwZF = 3;
//
//		if( m_byClass != 1)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╬я└э╦Ё╔╦80╘Ў╝╙");
//		}else if( m_byClass == 1)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║─з╖и╦Ё╔╦50╘Ў╝╙");
//		}
//	}
//	if(iRandom == 4)
//	{
//		m_dwZF = 4;
//		SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╖└╙∙┴ж100╘Ў╝╙");
//	    
//	}
//	if(iRandom == 5)
//	{
//		m_dwZF = 5;
//		SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║─з╖и┐╣│т50╘Ў╝╙");
//	    
//	}
//	if(iRandom == 6)
//	{
//		m_dwZF = 6;
//		SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╦∙╙╨╩Ї╨╘╡у5╘Ў╝╙");
//	}
//	if(iRandom == 7)
//	{
//		m_dwZF = 7;
//		SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╬я└э╔╦║ж╝ї╔┘50");
//	}
//	if(iRandom == 8)
//	{
//		m_dwZF = 8;
//		SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║─з╖и╔╦║ж╝ї╔┘50");
//	}
//	if(iRandom == 9)
//	{
//		m_dwZF = 9;
//		SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╫ю╓╒╔╦║ж╝ї╔┘30");
//	 }
//	if(iRandom == 10)
//	{
//		m_dwZF = 10;
//		SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╖└╙∙┴ж╠с╔¤░┘╖╓╓о10");
//	}
//	if(iRandom == 11)
//	{
//		m_dwZF = 11;
//		if( m_byClass != 1)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╬я└э╔╦║ж╠с╔¤░┘╖╓╓о5");
//		}else if( m_byClass == 1)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║─з╖и╔╦║ж╠с╔¤░┘╖╓╓о5");
//		}
//	}
//	if(iRandom == 12)
//	{
//		m_dwZF = 12;
//		SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╔▒╣╓╛н╤щ╓╡╠с╔¤░┘╖╓╓о5");
//	}
//    if(iRandom == 13)
//	{
//		m_dwZF = 13;
//		SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╗╪▒▄┬╩╠с╔¤15");
//	}
//	if(iRandom == 14)
//	{
//		m_dwZF = 14;
//		if( m_byClass != 1)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║├№╓╨┬╩╠с╔¤10");
//		}else if( m_byClass == 1)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║┐╣─з╡─░┘╖╓╓о20╫к─з╖и╣е╗ў");
//		}
//	}
//    if(iRandom == 15)
//	{
//		m_dwZF = 15;
//		SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╦∙╙╨╝╝╩ї╡╚╝╢1");
//	 }
//	if(iRandom == 16)
//	{
//		m_dwZF = 16;
//		if( m_byClass == 0)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╨╦╖▄╝╝╩ї╡╚╝╢2");
//		}else if( m_byClass == 1)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║╖и╩ж┤є╩ж╡╚╝╢2");
//		}else if( m_byClass == 2)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║┤й┤╠╝╝╩ї╡╚╝╢2");
//		}else if( m_byClass == 3)
//		{
//			SendEventMsg("╣з╧▓─·│щ╚б╫г╕г╬кг║┴м╔ф╝╝╩ї╡╚╝╢2");
//		}
//	}
//	
//	m_dwZFTime = 3600 * 2 * 1000;
//	CheckMagicItemMove();
//    TempBuf3.Add(USE_POTION);		
//	TempBuf3.Add(m_uid + USER_BAND);
//	TempBuf3.Add((BYTE)12);	//╓╨╜▒╩▒┤°╤╠╗и╨з╣√
//	Send( TempBuf3, TempBuf3.GetLength() );
//}

BOOL USER::AginOnlineShop()//╓╪╢┴╧√║─╞╖╔╠╡ъ
{
	int i;

	for(i = 0; i < g_arOnlineShopTable.GetSize(); i++) g_arOnlineShopTable.RemoveAll();

	SQLHSTMT		hstmt;
	SQLRETURN		retcode;
	TCHAR			szSQL[2048];

	::ZeroMemory(szSQL, sizeof(szSQL));
	wsprintf(szSQL,TEXT("SELECT * FROM OnlineShop"));

	SQLSMALLINT		oSid;
	SQLSMALLINT		iSid;
	SQLCHAR			iSname[20];
	SQLSMALLINT		price;
	SQLSMALLINT		iNum;
	SQLSMALLINT		sx1;
	SQLSMALLINT		sx2;
	SQLSMALLINT		sx3;
	SQLSMALLINT		sx4;
	SQLSMALLINT		sx5;
	SQLSMALLINT		upgrade;
	SQLSMALLINT		sx6;
	SQLSMALLINT		sx7;
	SQLSMALLINT		sx8;
	SQLSMALLINT		sx9;
	SQLSMALLINT		sx10;
	SQLCHAR			iText[50];

	SQLINTEGER		sInd;

	::ZeroMemory(iSname, sizeof(iSname));
	::ZeroMemory(iText, sizeof(iText));
	oSid = 0;	iSid = 0;	price = 0;	iNum = 0;
	sx1 = 0;	sx2 = 0;	sx3 = 0;	sx4	= 0;	sx5 = 0;
	upgrade = 0;
	sx6 = 0;	sx7 = 0;	sx8 = 0;	sx9 = 0;	sx10 = 0;

	int db_index = 0;
	CDatabase* pDB = g_DB[AUTOMATA_THREAD].GetDB( db_index );
	if( !pDB ) return FALSE;

	retcode = SQLAllocHandle( (SQLSMALLINT)SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt );
	if( retcode != SQL_SUCCESS )
	{
		TRACE("Fail To Load UserSort Data !!\n");
		AfxMessageBox(_T("OnlineShop Table Open Fail!"));
		//g_DB[AUTOMATA_THREAD].ReleaseDB(db_index);
		return FALSE;
	}

	retcode = SQLExecDirect( hstmt, (unsigned char*)szSQL, SQL_NTS);
	if( retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO )
	{
		while (TRUE)
		{
			retcode = SQLFetch(hstmt);

			if (retcode ==SQL_SUCCESS || retcode ==SQL_SUCCESS_WITH_INFO)
			{
				i = 1;

				SQLGetData( hstmt, i++, SQL_C_SSHORT, &oSid, sizeof(oSid), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &iSid, sizeof(iSid), &sInd );
				SQLGetData( hstmt, i++, SQL_C_CHAR,	  &iSname, sizeof(iSname), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &price, sizeof(price), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &iNum, sizeof(iNum), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &sx1, sizeof(sx1), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &sx2, sizeof(sx2), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &sx3, sizeof(sx3), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &sx4, sizeof(sx4), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &sx5, sizeof(sx5), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &upgrade, sizeof(upgrade), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &sx6, sizeof(sx6), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &sx7, sizeof(sx7), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &sx8, sizeof(sx8), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &sx9, sizeof(sx9), &sInd );
				SQLGetData( hstmt, i++, SQL_C_SSHORT, &sx10, sizeof(sx10), &sInd );
				SQLGetData( hstmt, i++, SQL_C_CHAR,	  &iText, sizeof(iText), &sInd );
				
				OnlineShop *OSP = new OnlineShop;
				
				OSP->m_oSid = oSid;
				OSP->m_iSid = iSid;
				strcpy_s(OSP->m_iSname, (CHAR*)iSname);
				OSP->m_price = price;
				OSP->m_iNum	 = iNum;
				OSP->m_sx1	 = sx1;
				OSP->m_sx2	 = sx2;
				OSP->m_sx3	 = sx3;
				OSP->m_sx4	 = sx4;
				OSP->m_sx5	 = sx5;
				OSP->m_upgrade = upgrade;
				OSP->m_sx6	 = sx6;
				OSP->m_sx7	 = sx7;
				OSP->m_sx8	 = sx8;
				OSP->m_sx9	 = sx9;
				OSP->m_sx10	 = sx10;
				strcpy_s(OSP->m_iText, (CHAR*)iText);

				g_arOnlineShopTable.Add(OSP);
			}
			else break;
		}		
	}
	else if (retcode==SQL_NO_DATA)
	{
		g_DB[AUTOMATA_THREAD].ReleaseDB(db_index);
		return FALSE;
	}
	else
	{
		retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
		g_DB[AUTOMATA_THREAD].ReleaseDB(db_index);
		return FALSE;
	}

	retcode = SQLFreeHandle( (SQLSMALLINT)SQL_HANDLE_STMT, hstmt);
	g_DB[AUTOMATA_THREAD].ReleaseDB(db_index);

	return TRUE;


}

//void USER:: GetItem(ItemList* pItem, int type)//112233
//{
//	if( !pItem ) return;   
//	
//	CString GoodsMagic;CString strMsg; int pingfen =0; 

//	int CheckItem_Str = 0; //╝ь▓щ┴ж┴┐
//	int CheckItem_Dex = 0; //╝ь▓щ├Ї╜▌
//	int CheckItem_Vol = 0; //╝ь▓щ╓╟╗█
//
//    if (pItem->sSid < 0 || pItem->sSid >= g_arItemTable.GetSize()) return;
//
//	for(int i = 0; i< MAGIC_NUM; i++)
//	{
//		if(pItem->tMagic[i]<=0 || pItem->tMagic[i] >= g_arMagicItemTable.GetSize()) continue;
//			
//		int shuxing = pItem->tMagic[i];
//		int tClass = g_arItemTable[pItem->sSid]->m_byWear;
//		int zhiye = g_arItemTable[pItem->sSid]->m_byClass;
//		
//		if ( tClass == 1 )//╝ь▓т└р╨═╬к╬ф╞ў╕°╞└╖╓    zhiye 8╚н  4╖и  2╡╢ 1╟╣
//		{
//            if (zhiye == 8 || zhiye == 2 || zhiye == 1 )//╬я└э╓░╥╡
//			{    //├№╓╨10              ╦Ё╔╦25             3╦┘               ╦∙╙╨2             ╨╦╖▄2               ┴м╔ф2        ┤й┤╠2
//				if (shuxing == 138 || shuxing == 128 || shuxing == 93 || shuxing == 145|| shuxing == 113  || shuxing == 125|| shuxing == 120) {pingfen += 50;}  
//				 //├№╓╨9               ╦Ё╩з20                               ╦∙╙╨1             ╨╦╖▄1               ┴м╔ф1        ┤й┤╠1
//				if (shuxing == 95  || shuxing == 91  ||                  shuxing == 137|| shuxing == 49   || shuxing == 61|| shuxing == 56)  {pingfen += 45;}  //2╝╢╩Ї╨╘
//				//├№╓╨8                ╦Ё╩з15             ├№╓╨7            ╦Ё╔╦15
//				if (shuxing == 94 || shuxing == 64  || shuxing == 74 || shuxing == 64) {pingfen += 40;}  //╩г╧┬╡─   
//			}else if(zhiye == 4)// ╖и╩ж╓░╥╡
//			{       //─з╣е25            ╦∙╙╨2              ╖и╩ї2
//				if (shuxing == 136 || shuxing == 145 || shuxing == 117){pingfen += 50;}  //1╝╢╩Ї╨╘
//				if (shuxing == 106 || shuxing == 137 || shuxing == 53){pingfen += 45;}  //1╝╢╩Ї╨╘
//			}
////==============================================================================================================================================╧┬├ц╧╘╩╛╝р▓т╫░▒╕
//		/*  50╤к 141  +50      40╤к 132   +40     30╤к  102   +30
//            25┐╣ 135  +50      20┐╣ 105   +40     15┐╣   84   +30
//            10╗╪ 139  +50      9╗╪  97    +40     8╗╪    96   +30
//			5┴ж  107  +50      4┴ж  86    +40     3┴ж    43   +30
//			5├Ї  109  +50      4├Ї  88    +40     3├Ї    45   +30
//			5╓╟  110  +50      4╓╟  89    +40     3╓╟    46   +30
//                                                  10╖└ 130  +30       
//		 
//                    */
//		}else if( tClass > 1 && tClass < 6 )
//		{
//			if( pItem->tMagic[i]==43 || pItem->tMagic[i]==86 || pItem->tMagic[i]==107) CheckItem_Str = 1;//╝ь▓щ┴ж
//			if( pItem->tMagic[i]==45 || pItem->tMagic[i]==88 || pItem->tMagic[i]==109) CheckItem_Dex = 1;//╝ь▓щ├Ї
//			if( pItem->tMagic[i]==46 || pItem->tMagic[i]==89 || pItem->tMagic[i]==110) CheckItem_Vol = 1;//╝ь▓щ╓╟╗█
//
//			if (shuxing == 141 || shuxing == 135 || shuxing == 139|| shuxing == 107|| shuxing == 109 || shuxing == 110) 
//			{
//				pingfen += 50;
//			}if (shuxing == 132 || shuxing == 105 || shuxing == 97 || shuxing == 86  || shuxing == 88 || shuxing == 89 ) 
//			{
//				pingfen += 40;
//			}if (shuxing == 102 || shuxing == 84  || shuxing == 96 || shuxing == 43  || shuxing == 45 || shuxing == 46  || shuxing == 130) 
//			{
//				pingfen += 30;
//			}
//			if( CheckItem_Str == 1 &&  CheckItem_Dex == 1)  pingfen = 0; //┴ж┴┐║═├Ї╜▌═м╩▒│Ў╧╓ ╖╓╩¤0
//	        if( CheckItem_Dex == 1 &&  CheckItem_Vol == 1)  pingfen = 0; //├Ї╜▌║═╓╟╗█═м╩▒│Ў╧╓ ╖╓╩¤0
//	        if( CheckItem_Str == 1 &&  CheckItem_Vol == 1)  pingfen = 0; //┴ж┴┐║═╓╟╗█═м╩▒│Ў╧╓ ╖╓╩¤0
//
//			if((zhiye == 8 ||zhiye == 2) && ( CheckItem_Vol == 1 || CheckItem_Dex == 1))  pingfen = 0; //╚н║═╡╢▓╗╥к├Ї║═╓╟╗█
//
//			if(zhiye == 4 && (CheckItem_Str == 1 || CheckItem_Dex == 1))  pingfen = 0; //╖и╩ж▓╗╥к├Ї║═┴ж
//			if(zhiye == 1 && (CheckItem_Vol == 1 || CheckItem_Str == 1))  pingfen = 0; //╟╣▓╗╥к╓╟╗█║═┴ж
//
//				
//
//		}
//			
//}//==========╠°│Ў╤н╗╖▓щ╤п
//
//	if( ITEMLOG_PICKUP==type)
//	{
//		if ( g_arItemTable[pItem->sSid]->m_byWear == 1 && pingfen >= 170 && g_pingfen == FALSE )//╬я╞╖╬к╬ф╞ў
//		{
//			for(int i = 0; i <= 4; i++)
//			{
//				if(pItem->tMagic[i] != 0 )
//				{
//					pItem->iItemSerial = 1;
//					GoodsMagic+= g_arMagicItemTable[pItem->tMagic[i]]->m_strText;
//					GoodsMagic+=",";
//				}
//			}
//			strMsg.Format("[%s] ╩░╚б %s ╞└╖╓ %d ", this->m_strUserID,g_arItemTable[pItem->sSid]->m_strName ,pingfen);//╣л╕ц╠с╩╛
//			strMsg+=GoodsMagic;
//			m_pCom->Announce2((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
//		}
//		else if ( g_arItemTable[pItem->sSid]->m_byWear != 1 && pingfen >= 170 && g_pingfen == FALSE )//╬я╞╖╬к╫░▒╕ 
//		{
//			for(int i = 0; i <= 4; i++)
//			{
//				if(pItem->tMagic[i] != 0 )
//				{
//					pItem->iItemSerial = 1;
//					GoodsMagic+= g_arMagicItemTable[pItem->tMagic[i]]->m_strText;
//					GoodsMagic+=",";
//				}
//			}
//			strMsg.Format("[%s] ╩░╚б %s ╞└╖╓ %d ", this->m_strUserID,g_arItemTable[pItem->sSid]->m_strName ,pingfen);//╣л╕ц╠с╩╛
//			strMsg+=GoodsMagic;
//			m_pCom->Announce2((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
//		}
//	}
//	int iSlot = GetEmptySlot( INVENTORY_SLOT );
//	if( iSlot < 1 && m_AutoD == 1  && !IsCity())
//	{
//		YJmzb();
//		SendEventMsg("╬я╞╖└╕╝┤╜л┬·[╫╘╢п╬к─·┬Ї╡Ї╟░┴╜┼┼]");
//	}
//
//	if(pingfen >= 170) //╨┤╚╒╓╛
//	{
//		CString str = _T("");
//		SYSTEMTIME st;
//		CString strDate;
//		GetLocalTime(&st);
//		CString sx1 = g_arMagicItemTable[pItem->tMagic[0]]->m_strText;
//		CString sx2 = g_arMagicItemTable[pItem->tMagic[1]]->m_strText;
//		CString sx3 = g_arMagicItemTable[pItem->tMagic[2]]->m_strText;
//		CString sx4 = g_arMagicItemTable[pItem->tMagic[3]]->m_strText;
//		strDate.Format("%d-%d %d:%d",st.wMonth,st.wDay ,st.wHour,st.wMinute);
//		str.Format("[%s] ═ц╝╥ [%s] ╩░╚б %s ╞└╖╓ %d ╩Ї╨╘ %s %s %s %s \r\n",strDate,m_strUserID,g_arItemTable[pItem->sSid]->m_strName,pingfen,sx1,sx2,sx3,sx4);
//		EnterCriticalSection( &m_CS_FileWrite );
//		g_fpSpeedHack0.Write( str, str.GetLength() );
//		LeaveCriticalSection( &m_CS_FileWrite);
//	}
//}
void USER::GetItem(ItemList* pItem, int type)//╞└╖╓╣л╕ц
{
    if(!pItem || !g_arItemTable.GetSize()) return;
    if(pItem->sSid < 0 || pItem->sSid >= g_arItemTable.GetSize()) return;

    // ╝╞╦у╞└╖╓
    int pingfen = CalcItemPingfen(pItem);
    
    // ╓╗┤ж└э╞└╖╓┤є╙┌╡╚╙┌170╡─╬я╞╖
    if(pingfen >= 170 && g_pingfen == FALSE)
    {
        CString GoodsMagic;
       // const bool isWeapon = (g_arItemTable[pItem->sSid]->m_byWear == 1);
        
        // ╩╒╝п╬я╞╖╩Ї╨╘
        for(int i = 0; i <= 4; i++)
        {
            if(pItem->tMagic[i] > 0 && pItem->tMagic[i] < g_arMagicItemTable.GetSize())
            {
                GoodsMagic += g_arMagicItemTable[pItem->tMagic[i]]->m_strText;
                GoodsMagic += ",";
            }
        }

        // ╖в╦═╣л╕ц
        if(ITEMLOG_PICKUP == type)
        {
            CString strMsg;
            strMsg.Format("[%s]╩░╚б %s ╞└╖╓ %d ", 
                         m_strUserID,
                         g_arItemTable[pItem->sSid]->m_strName,
                         pingfen);
            strMsg += GoodsMagic;
            m_pCom->Announce2((LPTSTR)(LPCTSTR)strMsg, SYSTEM_ANNOUNCE);
        }

        // ╝╟┬╝╚╒╓╛
        SYSTEMTIME st;
        GetLocalTime(&st);
        
        CString strDate, strLog;
        strDate.Format("%d-%d %d:%d", st.wMonth, st.wDay, st.wHour, st.wMinute);
        
        // ╗ё╚б╟░4╕Ў╩Ї╨╘
        CString attributes[4];
        for(int i = 0; i < 4; i++)
        {
            if(pItem->tMagic[i] > 0 && pItem->tMagic[i] < g_arMagicItemTable.GetSize())
            {
                attributes[i] = g_arMagicItemTable[pItem->tMagic[i]]->m_strText;
            }
            else
            {
                attributes[i] = "";
            }
        }
        
        strLog.Format("[%s] ═ц╝╥ [%s] ╩░╚б %s ╞└╖╓ %d ╩Ї╨╘ %s %s %s %s \r\n",
                      strDate, m_strUserID, g_arItemTable[pItem->sSid]->m_strName,
                      pingfen, attributes[0], attributes[1], attributes[2], attributes[3]);

        EnterCriticalSection(&m_CS_FileWrite);
        g_fpSpeedHack0.Write(strLog, strLog.GetLength());
        LeaveCriticalSection(&m_CS_FileWrite);
    }

    // ╝ь▓щ▒│░№┐╒╝ф
    int iSlot = GetEmptySlot(INVENTORY_SLOT);
    if(iSlot < 1 && m_AutoD == 1 && !IsCity())
    {
        YJmzb();
        SendEventMsg("╬я╞╖└╕╝┤╜л┬·[╡═╙┌170╖╓]╥╤┬Ї");
    }
}
void USER::MyTime()
{
    CString sayStr;
    CBufferEx TempBuf, TempSayBuf;
    const int HOUR_IN_MS = 3600 * 1000;  // ╥╗╨б╩▒╡─║┴├ы╩¤
    int hour = 0, min = 0;

    // ╧╘╩╛╨╦╖▄╩▒╝ф
    if(m_dwHiExpTime > 0)
    {
        hour = m_dwHiExpTime/HOUR_IN_MS;
        min = m_dwHiExpTime%HOUR_IN_MS/(60000);
        sayStr.Format("%d╨б╩▒%d╖╓", hour, min);
    }
    else 
    {
        sayStr.Format(" 0 ╖╓╓╙");
    }
    TempSayBuf.AddString((LPTSTR)(LPCTSTR)sayStr);

    // ╧╘╩╛╨╥╘╦╩▒╝ф
    if(m_dwMagicFindTime > 0)
    {
        hour = m_dwMagicFindTime/HOUR_IN_MS;
        min = m_dwMagicFindTime%HOUR_IN_MS/(60000);
        sayStr.Format("%d╨б╩▒%d╖╓", hour, min);
    }
    else 
    {
        sayStr.Format(" 0 ╖╓╓╙");
    }
    TempSayBuf.AddString((LPTSTR)(LPCTSTR)sayStr);

    // ╧╘╩╛╠ь╩╣╩▒╝ф
    if(m_dwVIPTime > 0)
    {
        hour = m_dwVIPTime/HOUR_IN_MS;
        min = m_dwVIPTime%HOUR_IN_MS/(60000);
        sayStr.Format("%d╨б╩▒%d╖╓", hour, min);
    }
    else 
    {
        sayStr.Format(" 0 ╖╓╓╙");
    }
    TempSayBuf.AddString((LPTSTR)(LPCTSTR)sayStr);

    // ╧╘╩╛╗├┴щ╩▒╝ф
    if(m_dwHtExpTime > 0)
    {
        hour = m_dwHtExpTime/HOUR_IN_MS;
        min = m_dwHtExpTime%HOUR_IN_MS/(60000);
        sayStr.Format("%d╨б╩▒%d╖╓", hour, min);
    }
    else 
    {
        sayStr.Format(" 0 ╖╓╓╙");
    }
    TempSayBuf.AddString((LPTSTR)(LPCTSTR)sayStr);

    // ╧╘╩╛╗├╛з╩▒╝ф
    if(m_dwMagicFtTime > 0)
    {
        hour = m_dwMagicFtTime/HOUR_IN_MS;
        min = m_dwMagicFtTime%HOUR_IN_MS/(60000);
        sayStr.Format("%d╨б╩▒%d╖╓", hour, min);
    }
    else 
    {
        sayStr.Format(" 0 ╖╓╓╙");
    }
    TempSayBuf.AddString((LPTSTR)(LPCTSTR)sayStr);

    // ╧╘╩╛└╟▒ф╩▒╝ф
    if(m_dwBFindTime > 0)
    {
        hour = m_dwBFindTime/HOUR_IN_MS;
        min = m_dwBFindTime%HOUR_IN_MS/(60000);
        sayStr.Format("%d╨б╩▒%d╖╓", hour, min);
    }
    else 
    {
        sayStr.Format(" 0 ╖╓╓╙");
    }
    TempSayBuf.AddString((LPTSTR)(LPCTSTR)sayStr);

    // ╧╘╩╛сў┴╘╩▒╝ф
    if(m_dwSGTime > 0)
    {
        hour = m_dwSGTime/HOUR_IN_MS;
        min = m_dwSGTime%HOUR_IN_MS/(60000);
        sayStr.Format("%d╨б╩▒%d╖╓", hour, min);
    }
    else 
    {
        sayStr.Format(" 0 ╖╓╓╙");
    }
    TempSayBuf.AddString((LPTSTR)(LPCTSTR)sayStr);

    // ╧╘╩╛╔▒╣╓╩¤┴┐
    if(m_dwShaGuai > 0)
    {
        sayStr.Format("%d ╓╗", m_dwShaGuai);
    }
    else 
    {
        sayStr.Format(" 0 ╓╗");
    }
    TempSayBuf.AddString((LPTSTR)(LPCTSTR)sayStr);


	

    // ╧╘╩╛╖▒╚┘╧╡═│╝╙│╔

	double beishu = GetBeiShu();
	
	sayStr.Format("+ %.2f▒╢", beishu);
    
    TempSayBuf.AddString((LPTSTR)(LPCTSTR)sayStr);

    // ╧╘╩╛╫г╕г╨з╣√
    if(m_dwZFTime > 0)
    {
        hour = m_dwZFTime/HOUR_IN_MS;
        min = m_dwZFTime%HOUR_IN_MS/(60000);
        
        // ╕∙╛▌╫г╕г└р╨═╧╘╩╛╨з╣√
        switch(m_dwZF)
        {
        case 1:  // ╩Ї╨╘╘Ў╝╙
            if(m_byClass == 0 || m_byClass == 2)
                sayStr.Format("%d╨б╩▒%d╖╓ ┴ж╓╡5╘Ў╝╙", hour, min);
            else if(m_byClass == 1)
                sayStr.Format("%d╨б╩▒%d╖╓ ╓╟╗█5╘Ў╝╙", hour, min);
            else if(m_byClass == 3)
                sayStr.Format("%d╨б╩▒%d╖╓ ├Ї╜▌5╘Ў╝╙", hour, min);
            break;

        case 2:  // ╔·├№╓╡
            sayStr.Format("%d╨б╩▒%d╖╓ ╔·├№╓╡100╘Ў╝╙", hour, min);
            break;

        case 3:  // ╔╦║ж╘Ў╝╙
            if(m_byClass != 1)
                sayStr.Format("%d╨б╩▒%d╖╓ ╬я└э╦Ё╔╦80╘Ў╝╙", hour, min);
            else
                sayStr.Format("%d╨б╩▒%d╖╓ ─з╖и╦Ё╔╦50╘Ў╝╙", hour, min);
            break;

        case 4:  // ╖└╙∙┴ж
            sayStr.Format("%d╨б╩▒%d╖╓ ╖└╙∙┴ж100╘Ў╝╙", hour, min);
            break;

        case 5:  // ─з╖и┐╣╨╘
            sayStr.Format("%d╨б╩▒%d╖╓ ─з╖и┐╣│т50╘Ў╝╙", hour, min);
            break;

        case 6:  // ╦∙╙╨╩Ї╨╘
            sayStr.Format("%d╨б╩▒%d╖╓ ╦∙╙╨╩Ї╨╘╡у5╘Ў╝╙", hour, min);
            break;

        case 7:  // ╬я└э╔╦║ж╝ї╔┘
            sayStr.Format("%d╨б╩▒%d╖╓ ╬я└э╔╦║ж╝ї╔┘50", hour, min);
            break;

        case 8:  // ─з╖и╔╦║ж╝ї╔┘
            sayStr.Format("%d╨б╩▒%d╖╓ ─з╖и╔╦║ж╝ї╔┘50", hour, min);
            break;

        case 9:  // ╫ю╓╒╔╦║ж╝ї╔┘
            sayStr.Format("%d╨б╩▒%d╖╓ ╫ю╓╒╔╦║ж╝ї╔┘30", hour, min);
            break;

        case 10:  // ╖└╙∙┴ж╠с╔¤
            sayStr.Format("%d╨б╩▒%d╖╓ ╖└╙∙┴ж╠с╔¤░┘╖╓╓о10", hour, min);
            break;

        case 11:  // ╔╦║ж╠с╔¤
            if(m_byClass != 1)
                sayStr.Format("%d╨б╩▒%d╖╓ ╬я└э╔╦║ж╠с╔¤░┘╖╓╓о5", hour, min);
            else
                sayStr.Format("%d╨б╩▒%d╖╓ ─з╖и╔╦║ж╠с╔¤░┘╖╓╓о5", hour, min);
            break;

        case 12:  // ╛н╤щ╠с╔¤
            sayStr.Format("%d╨б╩▒%d╖╓ ╔▒╣╓╛н╤щ╠с╔¤░┘╖╓╓о5", hour, min);
            break;

        case 13:  // ╗╪▒▄┬╩
            sayStr.Format("%d╨б╩▒%d╖╓ ╗╪▒▄┬╩╠с╔¤15", hour, min);
            break;

        case 14:  // ├№╓╨/┐╣─з╫к╗╗
            if(m_byClass != 1)
                sayStr.Format("%d╨б╩▒%d╖╓ ├№╓╨┬╩╠с╔¤10", hour, min);
            else
                sayStr.Format("%d╨б╩▒%d╖╓ ┐╣─з╡─░┘╖╓╓о20╫к╣е╗ў", hour, min);
            break;

        case 15:  // ╝╝╩ї╡╚╝╢
            sayStr.Format("%d╨б╩▒%d╖╓ ╦∙╙╨╝╝╩ї╡╚╝╢1", hour, min);
            break;

        case 16:  // ╓░╥╡╠╪╩т╝╝─▄
            if(m_byClass == 0)
                sayStr.Format("%d╨б╩▒%d╖╓ ╨╦╖▄╝╝╩ї╡╚╝╢2", hour, min);
            else if(m_byClass == 1)
                sayStr.Format("%d╨б╩▒%d╖╓ ╖и╩ж┤є╩ж╡╚╝╢2", hour, min);
            else if(m_byClass == 2)
                sayStr.Format("%d╨б╩▒%d╖╓ ┤й┤╠╝╝╩ї╡╚╝╢2", hour, min);
            else if(m_byClass == 3)
                sayStr.Format("%d╨б╩▒%d╖╓ ┴м╔ф╝╝╩ї╡╚╝╢2", hour, min);
            break;
        }
        TempSayBuf.AddString((LPTSTR)(LPCTSTR)sayStr);
    }
    else
    {
        sayStr.Format(" ╬▐╝╙│╔");
        TempSayBuf.AddString((LPTSTR)(LPCTSTR)sayStr);
    }

    // ╖в╦═╩¤╛▌
    TempBuf.Add(CLIENT_EVENT_SAY);
    TempBuf.Add((BYTE)SUCCESS);
    TempBuf.Add((short)79);
    TempBuf.Add((BYTE)0x0A);
    TempBuf.AddData(TempSayBuf, TempSayBuf.GetLength());
    Send(TempBuf, TempBuf.GetLength());
}
//void USER::MyTime()//12╘┬22╚╒
//{
//	CString sayStr;
//	CBufferEx TempBuf, TempSayBuf , TempBuf3;
//	int temptime = (3600 * 1000);
//	int Day = 0,hour = 0,min = 0,day = 0;
//	
//
//	if(m_dwHiExpTime > 0)
//	{
//	hour = m_dwHiExpTime/temptime;	min = m_dwHiExpTime%temptime/(60000);
//	sayStr.Format("%d╨б╩▒%d╖╓",hour,min);//╨╦╖▄
//	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}else 
//	{
//		sayStr.Format(" 0 ╖╓╓╙.");
//		TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}if(m_dwMagicFindTime > 0)
//	{
//	hour = m_dwMagicFindTime/temptime;	min = m_dwMagicFindTime%temptime/(60000);
//	sayStr.Format("%d╨б╩▒%d╖╓",hour,min);//╨╥╘╦
//	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}else 
//	{
//		sayStr.Format(" 0 ╖╓╓╙.");
//		TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}if(m_dwVIPTime > 0)
//	{
//	hour = m_dwVIPTime/temptime;	min = m_dwVIPTime%temptime/(60000);
//	sayStr.Format("%d╨б╩▒%d╖╓",hour,min);//╠ь╩╣
//	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}else 
//	{
//		sayStr.Format(" 0 ╖╓╓╙.");
//		TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}
//	if(m_dwHtExpTime > 0)
//	{
//	hour = m_dwHtExpTime/temptime;	min = m_dwHtExpTime%temptime/(60000);
//	sayStr.Format("%d╨б╩▒%d╖╓",hour,min);//╗├┴щ
//	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}else 
//	{
//		sayStr.Format(" 0 ╖╓╓╙.");
//		TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}
//	if(m_dwMagicFtTime > 0)
//	{
//	hour = m_dwMagicFtTime/temptime;	min = m_dwMagicFtTime%temptime/(60000);
//	sayStr.Format("%d╨б╩▒%d╖╓",hour,min);//╗├╛з
//	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}else 
//	{
//		sayStr.Format(" 0 ╖╓╓╙.");
//		TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}
//	if(m_dwBFindTime > 0)
//	{
//	hour = m_dwBFindTime/temptime;	min = m_dwBFindTime%temptime/(60000);
//	sayStr.Format("%d╨б╩▒%d╖╓",hour,min);//└╟▒ф
//	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}else 
//	{
//		sayStr.Format(" 0 ╖╓╓╙.");
//		TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}
//	if(m_dwSGTime > 0)
//	{
//	hour = m_dwSGTime/temptime;	min = m_dwSGTime%temptime/(60000);
//	sayStr.Format("%d╨б╩▒%d╖╓",hour,min);//сў┴╘
//	TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}else 
//	{
//		sayStr.Format(" 0 ╖╓╓╙");
//		TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//	}
//	if(m_dwShaGuai > 0)
//	{
//		sayStr.Format("%d ╓╗",m_dwShaGuai);//╔▒╣╓
//		TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//		}else 
//		{
//			sayStr.Format(" 0 ╓╗");
//			TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//		}
//		if(m_dwZFTime > 0)
//		{
//		hour = m_dwZFTime/temptime;	min = m_dwZFTime%temptime/(60000);
//		sayStr.Format("%d╨б╩▒%d╖╓",hour,min);//╫г╕г╩▒╝ф
//		TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//		}else 
//		{
//			sayStr.Format(" 0 ╖╓╓╙.");
//			TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//		}
//		int Maxslevel = ShowUserRank();
//        int Cha = Maxslevel- m_sLevel;
//		double beishu = 0;
//		beishu = Cha*0.03;
//
//		if( m_sLevel < Maxslevel)  //╖▒╚┘╧╡═│╝╙│╔
//		{
//			sayStr.Format("+ %.2f▒╢",beishu);//╫г╕г╩▒╝ф
//		    TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//		}else{
//			sayStr.Format(" ╬▐╝╙│╔");
//			TempSayBuf.AddString( (LPTSTR)(LPCTSTR)sayStr );
//		}
//
//
//
//
//
//
//
//		TempBuf.Add(CLIENT_EVENT_SAY);
//	    TempBuf.Add((BYTE)SUCCESS);
//	    TempBuf.Add((short)79);
//	    TempBuf.Add((BYTE)0x0A);//╖в╦═╡─╧╘╩╛╢р╔┘╨╨
//	    TempBuf.AddData(TempSayBuf, TempSayBuf.GetLength());
//	    Send(TempBuf, TempBuf.GetLength());
//	}

//int USER::ShowUserRank()
//{
//	SQLHSTMT hstmt = NULL;
//    SQLRETURN retcode;
//    TCHAR szSQL[1024];
//    ::ZeroMemory(szSQL, sizeof(szSQL));
//
//    int maxLevel = -1; // ╩╣╙├╩╩║╧╡─└р╨═└┤┤ц┤в╫ю┤є╓╡
//    SQLINTEGER sInd;
//
//    // ╣╣╜и SQL ▓щ╤п
//    _sntprintf_s(szSQL, sizeof(szSQL) / sizeof(TCHAR), TEXT("SELECT MAX(sLevel) AS sLevel FROM GameUser"));
//
//    int db_index = 0;
//    CDatabase* pDB = g_DBNew[AUTOMATA_THREAD].GetDB(db_index);
//    if (!pDB) return -1; // ╚ч╣√╩¤╛▌┐т┴м╜╙╩з░▄гм╖╡╗╪ -1
//
//    // ╖╓┼ф╛ф▒·
//    retcode = SQLAllocHandle(SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt);
//
//
//    if (retcode != SQL_SUCCESS)
//	{
//        g_DBNew[AUTOMATA_THREAD].ReleaseDB(db_index);
//        return -1; // ╖╡╗╪ -1 ▒э╩╛╖в╔·┤э╬є
//    }
//
//    // ╓┤╨╨ SQL ▓щ╤п
//    retcode = SQLExecDirect(hstmt, (unsigned char*)szSQL, SQL_NTS);
//    if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO) {
//        SQLFreeHandle(SQL_HANDLE_STMT, hstmt);
//        g_DBNew[AUTOMATA_THREAD].ReleaseDB(db_index);
//        return -1; // ╖╡╗╪ -1 ▒э╩╛╖в╔·┤э╬є
//    }
//
//    // ╗ё╚б╜с╣√
//    retcode = SQLFetch(hstmt);
//    if (retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO) {
//        SQLGetData(hstmt, 1, SQL_C_LONG, &maxLevel, sizeof(maxLevel), &sInd); // ╝┘╔ш sLevel ╩╟╥╗╕Ў╒√╩¤└р╨═
//    }
//
//    SQLFreeHandle(SQL_HANDLE_STMT, hstmt);
//    g_DBNew[AUTOMATA_THREAD].ReleaseDB(db_index);
//
//
//
//    return maxLevel; // ╖╡╗╪╫ю┤є╓╡
//}
int USER::ShowUserRank()
{
    SQLHSTMT hstmt = NULL;
    SQLRETURN retcode;
    TCHAR szSQL[1024];
    int maxLevel = 1;  // ▒г│╓─м╚╧╡╚╝╢1
    SQLINTEGER sInd;

    // SQL▓щ╤п╙я╛ф - ╓╗╨ш╥к┼┼│¤╣▄└э╘▒╝┤┐╔
    _sntprintf_s(szSQL, sizeof(szSQL), _TRUNCATE, 
        TEXT("SELECT MAX(sLevel) FROM GameUser WHERE tIsOP = 0"));

    // ╗ё╚б╩¤╛▌┐т┴м╜╙
    int db_index = 0;
    CDatabase* pDB = g_DBNew[AUTOMATA_THREAD].GetDB(db_index);
    if (!pDB) 
    {
        TRACE("ShowUserRank: ╩¤╛▌┐т┴м╜╙╩з░▄\n");
        return 1;
    }

    // ╖╓┼фSQL╛ф▒·
    retcode = SQLAllocHandle(SQL_HANDLE_STMT, pDB->m_hdbc, &hstmt);
    if (retcode != SQL_SUCCESS)
    {
        g_DBNew[AUTOMATA_THREAD].ReleaseDB(db_index);
        return 1;
    }

    // ╓┤╨╨▓щ╤п
    retcode = SQLExecDirect(hstmt, (SQLCHAR*)szSQL, SQL_NTS);
    if (retcode != SQL_SUCCESS && retcode != SQL_SUCCESS_WITH_INFO)
    {
        SQLFreeHandle(SQL_HANDLE_STMT, hstmt);
        g_DBNew[AUTOMATA_THREAD].ReleaseDB(db_index);
        return 1;
    }

    // ╗ё╚б╜с╣√
    retcode = SQLFetch(hstmt);
    if (retcode == SQL_SUCCESS || retcode == SQL_SUCCESS_WITH_INFO)
    {
        SQLGetData(hstmt, 1, SQL_C_LONG, &maxLevel, sizeof(maxLevel), &sInd);
    }

    // ╟х└э╫╩╘┤
    SQLFreeHandle(SQL_HANDLE_STMT, hstmt);
    g_DBNew[AUTOMATA_THREAD].ReleaseDB(db_index);

    return maxLevel;
}
int USER::CalcItemPingfen(ItemList* pItem) //╞└╖╓╓╡╝╞╦у
{
    // ╗∙┤б╝ь▓щ
    if(!pItem || !g_arItemTable.GetSize()) return 0;
    if(pItem->sSid < 0 || pItem->sSid >= g_arItemTable.GetSize()) return 0;
    
    const int tClass = g_arItemTable[pItem->sSid]->m_byWear;
    const int zhiye = g_arItemTable[pItem->sSid]->m_byClass;
    
    // ╓╗╞└╖╓╬ф╞ў║═╫░▒╕
    if(tClass < 1 || tClass > 5) return 0;
    
    int pingfen = 0;
    bool hasStr = false;  // │ї╩╝╗п▒ъ╝╟▒ф┴┐
    bool hasDex = false;
    bool hasVol = false;

    // ╧╚╝ь▓щ╩╟╖ё╙╨╚¤╬м╩Ї╨╘
    for(int i = 0; i < MAGIC_NUM; i++) {
        if(pItem->tMagic[i] <= 0 || pItem->tMagic[i] >= g_arMagicItemTable.GetSize()) continue;
        
        const int shuxing = pItem->tMagic[i];
        
        // ╝ь▓щ┴ж┴┐
        if(shuxing == 43 || shuxing == 86 || shuxing == 107) {
            hasStr = true;
        }
        // ╝ь▓щ├Ї╜▌
        if(shuxing == 45 || shuxing == 88 || shuxing == 109) {
            hasDex = true;
        }
        // ╝ь▓щ╓╟╗█
        if(shuxing == 46 || shuxing == 89 || shuxing == 110) {
            hasVol = true;
        }
    }

    // ╩Ї╨╘│х═╗╝ь▓щ  ┴ж+├Ї        ├Ї+╓╟╗█            ┴ж║═╓╟╗█
    if((hasStr && hasDex) || (hasDex && hasVol) || (hasStr && hasVol)) {
        return 0;
    }

    // ╓░╥╡╩Ї╨╘╝ь▓щ - ╚ч╣√╙╨▓╗╖√║╧╓░╥╡╡─╩Ї╨╘╓▒╜╙╖╡╗╪0
    switch(zhiye) {
        case 8: // ╚н
        case 2: // ╡╢
            if(hasVol || hasDex) return 0;
            break;
        case 4: // ╖и
            if(hasStr || hasDex) return 0;
            break;
        case 1: // ╟╣
            if(hasVol || hasStr) return 0;
            break;
    }

    // ┐к╩╝╝╞╦у╞└╖╓
    for(int i = 0; i < MAGIC_NUM; i++) {
        if(pItem->tMagic[i] <= 0 || pItem->tMagic[i] >= g_arMagicItemTable.GetSize()) continue;
            
        const int shuxing = pItem->tMagic[i];
        
        if(tClass == 1)  // ╬ф╞ў╞└╖╓
        {
            if(shuxing == 93)  // 3╦┘
            {
                if(zhiye != 4)  // ╖╟╖и╩ж
                {
                    pingfen += 50;
                }
                continue;
            }
            // ╥╗╝╢╩Ї╨╘(50╖╓)
            if(shuxing == 138 ||    // ├№╓╨10
               shuxing == 128 ||    // ╦Ё╔╦25
               shuxing == 93  ||    // 3╦┘
               shuxing == 145 ||    // ╦∙╙╨2
               shuxing == 113 ||    // ╨╦╖▄2
               shuxing == 125 ||    // ┴м╔ф2
               shuxing == 120 ||    // ┤й┤╠2
               shuxing == 136 ||    // ─з╣е25
               shuxing == 117)      // ╖и╩ї2
            {
                pingfen += 50;
            }
            // ╢■╝╢╩Ї╨╘(45╖╓)
            else if(shuxing == 95  ||    // ├№╓╨9
                    shuxing == 91  ||    // ╦Ё╩з20
                    shuxing == 137 ||    // ╦∙╙╨1
                    shuxing == 49  ||    // ╨╦╖▄1
                    shuxing == 61  ||    // ┴м╔ф1
                    shuxing == 56  ||    // ┤й┤╠1
                    shuxing == 106 ||    // ─з╣е20
                    shuxing == 53)       // ╖и╩ї1
            {
                pingfen += 45;
            }
            // ╚¤╝╢╩Ї╨╘(40╖╓)
            else if(shuxing == 94 ||     // ├№╓╨8
                    shuxing == 64 ||     // ╦Ё╩з15
                    shuxing == 74)       // ├№╓╨7
            {
                pingfen += 40;
            }
        }
        else if(tClass > 1 && tClass < 6)  // ╫░▒╕╞└╖╓
        {
            // ╥╗╝╢╩Ї╨╘(50╖╓)
            if(shuxing == 141 ||    // 50╤к
               shuxing == 135 ||    // 25┐╣
               shuxing == 139 ||    // 10╗╪
               shuxing == 107 ||    // 5┴ж
               shuxing == 109 ||    // 5├Ї
               shuxing == 110)      // 5╓╟
            {
                pingfen += 50;
            }
            // ╢■╝╢╩Ї╨╘(40╖╓)
            else if(shuxing == 132 ||    // 40╤к
                    shuxing == 105 ||    // 20┐╣
                    shuxing == 97  ||    // 9╗╪
                    shuxing == 86  ||    // 4┴ж
                    shuxing == 88  ||    // 4├Ї
                    shuxing == 89)       // 4╓╟
            {
                pingfen += 40;
            }
            // ╚¤╝╢╩Ї╨╘(30╖╓)
            else if(shuxing == 102 ||    // 30╤к
                    shuxing == 84  ||    // 15┐╣
                    shuxing == 96  ||    // 8╗╪
                    shuxing == 43  ||    // 3┴ж
                    shuxing == 45  ||    // 3├Ї
                    shuxing == 46  ||    // 3╓╟
                    shuxing == 130)      // 10╖└
            {
                pingfen += 30;
            }
        }
    }

    return pingfen;
}